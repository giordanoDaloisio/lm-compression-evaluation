0	Copies the contents of a character sink to the given stream .
1	Reads a string .
2	Read lines .
3	Reads bytes from a byte array .
4	Returns a copy of the buffer .
5	Read more characters .
6	Start the buffer .
7	Convert an iterable to an array .
8	Checks if an iterable is empty .
9	Returns a function that applies the given iterable to the given iterator .
10	Returns an iterator over the elements of the given elements .
11	Concatenates the given iterable into an iterator .
12	Removes all elements from the given iterator .
13	Writes bytes to the given byte array .
14	Parses a cache builder specification .
15	Create a cache builder .
16	Skip null values .
17	Create a new immutable int array .
18	Returns a copy of the array with the specified index .
19	Reads a byte .
20	Reads bytes from bytes .
21	Write map .
22	Write multiset .
23	Returns the field setter for the given field .
24	Starts the stopwatch .
25	Adds an element to the list .
26	Resizes the entry size .
27	Convert a byte array to an IP address .
28	Compress the longest run of the given array .
29	Returns an IPv6 string representation of the given format .
30	Returns the address of the given host address .
31	Checks if an IPv4 address is an IPv4 address .
32	Get an IPv4 address from an IPv4 address .
33	Returns true if the given address is a teredo address .
34	Returns true if the given IP address is an IATP address .
35	Get an IPv4 address from an IPv4 address .
36	Gets the embedded IPv4 address from an IPv4 address .
37	Checks if the given string is mapped to an IPv4 address .
38	Decrement the given address .
39	Creates a reader for the given file .
40	Writes a file to a file .
41	Copies the contents of the given file to the given OutputStream .
42	Copies the given file to the given file .
43	Updates the modification time of the given file .
44	Read the first line of a file .
45	Creates a builder with the expected size .
46	Force put .
47	Creates a new instance of the minimum maximum elements .
48	Calculates the new capacity .
49	Returns a hash code for a given length .
50	Creates a new element order .
51	Enter the given time .
52	Ensures that the given time is interrupted .
53	Ensures that the given guard is satisfied .
54	Ensures that the specified time is satisfied .
55	Ensures that the given guard is satisfied .
56	Enter the given guard if it is satisfied .
57	Enter the given time if it is satisfied .
58	Ensures that the given guard is satisfied .
59	Try to enter the given guard if it is satisfied .
60	Waits until the given guard is satisfied .
61	Waits for the given guard .
62	Waits until the given time is satisfied .
63	Returns the length of the wait queue .
64	This method is used to signal the next thread .
65	Signal all waiters .
66	Start wait for a given guard .
67	Ends the wait for the given guard .
68	Waits until the condition is satisfied .
69	Shuts down the given executor .
70	Writes a character sequence .
71	Executes the execution .
72	Load the byte array at the given offset .
73	Stores a long value at the given offset .
74	Load an integer from an array of bytes .
75	Creates a new media type .
76	Parses the content type from a string .
77	Capture the class .
78	Removes all elements from an iterator .
79	Escape string .
80	Returns a copy of this buffer at the specified index .
81	Sets the concurrency level .
82	Build the cache .
83	Allocates the arrays .
84	Adds a value .
85	Calculates the new mean of the given value .
86	Rebuilds the hash table .
87	Returns the size of the table .
88	Create an immutable table .
89	Creates a new immutable table .
90	Returns an immutable copy of the given table .
91	Returns a converter for the given object .
92	Returns a regular immutable table for the given cell space .
93	Creates an immutable sorted set of elements .
94	Returns a new builder for reverse order .
95	Returns true if all of the elements in the given multiset are removed .
96	Returns an iterable containing all the children of the given root .
97	Creates a StringBuilder for a collection .
98	Creates a new type resolver for the given context type .
99	Sets the value of the given map .
100	Removes all values from the map .
101	Returns a new iterable containing all the elements of the given inputs .
102	Creates a new instance of an iterable .
103	Returns an array of the elements of the given type .
104	Returns an immutable copy of the given values .
105	Obtains the entries in this collection .
106	Counts the number of characters in the input stream .
107	Reads the contents of this stream .
108	Hashes a hash function .
109	Checks if two bytes are equal .
110	Returns an immutable range map .
111	Creates a new immutable range map .
112	Creates a new hash function with the given values .
113	Creates an immutable collection of the given element .
114	Sets the expected node count .
115	Returns a comparator that can be used to sort the elements in the given comparator .
116	Starts a copy of the given queue .
117	Returns a comparator that returns null if the type is empty .
118	Creates an immutable sorted map of keys .
119	Creates an immutable map of entries .
120	Creates an immutable sorted map from the given map .
121	This method is used to load the seed length of a byte array .
122	Checks the current state of the service .
123	List files in a directory .
124	Checks if a directory is a directory .
125	Checks if two paths are equal .
126	Updates the system time of the given path .
127	Get the parent path of the given path .
128	Checks to see if the path is allowed .
129	Thrown when a file is deleted .
130	Rehash the given size .
131	Returns the segment for the given hash .
132	Returns a copy of the given list .
133	Returns a range with the specified value .
134	Unregisters a listener .
135	Returns an iterator over the given event types .
136	Finds all registered methods of the given listener .
137	Sorts the elements of the given iterable .
138	Returns an immutable copy of the specified elements .
139	Returns an instance of the given array of elements .
140	Creates a builder for the given expected size .
141	Create a new array with the given type .
142	Convert a collection of objects to an array .
143	Checks that the element is not null .
144	Get the java . lang . lang .
145	Returns the wildcard type of the given declaration .
146	Returns an immutable copy of the given array .
147	Creates a new immutable map with expected size .
148	Returns the values of this entry .
149	Process a line .
150	Creates a new entry transformer .
151	Transforms an entry into an entry .
152	Returns a function that applies the given transformer to the given transformer .
153	Gets the index map .
154	Returns the string representation of the pending .
155	Updates the contents of the given ByteBuffer .
156	Returns an immutable copy of the given set .
157	Instantiates an object from the given reader .
158	Returns the sum of all values in this map .
159	Loads a class from the given loaders .
160	Dispatch all listeners .
161	Copies the contents of the given URL to the given OutputStream .
162	Posts the given event to the dispatcher .
163	Sets the concurrency level .
164	Sets the delegate .
165	Returns an array of the elements of the given type .
166	Executes the given task .
167	Transform values from table .
168	Creates a new tree consisting of the given elements .
169	Adds an exception to the chain .
170	Sets the expiration time to the cache .
171	Sets the priority .
172	Creates a host and port .
173	Converts a host to a host .
174	Parses a string representation of a host .
175	Returns a string representation of the host - port .
176	Creates a new GeneralRange instance with the given comparator .
177	Reverse this range .
178	Returns an immutable copy of the passed set .
179	Creates a new immutable type map .
180	Called when a lock is released .
181	Returns a copy of this range .
182	Creates an immutable map entry .
183	Creates an immutable map entry .
184	Wrap a char point .
185	Adds an expression to the given point .
186	Creates a new immutable map of values .
187	Creates an immutable copy of the given entries .
188	Gets the identity function .
189	Creates a function that returns a function that returns the result of the given predicate .
190	Returns an unset value reference .
191	Checks if the entry is expired .
192	Returns the number of times the specified number of retries .
193	Returns the length of the character at the specified index .
194	Ensures that the size of the given capacity is valid .
195	Inserts an entry into the table .
196	Inserts an entry into the table .
197	Delete an entry from the table .
198	Deletes the given entry in the table .
199	Removes an entry from the table .
200	Removes an entry from the cache .
201	Removes the given entry with the given value hash .
202	Sets the expected node count .
203	Sets the expected edge count .
204	Returns the string representation of this statement with the given values .
205	Sets the value of the named parameter .
206	Convert an object to a blob .
207	Convert a blob to an object .
208	Locks data line .
209	Save the undo log .
210	Create a new Redis template .
211	Gets the app map .
212	Locate the classpath for the given filename .
213	Creates a new connection information from a connection .
214	Map a throwable .
215	Helper method to check if all registered methods are visible .
216	Gets the default instance .
217	Subscribe to the given subscriber method .
218	Removes all subscriptions for the given event type .
219	Unregister a subscriber .
220	Posts the given event to the current thread .
221	Returns the object associated with the given type .
222	Removes the given event type .
223	Removes the given event .
224	Lookup all registered event types .
225	Adds all interfaces of the given event types .
226	Add a subscriber index .
227	Attaches the activity to the activity .
228	Prepare error fragment .
229	Gets the title for the given event .
230	Gets the message for the given event .
231	This method is called when a subscriber is completed .
232	Returns the value of the given wait time for the given timeout .
233	Returns an element at the specified index .
234	This method will be called when the stream is resume .
235	Sets the number of times the stream is repeat .
236	Converts a supplier to a Mono .
237	Returns the number of elements in the ring buffer .
238	Convert a subscription to a Queue subscription .
239	Called when a subscriber is received .
240	Returns the value of the given value in the given update .
241	Create a scalar subscription .
242	Shifts the given Mono to the right .
243	Returns a new wait strategy that will be used to wait until the wait time is reached .
244	Returns the union of this Publisher that is the same as this .
245	Returns the default value of this instance .
246	Returns the first value of this tuple .
247	This method is called when an error occurs .
248	Returns an unmodifiable map of all operator hooks .
249	Copy the given trigger generator .
250	Drains the maximum loop .
251	Try to subscribe a scalar map .
252	Applies the given converter to this function .
253	Collects the given collection supplier and returns the result .
254	Concatenates the given publisher to another .
255	Run onCancel
256	Executes the given runnable .
257	Perform a parallel operation on the process .
258	Executes a parallel request on the request .
259	Flattens this map to a parallel map .
260	Returns a parallel stream that contains the given limit .
261	Validate that a subscriber is valid
262	Concatenates this map to a parallel map .
263	Concatenates the map delay error .
264	Terminate the given object .
265	Log the given signal .
266	Starts the specified listener .
267	Pause all tasks .
268	Returns the number of files in the specified download .
269	Un bind service .
270	Sets the maximum network thread count .
271	Pause all tasks .
272	Starts all tasks .
273	Ensures that the given destination is already running .
274	Adds the given task to the list .
275	Pause this queue .
276	Resume this queue .
277	Checks to see if the response is accept range .
278	Returns the number of instance length for the given connection .
279	Sets whether the animation is drawn .
280	Sets the elevation .
281	Sets the colors for the label .
282	Add configuration properties .
283	Add class comment .
284	Add an enum comment .
285	Add a getter comment .
286	Method comment .
287	Add comment .
288	Gets the fully qualified name .
289	Get select key .
290	Create a new framework resource table .
291	Creates a new resource table .
292	Add styleable attributes .
293	Sets whether the application is on .
294	Adds the smallest screen width .
295	Obtains the native method .
296	Rewrite method body .
297	Checks if the given method is a primitive constructor .
298	Make a class public .
299	Make a method public .
300	Make a method private .
301	Set the traversal after this node .
302	Set the traversal before this node .
303	Add a child .
304	Push a default value to the stack .
305	Get mode .
306	Setup the activity controller .
307	Sets the configuration changed .
308	Resets the activity .
309	Sets the call state .
310	Expect a message at the specified level .
311	Returns true if this node is exported .
312	Get the shape point for the given type .
313	Get the point at the given length
314	Creates a config .
315	Returns the difference between the configuration .
316	Returns true if this is the default value .
317	Returns the bundle associated with the given package .
318	Add a user handle .
319	Adds a user .
320	Connects to the socket .
321	This method is called when the method is invoked .
322	Adds the mappings to the map .
323	Adds a mapping .
324	Grant permissions for the given process .
325	Sets the permissions for the given process .
326	Selects the specified configuration .
327	Gets the file from a zip file .
328	Gets the next sent request .
329	Add a response rule .
330	Add response rule .
331	Stop the given native file .
332	Adds a response rule .
333	This method is called when the device is drawn .
334	Sets the thread priority .
335	Returns the priority of the current thread .
336	Returns the index of the index of the given bit .
337	Set mode .
338	Get color value .
339	Get the color type of a string .
340	Parses an attribute .
341	Create an image .
342	Create an image .
343	Clicks a menu item .
344	Invokes an activity result .
345	Start lock task .
346	Stop lock task .
347	Add a runnable to the thread .
348	Add a runnable to the queue .
349	Removes the given runnable .
350	Advances to the current thread .
351	Advances the given amount to the given amount .
352	Advances the task to the next task .
353	Run one task .
354	Bind a service to a user .
355	Sets the current time in milliseconds .
356	Checks if this queue is idle .
357	Resets the message queue .
358	Build an activity controller .
359	Build an activity controller .
360	Setup an activity .
361	Build a fragment controller .
362	Obtains the speak of the given text .
363	Get the sort size .
364	Get the directory of a jar file .
365	Gets the logs for a given tag .
366	Returns a list of all the manifest .
367	Get broadcast receiver data .
368	Deletes a notification channel group .
369	Gets the Java version .
370	Transform a matrix .
371	Gets the value associated with the given key .
372	Load a resourceBagValue .
373	Post a runnable .
374	This method is used to post a queue .
375	Add an activity to the list .
376	Add a service to this component .
377	Add a receiver to this component .
378	Add a provider if not present .
379	Adds an activity to the list .
380	Add a new service .
381	Adds an ActivityInfo to the list .
382	Add new provider info .
383	Removes an activity from the list .
384	Removes a service .
385	Removes a provider .
386	Removes a receiver from a component .
387	Sets the resolve info for the given intent .
388	Adds the resolved information for an intent .
389	Add a package .
390	Adds an intent filter for an activity .
391	Adds an intent filter for the given component .
392	Adds an intent filter for a specific receiver .
393	Adds an intent filter to the provider .
394	Find the index of the parent .
395	Find the number of ancestors in the given list .
396	Returns the package of the given file .
397	Returns the intent for the given activity class .
398	Verifies that the resource type is valid .
399	Find all the libraries in a directory .
400	Gets the organization name .
401	Sets whether or not the user is allowed .
402	Sets the allowed input methods .
403	Activate reset token .
404	Get resource configurations .
405	Returns a set of locales for this package .
406	Open a single asset .
407	Add available restore sets to the service state .
408	Runs the given runnable .
409	Execute a control runnable on the main thread .
410	This method is used to read a Parcelable object .
411	Write a blob .
412	This method is used to write a blob .
413	Convert this object to a byte array .
414	Sets the position of the data position .
415	Checks that the read position of the given item is read .
416	Returns the value of the data position .
417	Reads the next item from the given class .
418	Reads the value of the given value .
419	Reads zero bytes .
420	Read a primitive value .
421	Write an item .
422	Read the input stream to a byte array .
423	Returns the native id of the given object .
424	Returns the native object associated with the given native id .
425	Call the given context .
426	Sets the default network active .
427	Play a sound .
428	Load a sound .
429	Resets the widget with the given id .
430	Creates the widgets for a widget .
431	Invokes the seek complete listener .
432	Invokes the info listener .
433	Invokes the error listener .
434	Gets the default display .
435	Sets the density Dpi .
436	Sets the width of the screen .
437	Sets the coordinates of the screen .
438	Sets the name of the display .
439	Sets the flags .
440	Sets the width .
441	Sets the height of the screen .
442	Sets the width of the shadow .
443	Set the real height .
444	Set the rotation .
445	Set the state of the display .
446	Release the connection .
447	Connects to the given route .
448	Returns the common class name .
449	Returns the name of the attribute .
450	Move the current node to the next node .
451	Checks if the device is supported .
452	Add an asset .
453	Returns the qualifier of the given configuration .
454	Sets the qualifiers .
455	Builds a string from a char array .
456	Load a ServiceFinder .
457	Load installed service .
458	Loads a system property from a system property .
459	Returns true if the given device has permission for the given package .
460	Removes the permissions for the given device .
461	Add an object to the device .
462	Removes a device .
463	Add a port .
464	Open an accessory .
465	Adds a data to the store .
466	Create a media item .
467	Creates a deep proxy for the given class .
468	Gets the field with the given name .
469	Call an instance method .
470	Call an instance method .
471	Call a static method .
472	Call a static method .
473	Creates a new instance of the given class .
474	Call a constructor .
475	This method is used to start a Ranging request .
476	Gets the font sync .
477	Gets the compile time API resource table .
478	Dump the shadow view .
479	Gets the inner text .
480	Returns a list of wrapper objects for the given intent .
481	This method is used to post an intent .
482	Convert a color to a HSV color .
483	Start a section .
484	Ends the trace section .
485	Returns the provider for the given key .
486	Creates a new file .
487	Run all tasks .
488	Runs the next task .
489	Request a audio focus request .
490	Returns the next audio focus request .
491	Start the native event .
492	Gets the buffer at the given index .
493	Queue input buffer .
494	Release output buffer .
495	Performs a time change .
496	Convert metadata to bundle .
497	Convert the given SQL string to a string .
498	Creates a new package info object .
499	Returns true if the package is granted for the given package .
500	Applies the flags to the given component info .
501	Returns the index of the permission with the given name .
502	Obtains the icon of the user .
503	Checks if the current user is owner on the current user .
504	Extract code point from code point .
505	Creates a new instance of the given class .
506	Get the status of an account .
507	Returns a collection of content observer associated with the given URI .
508	Adds a display .
509	Changes the display .
510	Fixes the trace path .
511	Finds the next field in the given set .
512	Resets the fields .
513	Parse an expression .
514	Returns the index of the given argument .
515	Load instruction .
516	Store the instruction at the given index .
517	Load arguments .
518	Load the argument array .
519	Load a local type .
520	Store a local type .
521	Swap the given type .
522	Box the given type .
523	Unbox the given type .
524	Checks if the given type is equal .
525	Visit a field instruction .
526	This method is used to handle static methods .
527	Put a static type .
528	Add a field .
529	Puts a field with the specified type .
530	Invokes a method instruction .
531	Invokes a virtual instruction .
532	Invoke a constructor .
533	Invoke static method .
534	Invoke an interface .
535	Throws an exception .
536	Checks the type of the given type .
537	Visit the implicit first frame .
538	Start a frame .
539	Creates a new item .
540	Creates a new float item .
541	Creates a new item with the given value .
542	Add a name type .
543	Get item .
544	Put 2 .
545	Puts an integer into the pool .
546	Visit an enum .
547	Visit an annotation .
548	Returns the position of the position of the position in the position of the position .
549	Creates a image from a raster .
550	Visit a parameter .
551	Visit an annotation .
552	Visit a parameter annotation .
553	Visit a type instruction .
554	Visit a field instruction .
555	Visit a method instruction .
556	Visit a table switch instruction .
557	Visit lookup switch instruction .
558	Visit a single array instruction .
559	Visit a variable annotation .
560	Visit a line .
561	Read frame type .
562	Sets the stack .
563	Gets the type of the input frame .
564	Sets the type of the given type .
565	Push a type .
566	Returns the type of this type .
567	Removes elements from the current stack .
568	Pop the stack .
569	Initialize the initializations .
570	Initialize the state .
571	Visit a source .
572	Visit an inner class .
573	Visit an annotation .
574	Visit a type .
575	Extracts an integer from an integer .
576	Gets the type of an object .
577	Returns the argument types of the given method descriptor .
578	Returns the return type of the given method descriptor .
579	Returns the number of arguments for the given string .
580	Returns the type of the given char array .
581	Returns the descriptor for the given buffer .
582	Gets the descriptor of a class .
583	Returns the number of instructions for the given instruction .
584	Puts a byte .
585	Puts two bytes .
586	Puts a short .
587	Puts an integer into this vector .
588	Puts an integer .
589	Puts a long .
590	Puts the given string into this vector .
591	Puts a byte array .
592	Enlarge data .
593	Gets the column name .
594	Sets the column mapping .
595	Gets the value of a property .
596	Initialize configuration values .
597	Returns the IOCase for the given name .
598	Returns the case of the given string .
599	Gets the value of the given change .
600	Sets the value of the given change .
601	Create an array of arguments .
602	Creates a new set that is not null .
603	Gets the global parameter .
604	Attach the parameters to the given statement .
605	Returns the absolute path of the given path .
606	Parses the given checksum value .
607	Computes the check sum .
608	Get the classpath for the project .
609	Prints the settings .
610	Parses the properties file .
611	Returns true if the field contains the current value .
612	Write the next line .
613	Checks if the given string contains special characters .
614	Process a line .
615	Process a character .
616	Executes the update .
617	Convert the value to an object .
618	Gets the value of this property .
619	Sets the value of the property .
620	Add an alias .
621	Sets the default value of the property .
622	Generate the SQL statement for the given statement .
623	Returns true if the given column is computed .
624	Tag the given tag .
625	List locks .
626	Get changes status .
627	Clears the checksum information .
628	Parses a mapping strategy into a list of entities .
629	Process a single line .
630	Gets the property editor .
631	Load the classes in a jar file .
632	Adds the given class to the classpath .
633	Gets the type of a property from an object .
634	Checks if the given object has the given property .
635	Sets the property .
636	Gets the read method for the given object .
637	Gets the write method for a property .
638	Get the methods for the given object .
639	Undo a collection .
640	Returns a list of the outgoing foreign key names .
641	Create an input stream .
642	Get a file lock .
643	Gets the full path for a resource .
644	Checks if the given filter is filtered by the given filter type .
645	Gets the value of the column in the ResultSet .
646	Initialize the configuration .
647	Initialize the database .
648	Returns true if this object matches the given database objects .
649	Sets the validation option if it is available .
650	Adds a type to this collection .
651	Runs the properties .
652	Checks if a property is empty .
653	Convert a property value to an object .
654	The main method .
655	Split the argument into a string array .
656	Checks if the argument is a command .
657	Checks if the argument is no - argument command .
658	Extract a jar entry from a jar file .
659	Parses the default property file .
660	Fixes the command line arguments .
661	Checks the command line parameters .
662	Checks if the command parameters are missing .
663	Checks if the given list of command parameters is invalid .
664	Parses properties .
665	Prints the help .
666	Prints the help .
667	Parse options .
668	Gets the value of a command parameter .
669	Read an integer .
670	Checks if this node matches the given labels .
671	Checks if the given example has the given example .
672	Creates a snapshot of this database .
673	Creates a snapshot of the given example .
674	Generate the children of the database .
675	Clean up a directory .
676	Splits the SQL string into an array of strings .
677	Converts a string to a string .
678	Returns the left padding of a string .
679	Generates a random identifier .
680	Returns a string containing all the comments of the given end of the given string .
681	Concatenates the given base string into another case .
682	Get the names of the database .
683	Appends the given clause to the given key .
684	Appends the given clause to this clause .
685	Append the given clause to the given key .
686	Inserts the given key into the given key .
687	Inserts the given key into the given key .
688	Returns the string representation of the given logging key .
689	Gets the sub - clause for the given logging key .
690	Prints the changes .
691	Returns a list of all registered databases .
692	Returns a list of all the internal databases .
693	Validates the given database .
694	Convert a database type to a database type .
695	Convert an object to a SQL .
696	Checks if the given string is the current date .
697	Returns true if the database supports boolean data .
698	Given a list of strings return the result .
699	Returns true if the given statement is persistent .
700	Adds an artifact to the log .
701	Returns the field with the given name .
702	Returns the alternate paths for the given path .
703	Checks if this context matches this context .
704	Returns the resource accessor for the given classloader .
705	Close the given database .
706	Append the next character of the given line .
707	Checks if the next character is escaped .
708	Returns true if the next character in the input string contains a character .
709	Returns the children of the given namespace .
710	Sets the value of this node .
711	Returns the value of the given type .
712	Gets the child node with the given name .
713	Get child value .
714	Returns the value of the child of the given namespace .
715	Close the stream .
716	Returns true if this is autoIncrement .
717	Checks if the given path is compressed .
718	Gets the column with the given name .
719	Returns a new instance of the given type .
720	Sets the tag .
721	Create a new exception with the given tag name .
722	Checks if the given value is a time format .
723	Returns the value of the given property .
724	Sets the validation option if available .
725	Returns the unique constraints for the given name .
726	Gets the set parameters for the given change .
727	Gets the required parameters .
728	Convert a value to a string .
729	Obtains all the fields of the change .
730	Gets the path of a file .
731	Index lookup .
732	Returns the index of the column with the given name .
733	Returns the descriptor for the given column .
734	Returns the field with the given column name .
735	Gets the column name .
736	Find a descriptor for the given name .
737	Find field by name .
738	Checks if the given descriptor matches the given descriptor .
739	Load the descriptor map .
740	Gets the column name .
741	Sets the column mapping .
742	Returns the size of the parameter .
743	Returns true if the given type contains a default value .
744	Gets the list of changes to run .
745	Escape object name .
746	Sets the value of the given value .
747	Sets the value of a boolean value .
748	Sets the default value of the column .
749	Unregisters a change .
750	Returns a set of all changes in this list .
751	Create a new change .
752	This method is used to prompt the given database .
753	Returns the schema for the connection .
754	Checks if the update is safe .
755	This method is used to filter a list of references to a list of statements .
756	Returns the maximum number of digits for the given timestamp .
757	Checks that the given text is valid .
758	Create a new element .
759	Checks if an object is null .
760	Returns whether or not the given database product name is given .
761	Create an instance of the given tag .
762	Get the local host address .
763	Returns the hostname of the local host .
764	Add a list of schema sets to the database .
765	Add schema to text .
766	Encodes the given byte array .
767	Returns the names of the given database .
768	Read next line .
769	Gets the next line .
770	Checks if the stream is closed .
771	Starts polling .
772	Starts the path children .
773	Sets the application configuration folder .
774	Gets an integer property .
775	Gets a new long property .
776	Gets a boolean property .
777	Gets a new float property .
778	Gets a double property .
779	Load properties from a table .
780	Returns an instance of the given property .
781	Update all properties .
782	Add a callback .
783	Removes all callbacks from the property list .
784	Gets the URI regex property .
785	Load properties from input stream .
786	Add a property .
787	Update properties .
788	Add a property .
789	Deletes a property .
790	Clear the map .
791	Get the properties .
792	Load properties from a configuration source .
793	Adds a configuration at the specified index .
794	Removes the given configuration .
795	Removes a configuration from the container .
796	Returns all the keys in the configuration list .
797	Returns all the keys for the given prefix .
798	Checks if the given key contains the given key .
799	Returns a list containing all elements of the specified key .
800	Returns an array of string values for the given key .
801	Load the properties from a resource .
802	Load properties from configuration .
803	Load properties from properties .
804	Reads the data from the configuration file .
805	Returns the angle for the given location .
806	Computes the value of the given key .
807	The main method .
808	Returns the getter property name for the given member .
809	Checks if the given method is a getter method .
810	Adds a hard constraint match .
811	Adds a medium constraint match .
812	Adds a soft constraint .
813	Clean the path .
814	Calculates the sum of the standard deviation of the asset .
815	Checks if the problem is created .
816	Gets the problem scale for the given solution .
817	Generate the operation name .
818	Returns true if request timeout is enabled .
819	Checks if the task timeout is configured .
820	Creates a new task for the given request .
821	Builds a task .
822	Gets the build task .
823	Create a new build task .
824	Write generic failure info .
825	Returns a single trace .
826	Executes a batchable .
827	Gets the name of a batch .
828	Estimates the given consumer .
829	Create default config .
830	Completes the transformation chain .
831	Creates a FusionTask .
832	Sets an engine property .
833	Creates a promise that returns the value of the given value .
834	Adds the result to the source .
835	Creates a new resource for a member .
836	Creates a new link summary .
837	Returns the list of connections in the person .
838	Creates a new task with the given parent .
839	Creates a new task with the specified time .
840	Find the node with the next occurrence of the given node .
841	Append a task stack trace .
842	Fires a step to the current thread .
843	This method is used to check if the current time is in the current monitor .
844	Creates a new task with the given retry policy .
845	Wrap a task .
846	Attempt to retry a retry task .
847	Runs the application .
848	Create an exception for the given object .
849	Sets the client .
850	Acquires a lock .
851	Release lock .
852	Try to acquire the given plan class .
853	Get the async client .
854	Initialize the async http client .
855	Consumes characters from the buffer .
856	Checks that the given array is not null .
857	Checks that the given string is not empty .
858	Parses a transformation string .
859	Get file list .
860	Find a list of files in the given file .
861	Returns a list of all files in the given query .
862	Removes a file .
863	Removes the given DBObject .
864	Puts the given key into the map .
865	Returns the value of the given key .
866	Creates a builder for the given type .
867	Returns the maximum time in milliseconds .
868	Creates a new object with the specified key and value .
869	Returns the name of this cluster .
870	Gets the master address .
871	Checks if the given server address is a master .
872	Returns the maximum size of the document .
873	Adds a query .
874	Applies the transaction options to the transaction options .
875	Returns true if this value is valid .
876	Gets the error message .
877	Read annotations .
878	Gets the index names of the given indexes .
879	Generates the index for the given document .
880	Validates the MD5 .
881	Returns the codec for the given document type .
882	Calculates the batch size .
883	Parse a string .
884	Decodes the given decoder with child context .
885	Checks if the given states are valid .
886	Executes the given document .
887	Write extra elements .
888	Convert this ID to a byte array .
889	Puts the given buffer to the given buffer .
890	Returns a string representation of this ID .
891	Returns a string representation of a short description .
892	Creates a builder for the given map .
893	Adds a key to the stack .
894	Adds a result to the batch .
895	Adds an exception to the given index map .
896	Add write error result .
897	Adds a list of write errors .
898	Gets the error .
899	Sets the next node .
900	Returns the next element in the list .
901	Returns the root node of this list .
902	Returns the predecessor of this node .
903	Returns the next node .
904	Returns the back node of this node .
905	Append an element to the list .
906	Adds an element to this list .
907	Deletes this node .
908	Replaces the element with the given element .
909	Executes the given write binding .
910	Returns a list of servers for the given cluster description .
911	Creates a primary read preference .
912	Create a secondary read preference .
913	Creates a secondary preferred preference for the given unit .
914	Returns the nearest element of the given unit .
915	Create a primary preferred value for a tag set .
916	Creates a secondary read preference .
917	Creates a secondary preferred read preference .
918	Returns the nearest element of the given tag set .
919	Creates a primary read preference .
920	Returns the nearest element of the given tag set .
921	Returns the read preference with the given name .
922	Converts a list of tags to a tag level .
923	Converts a list of tags to a tag level .
924	Reads bytes from the given input stream .
925	Read an integer from an input stream .
926	Read an integer .
927	Read an integer from a byte array .
928	Read long .
929	Gets the credential list .
930	Get a random server .
931	Create a MongoDB connection .
932	Returns a copy of this object .
933	Creates a builder for a class .
934	Get a collection by name .
935	Drop the database .
936	Get collection names .
937	Executes a command .
938	Executes a command .
939	Checks if a collection exists .
940	Executes the command .
941	Gets the stats .
942	Removes a user .
943	Gets the read preference .
944	Returns the codec for the given class .
945	Inserts the given document into the given document .
946	Updates the given update .
947	Find an object by its id .
948	Rename a collection .
949	Create a map reduce command .
950	Executes the given pipeline .
951	Create a new index .
952	Create a new index .
953	Find and remove the given DBObject .
954	Sets the factory for the database .
955	Sets the database encoder factory .
956	Returns the index info for this collection .
957	Drop an index .
958	Drop a index .
959	Checks if this command is a capped field .
960	Sets the internal class .
961	Returns the class for the given path .
962	Creates a new update with the given field name and value .
963	Create a new update with the given value .
964	Create a new update .
965	Create a new update from a field .
966	Multiply a field .
967	Creates a new update with the given field name and value .
968	Creates a new update with the given field name and value .
969	Create a new update with the given field name and value .
970	Create a new object with the given values .
971	Create a new update with the given value .
972	Pushes a list of items to the given list .
973	Creates a new update with the specified value .
974	Gets a document from the given filter .
975	Gets a new object from a list of values .
976	Write query procedures .
977	Increments the generation on the given exception .
978	Returns a list of the given class name .
979	Create a replace options object .
980	Decodes a string .
981	Encode a byte array .
982	Gets the address of the cluster .
983	Get the cluster status .
984	Gets the names of the database names .
985	This method is used to download a file .
986	This method is used to get the lock .
987	Unlock this object .
988	Returns the value of this object as a Number .
989	Returns a new connection id with the specified value .
990	Returns a list of all the elements of the given class .
991	Returns the JSON representation of this object .
992	Executes the given read cursor .
993	Gets the expire after the specified unit .
994	Convert this object to a DBObject .
995	Gets the logical session timeout minutes .
996	Gets all server descriptions .
997	Gets the description of a server .
998	Returns a list of all the registered servers .
999	Returns a list of all the servers in this server .
1000	Returns the list of servers that have the given tag .
1001	Returns all the servers .
1002	Returns the list of servers that are primary .
1003	Returns the list of servers that have the given tag .
1004	Returns the string representation of this server .
1005	Create a new credential .
1006	Creates a random credential from the specified username and password .
1007	Create a single credential from a username and password .
1008	Returns a new credential property with the specified key and value .
1009	Creates a new instance of this credential .
1010	Returns the value of the mechanism property .
1011	Converts this stream to a byte array .
1012	Adds an object serializer .
1013	Sets the multi .
1014	Encodes the given document to the given output .
1015	Write message procedures .
1016	Add a document .
1017	Adds a collectible document .
1018	Write message length .
1019	Creates a chunk for the given file .
1020	Creates a copy of this cursor .
1021	Returns true if this cursor is found .
1022	Try to next operation .
1023	Returns all the elements in the iterator as a list .
1024	Returns the first object of this cursor .
1025	Gets the read preference .
1026	Returns the read options .
1027	Puts a value into the database .
1028	Put a database reference .
1029	Returns a bulk write result .
1030	Gets the address of this socket .
1031	Returns a list of socket addresses associated with this host .
1032	Create an object filter that contains the given value .
1033	Create a new equal value .
1034	Create a new greater than value .
1035	Creates a new expression that contains the given value .
1036	Create a new object filter .
1037	Creates a new ORNNor filter .
1038	Create an ORNNor filter .
1039	Checks if the given field exists .
1040	Get the text from the given search string .
1041	Returns a copy of the given text search .
1042	Returns a document that matches the given filter .
1043	Get a geo within the given field .
1044	Convert a list of points to a geometry .
1045	Get a geo within the given location .
1046	Returns a filter that matches the specified value .
1047	Create a filtered document with the specified value .
1048	Returns the flags of the given string .
1049	Returns the value of a regex flag .
1050	Returns a string representation of the given flags .
1051	Sets the text version .
1052	Sets the sphere version .
1053	Copy options .
1054	Converts an object to a type .
1055	Writes the given document to the given writer .
1056	Executes a bulk write operation .
1057	Create a new bulk update request .
1058	Create a new bulk update request .
1059	Executes the given binding .
1060	Initialize the embedded library .
1061	Creates a MongoDB instance .
1062	Closes the MongoDB library .
1063	Enable sni .
1064	Returns the type of the given object .
1065	Convert this object to a DBObject .
1066	Get short description .
1067	Creates a new update result .
1068	Returns the content type of this file .
1069	Returns the aliases .
1070	Gets the first key .
1071	Encodes the given value with child context .
1072	Returns the document as a document .
1073	Compress the given list of bytes .
1074	Gets the value of a key .
1075	Get a boolean value from the key .
1076	Returns the value of the given field in the database .
1077	Gets a date .
1078	Converts the given object to another object .
1079	Returns the credential associated with this instance .
1080	Start a session .
1081	Returns the timeout value of the given unit .
1082	Returns the document as a document .
1083	Returns true if the journal is received .
1084	Returns a copy of this writer with the specified number of bytes .
1085	Creates a new write operation with the given value .
1086	Returns a copy of the given time timeout .
1087	This method is used to write the data .
1088	Inserts an object into the database .
1089	Create a new bulk write request .
1090	Execute bulk write operation .
1091	Returns a copy of this object .
1092	Returns the index of the given field .
1093	Gets the index names of the request .
1094	Returns the value associated with the given key .
1095	Gets the document for the given key .
1096	Returns the value of the given key as an array .
1097	Returns the number associated with the given key .
1098	Returns the integer value of the given key .
1099	Returns the value of the given key as an integer .
1100	Returns the decimal encoding of the given key .
1101	Returns the value of the given key as a double .
1102	Gets the boolean value for the given key .
1103	Returns the value of the given key as a string .
1104	Returns the value of the given key as a date .
1105	Gets the timestamp for the given key .
1106	Returns the id of the given key .
1107	Gets the binary value for the given key .
1108	Gets the regular expression for the given key .
1109	Write handling tasks .
1110	Converts an object to a document .
1111	Checks that the given value is not null .
1112	Checks if the given callback is true .
1113	Gets the property .
1114	Builds the class model .
1115	Gets the options .
1116	Gets the wrapper for the given class .
1117	Get the Java wrapper for the given class .
1118	Returns the UUID as a UUID .
1119	Convert a UUID representation to a UUID .
1120	Parse a string .
1121	Read hex .
1122	Skip whitespace .
1123	Parse string .
1124	Parse a number .
1125	Parses the exponent .
1126	Parses an array .
1127	Updates an update .
1128	Creates a new connection description with the given id .
1129	This method returns true if the given value is received .
1130	Returns the number of bytes that will be sent to the output .
1131	Gets the embedded value of the given list of keys .
1132	Construct a list of values from a key .
1133	Merge options .
1134	Release the pool .
1135	Gets the value of the pool .
1136	Closes the available resources .
1137	Creates an output stream .
1138	Checks that the given context type is valid .
1139	Checks that the given state is valid .
1140	Verifies that the given name is a document type .
1141	Verify that the element name is valid .
1142	Verifies that the given object is a given type .
1143	Parse the value of the given string .
1144	Returns the decimal value of this value .
1145	Returns the bytes of this byte array .
1146	Sets the hint for the given value .
1147	Returns the document representation of this document .
1148	Write a file to a file .
1149	Write this chunk to the output stream .
1150	Removes the files .
1151	Sets the sort .
1152	Sets the sort document .
1153	Gets the namespace .
1154	Returns the name of the database .
1155	Creates a codec for a full document .
1156	Creates a builder for this client session .
1157	Resets this instance .
1158	Returns a copy of this options .
1159	Gets the writeConcern .
1160	Gets the user agent .
1161	Populate properties .
1162	Checks if the user group key is matching .
1163	Converts a list of groups to a list of roles .
1164	Returns the endpoints for the given environment .
1165	Create an AAD authentication filter .
1166	Returns a list of all users .
1167	Registers the given path .
1168	Build the configuration .
1169	Returns the summary of a file .
1170	Registers a watch .
1171	Add a new property .
1172	Converts a name to a RamlType object .
1173	Sets the kind of a watch event .
1174	Executes the given callback with the given callback .
1175	Executes the given registry with the given configurer .
1176	Executes the given callback with the given callback .
1177	Sets the authentication parameters for the given pattern .
1178	Sets the auth filter .
1179	Resolves the given value .
1180	Returns the path for the given pattern .
1181	Define the given type .
1182	Convert this file to a YAML string .
1183	Returns the status .
1184	Gets the status code .
1185	Set status .
1186	Sets the media type .
1187	This method is used to run the E bean .
1188	Sets the media type .
1189	Returns the given parameter with the given name .
1190	Gets the form parameter .
1191	Gets a header parameter .
1192	Returns the response for the given status .
1193	Performs the given configurer with the given configurer .
1194	Reads a byte array .
1195	Create a Requery instance .
1196	Creates a Requery .
1197	Create a completion stage .
1198	Create a new Requery .
1199	Sets the JS code for the given type .
1200	Sets the HTML content of the given type .
1201	Sets the JSON representation of the given type .
1202	Sets the CSS .
1203	Get attributes .
1204	Generate a CSS .
1205	Parses a string value .
1206	Writes the given path .
1207	Sets the handle .
1208	Create a model .
1209	Gets the last event event .
1210	Send an event .
1211	Adds a value to the model .
1212	Add values to the view .
1213	Returns the class loader for the given classloader .
1214	Returns the class loader for the given directory .
1215	Set attributes .
1216	Set attribute .
1217	Sets the parameter for the route method .
1218	Returns the status of the given status code .
1219	Executes the given configurer with the given configurer .
1220	Rewrite a SQL statement .
1221	Send an asset .
1222	Run with the given configurer .
1223	Executes the given configurationurer with the given configurationurer .
1224	Adds a job to the scheduler .
1225	Creates a new job .
1226	Shuts down the iterator .
1227	Performs a Cassandra .
1228	Creates a new result with the given status .
1229	Add a Jackson module .
1230	Unauthenticated provider .
1231	Create a form with the given pattern .
1232	Parses the given application .
1233	Scan the given type .
1234	Create a Swagger tool with the given path and options .
1235	Sets the Swagger .
1236	Create a source file .
1237	Sets the raml .
1238	Processes the given file using the given configuration .
1239	This method returns the result of the received response .
1240	This method is used to receive a result of the received result of the message .
1241	This method is used to receive the input result .
1242	This method is called when an event is received from the server .
1243	This method is used to receive the result of the result .
1244	This method is used to receive the result of the result of a result .
1245	Returns the default envelope .
1246	Returns a map containing all the namespaces of this envelope .
1247	This method is used to send a result .
1248	This method is used to create a NF not in a NF .
1249	This method is used to be used to make sure that the node is not in the root .
1250	This method is used to build a status .
1251	This method is used to check if an event is not present in an event .
1252	Cancels a nota nota nota nota .
1253	Create a NFRetaNotaNotaNota .
1254	This method is used to build a Cad .
1255	This method is used to receive the received data from the server .
1256	Notifies the result of the result of the result of the result .
1257	Returns an XML representation of the xml file for the specified texto .
1258	RecepcAO event .
1259	Cancel a nota nota .
1260	This method is used to receive a result of a MDDF .
1261	This method is used to receive the result of the result of the result of the response .
1262	Cancels a MDfe .
1263	This method is used to be used to create a MDo .
1264	This method is used to be used to get the data in the message .
1265	This method is used to receive the data of a given result .
1266	This method is used to check if the status of a status .
1267	Computes the updated Xu .
1268	Calculates the cosine similarity of two vectors .
1269	Compute the solver .
1270	Delete a directory .
1271	Load an instance of the given class .
1272	Publish additional model data .
1273	Open a custom tab .
1274	Gets the package name of the application .
1275	Returns true if the intent has specialized handlers .
1276	Load the session .
1277	Execute custom tabs .
1278	Validates the configuration .
1279	Creates a new intent for the given response URI .
1280	Edit map .
1281	The main method .
1282	Shuts down the scheduler .
1283	Evaluates the task .
1284	Evaluate host attribute .
1285	Evaluate the target VM .
1286	Set the autoscale callback .
1287	Disable a VM .
1288	Disable a VM by its ID .
1289	Enables a VM .
1290	Shutdown the server .
1291	Returns true if all properties have the specified properties .
1292	Returns information about the given source .
1293	Gets the metadata for the given stream .
1294	Reads a packet .
1295	Reads a varint from the stream .
1296	Reads a fixed integer .
1297	Reads the engine type .
1298	Add a tag to this container .
1299	Sets the content of this container .
1300	Returns the value if the optional value is null .
1301	Returns the content of the given HTML tag .
1302	Set attribute .
1303	Sets attribute .
1304	Set attribute .
1305	Returns a new element with the given names .
1306	Compress the given code .
1307	Parse properties from a string .
1308	Parse the contents of a string .
1309	Handles menu items width changed .
1310	Sets the color of the left action icon .
1311	Sets the color of the background .
1312	Open the menu .
1313	Close the menu .
1314	Inflates the given menu .
1315	Sets if the search key is shown .
1316	Set whether or not the click is pressed .
1317	This method is used to set whether or not .
1318	Update suggestions section height .
1319	Calculates the height of the suggestions .
1320	Sets the callback that will be used to bind the user .
1321	Returns the MD5 checksum of the given file .
1322	Configures the SSL certificate .
1323	Reads the contents of a JSON reader .
1324	Returns the type of this class .
1325	Returns the string representation of a package .
1326	Get the type of this class .
1327	Create a type adapter .
1328	Returns an immutable set that contains all the elements in the list .
1329	Returns an iterator over the data .
1330	Cache key .
1331	Returns the name of the named element .
1332	Returns the name of the serialized name .
1333	Creates a predicate that returns true if the expression is empty .
1334	Creates a FluentFuture from a future .
1335	Returns an immutable instance of this map .
1336	Returns the string representation of the given type .
1337	Gets the next token buffer .
1338	Closes the cache .
1339	Execute a JavaScript function .
1340	Set the proxy settings .
1341	Sets the HTTP proxy .
1342	Sets the auto - proxy URL .
1343	Creates a new user client .
1344	Update the modified fields from an entity .
1345	Adds a new listener to the list of listeners .
1346	Deploys the process definitions to a tenant .
1347	Checks if the task is selected by the bridge .
1348	Gets the servlet path for the given process definition .
1349	Gets the context path for the given process definition .
1350	Get the process application info for the given process .
1351	Gets the process application info for a given process definition .
1352	Gets the user details service .
1353	Convert an object to an object .
1354	Initialize the camunda component .
1355	Checks that the given variable is not null .
1356	Checks that a global variable is set .
1357	Open the action view .
1358	Closes the menu .
1359	Update item positions .
1360	Returns the coordinates of the screen .
1361	Returns the center of this action view .
1362	Calculates the position of the item .
1363	Gets the activity content view .
1364	Returns the screen size .
1365	Restore sub action view after animation .
1366	Set the content view .
1367	Sets the position of the view .
1368	Attaches the dialog to the activity .
1369	Adds a transition to the given destination state .
1370	Adds a transition to the given destination state .
1371	Adds a transition to the given destination state .
1372	Adds a trigger .
1373	Gets the state representation of the given state .
1374	Add an instance .
1375	Sets the overflow values for the given bucket .
1376	Merges this HLL with the given values .
1377	Encodes the given array of bytes into a byte array .
1378	Decodes a sequence .
1379	Decodes an optional sequence element .
1380	Encode a bit string .
1381	Encode a byte array .
1382	Encodes the given length into a byte array .
1383	Gets a logger .
1384	Log a message .
1385	Log a warning .
1386	Log an exception .
1387	Replaces the given path with the given path .
1388	Decodes a percentage encoded value .
1389	Gets the statistics for a list of content timestamps .
1390	Creates an instance of the given configuration provider .
1391	Updates the value with the given timestamp .
1392	Encodes a byte array .
1393	Decodes a base64 encoded string .
1394	Flush the log .
1395	Dump destination .
1396	Computes the alpha value of the target weight .
1397	Adapts a Future to a Future .
1398	Returns an unmodifiable future that contains the given future .
1399	Returns an unmodifiable future that contains the given future .
1400	Creates a CompletableFuture that will complete the given throwable .
1401	Gets the value of the given future .
1402	Tries to get the value of the given future .
1403	Try to get the value of the given future .
1404	Tries to get the value of the given future .
1405	Checks that the given future is successful .
1406	Creates a future that will be called when a list of futures are completed .
1407	Gets the first completed future .
1408	Gets the first completed future .
1409	Gets all of the given futures .
1410	Creates a CompletableFuture that will be used to create a Future that will be sent to the given list .
1411	Converts a CompletableFuture to a Future
1412	Adds an exception callback .
1413	Get the histogram for the given list of buckets .
1414	Tries to remove the given node .
1415	Compute the maximum path weight .
1416	Adds a hash .
1417	Load properties from a file .
1418	Binds the configuration values .
1419	Returns the next duration of this duration .
1420	Returns the value of the given value .
1421	Multiply this duration .
1422	Divides this duration with the specified amount .
1423	Find a single field matching the specified strategy .
1424	Returns true if the given field contains the given field .
1425	Throw exception if field is not found .
1426	Returns the field annotated with the given annotation .
1427	Create a new condition evaluation listener .
1428	Poll executor service .
1429	Blocks until a boolean is true .
1430	Blocks until a boolean is true .
1431	Creates a new instance of the exception factory .
1432	Sets the default timeout .
1433	Sets the default timeout .
1434	Splits the string into a list of arguments .
1435	Escapes the given string .
1436	Renders a static file .
1437	Load the language configuration .
1438	Load all the messages in the application .
1439	Returns the URL for the given file or URL .
1440	Generate the secret .
1441	Builds a run class in the specified classpath .
1442	Returns a list of all the artifacts in the specified list .
1443	Resolves the standalone class .
1444	Encrypt a string .
1445	Decrypt a string .
1446	Reads the properties file .
1447	Register a path .
1448	Determines the mode of the system .
1449	Checks if the mime type is valid .
1450	Build a route .
1451	Starts the thread .
1452	Creates the server URL .
1453	Initializes this router .
1454	Process all controller methods .
1455	Sort methods .
1456	Find controller methods .
1457	Configure reflections .
1458	Checks if the given method is allowed .
1459	Gets the HTTP method .
1460	Builds a controller method .
1461	Returns the real class name of the given object .
1462	Checks if a class exists .
1463	Returns the source code relative to the given stack trace .
1464	Adds a value to the cache .
1465	Get an object from the cache .
1466	Checks that the given object is serializable .
1467	Render the result .
1468	Render raw string .
1469	Renders a byte array .
1470	Gets the cookie with the given name .
1471	Set the cache content .
1472	Checks if the application secret is set .
1473	Adds a collection to this collection .
1474	Gets the position of the view .
1475	Switch views .
1476	Removes an active index .
1477	Returns all the active indexes .
1478	Gets the title view for the given position .
1479	Returns the content view of the given position .
1480	Expand the item .
1481	Removes the item at the given position .
1482	Returns the content parent of the given position .
1483	Obtains an array of all the additional views of the given view .
1484	Creates a bitmap from a view .
1485	Returns true if the given position is clicked .
1486	Resets the animation .
1487	Resets the animation .
1488	Cancels an existing animation .
1489	Scrolls the given view .
1490	Calculates the animation delay .
1491	Returns an array of all of the specified animation elements .
1492	Handles non - CORS requests .
1493	Adds a stream of literal words to the buffer .
1494	Initializes the bitmap storage .
1495	Returns the next element of this node .
1496	Resize the buffer .
1497	Returns the number of words in the buffer .
1498	Compare two bitmaps .
1499	Adds a stream of literal words to the buffer .
1500	Fills this container with the given container .
1501	Returns a copy of this set .
1502	Returns the number of bits .
1503	Checks if the data is empty .
1504	Returns an iterator over the elements of this iterator .
1505	Returns true if this set contains the given sets .
1506	Declarative Services method for unseting this iterator .
1507	Parse next run .
1508	Open the dialog .
1509	Closes the icon .
1510	Sets the background color of the menu .
1511	Returns the index of the name of the given file .
1512	Returns the index of the name of the given file .
1513	Parses the given URL .
1514	Register a connection URL parser .
1515	Returns the name of the name of the given URL .
1516	Starts the daemon .
1517	Copy an input stream to a file .
1518	Copies the assets from the given file .
1519	Installs a binary file .
1520	Handles missing fields .
1521	Get an enum value from a JSON object .
1522	Updates the references of this reference .
1523	Traverses all fields in the stack .
1524	Convert a JSON string to a Java object .
1525	Convert a JSON object to a Java object .
1526	Traverses the fields from the stack .
1527	Store missing fields .
1528	Returns the raw type of the given type .
1529	Read an array .
1530	Reads a number .
1531	Read a string .
1532	Returns the field with the given field name .
1533	Removes leading and trailing quotes from a string .
1534	Convert an object to a JSON string .
1535	Format a JSON string .
1536	Prints a single line .
1537	Write array element .
1538	Write a custom object .
1539	Returns the custom writer for the given class .
1540	Write an object to JSON .
1541	Logs the references of the given object .
1542	Trace all fields in the stack .
1543	Returns true if the map is JSON - primitive keys .
1544	Write a collection element .
1545	Creates a map from a list of strings .
1546	Gets the source .
1547	Gets the topics .
1548	Obtains the ID of the H JID .
1549	Gets the document detail list .
1550	Creates the axis coordinates .
1551	Creates the default grid .
1552	This method is used to create a legend .
1553	This method is used to create a legend .
1554	Creates a legend inside the legend .
1555	Sets the label of the legend .
1556	Creates and returns a new instance of the high - steps .
1557	Creates and returns a new low - level instance that will be used to show a high - level axis .
1558	Creates a series default values .
1559	Creates a series default .
1560	Gets the document attachment list .
1561	This method is used to create a committeee bar .
1562	Create the list of topics for a committee item .
1563	Create the summary page .
1564	Create the overview content .
1565	Gets the value of the kOM .
1566	Configure authentication .
1567	Sets the list .
1568	Sets the status map .
1569	Sets the resource type map .
1570	Gets the value of the HPAenenenenenM unmodifiable .
1571	Gets the list of assignment elements .
1572	Gets the proposal data for this document .
1573	Returns the path of the page .
1574	Update ballot data .
1575	Returns the list of viewRiksd data .
1576	Initialize the party map .
1577	Add data to a data series .
1578	This method is used to create the patch chart .
1579	Adds a data value to the output .
1580	Creates a map from a map of map values .
1581	Adds the result for the given month .
1582	Creates a field .
1583	Creates the converter for the given properties .
1584	Gets the converter for the given property .
1585	Gets the type of a property .
1586	Gets the document activities .
1587	Gets the user account from the context .
1588	Gets the value of the county regions .
1589	Gets the criteria container .
1590	Gets the committeeSummaryContainer .
1591	Sets the events .
1592	Gets the page page name .
1593	Get page number .
1594	Creates the panel content .
1595	Create a page visit history .
1596	Adds the politic indicator data .
1597	Adds data to a list .
1598	Sets the list of google authentication code .
1599	Create a role summary .
1600	Create a Gantt instance from a list of assignments .
1601	Sorts entries by values .
1602	Add a view generic role member to a step .
1603	Removes all dates after the current date .
1604	Creates a Gantt instance .
1605	Converts a number of days to a string .
1606	Load the secret XA data source .
1607	Send a data agent .
1608	Gets the document person references .
1609	Clean the decision .
1610	Gets the name of the document .
1611	Gets the name of the committtee .
1612	Block for failed login attempts .
1613	Block by session .
1614	Move to page .
1615	Gets the application manager .
1616	Show notification .
1617	Gets the value of the topic .
1618	Adds the source indicators to the menu .
1619	Gets the list of topics for a topic .
1620	Gets the address of the user account .
1621	Add cache hints .
1622	Gets the list of strings for the given property .
1623	Reads the contents of the given input stream and writes it to a list of files .
1624	Creates the pagination controls .
1625	Add a page link .
1626	Insert politician .
1627	This method is used to insert two views .
1628	Gets the specification list .
1629	Adds an entry to the data series .
1630	Adds a summary to the report .
1631	Adds the data for the given series .
1632	Adds the data to the chart .
1633	Add entry data .
1634	Create the minimum summary for the given layout .
1635	Create the role list .
1636	Process all documents in the given list .
1637	Load and process document list .
1638	Load document list .
1639	Read the contents of a Reader with a string .
1640	Read input stream .
1641	Gets the value of the Vallot document .
1642	Get a list of Government body
1643	Gets the person assignment element .
1644	Gets the person detail element .
1645	Creates a user account .
1646	Create a row item .
1647	Create a grid layout .
1648	Send country indicator work order .
1649	Gets the document proposal .
1650	Gets the document activity container .
1651	Gets the document detail container .
1652	Gets the document attachment container .
1653	Gets the document reference container .
1654	Gets the document person reference container .
1655	Gets the map of viewRiksd summary .
1656	Adds the data history for the given series .
1657	Read missing person list .
1658	Append an object to a StringBuilder .
1659	Add a fallback value .
1660	ReEncrypt the vault values .
1661	Gets the landstings .
1662	This method adds a list of summary objects to the given StringBuilder .
1663	Adds an entry to the builder .
1664	Add decision data rows .
1665	Adds the contents of a document row .
1666	Adds the contents of a document to the model .
1667	Gets the user id from the context .
1668	Gets the request URL .
1669	Checks if a role is in the context .
1670	Gets the map of data to a map .
1671	Get the map of data mode settings for the given page .
1672	Get the content of the given element .
1673	Adds a series of data elements to the series .
1674	Update person assignment data .
1675	Update assignment data .
1676	Handles input validation .
1677	Creates a base application event request .
1678	Validates a request .
1679	Gets the human readable message .
1680	Handles input violations .
1681	Creates the data indicator summary .
1682	Initialize the application menu bar .
1683	Create the admin menu item .
1684	Create button link .
1685	Sets the result element .
1686	Load the Kie container .
1687	Gets the javers .
1688	Returns a bean that can be used to create a javers auditable aspect .
1689	Gets the author provider .
1690	Create role summary .
1691	Add minimum year to the map .
1692	Adds a Government body to a list of government body .
1693	Get integer from string .
1694	Adds the values of a sheet to the map .
1695	Add government body to map .
1696	Create a Government body from a row .
1697	Gets the person assignment data .
1698	Gets the person detail data .
1699	Returns a map of all the decision types for the current view .
1700	Returns a map containing all the nodes of the committee .
1701	Adds the decision type for the given series .
1702	Display the document attachment content .
1703	Creates and returns the label of the header .
1704	Build key .
1705	Returns the description of the rule summary .
1706	Adds a new rule to the map .
1707	Creates a map from a list of members .
1708	Checks if the given document element contains a date .
1709	Get the date from a string .
1710	Gets the value of the parties property .
1711	Creates and returns a button that will be used to enable the user .
1712	Creates the disable Google auth button .
1713	Creates the change password button .
1714	Gets the document reference list .
1715	Returns the best guess date for the given ballot container .
1716	Check the same date .
1717	Try to find a valid vote date .
1718	Gets the IP information from the web browser .
1719	Gets the system version .
1720	Gets the value of the committee proposal list .
1721	Gets the value of the parlial region .
1722	Gets the map of viewRiksd summary .
1723	Adds the data history to the data list .
1724	Add a data series .
1725	Add a data series .
1726	Initialize the user command map .
1727	Perform operation operation .
1728	Gets the list of roles .
1729	Gets the assignment list .
1730	Configure column orders and hidden fields .
1731	Configure listeners .
1732	Create a grid cell filter .
1733	Set column converters .
1734	Gets the document type .
1735	Add a series .
1736	Gets the value of the leader types .
1737	Gets the component summary item .
1738	Gets the adminregion .
1739	Obtains the right level of this level .
1740	Gets the lending type .
1741	Gets the ballot document data .
1742	Gets the ballot document element .
1743	Main entry point .
1744	Encrypt value .
1745	Gets theEncryptor .
1746	Decrypt value .
1747	Gets the value of the countyenenenenal regions .
1748	Gets the job context holder .
1749	Gets the value of the portals property .
1750	Gets the active user account .
1751	Gets the value of this document .
1752	Creates the HTML layout with the specified panel and footer .
1753	Creates the top header actions for the current context .
1754	Creates a full size layout .
1755	Adds the logo to the page .
1756	Creates the top title header .
1757	Gets the Java mail sender .
1758	Get mail port .
1759	Find the language for the given locale .
1760	Returns the list of available locales .
1761	Creates and returns a map with the information about the issue .
1762	Sets the namespace on an input stream .
1763	Add a chart .
1764	Get chart window height .
1765	Returns the name of the view
1766	Gets the map of viewRiksd summary data .
1767	Login the user .
1768	Checks if the system is windows .
1769	Starts the emulator .
1770	Unlock the emulator .
1771	This method is used to write the main script .
1772	This method is used to write the emulator start script .
1773	Stops the Android debug bridge .
1774	Stop emulator .
1775	Sends a command to the server .
1776	Creates the start command line .
1777	Determine the executable .
1778	Determines the wait time for this instance .
1779	Determine the options .
1780	Determines the DD value of the emulator .
1781	Determine the emulator location .
1782	Un jar a jar file .
1783	Calculates the source mapping for the given source .
1784	Visit a dependency .
1785	Resolves the given artifact .
1786	Wait until the device is connected .
1787	Waits for the initial device list from the application .
1788	Deploys a device .
1789	Deploys the package .
1790	Unploys the package .
1791	Undeploy a device .
1792	Extracts the package name from a file .
1793	Extracts the package name from the device .
1794	Extract the instrumentation runner from a manifest file .
1795	Generate the R for the library .
1796	Runs the command .
1797	Copies the contents of the input stream to the given OutputStream .
1798	Copy the GDB server to the given destination directory
1799	Gets the Java executable file .
1800	Returns the path of the pro guard .
1801	Returns the path to the path of the device .
1802	Returns the path of the project .
1803	Returns the path of the main Dex classes .
1804	Gets the browser path for the browser .
1805	Gets the application jar .
1806	Returns the platform of the platform .
1807	Load the version of the SDK .
1808	Executes the installation .
1809	Copy the manifest .
1810	Extracts the dependency dependencies from all the dependencies .
1811	This method is used to extract the JAR .
1812	Extracts the AAR library from the given artifact .
1813	Checks if the list of dependency dependencies are found .
1814	Gets the packageCompare map for the given dependencies .
1815	This method is used to generate the RBase from the given resource generator .
1816	This method is used to generate the RAR .
1817	Generates the R file for the given artifact .
1818	Checks if the given artifact is present in the application .
1819	Returns true if the given artifact is present .
1820	This method is used to get the input files .
1821	Executes the execution .
1822	Check client secret file .
1823	Adds a jar to the classpath .
1824	Adds the classes to the classpath .
1825	Executes the execution .
1826	Gets the GAV .
1827	Collect the JVM arguments .
1828	Returns the jar file for the given file name .
1829	Resolve the tool chain .
1830	Returns the absolute path of this node .
1831	Read the manifest .
1832	Write the manifest .
1833	Export the properties .
1834	Performs the version code from the manifest .
1835	Extracts the architecture from an artifact .
1836	Returns the names of the files in the given directory .
1837	Encrypt a string .
1838	Decrypt a string .
1839	Read name .
1840	Converts a character to a digit .
1841	Moves the current position to the current position .
1842	Start listening .
1843	Stop listening .
1844	Send data to the server
1845	Add a form field .
1846	Adds a file part to the file .
1847	Create a bitmap drawable .
1848	PreLoad images .
1849	Removes the image task from the image task .
1850	Add an image task .
1851	Query the cache for the image .
1852	Recover work .
1853	Stop work .
1854	Destroy the work .
1855	Attaches an image to the container .
1856	Removes a key from the cache .
1857	Clear the disk cache .
1858	Make a table with the specified capacity .
1859	Returns the number of elements in the table .
1860	Write a bitmap .
1861	Get the input stream as a String .
1862	Sets a string value .
1863	Deletes the cache entry .
1864	Commit the cache .
1865	Adds a file to the request .
1866	Clear the memory cache .
1867	Tries to resume the journal .
1868	Process the journal file .
1869	Rebuilds the journal file .
1870	Removes all entries from the cache .
1871	Called when the back is pressed .
1872	This method is called when the application has been loaded .
1873	Creates an image set with the specified size .
1874	This method is called when the request is sync .
1875	Notifies the request finish .
1876	Gets the response .
1877	Set the load bitmap .
1878	Set the customized view .
1879	Download an image from a URL .
1880	Add an image view .
1881	Removes an image view from the list .
1882	On load .
1883	Called when the task is loaded .
1884	Join size info key .
1885	Join size tag .
1886	Open the disk cache .
1887	Flushes disk cache .
1888	Get the disk cache .
1889	Delete a directory .
1890	Get the external cache directory .
1891	Returns the number of available blocks .
1892	Notifies the given drawable .
1893	OnResume .
1894	Gets the last item .
1895	Hide the animation .
1896	Performs the alignment of a sheet with a view .
1897	Attaches a view to a view
1898	This method is used to morph a sheet .
1899	Hide the animation .
1900	Show a sheet .
1901	Setup the action bar .
1902	Setup the drawer layout .
1903	Setup the tabs .
1904	Setup Fab .
1905	Update Fab .
1906	Update the snackbar .
1907	Attaches a sheet into a sheet .
1908	Attaches a view to a sheet .
1909	Ensures that the current token is visible .
1910	Returns the list of suggestions for the given query token .
1911	Checks if the input string contains the same character .
1912	Checks if the input string contains a wordBreaking character .
1913	Checks if the input string contains a letter or digits .
1914	Returns the index of the index of the index of the given text .
1915	Returns the index of the index of the search index of the given text .
1916	Display text counter .
1917	Ensures that the text should be enabled .
1918	Update text count .
1919	Sets the factory that will be used to display the text of the user .
1920	Copy text .
1921	Copy the text .
1922	Copies the text of the given text .
1923	Update selection if required .
1924	On cursor changed .
1925	Deselect all the spans .
1926	Parses a duration string .
1927	Escape XML .
1928	Write the XML to a file .
1929	Creates a new image with the specified width and height .
1930	Creates a new instance of the given image .
1931	Returns a string representation of this box .
1932	Map the font .
1933	Sets the shape rendering .
1934	Sets the text rendering .
1935	Appends the element ID to the given StringBuilder .
1936	Get the SVG path data .
1937	Returns a string representation of a color .
1938	Returns a string representation of a color .
1939	Returns the stroke style .
1940	Returns a string representation of the fill style .
1941	Returns the style of the SVG font .
1942	Get the font metrics .
1943	Scales the transformation .
1944	Applies the transformation to this transformation .
1945	Sets the transformation .
1946	Sets the clip .
1947	This method is used to register a clip .
1948	Transforms a shape .
1949	Sets the rectangle of this rectangle .
1950	Sets the clip .
1951	Convert an image to a byte array .
1952	Draws an image .
1953	Draws a renderable image .
1954	Get the gradient element
1955	Gets the image path .
1956	Gets parts from a string list .
1957	Records a level .
1958	Records a duration of a stats .
1959	Attempts to track the timeout of the request .
1960	Check the client .
1961	Handle request .
1962	Creates the back end of the client .
1963	Handles a client error message .
1964	Handles the client response .
1965	Process the queue .
1966	Creates a new Lokate service discovery provider .
1967	Handles a method call .
1968	Send a method call .
1969	Creates a local proxy .
1970	Returns true if the method call before the given method call .
1971	Transform the given method call to the given method call .
1972	Stop the service .
1973	Start the call queue .
1974	Returns the service name for the given dns service .
1975	Load service endpoints by service name .
1976	Convert SrvRecord to endpoint definition .
1977	Checks if the request is valid .
1978	Handle HTTP request .
1979	Handles a method call .
1980	Factory method to create a client .
1981	Get dns client .
1982	This method is used to receive a queue .
1983	Gets the send queue .
1984	Convert promise to callback
1985	Convert promise to callback
1986	Create a callback
1987	Load a service pool
1988	Attempts to load the health services for the given service .
1989	Get dns client .
1990	Adds a task to the queue .
1991	This method is called when the thread is completed .
1992	Removes an AsyncFuture callback .
1993	Waits up to the given context .
1994	 monitor callback callbacks .
1995	This method is used to monitor the callbacks .
1996	Wraps a callback on the given operation .
1997	Build proxy service .
1998	Builds a proxy service .
1999	Handles a WebSocket call .
2000	Starts the server .
2001	Adds an event listener .
2002	Creates a dns service discovery .
2003	Converts a JSON string to an object .
2004	Parses a JSON object from a JSON array .
2005	Returns the JSON representation of the given object .
2006	Converts a JSON object to a Map .
2007	Converts the given values to a map .
2008	Checks if the handler has the given name .
2009	Sets the callback for the given type .
2010	Wrap a callback .
2011	Sets the callback for the given component class .
2012	Sets the callback for the given component class .
2013	Sets the callback for a collection .
2014	Sets the callback for the given key class .
2015	Sets the callback for the given class .
2016	Add a header .
2017	Checks if a service is registered .
2018	Ping the agent .
2019	Register a service .
2020	Unregister a service
2021	Unregister a check
2022	Performs a check .
2023	Sets the value of the given check id .
2024	Logs a warning .
2025	Stops the http server .
2026	Handles async callback .
2027	Send a message .
2028	Create a proxy .
2029	Creates a response queue listener .
2030	Receives a list of items from the queue .
2031	Creates a new send queue .
2032	Start listener .
2033	Builds the service queue .
2034	This method is used to check the health .
2035	Logs an error .
2036	Enables the configured logging context .
2037	Sets the ManagedService discovery .
2038	Gets the admin builder .
2039	Returns the context metadata .
2040	Adds an endpoint service with the specified service .
2041	Add an endpoint service with the specified alias .
2042	Add an endpoint service .
2043	Add an endpoint service .
2044	Gets the service endpoint server .
2045	Configures the interceptors .
2046	Destroy a session .
2047	Load services from dns .
2048	Deletes the given key .
2049	Handle request .
2050	Process messages .
2051	Sends an item to the event manager .
2052	Starts the queue .
2053	Gets the request .
2054	Remove an event connector .
2055	Send an event to the server .
2056	Flushes all registered events .
2057	Read config .
2058	Registers a handler for a client .
2059	Returns true if the request has the given method call .
2060	Extracts the request information and put it into the map .
2061	Extract headers .
2062	Handles REST call .
2063	Handle response .
2064	Adds a request to the request .
2065	Add an integer .
2066	Add an integer .
2067	Add array .
2068	Sets the value at the specified index .
2069	Reduce the given function with the given name .
2070	Called when method is sent .
2071	Notifies the given change notification .
2072	Returns the default serializers for the given kryo .
2073	Gets the parse from method .
2074	Verifies that the input buffer is valid .
2075	Parse a field name .
2076	Handles an error .
2077	Skip string .
2078	Match token .
2079	Decodes the given base64 variant into a byte array .
2080	Returns true if the given string is a identifier .
2081	Checks if the given char array is valid .
2082	Write a string to the output stream .
2083	Append a character to the writer .
2084	Append a character escape .
2085	Set the conversion properties .
2086	Convert a Pig script to a Pig script .
2087	Convert a schema to a StringBuilder .
2088	Opens the index reader for the given path .
2089	Gets the progress .
2090	Convert a message to a tuple .
2091	Convert a field to a tuple .
2092	Convert a field to a tuple .
2093	Converts a field descriptor to an object .
2094	Convert a message descriptor to a schema .
2095	Convert a field to a field .
2096	Convert a field to a single field .
2097	Convert a message to a Pig script .
2098	Convert a descriptor to a Pig script .
2099	Converts a field descriptor to a Pig script .
2100	Returns a string representation of a single field .
2101	Returns an instance of the given type .
2102	Extracts the enum map from the given enum class .
2103	Create a new path filter .
2104	Returns true if the given class is a dynamic proto message .
2105	Gets a type reference .
2106	Gets the progress .
2107	Serialize the message .
2108	Set the input format class .
2109	Sets the configuration for the given configuration .
2110	Write a list as a JSON string .
2111	Read a string from a configuration file .
2112	Write a list of strings to a configuration .
2113	Read string from configuration .
2114	Verifies that the given class is a thrift class .
2115	Gets the field value of the given object .
2116	Gets field value .
2117	Get field value type .
2118	Write field no tag .
2119	Convert a tuple to a message .
2120	Convert a field to a single field .
2121	Adds a field .
2122	Convert a type to a proto type .
2123	Convert a tuple to a thrift object .
2124	Convert the given field to a thrift value .
2125	Creates an instance of the given class .
2126	Sets the input format delegate to the given configuration .
2127	Finds all the splits in the given configuration .
2128	Sets the input paths .
2129	Gets the input paths .
2130	Adds the given input split to this stream .
2131	Get the locations of the input split .
2132	Evaluate the delimiter .
2133	Create a resource schema .
2134	Reads the contents of an InputStream to an OutputStream .
2135	Returns the next tuple from the input stream .
2136	Create the standard base64 .
2137	Creates a new instance of the given class .
2138	Reads the next field from the stream .
2139	Reads the next proto data .
2140	Reads the next proto bytes from the stream .
2141	Create a new task attempt context .
2142	Create a new MapContext instance .
2143	Creates a new instance of the given type .
2144	Create a new instance .
2145	Create an instance of this class .
2146	Gets the builder for the given class .
2147	Map a field to an entry builder .
2148	Maps a field to a descriptor .
2149	Resolves a message type .
2150	Convert an object to a message .
2151	Convert the given object to an object .
2152	Build map message .
2153	Map proto type .
2154	Iterates over the given path .
2155	Collects paths from a path .
2156	Get the size of a directory .
2157	Set the column number .
2158	Update the job configuration for the local settings .
2159	Parse a method from a class .
2160	Parses a message .
2161	Parses a message .
2162	Write the given tuple to the writer .
2163	Set class configuration .
2164	Sets the class name .
2165	Checks that the specified size is valid .
2166	Sets the pattern .
2167	Normalizes a word .
2168	Returns a string representation of an integer .
2169	Creates a new instance of the given type .
2170	Constructs a new instance of the given field definition file .
2171	Set the output format .
2172	Returns true if the word matches the given word .
2173	Replaces the given word with the given word .
2174	Returns the plurals of the given word .
2175	Returns true if the given word is unaffected .
2176	Get the output stream for this job .
2177	Verifies that the given object is writable .
2178	Creates a new instance of the given type .
2179	Returns the class of the given class .
2180	Gets the thrift type reference .
2181	Find all the columns in the given configuration .
2182	Sets the configuration of a class .
2183	Executes the HTTP request .
2184	Add authorization .
2185	Validates the given response .
2186	Parses a comment .
2187	Parses the given JSON text .
2188	Formats a list of comma separated list .
2189	Wait for the interval to wait if it is available .
2190	Add basic authentication .
2191	Refresh the token .
2192	Print comment tree .
2193	Convert an object to an Integer .
2194	Convert an object to a double .
2195	Convert an object to a boolean .
2196	Convert an object to a Long .
2197	Parse comment tree .
2198	Parse a JSON text .
2199	Returns the signature of the given endpoint .
2200	Sorts the given map .
2201	Get O embed information .
2202	Creates an instance of an instance of an instance .
2203	Creates an object from a response .
2204	Checks that two objects are not null .
2205	Checks that the given string is empty .
2206	Checks if the URL is valid .
2207	Checks if an OAuth callback is valid .
2208	Returns an instance of a signed header instance .
2209	Configure connection settings .
2210	Returns the content of this body .
2211	Prints a JSON response to a JSON response .
2212	Sets the callback for the device .
2213	Sets the client ID .
2214	Sets the client secret .
2215	Sets the given subscription type .
2216	Sets the verification token .
2217	Sets the aspect .
2218	Sets the geoagram subscription .
2219	Sets the longitude for the device .
2220	Sets the radius .
2221	Delete a subscription .
2222	Delete all subscriptions .
2223	Gets the subscription list .
2224	Returns a string representation of the given map .
2225	Encodes the given string .
2226	Append the parameters to the URL .
2227	Concatenate the parameters into a string .
2228	Convert a query string to a map .
2229	Throws an exception .
2230	Add a trade volume .
2231	Increments the length of the given index .
2232	Calculates the maximum drawdown .
2233	Returns the list of start indexes for the given series .
2234	Calculates the regression line .
2235	Create an order .
2236	Build the chart series .
2237	Generate a random decimal .
2238	Generate a random tick .
2239	This method is used to increment the permissions .
2240	Calculates the Sar at the specified index .
2241	Calculates the sum of the values .
2242	Fills the end of the end .
2243	Load logback configuration .
2244	Creates an Oregorian dataset from a series .
2245	Create additional dataset .
2246	Adds the absolute flow axis .
2247	Display a chart
2248	Removes all entries that have been removed .
2249	Builds empty tick .
2250	Destroy the group map .
2251	Sets the state of the observable manager .
2252	Logs a watch event .
2253	Starts the given executor .
2254	Register a directory .
2255	Gets the class loader .
2256	Adds all plugin dependencies to the classpath .
2257	Adds the list of project dependencies to the classpath .
2258	Resolves the dependencies of the given artifact .
2259	Find the executable artifact for the given plugin .
2260	Handles the working directory .
2261	Gets the calendar range start .
2262	Returns the bounds of this feed .
2263	Checks if the given distance and time is valid .
2264	Load the given table .
2265	Returns the size of the table .
2266	Sets the value of the field at the given index .
2267	Returns a copy of this snapshot .
2268	Checks if a table exists .
2269	Adds the fields to the table .
2270	Register a snapshot .
2271	Returns the id of the route .
2272	Execute remaining records .
2273	Clean up the zip file .
2274	Export a table .
2275	Register an error .
2276	Register an error .
2277	Export a feed .
2278	Load the given file with the given data .
2279	Validates a feed .
2280	Deletes a feed .
2281	Creates a DataSource for the given URL and password .
2282	Add an error info .
2283	Creates a new instance of GFSError for a single line .
2284	Creates a new instance of GFSError for an entity .
2285	Creates a new instance of a new GFSError instance .
2286	Gets the statistics for the given pattern .
2287	Returns the average speed for the given time .
2288	Returns the start time for the given queries .
2289	Returns the end time for the given tiles .
2290	Returns the distance between the given pattern .
2291	Get average stop spacing .
2292	Copy the entities to the database .
2293	Creates a validation field result .
2294	Returns the number of errors in the database .
2295	Commit the database .
2296	Validate and convert the given value to a valid field .
2297	Compares this object to another .
2298	Returns the distance between the given LineString .
2299	Create a field with the given name and table .
2300	Create a group field .
2301	Returns an integer array of the given array .
2302	Returns a list of trips for a given stop .
2303	Gets the average headway for a given stop .
2304	Returns a map of routes for the given stop .
2305	Returns the headway for the given route .
2306	Get a JSON object from a JSON string .
2307	Updates the value of the given JSON object .
2308	Update stop times for a pattern stop .
2309	Verifies that the references in the given table exists .
2310	Verifies that the given stop IDs are not identical .
2311	Insert empty stop times .
2312	Deletes the given entity .
2313	Handles a statement execution .
2314	Get the number of rows for a given table
2315	Returns the set of references to the given table .
2316	Get the value for the given id .
2317	Put a feed file .
2318	Put a feed file .
2319	Returns true if the given date is active .
2320	Initializes the schema .
2321	Gets all the editor fields .
2322	Gets the required fields .
2323	Gets the fields of this field .
2324	Create SQL table .
2325	Generate insert .
2326	Converts a list of fields to a comma separated string .
2327	Generate update statement .
2328	Generate select SQL .
2329	Select all fields from the table .
2330	Generate delete SQL .
2331	Create a SQL table from a table .
2332	Normalizes a table with the given name .
2333	Gets the index of the key field .
2334	Ensure that the given namespace is valid .
2335	Returns the index of the field with the given name .
2336	Returns a set of all the values in this map .
2337	Loads a GFS feed from a file .
2338	Finds the patterns .
2339	Returns the distance between the given route .
2340	Returns the distance between the given route .
2341	Gets the stop times for a given stop .
2342	Gets the services for a given date .
2343	Returns the zone ID for the given stop .
2344	Creates a map of pattern objects .
2345	This method is used to set the current alarm timer .
2346	Enables the receiver .
2347	Reports a new idle state .
2348	Adds a job to the disk .
2349	Checks if the given job contains the given job .
2350	Removes a job .
2351	Adjusts the given job to be scheduled .
2352	Clear the array .
2353	On start job .
2354	Called when the stop job is received .
2355	Checks if the given job is stopped .
2356	Puts a string into the bundle .
2357	Puts a string array into the bundle .
2358	Returns the string value for the given key .
2359	Put the given key into the bundle .
2360	Write the action to the output .
2361	Returns the height of this view .
2362	Print a string .
2363	Check properties .
2364	Validate properties .
2365	Prepares the XML for the given descriptor .
2366	Sets a property .
2367	Convert a string to a string .
2368	Get the path for the given servlet URL .
2369	Verify that the request is valid .
2370	Verify parameters .
2371	Validates a request .
2372	Launch a profile .
2373	Build a tool consumer profile .
2374	Helper method to validate services .
2375	Helper method to validate the capabilities .
2376	Adds a custom to the application .
2377	This method is used to convert the view to a list .
2378	On list scroll .
2379	Converts the given URL to a safe URL .
2380	Returns a safe style representation of the given style .
2381	Convert a safe script to a proto .
2382	Returns a proto representation of the given style .
2383	Convert the given resource URL to a proto object .
2384	Convert a safe HTML representation to a safe HTML representation .
2385	Wraps the specified angle .
2386	Round a number to the specified number .
2387	Returns the lerp value of the specified vector .
2388	Computes the slerp of a quaternion .
2389	Returns the bi - Lerp value for the given x and x and y and y .
2390	Returns the lerp of the given coordinates .
2391	Translates two colors .
2392	Clones the given value .
2393	Returns the inverse of a double .
2394	Convert an object to a Float .
2395	Convert an object to a byte .
2396	Convert an object to a short .
2397	Convert an object to an Integer .
2398	Convert an object to a double .
2399	Convert an object to a long .
2400	Convert an object to a boolean .
2401	Returns the mean of the given values .
2402	Returns the mod of a double .
2403	Multiply the given integer .
2404	Multiply this quaternion .
2405	Returns a copy of this quaternion .
2406	Rotate a vector .
2407	Returns the length of this vector .
2408	Normalize this quaternion .
2409	Creates a quaterniond from the specified coordinates .
2410	Creates a quaterniond from the specified coordinates .
2411	Creates a quaterniond quaternion to a quaternion .
2412	Creates a quaterniond quaternion for the specified axis .
2413	Creates a quaterniond from an angle axis .
2414	Creates a quaterniond from a angle axis .
2415	Gets the minimum axis .
2416	Multiply the specified coordinates .
2417	Create a complex value .
2418	Rotate a vector .
2419	Normalize the complex .
2420	Converts this quaternion to a quaternion .
2421	Creates a complexf from the given coordinates .
2422	Creates a complexf from the specified angle .
2423	Returns the maximum axis value .
2424	Hashes a double value .
2425	Adds this quaternion to this quaternion .
2426	Multiply this quaternion .
2427	Returns a copy of this quaternion .
2428	Gets the axis s axis .
2429	Get the axes of the axis .
2430	Creates a quaternionf from the specified coordinates .
2431	Creates a quaternionf from the specified coordinates .
2432	Creates a quaternion to a quaternion .
2433	Creates a quaternion to another axis .
2434	Creates a quaternionf from an angle axis .
2435	Creates a quaternionf from a angle axis .
2436	Multiply this vector with the specified coordinates .
2437	Create a complex value .
2438	Rotate a vector .
2439	Converts this quaternion to a quaternion .
2440	Creates a complexd object from the given coordinates .
2441	Creates a complexd object from the specified angle .
2442	Move child view .
2443	Move child view .
2444	Sets the span for the given element .
2445	Reduce the given type solver .
2446	Transform type parameters .
2447	Creates a symbol reference .
2448	Gets a symbol reference .
2449	Checks if the given type is proper type .
2450	Returns the most bound of the given types .
2451	Returns a pair of correlation target type for the given function .
2452	Returns a reference to the given type .
2453	Convert a set of types to a generic type .
2454	Returns the type of the given type .
2455	Solve the given object .
2456	Computes the symbol for the given method call expression .
2457	Find the type of the given map .
2458	Returns the name of the given class .
2459	Returns the type of the given node .
2460	Returns true if the given statement contains the given statement .
2461	Returns true if the given statement can complete .
2462	Finds a type in a type .
2463	Finds a method from a type declaration .
2464	Creates a new value from the given declaration .
2465	Returns true if the given method is an invocation of the given method .
2466	Returns true if the given method is a generic method .
2467	Checks if the given expression contains a assignment context .
2468	Returns the prediction for the given feature .
2469	Load the model .
2470	Gets the leaf index for the given node .
2471	Returns the leaf value of the given node .
2472	Returns a JSON representation of this object .
2473	Flattens this object into a JSON string .
2474	Returns a map containing all elements in the source .
2475	Concatenates a list of lists .
2476	Creates a new event stream that is not invalid .
2477	Creates a new event stream that will be notified of the given observable .
2478	Gets the animation frames .
2479	Merge a set of events into a new event stream .
2480	Wrap an observable list .
2481	Executes the given supplier on the given supplier .
2482	Obtains a subscription for the given observer .
2483	Returns a copy of this metadata .
2484	Removes a prefix from a string .
2485	Configure the digester .
2486	Process a class mapping annotations .
2487	Joins the given array of strings .
2488	Initialize the device scan .
2489	Returns true if the device is a device .
2490	Checks if the browser is webkit .
2491	Returns true if the operating device is operating .
2492	Returns true if the device is black .
2493	Returns true if the browser is in the browser .
2494	Returns true if the current device is a web application .
2495	Returns true if the device is installed .
2496	Returns true if the device is installed .
2497	Returns true if the device is operating .
2498	Checks if the device is mobile .
2499	Returns true if this node is a tier IPhone .
2500	Returns true if this node is other other than one .
2501	Returns true if the given value is a regular expression .
2502	Checks if the value contains the given value .
2503	Build the script .
2504	Create a new el method .
2505	Checks if this field contains a descriptor .
2506	Copy headers from the servlet response .
2507	Encodes the given CharSequence .
2508	Converts the URL to a URI .
2509	Build query string .
2510	Gets the value of a parameter .
2511	Gets the values of the given parameter .
2512	Adds the parameters .
2513	Obtains the id of the URL .
2514	Gets the URL pattern parser .
2515	Returns a list of view validators for the given path parameter .
2516	Creates a new Query StringBuilder with the given parameters .
2517	Extract the query string from the URL .
2518	Adds a parameter to the map .
2519	Gets the dispatcher type providers .
2520	Returns the number of greater than the given context .
2521	Sets the value of the given parameter .
2522	Builds the standard outcome .
2523	Handles a class entry .
2524	Returns the literal representation of the query .
2525	Sets the excluded parameters .
2526	Builds the URL for the given URL mapping .
2527	Send an error message .
2528	Visit a class .
2529	Append the context path to the URL .
2530	Removes the path from the context .
2531	Translates the given language .
2532	Build the view id .
2533	This method is used to process a Detty view .
2534	Returns the type of the given class .
2535	Creates an annotation proxy .
2536	Get all fields of a field .
2537	Gets all fields of the given class .
2538	Put a value into the map .
2539	Removes a key from the map .
2540	Load the agent .
2541	Checks if the agent is available .
2542	Copy the contents of a file to a file .
2543	Checks if the given file is equal to the given file .
2544	Add a directory to a directory .
2545	Initialize the zip output stream .
2546	Adds the given archive entry to the specified archive .
2547	Gets the default manifest .
2548	Adds the configured section .
2549	Writes the contents of this writer to the given writer .
2550	Gets the warnings .
2551	Returns a new section with the specified name .
2552	Copies the given entry to the specified directory .
2553	Adds a new manifest .
2554	Adds a file to the archive .
2555	Clean up all the entries in the file .
2556	Resets the manifest file .
2557	Writes the list of files to the given writer .
2558	Populates the files and directories .
2559	Decompress a file .
2560	Compress the destination file .
2561	Merges the contents of the given file .
2562	Sets the deployment descriptor .
2563	Adds a archive to the archive .
2564	Adds the specified files to the directory .
2565	Compress the source file .
2566	Add resources to the zip stream .
2567	Add parent directories to the given directory .
2568	Create a zip file .
2569	Creates an empty zip file .
2570	Resets the destination file .
2571	Compress a file .
2572	Compress file .
2573	Sets the maximum header size .
2574	Decodes the input stream .
2575	Returns the index of the given name .
2576	Returns the index of the field with the given name .
2577	Creates a map with the given name .
2578	Returns the length of the given byte array .
2579	Returns the length of the header .
2580	Adds the given header to this list .
2581	Sets the capacity of this header .
2582	Encode a header .
2583	Sets the maximum header size .
2584	Encode an integer .
2585	Encode string .
2586	Encode literal .
2587	Ensure that the header size is zero .
2588	Gets the header field at the specified index .
2589	Returns the entry with the given name .
2590	Returns the index of the field with the given name .
2591	Adds the given value to the table .
2592	Hashes a name .
2593	Decodes a byte array .
2594	Sets the default script names .
2595	Assert that the given description is equal to the given description .
2596	Assert that the given description is not equal .
2597	Assert that the given description is greater than the given description .
2598	Assert that the given description is greater than the given description .
2599	Asserts that the given description is equal .
2600	Assert that the given description is not equal .
2601	Asserts that two characters are equal .
2602	Assert that the given description is not greater than other .
2603	Assert that the given description is greater than two characters .
2604	Assert that the given description is not greater than other .
2605	Assert that the given description is lower case .
2606	Assert that the given description is upper case .
2607	Asserts that the given description has the expected size .
2608	Asserts that the given description contains the given description .
2609	Assert that the given key contains the given key .
2610	Assert that the given key contains the given key .
2611	Asserts that the given description contains the given value .
2612	Assert that the given value contains the given value .
2613	Assert that the given description contains duplicate values .
2614	Asserts that two numbers are equal .
2615	Assert that the given description is less than the given description .
2616	Assert that the given description is not equal .
2617	Assert that the given description is positive .
2618	Assert that the given description is negative .
2619	Asserts that this float is equal to the given offset .
2620	Asserts that the element contains the given value .
2621	Asserts that the given description is equal to the given value .
2622	Assert that the given description is greater than the given value .
2623	Asserts that the given description is greater than the given value .
2624	Assert that the given description is not greater than the given description .
2625	Asserts that the given description contains the given description .
2626	Assert that the given description contains the given sequence .
2627	Assert that the given description is equal .
2628	Asserts that two description are equal .
2629	Asserts that the given description is expected .
2630	Assert that the given description is not equal .
2631	Assert that a description is not present in the array .
2632	Asserts that the given description is sorted .
2633	Returns a matcher that matches the given matcher .
2634	Matches an empty string .
2635	Returns the first field name of the given field .
2636	Checks if field exists .
2637	Returns a list of all the annotations of the given context .
2638	Expect this method to be called from a method .
2639	Reduce the package name .
2640	Returns the boolean value of the given property .
2641	Filter the callback .
2642	Get the annotations as a string array .
2643	Sends a callback to the resource .
2644	Process the response .
2645	Handles a password .
2646	Handles the request .
2647	Processes the given ticket .
2648	Collects the attributes of a subject .
2649	Handles the given ticket .
2650	This method returns a response for a user .
2651	Computes the login id of the response .
2652	Handles the request .
2653	Handles the request .
2654	Gets the owner credentials .
2655	Gets the credentials .
2656	Get the JAX - RS client .
2657	This method is used to create a client .
2658	Set the connection timeout value .
2659	Sets the read timeout value .
2660	Executes an API call .
2661	Handles the request .
2662	Process the response .
2663	Process the user information .
2664	Handles the given authentication request .
2665	Process the response .
2666	This method is called when a user has been logged in .
2667	Process the response .
2668	Extracts the certificates from the request .
2669	Updates the changes of the given repository .
2670	Generate a X509 certificate .
2671	Gets the name of this node .
2672	Generate relationship file .
2673	Commits the commit .
2674	Add a snapshot .
2675	Gets the name of the remote repository .
2676	Gets the next name .
2677	Send a message .
2678	Sends a message to the specified topic .
2679	Send a message .
2680	Get cache names .
2681	Serializes the given file to a zip file .
2682	Reads a zip input stream and returns the number of bytes in the stream .
2683	Gets the target key .
2684	Checks if the given path is valid .
2685	Removes all files from the cache .
2686	Parse the repository name .
2687	Check if the store exists .
2688	This method is used to load a file from disk and disk .
2689	Load a file from disk .
2690	Creates a new store with the given file input stream .
2691	Create http client context .
2692	Create http client .
2693	This method is used to get the repair .
2694	Handles group members changed .
2695	Set the system properties .
2696	Get file ranges .
2697	Read messages from an input stream .
2698	Create a table with the given options .
2699	Delete the table .
2700	Deletes the specified table .
2701	Upload permissions .
2702	Download permissions .
2703	Apply base values .
2704	Gets the extended error information .
2705	Create an access condition for the given sequence number .
2706	Generates an access condition for the given sequence number .
2707	Create an access condition for the given sequence number .
2708	Applies the given request to the request .
2709	Apply source condition to request .
2710	Apply append condition to request .
2711	Applies the lease condition to the request .
2712	Applies the sequence condition to the request .
2713	Verifies that this object contains the given response .
2714	Returns a string representation of the given filters .
2715	Sets the storage URI .
2716	Write the access identifiers to a string .
2717	Generate message body .
2718	Adds the canonicalizedized headers .
2719	Append a canonicalized element .
2720	Returns the canonical representation of the request .
2721	Returns the canonical representation of a table request .
2722	Computes the SHA256 value for the given value .
2723	Sign a table request .
2724	Gets the first message of the given messages .
2725	Adds a message to the queue .
2726	Clears the queue .
2727	Create a new operation .
2728	Creates a new queue with the specified options .
2729	Deletes this queue .
2730	Deletes the specified queue .
2731	Delete a message .
2732	Download attributes .
2733	Checks if the queue exists .
2734	Peek messages from the queue .
2735	Returns a list of messages for the specified number of messages .
2736	Returns the number of messages in the queue .
2737	Retrieve a message from the queue .
2738	Retrieve messages from the queue .
2739	Retrieve messages .
2740	Updates a message .
2741	Update message .
2742	Upload permissions .
2743	Download permissions .
2744	Returns the original address of this queue .
2745	Get the hour metrics table .
2746	Get the minute metrics table .
2747	Get the message content as a byte array .
2748	Get the message content as a string .
2749	Get a list of files in a directory .
2750	Applies the continuation token to the builder .
2751	Perform a merge operation .
2752	Creates a connection to the given URI .
2753	Create a connection to the database .
2754	Sets the ACL .
2755	Serialize service properties to a byte array .
2756	Write policy policy .
2757	Write CORS properties .
2758	Write metrics properties .
2759	Write logging properties .
2760	Abort a copy .
2761	Adds a snapshot .
2762	Copy the source to the given URI .
2763	Create a new request to the given path .
2764	Delete a share .
2765	Get ACL .
2766	Create a new file .
2767	Get file properties .
2768	Returns a connection to a file .
2769	Gets the share properties .
2770	Gets the share stats .
2771	Create a new URI builder .
2772	Get all the properties of a file .
2773	Returns a connection to the given URI .
2774	Sets the share metadata .
2775	Set directory metadata .
2776	Create a directory .
2777	Delete a directory .
2778	Get directory properties .
2779	List files and directories .
2780	Put file .
2781	Puts a range .
2782	Resize file properties .
2783	Set metadata .
2784	Sets the metadata of a file .
2785	Perform a snapshot of the share operation .
2786	Set file properties .
2787	Close the stream .
2788	Dispatch a read .
2789	Reads data from the stream .
2790	Read byte array .
2791	Resets the file .
2792	Skips the contents of this file .
2793	Runs the blob get started sample .
2794	Run queue get started sample .
2795	Runs the table get started sample .
2796	Run table payload format .
2797	Print text .
2798	Print an exception .
2799	Print information about a sample .
2800	Print information about a sample .
2801	Returns the content type of the request .
2802	Returns the last request result .
2803	Checks if a list of log type is valid
2804	Updates the iterator .
2805	Start copy .
2806	Start copy .
2807	Start copy .
2808	Start copy .
2809	Start copy .
2810	Start copy .
2811	Create a new operation .
2812	Create a new file .
2813	Delete empty file .
2814	Download text .
2815	Download file ranges .
2816	Open an existing file .
2817	Open an existing file .
2818	Open output stream .
2819	Upload a file .
2820	Upload a file .
2821	Upload text .
2822	Upload text .
2823	Upload a range of bytes to the given stream .
2824	Upload file range .
2825	Put file range .
2826	Resize file .
2827	Upload an input stream to the given stream .
2828	Upload an input stream to the given stream .
2829	Gets the parent name of a resource .
2830	Gets the share .
2831	Appends a single URI to a single URI .
2832	Get blob name from URI .
2833	Gets the canonical path from the credentials .
2834	Gets the name of the container .
2835	Get file name from URI .
2836	Gets the share name of a resource .
2837	Gets the table name from URI .
2838	Get resource name .
2839	Returns the container URI of the given blob address .
2840	Returns the share URI of the given file address .
2841	Parse a query string .
2842	Generate the signature for a blob and a file .
2843	Generates the signature for the given queue .
2844	Generates the signature for the given access table .
2845	Create a directory .
2846	Create or create the file .
2847	Deletes the given access condition .
2848	Checks if the given operation exists .
2849	List files segments .
2850	Gets the share .
2851	Delete messages from the queue .
2852	Delete a message .
2853	Download attributes .
2854	Create a HTTP request to a queue .
2855	Returns a connection to the queue .
2856	Retrieve messages from the queue .
2857	Create a new HTTP message .
2858	Sets the ACL .
2859	Get ACL .
2860	Splits a string into a list of strings .
2861	Splits a string into an enum set .
2862	Updates the key .
2863	Gets the HMAC - SHA256 .
2864	Validate IP address .
2865	Decodes a string .
2866	Encodes a byte array .
2867	Checks if the given string is a base64 string .
2868	Validates the container name .
2869	Validates a blob name .
2870	Validates file name .
2871	Validate table name .
2872	Returns a list of tracks that have the specified prefix .
2873	Returns a list of tracks for the specified project .
2874	Returns a list of share segments .
2875	Returns a list of photos for the given prefix .
2876	Returns an iterable containing all of the entries in the storage .
2877	Set whether the entity cache is disabled .
2878	Gets the date .
2879	Gets metadata .
2880	Checks if a request is encrypted .
2881	Gets the extended error information .
2882	Parses the error information .
2883	Parses a JSON exception .
2884	Get access identifiers from an input stream .
2885	Get copy state .
2886	Gets the file share attributes .
2887	Gets the directory attributes .
2888	Get file attributes .
2889	Returns the HTTP URI for the given operation type .
2890	Fires an event to all registered listeners .
2891	Fires a send request .
2892	Fires a response received event .
2893	Fires an error received response handler .
2894	Fires a request completed event .
2895	Fires a retry event .
2896	Asserts that the given continuation token is valid .
2897	Asserts that the given value is not in bounds .
2898	Assert that a value is greater than the given value .
2899	Validates the maximum execution timeout .
2900	Returns the value of the remaining timeout .
2901	Determines whether the given URI is a path style .
2902	Checks if the URI is a host dns name .
2903	Formats the response .
2904	Generates a new snapshot of the given exception .
2905	Gets the standard header value .
2906	Parses a string into a date .
2907	Parses the given string into a Date object .
2908	Returns a string representation of the given URI .
2909	Log response response .
2910	Log response .
2911	Trims the end of a string .
2912	Trims the end of a string .
2913	Parses a date string .
2914	Returns the request location mode .
2915	Populate the queue options .
2916	Read a string .
2917	Read quoted string .
2918	Reads a boolean .
2919	Reads a date .
2920	Reads a double .
2921	Reads a UUID .
2922	Read an integer .
2923	Reads a long .
2924	Read URI .
2925	Reads a delimiter .
2926	Try to read the given delimiter .
2927	Reads a field .
2928	Creates a new retry policy .
2929	Returns true if there are more results .
2930	Set the class type .
2931	Sets the resolver .
2932	Write mime boundary .
2933	Write mime boundary .
2934	Write mime type .
2935	Adds a single key - value pair to the batch .
2936	Adds a URI to the URI .
2937	Adds an optional header .
2938	Creates a connection to the given URI .
2939	Create a connection to the given URI .
2940	Get service properties .
2941	Gets the user agent .
2942	Sets the metadata .
2943	Set service properties .
2944	Close the stream .
2945	Commits the file .
2946	Dispatch a write to a file .
2947	Flush all pending tasks to the buffer .
2948	Waits for a task to complete .
2949	Write byte array .
2950	Writes the given stream to the given stream .
2951	Writes data to the output stream .
2952	Gets the DNS name .
2953	Try to configure the device store .
2954	Try to configure the endpoint .
2955	Create a CloudAnalyticsClient .
2956	Creates a Cloud blob client .
2957	Creates a CloudFileClient .
2958	Creates a Cloud queue client .
2959	Creates a Cloud table client .
2960	Generates the Authorization signature for the given policy .
2961	Generate request identity .
2962	Generate request identity with table name .
2963	Initialize the request result .
2964	Resizes an exception .
2965	Process response .
2966	Parse error details .
2967	Deletes the given entity .
2968	Inserts the given entity .
2969	Inserts an entity into the table .
2970	Inserts an entity into the table .
2971	Merge the given entity .
2972	Removes an operation at the given index .
2973	Removes all entities from this entity .
2974	Replaces the given entity with the given entity .
2975	Checks if the given operation has a single query .
2976	Locks the partition key .
2977	Create a snapshot .
2978	Deletes the given directory if it exists .
2979	Download permissions .
2980	Generates the public signature for the given policy .
2981	Upload permissions to the given directory .
2982	Upload permissions .
2983	Gets the qualified URI .
2984	Add a new entity to the table .
2985	Add a batch to the table .
2986	Performs a basic query .
2987	Inserts the entity to the table service .
2988	Deletes the given entity .
2989	Add all the tables to the list .
2990	Generate table query .
2991	Executes the given table .
2992	Generate iterator for the given query .
2993	Populate the version1 log .
2994	Get a list of queues from an input stream .
2995	Translate an exception from an exception .
2996	List the queues .
2997	List the queues for the given prefix .
2998	List the queues .
2999	Returns a list of all the queues in this queue .
3000	List the queue segmented .
3001	Adds the configured XML catalog .
3002	Returns the unique ID of the given ID .
3003	Sets the phase of this resource .
3004	Set the error handler .
3005	Set the variable resolver .
3006	Set the function resolver .
3007	Set the entity resolver .
3008	Get the bound schema .
3009	Validates the given error .
3010	Applies the given XML node to the given XML node .
3011	Resolves a rule content .
3012	Converts the given schema to a schema .
3013	Convert a schema to a pre - processed schema .
3014	This method is used to create a pre - processed schema .
3015	Read a schema from a resource .
3016	Gets the query binding .
3017	Create a pre - processed schema .
3018	Write a file to the output stream .
3019	Write the given IPS element to the output stream .
3020	Convert an IPS element to a writer .
3021	Applies the Schematron to the given resource .
3022	Applies the given node to the given node .
3023	Remove the given variable .
3024	Removes all values from the map .
3025	Get all failed elements of the given output .
3026	Returns a list of all failed errors in the given output .
3027	Get all failed report .
3028	Returns a list of all failed reports that are successful .
3029	Get a list of all failed exceptions .
3030	Sets the error level of the given object .
3031	Gets the query binding for the given name .
3032	Get the query binding for the given name .
3033	Load the XQuery .
3034	Format a message .
3035	Format the given format .
3036	Checks if the given DOM node is valid .
3037	Checks if the given node is valid .
3038	Checks if the given resource is valid .
3039	Checks if the given source is valid .
3040	Create an XSLT provider .
3041	This method is used to create an XSLT provider .
3042	Returns the string representation of the result of the given node .
3043	Returns the location of a given namespace .
3044	Logs a warning .
3045	Read active from XML .
3046	This method is used to read aAssertReport from XML .
3047	Read a diagnostic from XML .
3048	This method is used to read the content of an XML element .
3049	Read a directory from XML .
3050	Read an XML document from an XML document .
3051	This method is used to read the content of a SARL element .
3052	Reads the contents of an include from the XML .
3053	Read a PSLet from the XML .
3054	Read an XML name from the given XML element .
3055	Read a Schematron element from an XML document .
3056	Read PSP from XML .
3057	Read a parameter from the XML .
3058	Read pattern from XML .
3059	Read a phase from XML .
3060	Read a rule from XML .
3061	Read schema from XML .
3062	Read a span from XML .
3063	Read a title from the XML .
3064	Reads the contents of the given XML element .
3065	Create a new namespace mapping .
3066	Applies a regular expression .
3067	Marks the request header as authorized .
3068	Checks if the request header is authorized .
3069	Populates a request header .
3070	Get a deferred action .
3071	Performs the given request .
3072	Checks if the given action is left in the chain .
3073	Get role names .
3074	Checks if a role has a role .
3075	Checks if a subject is present .
3076	Gets the list of roles .
3077	Returns a list of the given permissions .
3078	Get all of the groups of a group .
3079	Returns true if a list of roles are bound to the given content .
3080	This method is used to ensure that the input buffer is reached .
3081	Wraps the input buffer at the specified index .
3082	Sets the value of the given range .
3083	Encodes the given encoder using the given encoder .
3084	Encodes the given string into the given Writer .
3085	Map a encoder .
3086	Returns the encoder for the given context name .
3087	Appends the given array of characters to the given array .
3088	Encodes the given string .
3089	Flushes the buffer to the writer .
3090	Flush the left over of the given buffer .
3091	Obtains a sensor from the device .
3092	Gets the text value of a property .
3093	Executes the given query .
3094	Builds a URL from a URL .
3095	Returns the status of the given URL and version .
3096	Fetches the Sonar status from the URL .
3097	Parses the response to a JSON object .
3098	Returns the list of artifacts associated with this repository .
3099	Returns the list of files for the given report .
3100	Computes the identifier for the given transfer .
3101	Computes the generic identifier for a specific URL .
3102	Validates the given artifact .
3103	Returns true if the build task has a dependency on the build .
3104	Returns true if the given build task has a local configuration .
3105	Parses a JSON config .
3106	This method is called when the process is completed .
3107	Called when the build set is updated .
3108	Gets the build task .
3109	Process the repository .
3110	Merge the given graph into the target graph .
3111	Read a file as a string .
3112	Read the input stream as a string .
3113	Start release .
3114	Removes all the tasks from the current session .
3115	Gets the task with the given build id .
3116	Collects the list .
3117	Cleans up the expired temporary builds .
3118	Setup the build repository .
3119	This method is called when the client is created .
3120	This method is called when the client is received .
3121	Creates an artifact from an artifact .
3122	Set the ssl required flag .
3123	Delete a temporary build .
3124	Delete a temporary build record .
3125	Creates a build set task .
3126	Check the build set task .
3127	Get the environment driver for the given system image type .
3128	Checks if the build configuration is valid .
3129	Load the build configurations from the build configuration .
3130	Store a build result .
3131	Initialize build record builder .
3132	Checks if the build configuration is in the build configuration .
3133	Returns true if the given URL is valid .
3134	Save the artifacts .
3135	Save the build config set record .
3136	Gets the build configuration .
3137	Returns true if this build has an implicit dependency .
3138	Returns true if the current build has the same dependency .
3139	Adds a listener to the given event type .
3140	Get extended process parameters .
3141	Collects the configuration of the given build configuration .
3142	Create a build set task .
3143	Create a build set task .
3144	Fills the build .
3145	Get the build artifacts for a build record .
3146	Adds the end of the given string .
3147	Deserializes an integer string .
3148	Serialize an integer array .
3149	Adds a task to the queue .
3150	Adds a task to the queue .
3151	Executes new ready tasks .
3152	Gets the task associated with this build configuration .
3153	Checks if the given target repository is trusted .
3154	Add a build record .
3155	Removes a build record .
3156	Delete a temporary build record .
3157	Returns all the dependencies .
3158	Adds a dependency .
3159	Removes a dependency .
3160	Gets the clone name of the given context .
3161	Returns the configuration for the given configuration .
3162	Instantiates the given class .
3163	Register an embedded server .
3164	Unregister embedded server .
3165	Puts an extension in the registry .
3166	Find an object with the given name .
3167	Appends the given path to the given path .
3168	Creates the context .
3169	Read a cookie .
3170	Creates a new HTTP header with the given name and value .
3171	Creates a new HTTP header .
3172	Creates the web context .
3173	Execute hooks .
3174	Processes all fields of the given object .
3175	Process field .
3176	Creates a new http client .
3177	Create a new http client .
3178	Handles body .
3179	Creates the URI of this endpoint .
3180	Handles headers .
3181	Handles form parameters .
3182	Handles body .
3183	Handles cookies .
3184	Create a new AsyncHttpClient .
3185	Parse Java version .
3186	Maps a collection of inputs to a list .
3187	Concatenate a list of inputs into a list .
3188	Returns a list containing all elements of the given list .
3189	Creates a new HTTP response .
3190	Instantiates a Jetty .
3191	Creates a new OkHttpClient instance .
3192	Create a new OkHttpClient instance .
3193	Finds all fields of the given type .
3194	Find all static fields of a class .
3195	Find static methods .
3196	Find static fields annotated with given annotation .
3197	Find static methods annotated with given annotation .
3198	setter for field
3199	Returns the getter for the given field .
3200	Invoke method .
3201	Format a date .
3202	Formats a time .
3203	Handles headers .
3204	Checks if the given value is empty .
3205	Removes a prefix .
3206	Joins a collection of strings into a string .
3207	Handles query parameters .
3208	Handles body .
3209	Handles form parameters .
3210	Handles cookies .
3211	Handles headers .
3212	Append the value of the given map .
3213	Appends a list of values to a StringBuilder .
3214	Append a string representation of a field .
3215	Gets the sip dialog from the cache .
3216	Puts the given dialog into the cache .
3217	Removes a dialog from the cache .
3218	This method initializes the sip stack .
3219	Add a transaction .
3220	Prints an entry .
3221	Load directory entry from input stream .
3222	Dumps the given filter to the output stream .
3223	Executes the search filter .
3224	Configure a component .
3225	Adds the class dependencies to the registry .
3226	Build a list of URLs from the classpath elements .
3227	Gets the dependencies of the given expression evaluator .
3228	Gets the artifact for the given server type .
3229	Gets the server type .
3230	Creates a format writer .
3231	Creates a new format reader for the given input stream .
3232	Configures the object .
3233	Starts the server .
3234	Stops the un bound ID server .
3235	Gets the next record .
3236	Executes the input .
3237	Starts the server .
3238	Stops the HTTP server .
3239	Create root .
3240	Starts the OpenDJ server .
3241	Stops the OpenDJ server .
3242	Prints an entry .
3243	Gets the server type .
3244	Gets the server configuration .
3245	Send a metric .
3246	Reports the given metric to the specified metric .
3247	Read the geometry type .
3248	Read a point .
3249	Read a LineString .
3250	Read a polygon .
3251	Read multi point .
3252	Read a MultiLineString .
3253	Read a polygon .
3254	Read geometry collection .
3255	Read a circular string .
3256	Read a compound curve .
3257	Read a curve polygon .
3258	Read a PolyhedralSurface .
3259	Read an object from a byte reader .
3260	Reads a triangle from a byte reader .
3261	Write a geometry .
3262	Write a point .
3263	Write a line string .
3264	Write a polygon .
3265	Writes a multipoint to the writer .
3266	Write a multi line .
3267	Write a polygon .
3268	Write geometry collection .
3269	Write a circular string .
3270	Write a compound curve .
3271	Write a curve polygon .
3272	Writes the polygon to the given writer .
3273	Writes the given Tin to the given writer .
3274	Write a triangle .
3275	Get the code of a geometry .
3276	Returns the code for the given geometry type .
3277	Returns the geometry type for the given code .
3278	Checks if the file exists .
3279	Convert a list of numbers to a double .
3280	Subtracts a string .
3281	Convert a string to a JSON value .
3282	Create a JSON object .
3283	Parses a JSON string .
3284	Returns the value of the given settings .
3285	Read a JSON from a string .
3286	Gets the value of the given name .
3287	Returns an iterator over the members of this object .
3288	Resolves the given property .
3289	Returns the string representation of the class .
3290	Read an array from a string .
3291	Add a value to the array .
3292	Sets the value at the specified index .
3293	Gets the value for the given index .
3294	Returns an unmodifiable list of JSON values .
3295	Returns an iterator over the values of this object .
3296	Process an event .
3297	Publish an event to all registered listeners .
3298	Publish a event .
3299	Remove child .
3300	Adds the contents of a tag .
3301	Add attribute map to attribute map .
3302	Invokes the value change listeners .
3303	Adds values to the map .
3304	Remove values from attribute map .
3305	Pushes a collection of shared objects .
3306	Remove attribute from attribute map .
3307	Add value to attribute set .
3308	Adds values to the attribute set .
3309	Removes all values from the attribute set .
3310	Removes all values from the attribute set .
3311	Adds a value change listener .
3312	Checks if the regular expression is valid .
3313	Sets the value of the color .
3314	Sets the color of the color .
3315	Sets the b .
3316	Sets the value of the color .
3317	Load all tag classes .
3318	Returns the first substring of a string .
3319	Clone array .
3320	Checks if the given string contains whitespace .
3321	Removes all whitespace characters from a string .
3322	Removes all children .
3323	Add inner HTMLs .
3324	Removes all children from the list .
3325	Removes a child .
3326	Appends the contents of the given list of children .
3327	Initialize attributes .
3328	Get attribute by name .
3329	Mark the owner tag .
3330	Initialize in constructor .
3331	Get the children as an array .
3332	Get the first child .
3333	Returns the size of the children .
3334	Checks if the given tag contains the given child tag .
3335	Gets the closing tag .
3336	Inserts the contents of this tag into this tag .
3337	Set attribute value .
3338	Replace all attribute values .
3339	Add a WebSocket push listener .
3340	Removes a websocket push listener .
3341	Remove the context .
3342	Gets the tag repository .
3343	Set the nonce for the wff script .
3344	Sets the border style .
3345	Sets the UUID attribute .
3346	Merges the contents of the given array .
3347	Removes all CSS properties .
3348	Checks if the given property contains the given property .
3349	Returns a map of CSS properties .
3350	Find all tags for a given attribute .
3351	Find a tag matching the given attribute .
3352	Finds all attributes in the root tag .
3353	Builds all attributes .
3354	Find all attributes in the given list .
3355	Checks if the given tag exists in the browser page .
3356	Checks if an attribute exists .
3357	Builds all attributes .
3358	Get child text .
3359	Writes the bytes in the given byte array .
3360	Sets the context .
3361	Sets the context file .
3362	Add context environment and resource .
3363	Returns a filter that matches the given content type .
3364	Returns a filter that matches the given filter .
3365	Throws an exception if the end of the file is empty .
3366	Checks if a token is a line space .
3367	Parse a string .
3368	Scan the rules .
3369	Parses command line arguments .
3370	Parse data .
3371	Prints usage .
3372	Determine the width of the command .
3373	Creates a zip file .
3374	Read the contents of a file .
3375	Creates a filter .
3376	Write an integer .
3377	Write an integer .
3378	Writes a bit .
3379	Prints all the syntactic markers from the given path to the given output stream .
3380	Prints the given marker .
3381	Returns a list of all of the messages in the path .
3382	Gets the parent of this item .
3383	Returns the parent of this item .
3384	Gets the ancestor of this item .
3385	Appends two integers to the given array .
3386	Append two integers .
3387	Appends an array of integers to another .
3388	Appends the given type to the array .
3389	Adds a collection of elements to this collection .
3390	Convert a collection of strings to a String array .
3391	Convert a collection of integers to an array .
3392	Sorts the given array .
3393	Checks if the given array is sorted .
3394	Compare two arrays .
3395	Gets the build schema .
3396	Create a template extension point .
3397	Activate the default plugins .
3398	Determine the system root .
3399	Determine the root of the local directory .
3400	Reads a configuration file .
3401	Get the instance of the given module .
3402	Starts the modules .
3403	Activate a module .
3404	Prints the error .
3405	Returns true if the given task is ready .
3406	Parse options .
3407	Splits a string into a map .
3408	Returns the parent of the given child item .
3409	Returns the ancestor of the given child item .
3410	Replaces the given item with the given mapping .
3411	Returns the content type of the given file .
3412	Gets the entry for the given file .
3413	Visit a binary file .
3414	Construct binary file .
3415	Reads items from the input stream .
3416	Converts an ID to a trie .
3417	Creates a command descriptor for the command .
3418	Returns the root of the repository .
3419	Resolve the package dependencies .
3420	Scan the input .
3421	Thrown when an error is thrown .
3422	Logs the stack trace .
3423	Gets the indent string .
3424	Execute the execution .
3425	Add a string array to the array .
3426	Replies the attribute name .
3427	Replies the attribute of the stack .
3428	Replies the attribute of this method .
3429	Find the map entry in the stack map .
3430	Find the index of the stack map at the specified offset .
3431	Find the index of the stack_map .
3432	Build an empty map .
3433	Update the entries of the stack .
3434	Update the internal offsets of the given instruction list .
3435	Set the current stack map .
3436	Prints the stack_map table .
3437	Create a new stack map attribute .
3438	Convert a type to a name .
3439	Generates a stack type from the given type .
3440	Generate the type from the stack .
3441	Create a scope for a method scope .
3442	Calculate stack types .
3443	Returns the string representation of the access flags .
3444	Returns the string representation of the instruction list .
3445	Get attribute name as string .
3446	Checks if a method is valid .
3447	Checks all methods of a class .
3448	Prints the stack trace .
3449	Dump methods .
3450	Add a instruction to the end of the stack .
3451	Returns a string representation of a constant .
3452	Resets the local variables .
3453	Convert a type to a class .
3454	Creates a new array with the given types .
3455	Set the location of this frame .
3456	Adds a new instruction to the stack .
3457	Print a instruction .
3458	Build an instruction list .
3459	Calculates the list of stack types from the stack stack .
3460	Find the index of the given character in the specified string .
3461	Reads an array of bytes .
3462	Flushes the output .
3463	Creates a new client .
3464	Returns true if the ad is used to use thisAd .
3465	Gets the ad for the given index .
3466	This method is called when an adView is failed .
3467	Gets the ad request .
3468	Returns the number of items to publish .
3469	Gets the original content position for the given position .
3470	Returns the index of the ad index of the given position .
3471	Checks if an ad index is available .
3472	Returns true if the given position has to be fetched .
3473	Returns the wildcard type of the given element .
3474	Replies the type of the given element .
3475	Emit a package .
3476	Compress a type .
3477	Starts the initializer .
3478	End type .
3479	Emit a single line comment .
3480	Emit an annotation value .
3481	End method .
3482	Returns the type of the given class .
3483	Emit modifiers .
3484	Returns the PSI class for the given node .
3485	Find the method with the given name and arguments .
3486	This method is used to generate the data .
3487	Make the class implementation of the class .
3488	Checks if the element is a class .
3489	Checks if the given type is a type .
3490	Returns the type of the given type .
3491	Returns the package name of the given type .
3492	Returns the binary name of the given type .
3493	This method is used to write the data to the given writer .
3494	Checks if the given type is public class .
3495	Checks if the given type has public empty constructor .
3496	Returns the determinant of the two vectors .
3497	Find the scan by the given criteria .
3498	Creates and returns a generator that can be used to create a random matrix .
3499	Get binary reply .
3500	Returns a set containing all the members of the client .
3501	Gets the raw key .
3502	Returns the raw hash of the given hash key .
3503	Deserializes the given set of tuples .
3504	Deserializes the given set of bytes .
3505	Deserializes a list of bytes .
3506	Deserializes a map of entries .
3507	Deserialize hash list .
3508	Deserializes a map .
3509	Converts a domain address to a list of Gateway addresses .
3510	Parse a host address .
3511	Parses a port string .
3512	Set a string value .
3513	Synchronizes this client .
3514	Returns a set containing all the members of this batch .
3515	Stops the leader .
3516	Returns a string representation of the connection to the given server .
3517	Set the quorum of a partition .
3518	Check permission .
3519	Joins the given array of parameters .
3520	Expires the key at the specified time .
3521	Decr by key .
3522	Increments the specified integer .
3523	zAdd binary .
3524	z range by score .
3525	z range by score .
3526	Send a slave command .
3527	Send config set .
3528	Send a 32 - bit command .
3529	Gets the range .
3530	Shuts down the socket .
3531	Returns the current time in milliseconds .
3532	This method is used to process the selector .
3533	Iterates over all the sessions .
3534	Register a channel .
3535	Sets the default header .
3536	Called when a predicate is received .
3537	Gets the value of the given key .
3538	Gets the values for the given key .
3539	Adds encoding .
3540	Factory method to create a stuber .
3541	Encodes the given JWT .
3542	Copy a date .
3543	Create a token .
3544	Gets the error dialog .
3545	Connect to the server .
3546	 logout and clear state .
3547	This method is called when the request is not used .
3548	Gets the status of the bar .
3549	Gets the global state .
3550	Gets all balancer groups .
3551	Returns a collection of all base paths in the given group .
3552	Get request ID .
3553	Get queued requests .
3554	Checks if the target group is registered .
3555	This method is used to remove targets from the target group .
3556	Checks if the target group is in the same group .
3557	Checks if the target group has all targets in the specified group .
3558	Sets the URL of the URL .
3559	Create a new member key .
3560	Called when a line separator is found .
3561	Flushes a tag .
3562	Extract content .
3563	Read a list of segments from a container .
3564	Create a regular expression for tag pattern .
3565	Wrap the given delegate with the given mapping .
3566	Unwraps the given instance .
3567	Build engine .
3568	Add a template locator .
3569	Add a resolver .
3570	Register a callback .
3571	Add a value converter .
3572	Add a context converter .
3573	Normalizes the given text .
3574	Append the given sequence .
3575	Builds the source cache .
3576	Pushes a container .
3577	Adds a segment to the container .
3578	Validates the root segment .
3579	Splits a name into an iterator .
3580	Wrap the given delegate type .
3581	Flushes the output .
3582	Find field by name .
3583	Registers the given configuration extension .
3584	Registers a helper .
3585	Returns a list of all the segments in the given container .
3586	Invalidates a fragment .
3587	Returns the value of the specified value .
3588	Gets the storage extension .
3589	Gets the session storage .
3590	Clears the cache .
3591	Checks if the given key contains the given key .
3592	Put a value into the cache .
3593	Removes an item from the cache .
3594	Create a storage key .
3595	Creates a storage key for the given key .
3596	Create a storage key .
3597	Obtains the size of the action button .
3598	Obtains the color from a specific typed array .
3599	Obtains the color from a specific typed array .
3600	Obtains the pressed color from a specific typed array .
3601	Obtains the disabled color from a specific typed array .
3602	Obtains the icon from a specific typed array .
3603	Obtains the visibility duration from a specific typed array .
3604	Adapts the shadow .
3605	Adapts the size of the image button .
3606	Adapts the background of the image button .
3607	Creates a drawable that will be used to colorize the state of the state .
3608	Creates the background drawable .
3609	Creates the background drawable .
3610	Creates a background drawable .
3611	Creates the background drawable for the given color .
3612	Gets the size of the buttons .
3613	Initializes the visibility animation .
3614	Creates and returns a listener which allows to show the visibility of the view .
3615	Sets the size of the image .
3616	Obtains the vertical progress bar from a specific typed array .
3617	Initialize the paint .
3618	Initialize the angle animation .
3619	Gets the value of the angle property .
3620	Initializes the sweep animation .
3621	Creates and returns a property that will be used to determine whether the animation should be drawn .
3622	Creates and returns a listener which allows to start the animation .
3623	Initialize the floating action buttons .
3624	Creates and returns a listener which allows to show the floating point .
3625	Initializes the hide action buttons .
3626	Creates and returns a listener which allows to hide the floating action buttons .
3627	Initialize the chips .
3628	Creates a chip close listener .
3629	Handles the saved listeners .
3630	Obtains the text from a specific typed array .
3631	Obtains the text from a specific typed array .
3632	Obtains the color from a specific typed array .
3633	Obtains the icon from a specific typed array .
3634	Obtains the boolean value for a specific typed array .
3635	Obtains the icon of the close button .
3636	Adds a close listener .
3637	Removes a close listener .
3638	Sets the color of the background .
3639	Sets whether or not the button should be shown .
3640	Returns a map of all the aliases of this view .
3641	Returns the engine for the given files .
3642	Gets the layout mappings .
3643	Checks if a class is present .
3644	Gets the value of an annotation .
3645	Returns an InputStream for the given resource name .
3646	Gets the first available stream of the given names .
3647	Render a template .
3648	Add aliases .
3649	Adds an alias .
3650	Returns the listener for the given id .
3651	Run the given operation .
3652	Checks if the given method is a callback .
3653	This method is called when the service is called .
3654	Handles an event main thread .
3655	Invokes an operation .
3656	Invokes the given operation .
3657	Cancels the request .
3658	Cancels the request .
3659	Checks if the given tag is running .
3660	Handles an operation finished .
3661	Store the given operation delivery .
3662	Send a result to the operation .
3663	Send an operation result .
3664	Log a message .
3665	Cancel a running operation .
3666	Called when an operation is started .
3667	Cancel all running operations .
3668	Checks if the operation is cancelled .
3669	Runs the given operation .
3670	Creates an empty result .
3671	Runs the given operation .
3672	Runs the given operation .
3673	On operation finished .
3674	Runs the main .
3675	Get all the modules for this handler .
3676	Runs the main method .
3677	Checks a line .
3678	Initialize event handlers .
3679	Get the MBean server connection for the given child name .
3680	Close the MBean connection .
3681	Initialize the layout .
3682	The main method .
3683	Gets the validator .
3684	Returns the list of column names for this table .
3685	Gets the list of column names .
3686	Gets all the packages .
3687	Returns the string representation of the content of the file .
3688	Writes the text to the file .
3689	Find the table with the given name .
3690	Finds the bean with the given name .
3691	Gets all the properties of the given bean .
3692	Returns the list of visible properties for the given relation .
3693	Updates the given versionable .
3694	Add a history .
3695	Configures the JNDI .
3696	Add a specification node .
3697	This method is used to update the database .
3698	Returns the issue type of the given type .
3699	Returns the VM setting with the given name .
3700	Creates a DataEntry object with the given name and value .
3701	Gets a boolean field .
3702	Gets a numeric field .
3703	Display a workflow .
3704	Refresh the workflow .
3705	Traverses a component tree .
3706	This method sends a file to the output stream .
3707	Returns the number of addresses for this address .
3708	Convert a descriptor to a file descriptor .
3709	Get a block score error .
3710	Score the answer set .
3711	Returns the MD5 descriptor for the given input stream .
3712	Checks if the given path matches the given path .
3713	Adds a answer to the form .
3714	Gets the matching info .
3715	Returns the address of this address .
3716	Create a question set .
3717	Retrieve the question set .
3718	Gets the date of this date .
3719	Returns the address of this address .
3720	Returns the date of this object .
3721	Gets the revision history .
3722	Search for watchlists for a given entity .
3723	Sets the date of the given date .
3724	Sets the address .
3725	Retrieves the person with the given id .
3726	Retrieve a candidate .
3727	Gets the encoded authorization string .
3728	Gets the date of this date .
3729	Gets the type parameter of the given type .
3730	Gets the value of a property .
3731	Gets a boolean property .
3732	Gets the path of a directory .
3733	Gets the error type .
3734	Get validation error code .
3735	Flush the contents of the file .
3736	Synchronizes the source file descriptor .
3737	Returns the cache for the given files .
3738	Create the hierarchy .
3739	Tries to find the required port .
3740	Returns the value of the given parameter .
3741	Sets the parameter values .
3742	Sets the parameter value .
3743	Add a parameter .
3744	Get the target command .
3745	Gets the value of a wizard .
3746	Register an identifier .
3747	Create a new child component .
3748	Creates a new subtree .
3749	Returns a set containing all of the indexes .
3750	Creates a set of indexes .
3751	Adds an entry to the map .
3752	Removes the value from the map .
3753	Returns a random4ID with the given id .
3754	Get the list of user widths .
3755	Sets the sort direction .
3756	Set the column order .
3757	Gets the list of columns .
3758	On component tag .
3759	Set the tag body .
3760	Called when the page is clicked .
3761	Get a config instance by name .
3762	Renders the content of the Faps header items .
3763	Renders the form scripts .
3764	Returns the script for the create node .
3765	Gets the data line .
3766	Execute the given instance .
3767	Expand session info .
3768	Add children .
3769	Get the keys for the class .
3770	Gets the cache key .
3771	Add a highlight expression .
3772	Add start tags .
3773	Add end tags .
3774	Returns a new component with the given content id .
3775	Gets the loaded component .
3776	Called when the dialog is clicked .
3777	Inserts the specified element into this wizard .
3778	Gets the previous element .
3779	Adds a parameter to the wizard .
3780	Evaluate an instance .
3781	Adds the elements of this class .
3782	Update the class elements .
3783	Add a cell to the table .
3784	Evaluate the UIProvider .
3785	Evaluate the fields .
3786	Gets the class elements .
3787	Get sub item .
3788	Generates an event javascript .
3789	Gets the image .
3790	Gets the behaviors for the given class .
3791	Add components .
3792	Returns the children of this node .
3793	Sends a request to the response .
3794	Sends a request to a token proxy .
3795	Sends a request to the response .
3796	Make a request from a token proxy .
3797	This method is used to convert the body to an object .
3798	Render the head .
3799	Handle error .
3800	Launch a job .
3801	Add reference prefixes .
3802	Add additional metadata .
3803	Adds the promotion categories .
3804	Add the specified categories .
3805	Adds a category .
3806	This method is called when the request is started .
3807	Called when the request is sent to the server .
3808	Gets the resource stream .
3809	Gets the function script .
3810	Sends the connection to the given application .
3811	Initializes the alive .
3812	Gets all the UIUser sessions .
3813	On component tag body .
3814	Paints the HTML .
3815	Create a dashboard link .
3816	Parses a response .
3817	Parses the response .
3818	Parse response .
3819	Parses the response .
3820	Gets events .
3821	On component tag .
3822	Runs the job .
3823	On component tag .
3824	Render head .
3825	Set the default menu item .
3826	Get label .
3827	Gets the editor for the given field .
3828	On render .
3829	Gets the string representation of this date .
3830	Gets the date list .
3831	On render .
3832	Destroy the executor service .
3833	Called when the page is clicked .
3834	Handles a component tag .
3835	Handles multi part .
3836	Resets the counter .
3837	Initialize the login handler .
3838	Handles the request .
3839	Checks to see if a login name is valid .
3840	This method is called when the request is clicked .
3841	Get the persistence script .
3842	Gets the list of menu items .
3843	Gets the menu .
3844	Get the sub menu .
3845	Gets the JS string representation of this grid .
3846	Get the content of the grid .
3847	Creates a page .
3848	Called when the page is clicked .
3849	Add a new field .
3850	Get index .
3851	Add a new row .
3852	Adds all children of the given class .
3853	Get help string .
3854	Create a new instance .
3855	Initialize the command .
3856	Expand the element .
3857	Sort model .
3858	Check that the hidden column4 row is hidden .
3859	Checks if the given instance is allowed .
3860	Execute a listener .
3861	Requery label .
3862	Binds the given component to this component .
3863	Gets the data table .
3864	Execute events .
3865	Gets the rendered content .
3866	Get the command from the cache .
3867	Get label .
3868	Removes all tasks that are finished .
3869	Returns an iterator over the jobs page .
3870	Get the bridge with the given name .
3871	Checks if the session is loged .
3872	Initializes the session .
3873	Login .
3874	 logout the session .
3875	Add indexes .
3876	Gets the model for the given command .
3877	Adds the components to the page .
3878	Adds the content to this page .
3879	Convert date values .
3880	Utility method to convert the values from the request .
3881	Handle error .
3882	Validate the fields .
3883	Evaluate the form element .
3884	Validates the form .
3885	Checks if the target is required .
3886	Returns the list of formPanel objects .
3887	Show the dialog .
3888	Initialize the filter .
3889	Returns a set of resource types of the given resource types .
3890	Creates a set of resources .
3891	Checks if the field is check out .
3892	Returns true if this field has the access map .
3893	Get the type image .
3894	Initialize this command .
3895	Requery the label .
3896	Removes all pages from the session .
3897	Sets the tag of the tag .
3898	Handles the tree menu .
3899	Gets the Saps session .
3900	This method is called when a request is started .
3901	Called when a request is started .
3902	Register a user session .
3903	Register an activity .
3904	Adds a message connection .
3905	Invalidates a session .
3906	Removes a user session from the registry .
3907	Gets all users .
3908	Returns the list of connections for a user .
3909	Gets the connection4 session .
3910	Gets the cache .
3911	Initialize the handler .
3912	Gets the call command .
3913	Execute events .
3914	This method is used to add events .
3915	Gets width weight .
3916	Evaluate the label .
3917	Returns true if this field is a table field .
3918	Gets the field configuration .
3919	Returns true if this is visible .
3920	Handles the request .
3921	Initialize the button link .
3922	Gets the choices for the given input .
3923	Gets the date formatter .
3924	Handles the request .
3925	Gets the menu .
3926	This method returns the string representation of the subcues .
3927	Initialize this command .
3928	Gets the instance list .
3929	Adds a list to the table .
3930	Add a table filter .
3931	Get the filter for this table .
3932	Get a list of all the values in the table .
3933	Get status4 type .
3934	Store filter map .
3935	Removes the filter from the table .
3936	Gets the cell .
3937	Gets the instances .
3938	Gets the filter .
3939	Get the command .
3940	Returns the title of this command .
3941	Checks if the given filter is a date filter .
3942	Get the row name .
3943	Print method .
3944	Gets the query .
3945	Gets the excluded values .
3946	Returns true if the given list of nodes have changed .
3947	Fill the dimension provider .
3948	Build the parameters map .
3949	Checks if the given file contains the root element of the given file .
3950	Returns true if the last access time is changed .
3951	Refresh a TTL .
3952	Try to clone an object .
3953	Initialize the cache .
3954	Sets the cache properties .
3955	Gets the cache property .
3956	Calculates the key for the given key .
3957	Gets the cache properties .
3958	Set an entry in the cache .
3959	Deletes the given key from the cache .
3960	Deletes the given key from the cache .
3961	Delete all local cache .
3962	Delete all local cache .
3963	Gets the label for an element .
3964	Sort tab indexes .
3965	Generate a generic form .
3966	Generate HTML for element .
3967	Returns a string representation of the input element .
3968	Gets the element with the given name .
3969	Register an application context .
3970	Build select input .
3971	Build all attributes .
3972	Builds the maximum length .
3973	Returns a list of all the content of this method .
3974	Checks if this session is in the same session .
3975	Create a list converter .
3976	This method initializes all registered listeners .
3977	Gets the profile of this person .
3978	Sets the listener that will be notified when the listener is changed .
3979	Gets the factory for the document builder .
3980	Create an XML source from a file .
3981	Get a schema from a file .
3982	Parses the given XML file .
3983	Validates a schema .
3984	Validate schema .
3985	Adds a child tag .
3986	Removes the attribute with the given name .
3987	Returns a string representation of the Velocity template .
3988	Returns the XML representation of this tag .
3989	Add a service if present .
3990	Get service by device .
3991	On start command .
3992	Get all triggers for an app .
3993	Deletes the trigger of the given app .
3994	Delete trigger .
3995	Gets the trigger .
3996	Validate access .
3997	Convert the XML string to an object with the given aliases .
3998	Converts an XStream to an XStream with the given aliases .
3999	Converts an XML string to a JSON string .
4000	Invokes the method with the given name and arguments .
4001	Check the current thread .
4002	Log a method call .
4003	Load an object from an input stream .
4004	Creates a new tag .
4005	Checks if the query matches the given query string .
4006	Dispatch an invocation .
4007	Unregister a service .
4008	Generate the query id .
4009	Called when an instance has been lost .
4010	Stop search .
4011	Stop all search .
4012	Connects to a connection listener .
4013	Creates the standard display view .
4014	Creates and returns a widget which allows to show a specific field .
4015	Create a new date view .
4016	Create a tag view .
4017	Creates the standard edit view .
4018	Sends a notification to the given unique identifier .
4019	Converts this object to an XML string .
4020	Set the content view with the default elements .
4021	Gets the name of a profile field .
4022	Kill the scheduler .
4023	Initialize the context .
4024	Broadcast an event to all registered listeners .
4025	Creates a profile fragment .
4026	On profile data available .
4027	Starts the image .
4028	This method is used to handle the image .
4029	Converts an object to a JSON string .
4030	Add a tag .
4031	Sets the tags .
4032	Save trigger .
4033	Delete a trigger .
4034	Start notification handler .
4035	Start a service .
4036	Add attribute .
4037	Invokes the method .
4038	Set the selection .
4039	Sets the selection .
4040	Returns the list of selected strings .
4041	Returns all selected items .
4042	On refresh .
4043	Shuts down this service .
4044	Inserts a line .
4045	Write string to buffer .
4046	Converts an object to a JSON string .
4047	Load a component .
4048	Binds the given callback to the given descriptor .
4049	Disconnects from the connection .
4050	Handle error .
4051	Refresh all triggers .
4052	Adds the persona .
4053	Remove persona .
4054	Register service .
4055	Get app authorization by id
4056	Register an application .
4057	Unregister an app .
4058	Get the persona of an app .
4059	Called when a message is received .
4060	Add a client to the list of clients .
4061	Connects .
4062	Gets the value of a profile field .
4063	Checks if this field is modified .
4064	Stop search .
4065	Stop all search .
4066	Lookup an identifier .
4067	Get the profile field .
4068	Get the base info for a persona .
4069	Get nodes from XML .
4070	On main thread .
4071	Gets the person auth from the response .
4072	Create a new entry for a sent request .
4073	Creates the entry for the given contact request .
4074	Returns the number of relationships for the given user .
4075	Verifies the request for a user .
4076	Adds a close tag .
4077	Adds an empty tag .
4078	Add an open tag .
4079	Delete a file .
4080	Create a temporary directory .
4081	Returns the proxy for the given proxy .
4082	Returns the class for the given class .
4083	Computes the signature of a method .
4084	Creates and returns a new one of the given parameters .
4085	Resets this query .
4086	Creates a new URL builder from the given path .
4087	Adds a parameter to the URL .
4088	Gets the value of a parameter .
4089	Adds a query .
4090	Adds parameters to the map .
4091	Adds an indexed parameter .
4092	Adds a query .
4093	Validates a query .
4094	Adds a query .
4095	Resets the query instance .
4096	Replaces the given parameter with the given value .
4097	Invokes the given object .
4098	Create a shutdown proxy .
4099	Converts an object to a boolean .
4100	Get the stack trace of a Throwable .
4101	Removes the given path .
4102	Waits until the thread is shutdown .
4103	Adds an empty tag .
4104	Add an attribute .
4105	Add attributes .
4106	Extract information from a URL .
4107	Returns the root of this resource .
4108	Returns a list of resources matching the given filter .
4109	Returns the root of this resource .
4110	Create a resource from a file .
4111	Starts the process .
4112	Creates a new external command .
4113	Start an external command .
4114	Executes the given command .
4115	Gets the tick .
4116	Gets the elapsed time .
4117	Add a tag .
4118	Add a tag .
4119	Returns a string representation of the given string .
4120	Returns the time of the given timeout .
4121	Adds an entry to the directory .
4122	Create a memory directory .
4123	Encodes a string .
4124	Decodes a string .
4125	Creates a leaf resource .
4126	Reverse an array .
4127	Converts a class to an enum set .
4128	Load properties from a file .
4129	Load properties from a Reader .
4130	Returns the string representation of the given time units .
4131	Compares this date .
4132	Truncate the given size unit .
4133	Adds the given MemorySize to this MemorySize .
4134	Compare the memory size .
4135	Creates a memory size from the given memory sizes .
4136	Executes the given callable .
4137	Adds a marker to this map .
4138	Removes a marker from the cache .
4139	Creates a bitmap descriptor from a view .
4140	Return true if the given file is related to the given file .
4141	Emit events from a watch service .
4142	Gets the selector map drawable .
4143	Initializes the view Pager with the default adapter set .
4144	Add views .
4145	Gets the message for the given exception .
4146	This method is used to use the random ids .
4147	Returns the integer value of the given character .
4148	Convert a char to a byte .
4149	Gets the timestamp .
4150	Gets the MAC fragment .
4151	Sets a property .
4152	Sets the user credentials .
4153	Sets the client secret .
4154	Merges this properties into this set .
4155	Handles the share .
4156	Handle non - network share .
4157	Add a comment .
4158	Deletes a comment .
4159	Add a comment .
4160	Gets a comment .
4161	Gets comments .
4162	Get comments for a user .
4163	Get comments by entity key .
4164	Get comments by application .
4165	Show comment view .
4166	Parse a JSON string .
4167	Open a URL .
4168	Parses a JSON response .
4169	Show an alert .
4170	Log a message .
4171	Returns the runtime type of the given type or null if the value is not found .
4172	Set the entity .
4173	Build the URL of the profile .
4174	On profile image .
4175	Generates the URL of the request .
4176	Normalize request parameters .
4177	This method is called when an activity is authorization .
4178	Authenticate the given activity with the specified permissions .
4179	Validates the intent for an activity .
4180	 logout the session .
4181	Displays a dialog .
4182	Serialize a date .
4183	Links a listener to the application .
4184	This method is used to link users .
4185	Links a user to a user .
4186	Post an entity .
4187	Extend access token .
4188	Sets the current permissions for the activity .
4189	Returns the hash of the key .
4190	Save entity .
4191	Called when an entity is registered .
4192	Called when an entity is registered .
4193	Gets entities .
4194	Gets entities .
4195	Obtains the context menu .
4196	Subscribe a subscription .
4197	This method is called when a subscription is sent .
4198	Checks if the registry is valid .
4199	Returns the next token .
4200	Reads the next null value .
4201	Reads a escape character .
4202	Show the share dialog .
4203	Show a share dialog .
4204	Associates an entity with the given entity .
4205	Associates the given entity with the given listener .
4206	Associates the entity with the given entity .
4207	Associates an entity with the given entity .
4208	This method is used to share the network .
4209	Gets a share .
4210	This method is used to get the share of the specified ids .
4211	Get the photos for a user .
4212	Gets the share of the specified entity .
4213	This method is called by the application .
4214	Add an entity to an entity .
4215	Add an entity to an entity .
4216	Called when an entity is deleted .
4217	This method is called when an entity has been created .
4218	This method is called by the activity .
4219	Checks if the given entity key isLiked .
4220	This method is called when a user has been inserted .
4221	Gets theLikes by entity key .
4222	Obtains the Facebook for the application .
4223	Adds the header to the request .
4224	Collect body parameters .
4225	Collect the parameters from the request .
4226	Creates a new JSON writer .
4227	Creates a new instance of this class .
4228	Replaces all the lines of a string with the given value .
4229	Reload the action bar .
4230	Returns the simple location of the given address .
4231	Handles a user .
4232	Get actions by application .
4233	Get the actions for a user .
4234	Get actions by entity key .
4235	Get the actions for the given entity .
4236	Closes the stack .
4237	Writes a name .
4238	Parses a JSON document .
4239	Parses the given JSON reader .
4240	 link to a user .
4241	Sets the credentials for the given consumer key .
4242	Sends an entity to the application .
4243	This method is used to retrieve a user from a resource .
4244	This method is called when the user has been clicked .
4245	Sends a photo .
4246	Get the scaled bitmap of a bitmap
4247	Sends a PUT request to the session .
4248	Sets the text size .
4249	Sets the image of the profile .
4250	Save user .
4251	Get a user from the context .
4252	Save user settings .
4253	Sets the auto - post preferences .
4254	Authenticate .
4255	Authenticate the given activity .
4256	Gets a static field .
4257	Returns the field name of the given value .
4258	Called when an intent is received .
4259	Handles broadcast intent .
4260	Encodes the given byte array .
4261	Decodes a byte array .
4262	View add listener
4263	On profile update .
4264	Decodes a form .
4265	Convert a collection to a map .
4266	Create a header element .
4267	Put an object into the cache .
4268	Puts an object into the cache .
4269	Put an object into the cache .
4270	Gets the raw value of the specified key .
4271	Get an object from the cache .
4272	Checks if the given key exists .
4273	Adds a TTL object to the cache .
4274	Load an image by data .
4275	Load an image by URL .
4276	Parses a tag string .
4277	Format tags .
4278	Fixes the name of the tag after a prefix .
4279	Creates a builder for a named metric .
4280	Returns a string representation of the tag .
4281	Returns a string representation of this domain .
4282	Returns the encoded value of the given string .
4283	Returns the value of the given parameter .
4284	Returns the query parameters for the given name .
4285	Copies the given URL to the given URL .
4286	Constructs a single URL from a URI .
4287	Builds a URL from the given scheme .
4288	Returns the string representation of this object .
4289	Query the data for the given column .
4290	Query the given SQL query with the named parameters .
4291	Gets the fields for the given class .
4292	Fetches the row .
4293	Converts a ResultSet to a Date object .
4294	Convert a ResultSet to a Date .
4295	Converts a ResultSet to a Time .
4296	Get a date from a ResultSet .
4297	Get the offset date from the specified index .
4298	Convert the given index to a offset time .
4299	Returns the value of the given column in the ResultSet .
4300	Resize the image .
4301	Sets the image center .
4302	Set the image color .
4303	Resize width .
4304	Resize this path .
4305	Resize the image to the specified width .
4306	Sets the center of the image .
4307	Appends an image to the path .
4308	Appends the given strength .
4309	Set the preview .
4310	Gets the project .
4311	Gets the file for the given file .
4312	Delete a file .
4313	Save a file .
4314	Executes the request .
4315	Checks the response status .
4316	Uploads a source URL to a URL .
4317	Injects the given object into this graph .
4318	Creates a builder for the API .
4319	Find a class by its name .
4320	Load a class by name .
4321	Performs a search on the given buffer .
4322	Adds a word to the trie .
4323	Append a character .
4324	Sets the value of this object .
4325	Checks if the given class is assignable to the given class .
4326	Copy the parsing information from a zipfs file .
4327	Hashes the given instruction group .
4328	Returns a rule that matches the given character .
4329	Returns the character of the given code point .
4330	Returns a rule that represents a character range .
4331	Returns a rule that contains any of the specified characters .
4332	Returns a rule that matches the specified characters .
4333	Converts a string to a rule .
4334	Returns a rule that matches the specified characters .
4335	Converts a string to a rule .
4336	Creates an optional rule .
4337	Adds an optional rule .
4338	Adds the given rule to the specified rule .
4339	Creates a new rule with the specified rule2 .
4340	Create a rule from a string .
4341	Convert objects to rules .
4342	Converts an object to a rule .
4343	Push a value to the stack .
4344	Pop the element from the given class .
4345	Removes the specified class from the specified class .
4346	Returns the next element of the given class .
4347	Adds a value to the context .
4348	Checks if the given matcher is matched .
4349	Returns true if this range contains the specified range .
4350	Returns true if this range contains the specified range .
4351	Returns a new IndexRange that contains the specified range .
4352	Returns the byte code for the given class .
4353	Add a word .
4354	Unwrap a matcher .
4355	Register a listener .
4356	Post an object .
4357	Gets the sub context for this matcher .
4358	Returns the minimum value of this rule .
4359	Returns the max cycle number .
4360	Returns a rule that contains the given number of times .
4361	Returns a rule that applies the given number of cycles .
4362	Returns the rule that matches the given range .
4363	Returns a copy of all characters in the given array .
4364	Gets the value of the deployment descriptor property .
4365	Gets the value of the authentication configuration property .
4366	Gets the BW services .
4367	Adds the given events to the monitor .
4368	Gets the value of the global variable property .
4369	Gets the value of the base service property .
4370	Gets the value of the event property .
4371	Checks the project directory .
4372	Read dependencies from a file .
4373	Launch a binary .
4374	Gets the value of the action property .
4375	Clean up a directory .
4376	Gets the value of the final property .
4377	Gets the value of the rule base property .
4378	Add an alias .
4379	Process a file .
4380	Gets the value of the rest property .
4381	Gets the value of the NV pair property .
4382	Adds a dependency .
4383	Remove a dependency from the pom .
4384	Checks if a dependency exists .
4385	Checks if the given pom exists .
4386	Add a project as a module .
4387	Checks if a module exists .
4388	Gets the artifact file .
4389	Executes the goal execution .
4390	Extract the contents of a file .
4391	Update repository instances .
4392	Gets the value of the property property .
4393	Create a new instance of this class .
4394	Creates a proxy class .
4395	Create a constructor .
4396	Start a timer .
4397	Start a timer for a callable .
4398	Start a timer .
4399	Marks the results of the given query .
4400	Creates a new proxy .
4401	Wrap a connection .
4402	Wrap a statement .
4403	Wrap the prepared statement with the given SQL statement .
4404	Wrap a callable statement .
4405	Get the result type of a ResultSet
4406	Build the arguments .
4407	Build theface arguments .
4408	Executes the command .
4409	Executes the executor .
4410	Sets the locale .
4411	Gets the message .
4412	Checks if the command line is at the end of the command line .
4413	Format HTML .
4414	Gets the Cowface by mode .
4415	Create a Cowface .
4416	Extracts the Cow template from the given string .
4417	Loads a string from the given file specification .
4418	Returns a string representation of the specified input stream .
4419	Returns the input stream for the given path .
4420	Returns the input stream for the given resource path .
4421	Checks if the given file is a cow file .
4422	Convert a file to an input stream .
4423	Gets the file with the given name .
4424	Returns the files of the given folder .
4425	Gets the Cowface with the given mode .
4426	Set the error .
4427	Sets the tongue string .
4428	Checks if the given mode is known .
4429	Parse command line arguments .
4430	Show command line help .
4431	Helper method to format a line .
4432	Wrap a message .
4433	Format a message .
4434	Set the wordwrap string .
4435	Returns the number of characters in the given message .
4436	Log a message .
4437	Log a message .
4438	Log multiple messages .
4439	Joins a list of messages into a string .
4440	This method is used to print bulk events .
4441	Returns a map of all schemas in the database .
4442	Get the schema for the given name .
4443	Initialize the context .
4444	This method is called when a watch has been established .
4445	Returns a map of all tables in the database .
4446	Get the table for the given name .
4447	Writes the contents of this file to the given writer .
4448	Returns a sorted map of the catalog names .
4449	Get the catalog for the given name .
4450	Get the contents of this buffer .
4451	Log the given encoder .
4452	Log the given writer .
4453	Returns the start of the given file .
4454	Append a string to the given buffer .
4455	Write a segment .
4456	Returns the character at the given value .
4457	Get the map of SQL types from the classpath .
4458	Get the map of column names for the database .
4459	Get the column with the given name .
4460	Returns all the columns in this database .
4461	Returns the column for the given ordinal position .
4462	Gets the imported tables .
4463	Returns all the exported tables .
4464	Adds a segment .
4465	Log a character .
4466	Log a string .
4467	Puts all of the values in the given array .
4468	Move the camera to the last location .
4469	Adapts the camera to include position .
4470	Converts a circle to an animation .
4471	Creates a circle from a rectangle .
4472	Get the arc motion .
4473	Create a style span .
4474	Scales the given view .
4475	Scales the specified view .
4476	Scales the current view .
4477	Returns the number of items in the given URI .
4478	Concatenates an address lines into a string .
4479	Connects to the given client .
4480	Create a fragment transaction .
4481	Gets the foreground color .
4482	Sets the listener which is called when the view is clicked .
4483	Returns the name of the given level .
4484	Make a scale up animation .
4485	Shows the given view .
4486	Hide the user input .
4487	Checks if a cursor has the given position .
4488	Returns the number of times the cursor is closed .
4489	Returns the index of the first int in the cursor .
4490	Returns the first long value of the given cursor .
4491	Returns the first string of the cursor .
4492	Returns an array of all the integers in the given cursor .
4493	Returns all the bytes of the cursor to the given cursor .
4494	Returns a list of all strings in the cursor .
4495	Load an image view .
4496	Returns the orientation of the given view .
4497	Gets the index of the span count .
4498	Adds a rule to the view .
4499	Checks if the read is read .
4500	Returns the main thread for this thread .
4501	Returns the values of the given sparse array .
4502	Returns the values of the given sparse array .
4503	Check the adapter .
4504	Check the drawable .
4505	Update the matrix .
4506	Update the result of an operation .
4507	This method is used to get the elements from the database .
4508	Returns the number of bytes for the specified width .
4509	Returns a copy of the given bitmap .
4510	Checks if the given intent has an activity .
4511	Create an intent to send a list to a list of addresses
4512	Sets the default content view .
4513	Find a fragment by pane .
4514	Creates a bundle from two strings .
4515	Creates an intent for an intent .
4516	Creates an intent to update an existing intent .
4517	Creates an intent to delete an intent .
4518	Creates an intent to delete an intent .
4519	Gets the size of the action bar .
4520	Gets the background of the action bar .
4521	Checks if the network is connected .
4522	This method is used to clean up the diff .
4523	Returns a list of patches for the given patch .
4524	FlatMap the given function .
4525	Convert SOAP message to string .
4526	Get the profile properties for a file .
4527	Checks if the given element is valid .
4528	Checks if the given executable element is a getter method .
4529	Get property value .
4530	Checks if a class has no args constructor .
4531	Gets the annotation from an object .
4532	Checks if the given method has a return type .
4533	Applies the given output element to the given StringBuilder .
4534	Find all wrapper classes of this type .
4535	Returns the set of implicit context data for this context .
4536	Get all available types .
4537	Initialize the connector .
4538	Sends a connector to the connector .
4539	Gets the connector configuration names .
4540	Gets the properties for a connector .
4541	Creates a connector for the given connector .
4542	Checks if a connector is configured .
4543	Checks if the method has a getter prefix .
4544	Checks if the given method is public .
4545	Checks if the given type is compatible with the given method .
4546	Returns the field associated with the given method .
4547	Checks if the method is getter method .
4548	Returns the first character of the given string .
4549	Returns the first character of the given string .
4550	Remove getter prefix .
4551	Sends an error message to the connector .
4552	Applies the given instance to the given context logger .
4553	Creates an instance of the given class .
4554	Gets the current profile .
4555	Open a properties file .
4556	Adds the given context override map .
4557	Creates a context string representation builder .
4558	Checks if the given exception is defined in a method .
4559	Checks if the given class is defined in the given exception array .
4560	Gets the defined exception types from the given method signature .
4561	Checks if the given watching point is valid .
4562	Sets the size of the group .
4563	Asserts that this message contains duplicate entries .
4564	Returns the drop down view at the specified index .
4565	Registers a term .
4566	Register a term .
4567	Initialize the model .
4568	Gets the representation of this instance .
4569	Returns the relative resolution of the given URI .
4570	Merges the path to the path .
4571	Returns the segments of the given path .
4572	Create a name .
4573	Returns the name of the given class .
4574	Returns a subtype of the given type .
4575	Creates a new media type with the given type and suffix .
4576	Creates a media type from the given type .
4577	Returns the header of the given media type .
4578	Runs the resolution process .
4579	Compares this term .
4580	Returns a list of pending attachment names for a attachment .
4581	Adds an attachment name .
4582	Gets the next attachment name .
4583	Creates a new NameProvider instance .
4584	Parses the suffix .
4585	Checks if a quoted string is valid .
4586	Returns the next code point .
4587	Run update process .
4588	Convert this URI to a URI .
4589	Closes an InputStream .
4590	Checks if a name start character is start character .
4591	Checks if the given character is a name character .
4592	Validates a token .
4593	Sets the media type of this object .
4594	Register a adapter class .
4595	Creates a new adapter for the given type .
4596	Adapts an object to a adapter .
4597	Adds a prefix to this map .
4598	Returns a copy of this namespace with the given prefixes .
4599	Escape XML .
4600	Get a query from a resource .
4601	Adds a name provider .
4602	Returns the name provider for the given container .
4603	Unwraps the given class .
4604	Returns true if this node is in scope .
4605	Sets the directory of this path .
4606	Sets the given file .
4607	Creates a path to the given path .
4608	Returns the type parameter for the given type .
4609	Creates a new instance of the given value class .
4610	Creates a list of variants .
4611	Resolves a data set .
4612	Matches all child children of the given value .
4613	Matches all children of the given value .
4614	Matches all child children of the given value .
4615	Matches all children of the given value .
4616	Returns a matcher that matches the given value .
4617	Get measureures by year .
4618	Get a measure .
4619	Get the rating for a candidate .
4620	Gets the rating .
4621	Get the leader by year .
4622	Get the leader by zip5 .
4623	Get stage candidates .
4624	Returns the address of the database .
4625	Get the offices with the given type .
4626	Get the offices by level .
4627	Get the offices with the given level .
4628	Get the offices by branch level .
4629	Get counties .
4630	Get Cities .
4631	Get the members of a local .
4632	Query for the given method .
4633	Returns a list of the current state .
4634	Get the candidate list with the given state id .
4635	Get a candidate list by zip5 .
4636	Get the addl Bio .
4637	Get the Bio .
4638	Get candidate list by last name .
4639	Get candidate list .
4640	Get candidate list .
4641	Get committees .
4642	Gets the committee .
4643	Get committee members .
4644	Get the positions of a state .
4645	This method returns all of the leader .
4646	Sleep for the specified number of seconds .
4647	Starts the timer .
4648	Waits until this thread is completed .
4649	Closes the thread .
4650	Merge the given stream .
4651	Split map .
4652	Collects a map .
4653	Sort map .
4654	Returns the first value of the given map .
4655	Checks that a test is null .
4656	Checks that a test is null .
4657	Checks that the given string is null .
4658	Checks that the set is null .
4659	Checks if an array is null .
4660	Get the resource as a string .
4661	Returns the words of the given resource .
4662	Get the last modified date of a resource .
4663	Get a string from an input stream .
4664	Get the contents of an input stream .
4665	Read a file to a string .
4666	Gets the absolute path of a resource .
4667	Generate a random string .
4668	Generate a long .
4669	Join two arrays .
4670	Splits a set into a list .
4671	Gets month start .
4672	Gets the month end of the given time .
4673	Trims the given text .
4674	Normalizes the given string .
4675	Join the arguments array with the given separator .
4676	Joins the items with the specified separator .
4677	Returns the words of the given text .
4678	Trims the text down at the specified size .
4679	Trims the text down of the given text .
4680	Converts a string to a list of characters .
4681	Returns the number of characters in the given value .
4682	UnQuote a string .
4683	Gets the timezone for a given time .
4684	Gets the list of tags that have the given tag .
4685	Checks if the given severity is a violation .
4686	Displays the icon of the specified level .
4687	Displays the icon of the image .
4688	Get tags list .
4689	Set the next node .
4690	Set the previous node .
4691	Returns the node with the given port .
4692	Find all nodes in the socket .
4693	Gets all not dead nodes .
4694	Adds a node to the registry .
4695	Removes a node .
4696	Marks the given node as alive .
4697	Marks the node as dead .
4698	Send a event .
4699	Returns the version of the check style .
4700	Configure resource locator .
4701	Builds an object .
4702	Creates a map of property values .
4703	Returns the index of the current sequence .
4704	Compares this node .
4705	Get the list of events .
4706	Find all the packages in the JavaDoc run .
4707	Sets the value of the given property .
4708	Sets the value of the given object .
4709	Gets all annotated methods of a class .
4710	Invokes the given method on the given target object .
4711	Starts the process .
4712	Get the value of a config attribute .
4713	Performs the rules summary .
4714	Checks if a given rule matches the given rule .
4715	Creates a message to be received at the specified key .
4716	Initialize the cache .
4717	Waits for the cluster .
4718	Waits for the cluster to be sent .
4719	Waits until all clusters are connected .
4720	Waits for a task .
4721	Closes the cache .
4722	Print state .
4723	Main method .
4724	Returns a list of all the properties of this class .
4725	Returns the hash code for the given version .
4726	Get the total number of pages .
4727	Gets all entries for a page .
4728	Prepare result data .
4729	Stores the results of the results .
4730	Create an object .
4731	Compare two tags .
4732	This method is called by the SQL statement .
4733	Resets the minimum hash of a topic .
4734	Get the minimum hash of the given XML .
4735	Clean the XML for the given XML string .
4736	Helper method to validate the relationships of a topic .
4737	Update content hash .
4738	Validates all tags in the topic .
4739	Sorts the classes in the current package .
4740	Executes the test .
4741	Convert a string to a list of strings .
4742	Convert a string to a list of patterns .
4743	Checks if the given string contains a prefix .
4744	Gets the factory class for the given class .
4745	Sends a message to the server .
4746	Sends a message to the server .
4747	Execute zero function .
4748	Execute the function execution .
4749	Handle an exception .
4750	Formats the select results .
4751	Adds an error message .
4752	Gets the message .
4753	Checks if a socket is alive .
4754	Executes the specified thread .
4755	Checks if a list of resources exists .
4756	Merge deprecated information .
4757	Add query limit .
4758	Returns the first locator of the given string .
4759	Gets the size of a region .
4760	Returns true if the client is a client .
4761	Removes all keys from the given region .
4762	Returns the retry of the given runnable .
4763	Generate the image .
4764	Paints the icon .
4765	Gets the reader .
4766	Waits for the given message to enter .
4767	Execute the process .
4768	Parses the command line arguments .
4769	Prints the help .
4770	Construct the gnu options .
4771	Collect single cluster member data .
4772	Add a property .
4773	Parses the command line arguments .
4774	Prints the help .
4775	Constructs the options .
4776	Find the index of the command .
4777	Extract the launcher arguments from a command line .
4778	Extracts the command arguments from the given array of arguments .
4779	Runs the command .
4780	Print a message .
4781	Starts the timer .
4782	Creates a set of regions .
4783	Processes the given region .
4784	Sets the indentation token .
4785	Gets the package name .
4786	Starts an event sequence .
4787	Extracts the ports from the given member .
4788	Create a new pool .
4789	Gets the name of the event source .
4790	Get the category of the event source .
4791	Enter a frame .
4792	Process a method frame .
4793	Returns a string representation of the class name .
4794	Sets the package extractors .
4795	Adds all the packages to the given file .
4796	Updates the image .
4797	Sets the file name .
4798	Extract the limit value from the query string .
4799	Format select results .
4800	Checks that the given object is allowed in the specified depth .
4801	Starts the process with the given id .
4802	Runs the process with the specified arguments .
4803	Runs the process with the specified arguments .
4804	Stops the given process .
4805	Starts a process .
4806	Redirect streams .
4807	Waits until the given process is completed .
4808	Generate a template .
4809	Main process .
4810	Checks if the given type is a type .
4811	Checks if the given method is compatible with the given method .
4812	Returns the interface for the given interface .
4813	Returns the type argument of the given type .
4814	Resolves the type of the given type variable .
4815	Returns the actual types of the given interface .
4816	Populates the initializer .
4817	Adds the return option description .
4818	Get an object from the pool .
4819	Gets the destination .
4820	Gets the consumer for the given destination .
4821	Gets the producer for the given destination .
4822	Gets the session .
4823	Gets the connection .
4824	Sends a text message with the given destination .
4825	Register text messages with destination .
4826	Receive text message from destination .
4827	Stops the connection .
4828	Handle load from data service .
4829	Gets the pool configuration .
4830	Sets the id of this model .
4831	Sets the model .
4832	Adds a new value to the model .
4833	Removes a given model .
4834	Get the managed event queue .
4835	Creates an event manager .
4836	Encodes the given string .
4837	Decodes a MultivaluedMap .
4838	Create a service group .
4839	Closes the server .
4840	Forward event .
4841	Gets all resources of the given method .
4842	Find an annotation from the given annotations .
4843	Returns the constructor for the given annotated resource class .
4844	Returns the root resource of the given class .
4845	This method is used to set the classifiers .
4846	Gets the object from the stream .
4847	Gets the serialized object .
4848	Writes the given file to the given file .
4849	Returns the leaf score for the given instances .
4850	Gets the provider URL .
4851	Gets the context .
4852	Gets the connection supplier .
4853	Build the JMS service .
4854	Gets the type for the given Jackson type .
4855	Returns the type of the given Java type .
4856	Introspect the given serializer .
4857	Introspect a bean serializer .
4858	Introspect an enum serializer .
4859	Introspect the serializer .
4860	Get the number of rows in the account
4861	Frame3 .
4862	This method is used to insert a table .
4863	Generates a random number .
4864	Returns the next number .
4865	The main method .
4866	Creates a string representation of a given number .
4867	Generates a random select from a distribution .
4868	Returns the absolute path of the given file .
4869	Add a git - add command .
4870	Commits the given comment .
4871	Returns the contents of the given file .
4872	Remove git .
4873	Validates the given file .
4874	Checks if two lists are equal .
4875	Checks that the specified integer index is within the given index .
4876	Get the client instance .
4877	Sets the preferred client type .
4878	Adds the given paths to the repository .
4879	Add files to the repository .
4880	Adds a file to the repository .
4881	Adds a file to the repository .
4882	Add a directory to the repository .
4883	Adds the given paths to the repository .
4884	Add a list of paths to the repository .
4885	This method is used to add the command to the user .
4886	Compares two versions of the given version .
4887	Adds the given paths to the repository .
4888	Adds the given paths to the repository .
4889	Commits the given repository .
4890	Sets the git path .
4891	Creates a list of the given method .
4892	Returns an array of the given function definition .
4893	Gets the value of the parameter .
4894	Checks if the given file exists .
4895	Creates a new branch .
4896	Deletes a branch .
4897	Rename a branch .
4898	Returns all the branches in the repository .
4899	Commit all of the repository .
4900	Convert the given object to an object .
4901	Convert an integer to a boolean .
4902	Convert boolean value to Integer .
4903	Convert a date to a string .
4904	Gets the message .
4905	Returns the file that contains the specified index .
4906	Adds a file to the commit .
4907	Adds the given file to the deleted files .
4908	Adds the given file to the commit .
4909	Adds the specified file to the modified files .
4910	Adds a new file to the commit .
4911	Adds a file to the commit .
4912	Adds the given file to the container .
4913	Creates a new parameter .
4914	Gets the value of this parameter .
4915	Sets the options for the command line .
4916	Sets whether or not the option is lower .
4917	Sets whether or not the option should be deleted .
4918	Sets whether or not the option should be used .
4919	Sets whether or not the option should be used .
4920	Returns the return type of the function .
4921	Evaluate the function .
4922	Get the parameters of the given method .
4923	Run a function .
4924	Convert the result to a result .
4925	Evaluate a script variable .
4926	Returns the branch of the given repository .
4927	Delete a branch .
4928	Delete a branch .
4929	Rename a branch .
4930	Commits a git commit .
4931	Get the current branch .
4932	Performs a git checkout .
4933	Get the status of the repository .
4934	Remove the given repository .
4935	Gets the file at the given index .
4936	Gets the file at the specified index .
4937	Gets the file at the specified index .
4938	Gets the file with the specified index .
4939	Gets the file at the specified index .
4940	Gets the file at the specified index .
4941	Gets the file at the specified index .
4942	Returns the error message for the given index .
4943	Gets the error message .
4944	Resets the repository .
4945	Adds a file to the file .
4946	Adds a file to the source file .
4947	Adds a deleted file .
4948	Sets the files changed string .
4949	Sets the content deleted string .
4950	Sets the contents of the given lines .
4951	Executes the given repository .
4952	Returns the index of the first character in the given string .
4953	Get a ResultSet for the given service .
4954	Logs the given repository .
4955	Adds the commit .
4956	Adds a commit file .
4957	Executes the given repository .
4958	Executes the given repository .
4959	Executes the given repository .
4960	Executes the given repository .
4961	Executes the given repository .
4962	Executes the given repository .
4963	Checks if the given reference is a reference type .
4964	Get the children of this directory .
4965	Returns the file at the specified index .
4966	Executes the given repository .
4967	Executes the given repository .
4968	Sets the comment .
4969	Sets the options for this branch .
4970	Injects the given class .
4971	Inject service method .
4972	Sets the optB .
4973	Clone process .
4974	Performs the filter .
4975	Returns the list of resources for the given configuration file .
4976	Setup the state .
4977	Add a Method .
4978	Do filter .
4979	Reduce the database connection .
4980	Consume a database .
4981	Returns a cursor to the database .
4982	Get the raw query .
4983	Build the command line .
4984	Returns the file at the specified index .
4985	Returns the file at the specified index .
4986	Gets the modified file at the specified index .
4987	Returns the status of the repository .
4988	Gets the head element .
4989	Gets the files .
4990	Returns the number of files in the file .
4991	Checks if the given string matches this pattern .
4992	Updates the entry after the entry .
4993	Removes the last entry from the cache .
4994	This method is called when the entry has expired .
4995	Updates the entries after the specified entry .
4996	Returns true if the given char array starts at the given index .
4997	Gets the access token .
4998	Signs the authorization request .
4999	Gets the authorization URL .
5000	Performs the finish .
5001	Finish progress .
5002	Creates the control .
5003	Gets the default Java package .
5004	Sets whether this group is visible .
5005	Create query debug string .
5006	Gets the query parameters .
5007	Create part control .
5008	Add an item to the list .
5009	Returns an array of IPToast items for the given category .
5010	Configures the tableResization .
5011	Gets the selected template .
5012	Gets the HTML string .
5013	Load the last saved preferences .
5014	Save last saved preferences .
5015	Set the selected template .
5016	Update the viewer input .
5017	Creates a criterion from a collection of values .
5018	Creates a new criterion with the given value .
5019	Creates a criterion that contains the given value .
5020	Create field editors .
5021	Returns the last path component of the given path .
5022	Initializes the name field .
5023	Validates the page .
5024	Checks if the content type is valid for the content type .
5025	Returns the default extension .
5026	Gets the project for the given path .
5027	Gets the user id .
5028	Creates a new page .
5029	Save this editor .
5030	Called when a resource has changed .
5031	Shows the specified page .
5032	Creates a string representation of the given query string .
5033	Convert an object to a string .
5034	Insert a time line item .
5035	Inserts a timeline item into the document .
5036	Inserts a timeline item into the stream .
5037	Validates the response .
5038	Returns the string representation of the query .
5039	Get the template store .
5040	Gets the template context type registry .
5041	Gets the action for the given action .
5042	Creates a DBI .
5043	Appends the limit of the specified page .
5044	Create a named property .
5045	Creates a named property .
5046	Create a named property .
5047	Create a string literal .
5048	Creates a URI literal .
5049	Creates a typed literal .
5050	Create a QName from a namespace .
5051	Initialize the request .
5052	Called when the entity is created .
5053	Initialize the parser .
5054	Called when the entity is updated .
5055	Close all registered listeners .
5056	Start the server .
5057	Validates options .
5058	Validate arguments .
5059	Subscribe a listener to the server .
5060	Unsubscribe a listener
5061	Unsubscribe the given header .
5062	Unsubscribe a message .
5063	Sends a message to the destination .
5064	Gets the next message from the queue .
5065	Returns true if the given receipt_id exists in the queue .
5066	Clears the given receipt_id .
5067	Log a dead event .
5068	Convert the given object to the given object .
5069	Gets the priority .
5070	Executes the given parser .
5071	Inject options .
5072	Adjusts the arguments of a method .
5073	Executes the given personality .
5074	 tag .
5075	Handle actual request .
5076	Handles the CORS request .
5077	Sets the options .
5078	Checks the Java home directory .
5079	Filter the given list of strings .
5080	Returns a string representation of the packages .
5081	Writes the dependencies .
5082	Compares this instance .
5083	Get the IO .
5084	Get the image system .
5085	Get the price strings .
5086	Get the resource .
5087	Get the zips .
5088	Get the digest .
5089	Gets the string .
5090	Gets the resource service .
5091	Gets the pricing service .
5092	Get instance service .
5093	Returns a set of object ids for the uploaded file .
5094	Create an object from a file .
5095	Stores a list of values into a list .
5096	Ensure that the metadata table exists .
5097	Creates a source detail object .
5098	Validates the given text .
5099	Validate arguments .
5100	Validates options .
5101	Loads a class from the classpath .
5102	Returns true if the given URI matches the given URI .
5103	Load the given file URI .
5104	Runs the command .
5105	Read commands from xml file .
5106	Process the request .
5107	Pre process .
5108	Create a new database .
5109	Validates this database .
5110	Returns the history for the given list of users .
5111	Initialize the database .
5112	Convert a list of statements to statements .
5113	Find a notable link with the given calendar name .
5114	Updates the given note .
5115	Parse options .
5116	Send a server .
5117	Returns the string representation of the source code .
5118	Gets the link .
5119	Send a command .
5120	Create an XML context .
5121	Creates the box list .
5122	Create a box tree from the specified box list .
5123	Computes the backgrounds for the given node .
5124	Sets the mapping file .
5125	Get mapping file .
5126	Creates a version range from the given version specification .
5127	Concatenates this transform to another .
5128	Transform a rectangle to a rectangle .
5129	Returns the minimum bounds of the box .
5130	Recompute the visual bounds .
5131	Resets the bounds of this node .
5132	Computes the content bounds of the box .
5133	Returns the top border of this box .
5134	Returns the bottom border of this box .
5135	Returns the left border of this box .
5136	Returns the left border of this box .
5137	Returns the color of this box .
5138	Returns true if this node contains the specified child .
5139	Adds all children of this node to this list .
5140	Process the given command .
5141	Create a DataSource .
5142	Create a DataSource for this database .
5143	Setup the configuration .
5144	Query for the given method .
5145	Register a command .
5146	Registers a command .
5147	Unregister a parameter .
5148	Executes the command .
5149	Starts the command .
5150	Search by state .
5151	Returns the detail of a committee .
5152	Connects to a JMX connector .
5153	Gets a property .
5154	Invokes the given proxy .
5155	Search by state .
5156	Search for a method .
5157	Lookup a boundary .
5158	Returns metadata for the given state .
5159	Create an object from an interface .
5160	Register an MBean .
5161	Unregister an MBean .
5162	Validates an MBean .
5163	Returns a random UUID .
5164	Adds a value to this field .
5165	Search by state .
5166	Search by state active
5167	Search by state term .
5168	Search for a state .
5169	Returns the detail of the given object .
5170	Compares this object .
5171	Sets the mapped class .
5172	Invokes the method .
5173	This method returns the number of times .
5174	Builds the client .
5175	Returns the minter request .
5176	Get response text from response text .
5177	Parses an XPath expression .
5178	Get the current PID as a string .
5179	Creates a configuration binder for a class .
5180	Convert configuration to instance .
5181	Create a new FilterPattern instance .
5182	Execute the constructor .
