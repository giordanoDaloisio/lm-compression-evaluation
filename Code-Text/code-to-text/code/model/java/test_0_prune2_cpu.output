0	Appends the value to the queue .
1	Wrap an observable from an observable source .
2	Returns an Observable containing the elements in the list sorted by the given function .
3	Creates an Observable observe on the given SchedulerObservable .
4	Create a new unicast processor .
5	Create a new UnicastProcessor .
6	Try to try to subscribe to a publisher .
7	Creates a flowable representation for the given value using the provided mapper .
8	Resets the default settings .
9	Create a Maybe from a CompletableSource .
10	Create a Maybe from a single source .
11	Retries the task with the given predicate .
12	Require a non - null object .
13	Returns the identity function .
14	Static factory method .
15	Creates a function that returns the given value .
16	Creates a cast to the given target class .
17	Create a new unicast subject .
18	Create a new uncast subject .
19	Create a new uncast subject with the given capacity .
20	Create a new unicast subject with the given delay .
21	Waits for an error .
22	Waits for an error to get .
23	Wait for the current item in the queue and return true .
24	Drains the queue .
25	Submits a request for prefetching .
26	Post a post complete event .
27	Completes the current computation .
28	Get the value .
29	Get the error value .
30	Validates that the upstream and downstream is not null .
31	Atomically updates the upstream with the next reference .
32	Validate the given upstream and cancel the next subscription .
33	Atomically updates the upstream with the given subscriber .
34	Add a long .
35	Multiplies a long .
36	Atomically adds the specified item to the current AtomicLong if necessary .
37	Convert an exception to a null pointer exception .
38	Adds an object to the end of the list .
39	Shutdown the program .
40	Creates a scheduled executor service .
41	Sets the subscription .
42	Emits the loop .
43	Wrap the specified error if it is a RuntimeException .
44	Flattens a Throwable into a list
45	Throws an exception if the given exception is an exception .
46	Clear resources .
47	Returns the number of resources in this group .
48	Try to try to subscribe to an observable source .
49	Creates an Observable from a scalar value .
50	Accepts a notification .
51	Accept an observer .
52	Start the queue .
53	Start unbounded array .
54	Offer an item to the queue
55	Retrieves the resource .
56	Completes the stream with the given value .
57	Handles an error .
58	Completes the future .
59	Concatenate a map with the given mapper .
60	Concatenate an iterable into a map .
61	Returns a stream of the elements in the list sorted by the given function .
62	Asynchronously waits for the amount of data to be processed .
63	Requests a number of events to the upstream .
64	Add the publisher to the end of the list .
65	Removes the publishDisposable from the list .
66	Observes a connectable flowable on the given scheduler .
67	Parses annotations on the method .
68	Sets the delay in milliseconds .
69	Creates the error response .
70	Calculate delay for a given time unit
71	Create sample data .
72	Returns the value of the given method .
73	Search for the given username .
74	Generates a hash from a raw password .
75	Returns true if the encoded password matches the given string .
76	Check the version against Spring Security core .
77	Returns whether or not the given spring version is disabled .
78	Retrieves spring security version .
79	Exchange by identifier pattern .
80	Get an OAuth2 client configurer .
81	Get an oauth2 resource server
82	Creates a channel security configurer that requires a channel request .
83	Compare the given attribute with the given name .
84	Retrieves an entry with the specified attributes .
85	Search for single attribute values .
86	Returns a set of all the attributes that match the given filter .
87	Search for a single entry in the directory .
88	Builds the search controls .
89	Looks up all the primary keys in the list .
90	Build the web authentication details object .
91	Creates the root bean definition .
92	Create servlet filter .
93	Create the jaas filter .
94	Creates a new type resolver .
95	Registers a spring filter chain in the web application .
96	Retrieves a token for a particular series id .
97	Retrieve a list of granted authorities .
98	Creates a new cipher instance .
99	Invoked after the application has been set .
100	Performs the actual authentication .
101	Check if the current authentication has changed .
102	Perform authentication .
103	Check content length .
104	Maps a collection of authorities to a set of authorities .
105	Sets URL to login processing URL
106	Update authentication defaults for the login page .
107	Update access defaults for this request .
108	Map the given password to a string .
109	Extract the cookie from the request .
110	Encode a set of cookie tokens .
111	Sets the cookie .
112	Resolve the given parameter .
113	Extracts the query string from the request .
114	Returns the port of the CAS service URL .
115	Retrieves the principal as a String .
116	Closes the session .
117	Authenticates the given authentication .
118	Builds the provider URL .
119	Sets the context environment properties .
120	Returns the full URL .
121	Render the ui tag .
122	Initializes the user details service .
123	Gets the user details service .
124	Add the Pkce parameters to the given map .
125	Helper method to call the required authentication method .
126	Requests the service ticket .
127	Returns true if the request should be authenticate .
128	Returns whether the current authentication is authenticated .
129	Returns true if the request matches the request .
130	Create a method security expression root .
131	Retrieve JWK set .
132	Encode a string .
133	Utility method to get a collection of granted authorities .
134	Load user by assertion .
135	Get the pre - authenticated principal .
136	Concatenate arrays .
137	Creates a subarray from a byte array .
138	Get a list of all granted authorities .
139	Pre - processes the given map into a collection of granted authorities .
140	Creates a collection of granted authorities .
141	Adds a collection of granted authorities to the given collection .
142	Retrieves the pre - authenticated principal from the request .
143	Retrieve a shared object .
144	Build the redirect URL for the given request .
145	Invoke interceptor .
146	Helper method to determine if the user has a role .
147	Convert a list of roles to an array of roles .
148	Process the auto - login cookie .
149	Called when the login succeeded .
150	Attempts to create a switch user for the given request .
151	Attempts to exit the current user .
152	Sets the exit user URL .
153	Display public index .
154	Build spring filter chain .
155	Decode the given token .
156	Return true if access expression is true .
157	Determines whether or not the current credential is allowed to access the given URL .
158	Converts a JWT to a collection of granted authorities .
159	Generate a CsrF token from the request .
160	Display admin permission .
161	Display the add permission for a specific contact .
162	Add a Permission .
163	Deletes a permission .
164	Returns the role with the default prefix if the prefix is null .
165	Creates a new UserDetailsResourceBean from a string representation of a user details resource .
166	Returns the attribute values for the given name .
167	Returns the first attribute value for the given name .
168	Encode a string .
169	Decode bytes .
170	Look up parameter names in the given object .
171	Add a contact .
172	Find attributes that match the given method .
173	Add a secure method to the registry .
174	Get all config attributes .
175	Checks if the mapped method name matches the mapped method name .
176	Configures an AnyRequest that matches any request in the chain .
177	Handle bind exception .
178	Get a random contact
179	Removes authentication attributes from the session .
180	Gets the field on the given class .
181	Create service url .
182	Creates the redirect url .
183	Extract the prefix for a SHA prefix .
184	documentation inherited from client
185	Checks the stack for a list of filters .
186	Return an array of registered types .
187	Retrieves the cause for the given throwable .
188	Register an access manager
189	Converts a collection of authorities to a set of authorities .
190	Compares two byte arrays .
191	Sets the default failure url .
192	Apply a function to resolve hidden hidden inputs .
193	Builds the request URL .
194	Replies if the given URL is an absolute URL .
195	Creates an attribute list based on the given identifier .
196	Extracts the identifier from the given result set .
197	Create entries in the given ACL .
198	Inserts an ObjectIdentity into the database .
199	Updates the object identity .
200	Saves the request .
201	Creates a new server web exchange matcher .
202	Returns a match matcher that matches the exchange .
203	Creates a text encryptor for the given password and salt .
204	Creates a text encryptor .
205	Creates a text encryptor that encodes the given password using the given salt string .
206	Write the headers to the response .
207	Determines the target URL for the given request .
208	Determines the target URL .
209	Sets the target URL parameter .
210	Retrieves the directory with the given id .
211	Build a distinguished name from the given username .
212	Creates a shared object map .
213	Configure jaas using login configuration .
214	Get the current date
215	Parse a date string .
216	Update the cache with the specified key in the cache .
217	Set the authentication details from the request .
218	Determines the security name for a subject .
219	Returns a list of groups for the given security name .
220	Changes the password of the given user .
221	Build a group Dn from the group name .
222	Throw an exception if the list of sessions is exceeded .
223	Copy details from source to destination
224	Retrieves the filters for the given request .
225	Returns a list of filters based on the URL .
226	Retrieves the web application context .
227	Get the full name from the given distinguished name .
228	Update the session attributes
229	Creates a basic authentication scheme .
230	Add filters to the list .
231	Add a filter to the REST endpoint .
232	Creates a basic authentication scheme .
233	Creates a new authentication scheme given a user name and a user name .
234	Creates a new authentication scheme .
235	Creates a proxy for the given URI .
236	Print the response options to the given PrintStream
237	Return a RestAssuredConfig for the given redirect
238	Configures the default encoder for the given charset .
239	Configures the default object mapper based on the given mapper type .
240	Creates a new object mapper configuration for the given JAXB object mapper .
241	Creates a mock mock config object that can be used to configure the log .
242	Creates a mock configure object for the given session configuration .
243	Creates a mock mock object from mapper config .
244	Creates a mock mock config from the given json config .
245	Creates a mock mock config from xml configuration .
246	Returns the rest of the encoder config .
247	Creates a mock mock configuration for the given header config .
248	Creates a mock mock config with async config .
249	Creates a new mock configuration object with the given mock mock config .
250	Creates a mock mock configuration for a multi part configuration .
251	Creates a new mock config object based on the configuration provided .
252	Resolves a matcher configuration .
253	Allow all hostnames in the trust store .
254	Creates an XmlPathConfig object that declares namespaces declared in the given map .
255	Returns an XmlPathConfig with the given prefix .
256	Perform a HTTP request .
257	Sets the request headers .
258	Set the proxy to use for a proxy .
259	Sets the control name .
260	Adds the given header name to the list .
261	Set the credentials to the given host using the given username and password .
262	Set ntlm for the given host and port
263	Create headers from a given header .
264	Reset the mock factory .
265	Sets an HTTP header .
266	Build the response .
267	Applies a cookie matcher to the response .
268	Applies a cookie matcher to the cookie .
269	Applies the expiry date to the expiry date .
270	Applies a cookie matcher to the response .
271	Applies a cookie matcher to the cookie .
272	Applies the given matcher to the given CredC cookie .
273	Applies a cookie matcher to the cookie .
274	Applies a cookie matcher to the detector .
275	Applies a cookie matcher to the cookie .
276	Expect a header to be read .
277	Adds an expected header to the response .
278	Adds a cookie to the response .
279	Creates a proxy configuration for this host .
280	Configure the given number return type .
281	Returns a new JsonPathConfig with the given parser type .
282	Configures the default logging for the given print stream .
283	Enables logging of the request and response validation if validation fails .
284	Creates an HTTP request based on the given URI and the given uri .
285	Creates a default configuration with a default value .
286	Adds an attribute to the request .
287	Add a header to the request .
288	Add a multi part to the request .
289	Adds additional result handlers to the MockMvcRequest .
290	Creates an HTTP client config with the given parameter name and value .
291	Add additional parameters to the http client .
292	Configures the HttpClientFactory to use for the given HttpClientFactory .
293	Configures the HTTP client with the given Http Multipart mode .
294	Retrieves an object .
295	Retrieve an integer value .
296	Returns the value for the given path .
297	Retrieve a short value .
298	Get a float value .
299	Returns the attribute value as a double .
300	Retrieves a long value .
301	Retrieves an unmodifiable list from the given path .
302	Gets a map value .
303	Gets an object by its path .
304	Sets the body of the request .
305	Add cookie to request .
306	Add a parameter to the request .
307	Add a parameter to the request .
308	Create a new form params config for the form parameters update .
309	Logs the response to if it matches the given matcher .
310	Creates a new cookies with the given additional cookies .
311	Clean up all entries in the backing map .
312	Indexes the binding for the given level .
313	Retrieves a binding for a given key .
314	Creates a binding for a given key .
315	Cleans up the JITBindingImpl and any JITBindings that fail .
316	Remove a JIT Binding that should be failed .
317	Returns the set of internal dependencies for a binding .
318	Creates an uninitialized binding .
319	Returns an array of all the parameters in the given context .
320	Adds an injector to the state machine .
321	Binds a Logger instance to the given injector .
322	Returns true if missing binding annotations on the given member .
323	Determine whether a method is overrides a method
324	Initializes the delegate .
325	Return the type for this provider .
326	Resolves a list of type literals .
327	Casts the given type to the given key .
328	Prepare required converters .
329	Returns the given class loader .
330	Returns true if the class has the same name as the given class loader .
331	Determine whether the given member is public callable .
332	Returns the annotations of the key .
333	Requests an inject listener for the given injection point .
334	Validates all pending injections .
335	Creates an instance of the class with the given arguments .
336	Factory method for creating a servlet request .
337	Creates an instance of the given scope using the given provider .
338	Make a scoping for the given scoping .
339	Normalize the given path .
340	Generates an annotation for the given annotation type .
341	Returns true if retention is applied at runtime .
342	Finds the scope annotation with the given annotations .
343	Returns the key for the given type and annotations .
344	Returns the name of the given key .
345	Initialize provider .
346	Adds the direct type binding to the binding selection .
347	Retrieves a constructor from the cache .
348	Returns true if the interceptor class has a scope annotation .
349	Creates a real map binder .
350	Returns the key for the given key .
351	Creates an instance of the given construction context .
352	Replaces the source object with a message .
353	Create a Module for a given module .
354	This is a convenience method .
355	Returns true if the given type is not fully specified .
356	Returns true if the constructor has the given parameters .
357	Returns the set of dependencies for the given ctor .
358	Removes annotated dependencies from given set .
359	This method checks if the current injector is valid for the given injector and if so return true .
360	Retrieves a binding from a new injector .
361	Invoke the method for the given method .
362	Exists missing implementations for a specific key .
363	Installs a real multibinder .
364	Returns the key for a new item .
365	Find the next filter in the request .
366	Returns whether or not the given injector has at runtime .
367	Gets the internal constructor .
368	Returns the dependencies for this instance .
369	Creates a Module for the given module .
370	Returns the annotation for the given method .
371	Gets the line number for the given member .
372	Initialize the given lookups .
373	Wrap a callable in a callable
374	Creates a callable that transfers the given callable .
375	Validates that the given value is compatible with the given key .
376	Retrieves a member object from the cache .
377	Creates an injector for the given type listener .
378	Creates an immutable list of injectors for the given injection point .
379	Creates a key for the given type and annotation strategy .
380	Returns a strategy for an annotation .
381	Returns a strategy for the given annotation type .
382	Removes all stack trace elements from the stack trace .
383	Get the binding source as a string
384	Format the given error messages as a string .
385	Creates a message with the given message format and arguments .
386	Creates a message for the given Throwable and message format .
387	Creates a message based on the given message and source .
388	Convert object to object
389	Checks if the class should be skipped .
390	Creates an object from a list of module class names .
391	Main method .
392	Push the dependency with the given source .
393	Push the given key to the given key .
394	Creates an initializer for the given value .
395	Retrieves an instance of the given provider .
396	Process a connection event type .
397	Adds a connection event processor .
398	Retrieve the result of a future .
399	Supply throw an unchecked exception .
400	Registers a processor for command code .
401	Registers the default processor .
402	Get processor by command code .
403	Tries to get the given url .
404	Decode protocol code .
405	Retrieves all connections in the current connection pool .
406	Scans the connection pool for connections .
407	Get and initialize a connection pool with the given URL .
408	Get a connection pool and add it if needed .
409	Remove task from pool .
410	This method is called when a connection is needed .
411	Creates a connection to the connection pool .
412	Close a connection
413	Invoked when a connection is closed .
414	Closes the connection .
415	Sets an attribute if it s not already present in the map .
416	Register a processor to the rpc server .
417	Registers a processor to the rpc server .
418	Dispatch an rpc request to a user processor .
419	Helper method to deserialize rpc request .
420	Preprocess the remoting context
421	Logs the timeout for a request .
422	Logs the rpc request .
423	Process the message .
424	Invoke the invocation callback .
425	Invoke on the remote endpoint .
426	Convert a bit set to a byte value .
427	Convert an integer value to a BitSet .
428	Add a reconnect task .
429	Stop this process .
430	Converts the request to a remoting command .
431	Filters the given list of connections .
432	This method monitors all connections in the connection pool .
433	Close the last select connections
434	Retrieve a boolean value .
435	print info log
436	Check if this request is a request timeout .
437	Retrieves a user processor by name .
438	Get a random connection from the list .
439	Retrieves a value from the context .
440	Get a property by key .
441	Resolve the response object for the response .
442	Deserialize rpc response object .
443	Deserialize an error response to a Throwable .
444	Helper method for getting error message from server error message .
445	Create rpc server exception .
446	Utility method to print a log entry to the supplied Logger .
447	Obtain a new event loop group .
448	Parse the remote address .
449	Parse the local address of the given channel .
450	Get the remote IP address from the given channel .
451	Returns the host name of the remote host .
452	Get the local IP address from the given channel .
453	Retrieves the port number from the given channel .
454	Returns the local port for the given channel .
455	Parse a socket address to host IP address .
456	Adds a connection to this scope .
457	Remove and close the connection
458	Retrieves a connection .
459	Registers a custom serializer for the given class .
460	Get a custom serializer
461	Registers a custom serializer for a command code .
462	Get a custom serializer by code .
463	start monitoring executor thread
464	Check if the remote address is connected .
465	Initialize write buffer water mark .
466	Creates a frame for the given opcode .
467	Try to write batches to the socket .
468	Set the status code for this connection .
469	Validate the payload .
470	Update the Payload .
471	Returns true if there is a protocol that matches the requested protocol .
472	Translates single frame length limit .
473	Check a single frame size .
474	Generate the final key .
475	Check for continuous frame
476	Process binary data .
477	Log a runtime exception .
478	Process message payload .
479	Adds the current frame to the web socket
480	Check that the current frame is not finished
481	Called when a frame is closing .
482	Checks the buffer limit .
483	Returns the payload from the given ByteBufferListList .
484	Returns the size of the ByteBuffer list .
485	Creates a new handshake builder for the given request line .
486	Creates a new handshake builder .
487	Decode remaining frames .
488	Closes the connection due to an error .
489	Closes the connection due to an internal error .
490	Generates the HTTP response for an error .
491	Send text to the web socket .
492	Reset the connection to the websocket .
493	Starts the connect read thread .
494	Returns the port for the given URI .
495	Sends the handshake .
496	Set the connection lost timeout .
497	Stop connection lost timer .
498	Start connection lost timer .
499	Restarts the connection lost timer .
500	Try to close a connection lost .
501	Cancels the connection lost timer .
502	Invoked when a handshake was received .
503	Sends a ping frame .
504	Stop the socket .
505	Get the current port .
506	Take an additional read from the queue .
507	Accepts the selector .
508	This method performs a single read .
509	Perform the actual write operation
510	Initializes the selector and registers the selector thread .
511	Ensure that one thread can be started
512	Shutdown server .
513	Get Socket from WebSocket
514	Broadcasts data to all clients .
515	Broadcast the text to a collection of clients .
516	Broadcast data to a frame
517	Create a list of frames for a specific draft
518	Copies the given source to the given destination .
519	Starts the persistence unit .
520	Get an entity manager by name .
521	Adds a new transactional block .
522	Convert the given arguments to a scalar buffer .
523	Wrap arguments to a list .
524	Gets a localized message .
525	Creates a translated message .
526	Returns whether the specified key is defined for the specified language .
527	Returns the preferred messages for this language .
528	Provides preferred messages for this request .
529	Sets the translation for this result .
530	Convenience method to add bindings to the bindings .
531	Bind the given modules .
532	Add bindings .
533	Overrides the default behavior of this instance .
534	Configures the specified modules .
535	Apply the given bindings to be overridden .
536	Disable the specified modules .
537	Call the given context and return the result .
538	Call the given request .
539	Return existing file in env
540	Returns the binding .
541	Creates a tuple from two values .
542	Creates a tuple of degree 5 .
543	Converts the given ExecutionContext to Executor
544	Creates a new JPAConfig instance .
545	Creates a JPAConfig instance .
546	Creates a new JPAConfig object from the given map .
547	Creates a flow from a string .
548	Creates a flow from a JsonNode .
549	Add constraint validator .
550	Creates an instance of the given constraint .
551	Get the method matching the given name and parameter types .
552	Called when an error occurs .
553	On bad request .
554	On forbidden pages .
555	On not found response .
556	Handles the error .
557	Logs the error .
558	Converts a throwable to a useful exception .
559	Called when an error occurs .
560	Invoked when an error occurs .
561	Creates a new documentation handler from a list of resources .
562	Creates a new documentation handler from the given directory .
563	Create a new build doc handler from a directory and a jar file .
564	Creates a new documentation handler from a directory and a jar file .
565	Creates a documentation handler from a jar file .
566	Consumes the data stream .
567	Creates an HttpEntity from a Content - Type .
568	Creates an HttpEntity from string .
569	Creates an HTTP chunked entity from the given data source .
570	Creates a result with an HTTP status .
571	Sends a status message .
572	Creates a response with the given content .
573	Sends an HTTP response to a response with an HTTP status .
574	Returns a result with the given status code and content .
575	Find a user by id .
576	Returns the preferred language for this collection .
577	Make a unique call to this url
578	Make a call to a URL
579	Returns the absolute URL for the given request .
580	Returns the full URL for the given request .
581	Invokes a function on a connection function .
582	Applies a connection function to the connection call .
583	Returns a server for the given mode and port .
584	Convert an object to a JsonNode .
585	Converts a JsonNode to an object of the given type .
586	Parse a string into a JsonNode .
587	Parse the given input stream into a JsonNode .
588	Return the relative path to the target path .
589	Returns the canonical form of the given url .
590	Creates a list of constraints from a set of constraints .
591	Create a tuple with attributes of a constraint .
592	Applies a timeout to the given CompletionStage .
593	Tells whether or not the given class array is assignable .
594	Parses a cron expression .
595	Returns the interval for the given cron .
596	Factory method to create an AWC WSWS client .
597	Create a builder from the given application context .
598	Returns the result
599	Add a session to the session
600	Set a flash value to flash
601	Qualifies the binding key .
602	Sets the binding key .
603	Converts the binding to the given implementation .
604	Convert this object to Java binding
605	Create a binding from the given supplier .
606	Converts the binding to the given key .
607	Convert the underlying provider to a Java provider .
608	Obtains a list of available languages .
609	Returns preferred language .
610	Creates a new evolutions reader from a map of evolutions .
611	Creates an object from the default evolutions reader .
612	Cancel all evolutions in the database .
613	Adds configuration loader to the application .
614	Applies a loader to the application .
615	Loads Guice application with given modules .
616	Load a set of Guice application from the Guice application .
617	Load a set of modules .
618	Load bindings from the given bindings .
619	Creates a Guice application builder .
620	Encodes the given cookie .
621	Retrieves the entity manager associated with this context .
622	Returns the current emitter stack .
623	Pushes an entity manager to the stack .
624	generate bypass with flow .
625	Creates a flow with the bypasser .
626	Flow factory methods
627	Converts an array of arguments to an unmodifiable list .
628	Creates a form with the specified value .
629	Returns the global errors .
630	Converts errors to JSON .
631	Returns the value for the given key .
632	Fill the dynamic form with the specified value .
633	Parse the given string to the given class .
634	Converts the given text to the given type .
635	Print the given object
636	Print a field .
637	Print the given type .
638	Register converter for given source type .
639	Registers a formatter for the given class .
640	Registers an annotation formatter for the given type .
641	Encodes the given cookie .
642	Selects all nodes within the specified path .
643	Convert a Java List into a Java sequence .
644	Convert an array to a sequence .
645	Create a sequence from an array .
646	Creates a mapped web socket acceptor .
647	Accepts a new WebSocket or Flow .
648	Set accessable object .
649	Computes the cost for a primitive class .
650	Computes the total cost for the given source arguments .
651	Compute the cost of a source class and a target class
652	Gets a specific message .
653	Gets a message at the given keys .
654	Creates a new database from the given url and config .
655	Creates a serializer for an array of arrays .
656	Perform a quick sort
657	Merge sort .
658	Invoke the method .
659	Cast an integer to a type .
660	Loads the argument at the given index .
661	Emit a field instruction .
662	Push zero or null value onto the stack .
663	returns the unbox or null if the type is null .
664	Process an array .
665	Ignore null to null
666	Resolve all bridge signatures .
667	Get methods from superclass and interfaces .
668	Filters the constructors in the given class .
669	Sets the superclass of this object .
670	Generate a get field by name .
671	Adds the given method to the list of methods .
672	Compute the cardinality .
673	Set naming policy
674	Find methods .
675	Resolve a child path .
676	Reads a string from a file .
677	Sets the host to host .
678	Create an HTTP request with the given method and destination .
679	Start connect request .
680	Start a GET request .
681	Start a POST request .
682	Start a PUT request .
683	Start a PATCH request .
684	Start a DELETE request .
685	Start HEAD request .
686	Start a TRACE request .
687	Start HTTP OPTIONS request .
688	Sets the path .
689	Add cookies to the request header .
690	Add one or more parameters to the request .
691	Add a query map
692	Set the query string for this request
693	Get the query string .
694	Get the host URL .
695	Set the basic authentication header
696	Set host header .
697	Generate a request buffer .
698	Send and receive response .
699	Remove a range from the given range .
700	Get the length of the exception table .
701	Collects all interceptors .
702	Collect all the action filters .
703	Collect all action results .
704	Collect all actionRuntimes .
705	Set a simple property .
706	Retrieves the index property for the specified bean .
707	Extract the property name from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Retrieve an object reference by name .
711	Lookup an object reference .
712	Returns the descriptor for the given table .
713	Find the entity descriptor for a given column reference .
714	Retrieves the alias for a table .
715	Register a table reference .
716	Look up a table reference by name .
717	Register a hint .
718	Serialize the given value to the given JSON context .
719	Inject attributes in the servlet request .
720	Applies parameters to the servlet request .
721	Inject uploaded files .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Converts a column name to a column name
725	Stores value in prepared statement .
726	Prepares the object for the given type .
727	Get all wrappers .
728	Creates a new wrapper for the given class .
729	Create a new wrapper object
730	Converts the given path to the system separators to the system s separators .
731	Determines the path for the given filename .
732	Splits the given filename .
733	Returns a relative path relative to the given basePath .
734	Register a madvoc component .
735	Add an action configuration to the web app .
736	Start the web browser .
737	Registers the default actions .
738	Register the madvoc components .
739	Exclude the given jars to be excluded .
740	Includes included jars .
741	Includes the given entries .
742	Exclude the given entries .
743	Scans a jar file .
744	Scans all class files in the given directory .
745	Returns the bytecode signature of a class .
746	Scan given paths .
747	Scans the entries .
748	Create a new transaction .
749	Returns the default scope for the given scope .
750	Retrieves or creates a new scope with the specified madvoc scope .
751	Creates a consumer for the specified scope type .
752	Decode a byte array to a byte array .
753	Creates a CSRF token from the given HttpSession .
754	Ensure the size of the set is expired .
755	Checks if a CSRF token is expired .
756	Create a copy of the given object .
757	Copy this instance .
758	Visit a property .
759	Initialize this template .
760	Resolves a scope .
761	Register a new Petite bean .
762	Registers a bean definition .
763	Remove a bean from the list
764	Resolve bean names for the given type .
765	Register an injection point for the given bean name .
766	Registers a new PropertyInjectionPoint for the given property name .
767	Register an injection point for the given bean name .
768	Registers an injection point for the given bean name .
769	Registers init methods for the given bean name .
770	Register destroy methods for given bean name .
771	Registers a new provider .
772	Register a provider .
773	Applies the given bean type to the given bean type .
774	Define the given map of parameters .
775	Invoke an action .
776	Resolves the Java version .
777	Push an integer onto the stack .
778	Check argument index .
779	Creates a field name for an extended advice field .
780	Returns the name of the advice method .
781	Load all the arguments of the given method .
782	Load method arguments from the given method .
783	Load method arguments from the given method .
784	Loads a method argument .
785	Store an argument .
786	Prepares the return value for the given method .
787	Creates a key for a method signature .
788	Create an array .
789	Store an array .
790	Extract encoding from content type .
791	Returns true if the flags are empty .
792	Resolves the bearer token from the given request .
793	Require authentication .
794	Prepare file for download .
795	Set the content - type header to the response .
796	Retrieves all cookies with the given name .
797	Read the request body from the request .
798	Read the request body from the stream .
799	Stores the context path in the given page context .
800	Stores the context path .
801	Returns whether the given name is a query parameter .
802	Prepares an array of parameter names to represent an array of parameters .
803	Copies parameter names to the attributes of the servlet request .
804	Invokes the given body .
805	Render body .
806	Render body to string .
807	Invoke init methods on the bean definition .
808	Call destroy methods on the bean definition .
809	Creates new bean instance
810	Inject parameters .
811	Rewrite action path .
812	Add a header .
813	Put a new value into the map
814	Put base property .
815	Put a property in the profile .
816	Get a profile property .
817	Resolves the given string for the given macro .
818	Extract the target map from the given profiles .
819	Reads a 32 - bit word from a byte array .
820	Hash a password using the given salt .
821	Checks whether a plaintext has the given plaintext .
822	Copies all data from the stream to the output stream .
823	Copies data to the output stream .
824	Parse an action .
825	Resolve the action configuration for an action .
826	Detect alias .
827	Read an action interceptors .
828	Read the filtered actions .
829	Read the package action path .
830	Read method action path .
831	Parse the alias from annotation values .
832	Create an action runtime .
833	Sets the last modified time of the response .
834	Applies an advice to the proxy .
835	Injects the target object into the proxy .
836	Visit an annotation .
837	Resolves the real name .
838	Resolve a real name .
839	Looks up the type data for the given class .
840	Lookup type data for a given type .
841	Finds the type data for the given class .
842	Resolves a Json name .
843	Resolves the real name for a type .
844	Get the file content .
845	Copies the bootstrap_methods array to the byte buffer .
846	Sets the major version and class name .
847	Puts the constant pool into the given byte vector .
848	Puts the bootstrap methods into the given byte vector .
849	Add a constant field reference .
850	Adds a constant method ref .
851	Adds an entry to the constant pool .
852	Add an entry reference to the constant pool .
853	Adds an integer to the constant pool .
854	Adds an integer or float entry to the table .
855	Adds a constant to the constant pool .
856	Adds a constant or double entry to the table .
857	Adds a constant name and type to the constant pool .
858	Add a constant name and type .
859	Adds a string constant to the constant pool .
860	Adds a string constant to the table .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a constant .
864	Adds a constant to the given bootstrap method .
865	Adds a constant to the constant pool .
866	Adds an entry to the constant map .
867	Adds a constant to the constant pool .
868	Adds a reference to the constant map .
869	Add the given bootstrap method handle the given bootstrap method .
870	Adds the merged type information .
871	Compute the hash for a name .
872	Clear all entries in the map .
873	Returns all values for the given name .
874	Returns an iterator over the entries in the map .
875	Returns a list of all entries in the map .
876	Increases the capacity by the minimum capacity .
877	Appends a character sequence to the buffer .
878	Visit an annotation .
879	Create the next proxy method .
880	Create the first chain delegate for this chain .
881	Generate the first method delegate to the chain .
882	Create a Path from the given string .
883	Adds a field to the current path .
884	Configure the servlet context .
885	Execute the target method
886	Return all the field descriptors .
887	Create a BeanDefinition for a proxy .
888	Convert JTA transaction mode to DbTransactionMode
889	Reads a property from the source object .
890	Puts all the entries in the given map into the given map .
891	Append a buffer to the end of the list .
892	Write all the objects to a writer
893	Write all the objects to the output stream .
894	Writes the object to the output stream .
895	Get a string from the map .
896	Returns the integer value for the given key .
897	Get a long value .
898	Get a double value .
899	Get a float .
900	Get a value from the map
901	Put a string value into the map
902	Open folder .
903	Receive messages based on the given filter .
904	Updates the flags for a received email .
905	Closes a folder if already opened .
906	Looks up a parameter with the given name .
907	Creates an alias for the given target name .
908	Validates an action against this context .
909	Adds a new Violation violation .
910	Sets the mime type .
911	Sets the raw data to download .
912	Sets the target input stream .
913	Set the target class name .
914	Sets the target class .
915	Creates proxied data .
916	Create the proxy .
917	Define the proxied proxy .
918	Creates a new instance of this class .
919	Writes the given byte array to the debug folder .
920	Add an email address to the given personal name .
921	Add to the given address .
922	Add to a recipient
923	Sets the reply to the email address .
924	Sets the cc recipient addresses .
925	Create a text message .
926	Convenience method to send an HTML message .
927	Add a header .
928	Retrieves the value for the given name .
929	Returns the boolean value for the given name .
930	Retrieves an integer property by name .
931	Retrieves a long value .
932	Get the resolved parameters .
933	Serialize the given key value to the given JSON context
934	Looks up a path alias for an alias .
935	Resolve alias .
936	Resolves an alias in the path
937	Resolves the result path with the given path .
938	Returns the index of the last slash in the given string .
939	Returns the last index after a slash .
940	Returns the index of the first slash after the given slash .
941	Strips the last camel word from the name
942	Resolve the schema name for the given type .
943	Creates a DbEntityColumnDescriptor for the given property .
944	Initializes this sketch with the specified key and tweak .
945	Multiply a row .
946	Implementation of the shift operation .
947	Calculate key schedule .
948	Initialize the key message with the given key message .
949	Encrypts a block .
950	Converts a byte array into an array of longs .
951	Removes the given string starting at the end of the string .
952	Returns the path to the target method .
953	Copies the given file to the given zlib .
954	Copies the given file to the given file .
955	Ungzip a file
956	List the contents of a zip file .
957	Unzip the given file to the given destination directory .
958	Adds the given file to the ZIP output stream .
959	Adds content to the ZIP output stream .
960	Return the field descriptor for the given name or null if not found .
961	Returns the property descriptor for the given name or null if not found .
962	Sets the bundle name for this request .
963	Stores the locale in the session .
964	Retrieves the locale from the session .
965	Filters parameters for a bean name .
966	Add profiles .
967	Reads a little endian long from the given buffer at the given offset .
968	Reads data from an input stream and closes it .
969	Reads a label from the given bytecode offset .
970	Returns the bytecode offset for a type annotation .
971	Read array values .
972	Read verification type information .
973	Read the attributes of the bootstrap method .
974	Obtains a list of constructors from the ClassDescriptors .
975	Get the ctor descriptor for the given arguments .
976	Retrieves the TransientData map from the HttpServletRequest .
977	Creates a new request map from the given servlet request .
978	Convert an array to an array .
979	Initialize decora manager .
980	Add a consumer to the file
981	Add a search path .
982	Add a search path .
983	Includes the specified patterns .
984	Exclude the given patterns .
985	Add a path to the list .
986	Find all files .
987	Initialize todos .
988	Retrieves an iterator for the next file .
989	Resolves the bean wiring mode for the given type .
990	Resolves the bean name .
991	Get the output writer .
992	Get the output stream .
993	Returns the class name .
994	Creates a descriptor for a constructor .
995	Creates a string descriptor for the given return type and argument types .
996	Creates a string descriptor for the given method .
997	Append descriptor .
998	Get the size of this object
999	Compute the size of the arguments and return the number of arguments .
1000	Set the rollback only to be rolled back
1001	Commit or rollback .
1002	Rollback all resources
1003	Requests a resource .
1004	Flushes the pushed name .
1005	Write string .
1006	Writes unicode character .
1007	Write char sequence .
1008	Sets the logging log level name .
1009	Set the region .
1010	Returns true if the specified include string contains the specified include string .
1011	Registers a pseudo function .
1012	Look up a pseudo function by name .
1013	Write the destination object to the destination .
1014	Visit an annotation .
1015	Create a static init block .
1016	Create a proxy constructor .
1017	Processes the super class .
1018	Find the last index .
1019	Add the given string to the name .
1020	Replies the ASM instructions for the given class file .
1021	Collect all the AttributePrototypes from the Attribute .
1022	Registers the default SQL types .
1023	Register a new SQL type .
1024	Looks up the SqlType for the given class .
1025	Creates a SqlType for the given SqlType class .
1026	Creates a proxy for socks4 - 4 proxy .
1027	Creates a proxy info object .
1028	Factory method for creating a proxied proxy .
1029	Returns the total number of threads in the current thread .
1030	Returns the total count of threads with the specified status .
1031	Associate a transaction
1032	Merges the given transaction according to the given source and destination mode .
1033	Find a resource manager for the given resource type .
1034	Creates a proxy object
1035	Append the path name .
1036	Return left and pad the given text with the given size .
1037	Convert an object to a pretty string .
1038	Convert a string to a CamelCase .
1039	Formats a string .
1040	Convert tabs to spaces .
1041	Escapes a string .
1042	Unescapes a Java string .
1043	Retrieves a bean by its name .
1044	Get a bean by name .
1045	Initialize bean definition .
1046	Invoke provider method .
1047	Registers a bean .
1048	Set bean property .
1049	Retrieve bean property by name .
1050	Shut down this scope .
1051	Resolve parameter types for given method .
1052	Populates the body .
1053	Get the value for this property .
1054	Clean up the tree .
1055	Create an XML element node .
1056	Adds an element to the parent .
1057	Removes the last child node if it is empty .
1058	Get the query string .
1059	Get the class name for the given action .
1060	Calculates the to to to the given size .
1061	Iterate over a collection .
1062	Iterate over an array .
1063	Replace all occurrences of substrings with the given string .
1064	Replaces a character in a string with a given char .
1065	Replace all characters in the string with the given substrings .
1066	Replaces the first substring of the given string with the given string .
1067	Replaces the first occurrence of the specified char with the specified char .
1068	Replaces the last occurence of s
1069	Replaces the last char in s with the given char .
1070	Removes a string from a string .
1071	Removes the given character from the given string .
1072	Determines whether all of the given strings are empty .
1073	Determines whether all given strings are blank .
1074	To string array .
1075	Utility method to modify the first character case .
1076	Creates a title string .
1077	Appends the given character to the given string .
1078	Returns true if the given substring starts with the given index ignoring case .
1079	Returns true if string ends with the given character .
1080	Count the number of occurrences of the specified substring in the source string ignoring case .
1081	Utility method to compare two String arrays ignoring case .
1082	Returns the index of the first whitespace within the specified string .
1083	Strips the leading character from the string .
1084	Strips the given character from the beginning of the string .
1085	Strips the given character from the beginning of the string .
1086	Strips the given character from the beginning of the string .
1087	Strips the given character from the string .
1088	Crops all strings in the given strings .
1089	Trims left from left .
1090	Trim right part of the string .
1091	Returns the index of the first occurence of a string
1092	Joins a collection into a single string .
1093	Joins the given array using the given separator .
1094	Convert source string to given charset name .
1095	Checks if the specified character at the specified index is equal to the specified character .
1096	Surround the given string with the given prefix and suffix .
1097	Prefix the given string with the given prefix .
1098	Adds a suffix to a string .
1099	Cut the substring to the given string .
1100	Cut from string .
1101	Cut prefix .
1102	Cut the string with the given suffix .
1103	Cut the given string using the given prefix and suffix .
1104	Inserts a string into the source string .
1105	Creates a string that repeats the given number of times .
1106	Reverse the string .
1107	Returns the maximum common prefix of two strings .
1108	Find the common prefix .
1109	Shortcut to shorten a string .
1110	Convert a string to uppercase
1111	Removes the quotes from the given string .
1112	Convert byte array to hex string .
1113	Get bytes from string .
1114	Detect quote character .
1115	Visit an attribute .
1116	Visit an enum value .
1117	Visit an annotation .
1118	Register an entity type .
1119	Registers an entity with the specified type .
1120	Remove an entity from the map .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Injects the target object into the wrapper .
1124	Look up all the properties for a given type .
1125	Detect database and configure database .
1126	Closes the output stream .
1127	region OutputStream Implementation
1128	Remove the session id from the request .
1129	Get name .
1130	Serialize this object into a byte array .
1131	Write the message to a file .
1132	Writes the message to the output stream .
1133	Append argument .
1134	Prepends a string representation of an argument .
1135	Change return type .
1136	Strips all characters from the text .
1137	Registers a type converter .
1138	Looks up a type converter for the given type .
1139	Selects all nodes that match the given query .
1140	Processes a collection of CssSelectors .
1141	Processes the given list of selectors .
1142	Selects the first node that matches the given query .
1143	Walk all the descendants of the given node in the list .
1144	Walk through the root node .
1145	Selects and adds an element to the result .
1146	Perform a filter on the results
1147	Unpack a string into a char array
1148	Tries to read zzipped zz .
1149	Creates a page data .
1150	Remove the select part .
1151	Removes from from sql .
1152	Removes the last order by name .
1153	Decode HTML .
1154	Detect name .
1155	Add ORDER BY clause to the SQL statement .
1156	Builds the SQL for a select statement .
1157	Resolve all column mappings for the given type .
1158	Find by column name .
1159	Find column by property name .
1160	Returns the property name for the given column .
1161	Returns the column name for the given property .
1162	Retrieves the id value for the given object .
1163	Sets the id property on the given object .
1164	Returns the key value for the given object .
1165	Append a string to the array .
1166	Set the index .
1167	Expand the array .
1168	Calculate the length of the array
1169	Creates the message for the mixins .
1170	Creates a scoped proxy bean .
1171	Invoke the loop body .
1172	Initialize the map with the last modified time .
1173	Checks whether the given file should be accepted .
1174	Use the given watch file as a watch file .
1175	Start the timer .
1176	Called when a change is changed .
1177	Add an enumeration to the list .
1178	Compute the size of the field .
1179	Puts the field_count_count and attributes of the given byte vector .
1180	Creates a target .
1181	Writes the value to the given injection point .
1182	Writes a decorated page content to a writer .
1183	Parses the given content into the given content .
1184	Writes decorated content to the output stream
1185	Writes a region to the output stream .
1186	Starts the server .
1187	Runs a process result .
1188	Create an instance of IMAP SSLStore .
1189	Creates the output stream for this response .
1190	Initializes this template with the given template data .
1191	Append alias .
1192	Append column name .
1193	Add a rule .
1194	Applies the given value to the given blacklist .
1195	Processes the inclusion of the specified value .
1196	Check whether the specified value should be included in the exclude list .
1197	Returns the pseudo class name .
1198	Adds all elements in the specified collection to this collection .
1199	Find the insertion point at the given position in the list .
1200	Bind an annotation .
1201	Registers a new action configuration .
1202	Looks up the action configuration for the given action type or annotation .
1203	Applies an action consumer to the given action config type .
1204	Sets up system properties .
1205	Validates the given object with the given value .
1206	Find the last table node .
1207	Remove all child elements that are outside of the viewer .
1208	Registers session beans .
1209	Retrieves the session map from the given session .
1210	Initialize the proxy with the given name .
1211	Adds an advice init method .
1212	Ends the bundle .
1213	Adds information about the key .
1214	Extracts profiles and adds them to the key set .
1215	Add the given key to the hash map
1216	Convert a typed description to a class name .
1217	Convert a type ref into a type name .
1218	Convert a typed description to a signature .
1219	Convert a type to a name .
1220	Add all consumers to the list .
1221	Creates a collection .
1222	Converts an object to a single element collection .
1223	Converts an object to a collection
1224	Convert a collection to a collection .
1225	Converts a primitive array to a collection .
1226	Add a line number .
1227	Accept this line number .
1228	Puts the current instruction into the given bytecode .
1229	Add a forward reference to the given source .
1230	Resolves an ASM for the given instruction .
1231	Marks the given subroutine as part of the given subroutine .
1232	Add the given subroutine to the list of blocks .
1233	Compare two strings .
1234	Fixes the accent if it is already in the case .
1235	Put a byte into the buffer .
1236	Put two byte vector into buffer .
1237	Put short value .
1238	Put 12 bits into the buffer .
1239	Put 4 bytes into buffer
1240	Put an integer into the buffer .
1241	Put 2 byte array into buffer
1242	Put long .
1243	Put the given byte array into the buffer at the given offset .
1244	Increases the size of the data if necessary .
1245	Authenticate user via http session .
1246	Authenticate user via action request .
1247	Authenticate user via basic auth .
1248	Returns the default message for the given locale and key .
1249	Retrieves a resource bundle by name and class loader .
1250	Retrieves a value from an array at a given index .
1251	Sets the ID value for an entity .
1252	Saves an entity .
1253	Update an entity
1254	Update a property in the database .
1255	Updates the specified property in the specified entity .
1256	Find an entity by id .
1257	Find an entity by its name .
1258	Find an entity matching the criteria .
1259	Delete an entity by id .
1260	Delete an entity
1261	Counts entities by type .
1262	Increases the specified property on the specified entity type .
1263	Decreases the property of an entity .
1264	Find all entities related to the given object .
1265	Lists all entities in the given target class .
1266	Removes all attributes from this object .
1267	Returns a set of all the entries in the map .
1268	Associates the specified value with the specified key in the map .
1269	Removes an attribute from the map .
1270	Get the current stack trace .
1271	Get an array of stack trace elements from the given Throwable .
1272	Returns an array containing all stack traces of the given exception .
1273	Converts a throwable into an array of Throwables .
1274	Convert an exception stack trace to a string .
1275	Convert a Throwable to a String
1276	Builds a message with a detail message .
1277	Unwraps a throwable .
1278	Register an entry in the class scanner .
1279	Adds a new component class to the agent .
1280	Get the class loader
1281	Opens a resource as stream .
1282	Opens a resource as an InputStream
1283	Gets the resource as stream .
1284	Gets the resource as stream .
1285	Add a new chunk
1286	Find or create a child with the given value .
1287	Parse the request .
1288	Convert the given value to a collection .
1289	Invokes the setter method .
1290	Sets the value for the given array to the given value .
1291	Creates a bean property .
1292	Extract the type of the given bean property
1293	Stops the session .
1294	Starts the authentication token .
1295	Convert a LocalDate to a Date
1296	Convert a LocalDateTime to a Calendar .
1297	Define a proxy .
1298	Add a check .
1299	Resolve given target class .
1300	Adds all annotation checks for a given class .
1301	Collects all annotation checks for a given property .
1302	Collects validation checks .
1303	Copies the default check properties to the given destination .
1304	Encodes the given URI with the given encoding .
1305	Encodes the given string with the given encoding .
1306	Encodes the given scheme with the given encoding .
1307	Encodes the given host with the given encoding .
1308	Encodes the given port with the given encoding .
1309	Encodes the given path with the given encoding .
1310	Encodes the given query with the given encoding .
1311	Encodes the given query param with the given encoding .
1312	Encodes the given URI fragment with the given encoding .
1313	Return a HashMap of all the properties of the class .
1314	Get all property descriptors .
1315	Get the set - cookie headers .
1316	Unzips this response .
1317	Closes this connection .
1318	Accepts a reference scope .
1319	Prints all the routes in the web .
1320	Encrypt the given content
1321	Decrypt encrypted content .
1322	Converts a map to an object .
1323	Convert a list to a bean .
1324	Set the value for the given property .
1325	Convert a map to a new map .
1326	Compares the specified object with the specified column name .
1327	Sets the default header for this request .
1328	Send a request .
1329	Send a request to the HttpResponseProvider .
1330	Adds the default headers to the request .
1331	Read cookies from the response .
1332	Add cookies to the http request
1333	Send an email .
1334	Set the subject to a mime message .
1335	Helper method to set the sent date .
1336	Sets the headers in the message to the given mime message .
1337	Sets the recipients from an email message .
1338	Sets the recipient addresses .
1339	Add body data to a mime message .
1340	Set the content of an email message .
1341	Create body part from an email attachment .
1342	Retrieves the content type from the given data header .
1343	Save result set .
1344	Close all result sets
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size .
1348	Sets the maximum number of rows for this query .
1349	Execute an update .
1350	Execute the query .
1351	Get the generated columns .
1352	Get the query string .
1353	Creates a proxy of the given target object .
1354	Returns a Collection of the given Iterator .
1355	Create stream of the given iterator .
1356	Compares two objects .
1357	Sets the default wiring mode
1358	Print a message to the console .
1359	Returns the class name of the stack trace .
1360	Shorten the class name .
1361	Exclude the given types to be excluded .
1362	Serialize an object to an Appendable .
1363	Serialize an object into a String .
1364	Create a clone of the given object .
1365	Write an object to a file .
1366	Reads an object from the given file .
1367	Serialize an object to a byte array .
1368	Convert a byte array to an object .
1369	Creates the names of the mapped types .
1370	Creates the names table names .
1371	Retrieves the value for a column .
1372	Cache the entities in the specified array .
1373	Resolve provider definitions for given type .
1374	Applies the given table name to the given entity name .
1375	Determines if a connection is valid .
1376	Renders the view to the given target .
1377	Locates the target for the specified action request .
1378	Get the output writer .
1379	Get output stream .
1380	Write content to response
1381	Sets the content type .
1382	Prints the given string to the output stream .
1383	Perform the login .
1384	Get the token as JSON .
1385	Login via basic auth .
1386	Logout the user .
1387	Convert a url to a container file .
1388	Creates a directory if it does not exist .
1389	Create a directory if it does not exist .
1390	Copies given source file to destination file .
1391	Copies the given directory to the given destination directory .
1392	Moves a file to a destination directory .
1393	Copies a directory from src to dest
1394	Deletes the contents of a directory .
1395	Read UTF - 8 chars from the given file .
1396	Read chars from file with given encoding .
1397	Write char array to the given file .
1398	Write string .
1399	Append a string to the given file .
1400	Read the given number of bytes from the given file .
1401	Write an array of bytes to a file .
1402	Append len bytes to the given file at the given offset .
1403	Copies the given source file to the given destination file .
1404	Deletes a file .
1405	Creates a temporary directory .
1406	Determines whether the file is binary .
1407	Checks if destination is copy .
1408	Checks to see if a file is copied .
1409	Prints usage information for the given command name .
1410	Resolve action method for given action .
1411	Registers an action .
1412	Registers a path alias .
1413	Moves to the next iteration .
1414	Creates a char array from the given character array .
1415	Execute the proxied method
1416	Check if an uppercase target matches an uppercase target
1417	Creates a char sequence from the input to the given values .
1418	Creates an array of URLs for the given class .
1419	Add bccs to the email address .
1420	Registers a new type .
1421	Looks up a serializer for the given type .
1422	Parses an input stream from an input stream .
1423	Returns the value of the specified parameter .
1424	Returns the values of the given parameter .
1425	Get a file upload parameter .
1426	Returns an array of FileUploads for the given parameter name .
1427	Initialize the filter configuration .
1428	Parse the given template .
1429	Find the end of the macro .
1430	Count the number of escapes in the given template .
1431	Build a query string from the given query map .
1432	Parse the given query string into a HttpMultiMap .
1433	Prepare header parameter name for header .
1434	Extracts the media type from a content type .
1435	Converts the given node to HTML string .
1436	Converts the given node to inner HTML .
1437	Configure this servlet with the given servlet context .
1438	Resets this object to its initial state .
1439	Sets lazy state .
1440	replace with mappings for path
1441	Parse the given string as a list of components .
1442	Parse the given string as a map .
1443	Resolve the given value if possible .
1444	Skip an object .
1445	Parse string .
1446	Parse string content .
1447	Parses a unicode character .
1448	Parse an unquoted string content .
1449	Parse number .
1450	Parse an array content .
1451	Create an empty constructor .
1452	Create a simple method wrapper .
1453	Resolve the raw type name .
1454	Resolves a reference from the given property name .
1455	Resolve references to the given method or constructor .
1456	Reads all references from the annotated annotation .
1457	Build the default references for the given method or constructor .
1458	Build the default reference for the given property descriptor .
1459	Remove duplicate names from the array .
1460	Convert references to BeanReferences .
1461	Converts an ann value to an array of beans .
1462	Run the Joybow .
1463	Searches for a method in the class .
1464	Finds a constructor for the given parameter types .
1465	Resolve all interfaces for the given type .
1466	Compare two parameters .
1467	Force access to the given object .
1468	Creates a new instance of the given parameters .
1469	Get all superclasses of a class .
1470	Returns the child class of the given instance .
1471	Returns a jar file for the specified class .
1472	Sleeps for the specified amount of milliseconds .
1473	Sleeps for the current thread .
1474	Wait for an object .
1475	Creates a thread factory .
1476	Gets the value .
1477	Visit a parameter .
1478	Visit an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits an invoke instruction .
1484	Visit a jump instruction .
1485	Visits a MultiAN array instruction .
1486	Visits a try block .
1487	Visit a local variable annotation .
1488	Writes the properties to the writer .
1489	Copies data from the input stream to the stream .
1490	Moves to the next element .
1491	Moves to the next element .
1492	Joins the given arrays .
1493	Joins the given arrays .
1494	Resizes the given buffer to a new array .
1495	Append a new element to the end of the buffer
1496	Removes a copy of the given array .
1497	Returns the index of the specified char in the array .
1498	Returns the index of the specified value in the array .
1499	Returns the index within the specified array .
1500	Enables XHTML mode .
1501	Parses content into a Document .
1502	Parses the given lagart parser .
1503	Compute the maximum stack and local stack trace .
1504	End the current basic block .
1505	Collects all the attributes of an attribute .
1506	Inject a target object .
1507	Registers a pseudo class .
1508	Looks up a pseudo class by name .
1509	Invokes an action .
1510	Returns a list of all the bean property names for the given type .
1511	Visit all the property values .
1512	Applies the specified property to this rule .
1513	Creates an array of method InjectionPoints .
1514	Read the set of parameters for the filter configuration .
1515	Write bundle file .
1516	Looks up a bundle file for the given id .
1517	Looks up a gzipped bundle file for the given file .
1518	Registers a bundle id .
1519	Creates the digest for the given source .
1520	Create bundle .
1521	Reset the state of the bundles .
1522	Fixes Css relative URLs .
1523	Update column by reference
1524	Create table ref name .
1525	Get a database session .
1526	Convert an object to a single element array .
1527	Parses a signature for a signature .
1528	Resolve set injection point for given type .
1529	Returns true if the property type should be excluded based on the property type .
1530	Open a connection to the database
1531	Open a transaction
1532	Closes the transaction
1533	Commits a transaction .
1534	Rollback a transaction
1535	Create a Properties from the given file .
1536	Create a Properties object from a string .
1537	Load properties from a string .
1538	Return a subset of the properties with the given prefix .
1539	Creates a Properties object from the given root template .
1540	Retrieves a property from a map .
1541	Resolve all variables in the given Properties object .
1542	Resolves a property in the given map .
1543	Resolve the scope .
1544	Retrieves transaction mode for given method and signature .
1545	Register the given annotations .
1546	Read an annotation for the given method .
1547	Accepts a selector .
1548	Returns true if this node matches the specified node .
1549	Applies selector to current results
1550	Unescapes a string .
1551	Builds the packages for the given version number .
1552	Create a clone of the given node .
1553	Remove this node from its parent .
1554	Add child nodes to the list .
1555	Inserts a child node at the specified index .
1556	Inserts a child before another node .
1557	Inserts a new child before the given ref child .
1558	Inserts a new child after the given ref child .
1559	Inserts a new child at the given ref child .
1560	Remove all childs
1561	Find the child node with the given name .
1562	Returns an array of all child nodes matching the given predicate .
1563	Checks that the node is correct .
1564	Initializes the child element nodes .
1565	Initialize the sibling names .
1566	Initialize child nodes .
1567	Changes the owner document of the specified node .
1568	Returns the previous sibling name .
1569	Returns the text content of this node .
1570	Get the HTML representation of the lagarto document .
1571	Returns the inner HTML fragment of this document .
1572	Visit all the children .
1573	Returns the css path .
1574	Handler for decora tag .
1575	Invoked when a tag is id attribute .
1576	Define a decora tag .
1577	Add a proxied aspect .
1578	Adds the package to the list .
1579	Adds root package .
1580	Find the root package for a given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Add the given name file name pattern to be read .
1584	Iterate over the targets .
1585	Append target and InjectionPoint for given scope .
1586	Iterate over the targets for each target in the given scope .
1587	Extract parameter values from the parameters .
1588	Create an array of target and return the target .
1589	Create an object argument from the given type .
1590	Called when a new session event occurs .
1591	Invoked when a session was destroyed .
1592	Append the given value to the list
1593	Add all elements in the given array to the list .
1594	Removes the given position from the list .
1595	Resolve target .
1596	Called when an action is not found .
1597	Convert an object to a string .
1598	Resolve an action filter .
1599	Returns the pseudo function name .
1600	Resolve Property Injection Point .
1601	Create SOCK4 proxy socket .
1602	Returns the count of an attribute .
1603	Returns a set of all action results .
1604	Returns true if the specified character equals the given character sequence .
1605	Returns the index of the first occurrence of the given character in the source string .
1606	Find the index of the first character in the source array .
1607	Add command line arguments .
1608	Set environment variable .
1609	Runs the process .
1610	Invokes a listener .
1611	Copy this frame from another frame .
1612	Get an abstract type from the given API type .
1613	Get the abstract type from the descriptor .
1614	Set the input frame from the given symbol table .
1615	Returns the local type for the given index .
1616	Sets the local variable .
1617	Pushes an abstract type onto the output stack .
1618	Push an abstract type onto the symbol table .
1619	Pop the given number of elements from the output stack .
1620	Pop the top of the given descriptor .
1621	Adds an abstract type to the initialization count .
1622	Returns the initialized type .
1623	Puts an abstract type .
1624	Remove expired values from cache map .
1625	Schedule prune .
1626	Visits a module .
1627	Visit a nested host .
1628	Visits an outer class .
1629	Visits an annotation .
1630	Visit a nested member .
1631	Visits an inner class .
1632	Visits a field .
1633	Get the thread session .
1634	Closes the current thread session .
1635	Creates an execution array for the specified action .
1636	Invoke the action method .
1637	Get the request body from the request .
1638	Calculate the first item index of a page .
1639	Calculates the first item index of a page .
1640	Test whether the value is equal to the specified value .
1641	Convert char array to byte array .
1642	Find the index of the first occurrence of the specified character .
1643	Resolve the raw node name .
1644	Resolves an attribute name .
1645	Renders an attribute .
1646	Load properties from file .
1647	Load props from file
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from the given map .
1651	Load properties from the classpath .
1652	Returns the value for the given key .
1653	Set the value for the given key and profile .
1654	Extract data from the target map .
1655	Extract props and profiles from the target map
1656	Extract sub props .
1657	Retrieves an inner map .
1658	Add an inner map to the map .
1659	Resolve the active profiles .
1660	Get a list of all profiles in the database .
1661	Return a list of profiles for the given property name .
1662	Adds the property injection point .
1663	Add a SetInjectionPoint to the set .
1664	Add a MethodInjection point .
1665	Add init method points to init methods .
1666	Add destroy methods to the list .
1667	Resolves the target class for a proxy .
1668	Injects the target object into the wrapper .
1669	Get the target wrapper type .
1670	Find the field with the given name .
1671	Returns the type of the field .
1672	Resolves the key type .
1673	Resolves the component type .
1674	Creates a JsonResult .
1675	Create a JSON result from an exception .
1676	Resolves a method name from a method name .
1677	return true if the string matches the pattern
1678	Resolves a loader for the given class name .
1679	Resolves the resource loading .
1680	Loads the given class .
1681	Retrieves a resource by name .
1682	Wait for the end .
1683	Detect annotation type .
1684	Build an InjectionPoint .
1685	Visit the class metadata .
1686	Returns an array of URLs for the given class .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the property .
1691	Returns the setter for the property .
1692	Connects the database to the database .
1693	Add an iterator to the list .
1694	Prints the logo
1695	Stops the joy db .
1696	Creates a socket to connect to the given host and port .
1697	Creates an SSLSocket .
1698	Get default SSLSocketFactory
1699	Get socket factory .
1700	Creates a random string from the specified number of characters .
1701	Generate a random string .
1702	Creates a string containing randomly generated characters .
1703	New array instance .
1704	Inject the given value into the target object .
1705	Converts the given value to the target type .
1706	Visit a provider .
1707	Creates a default type cache .
1708	Put a value into the map .
1709	Get all method descriptors .
1710	Returns the IP address for the given hostname .
1711	Parse an ip address as an integer .
1712	Validate an IPv4 format string
1713	Returns the host name for the given IP address .
1714	Download bytes from url .
1715	Downloads a string from the given URL .
1716	Download file from url .
1717	Inject the specified action request .
1718	Executes the outject request for an action .
1719	Open socket to the given host and port .
1720	Create socket to connect to given hostname and port .
1721	Returns the index of the class name for the given class name .
1722	Loads a class using the given class loader .
1723	Load array class by component type .
1724	Invoke destroy method .
1725	Returns a binary search for the given element .
1726	Returns a binary search for the given element using the given comparator .
1727	Specifies a list of exclude patterns .
1728	Includes given strings .
1729	Includes all bean properties in the specified template .
1730	Start tag .
1731	Register a component .
1732	Resolve column s SQL type .
1733	Checks if the SQL string is a callable string .
1734	Create a mapper for the given result set .
1735	Find generated key .
1736	Populate generated keys .
1737	Creates a wrapper for the given type .
1738	Set bean .
1739	Set map of parameters
1740	Sets the queue of objects .
1741	Inserts the given chunk into this one .
1742	Look up an entity type .
1743	Find the entity corresponding to the given column reference .
1744	Resolves the table name for a given table .
1745	Resolve the given object .
1746	Appends the missing space .
1747	Returns an enumeration of the file parameter names .
1748	Includes the given page in the request .
1749	Gets the url .
1750	Returns the URI of the given request .
1751	Resolve parameter names for given action class .
1752	Initialize the Petite container
1753	Shut down the petite container .
1754	Adds the subject to the email filter .
1755	Applies a message id to the filter .
1756	Applies the search filter to the given address .
1757	Applies to to to the recipient list .
1758	Add a cc recipient address .
1759	Add a bcc recipient address .
1760	Adds a flag to the search filter .
1761	Add a flag to the email filter .
1762	Filter the received date using the specified operator .
1763	Applies the given operator to the sent date using the specified operator .
1764	Applies a filter to the email filter .
1765	Applies the given filters to this filter .
1766	Applies the given filters to this filter .
1767	Applies a filter to the email filter .
1768	Concatenate a search term .
1769	Encodes the given byte array into a base32 string .
1770	Convert a value to an array .
1771	Determines whether the request should be grepped .
1772	Validates the given object .
1773	Validates the given target object against the given target object .
1774	Sets the given profile to the given profile .
1775	Sets the enabled profiles .
1776	Determine whether or not the specified check profiles are valid based on the given set of profiles .
1777	Parse the request body .
1778	Converts this JDK instance to milliseconds .
1779	Add a Julian date to this date .
1780	Subtract a Julian date from another date .
1781	Set integer value .
1782	Initialize the parser with the given input data .
1783	Emit a comment .
1784	Issue an error message .
1785	Create a hash from the given password .
1786	Generate PBKDF2 key .
1787	Converts a hex string into a byte array .
1788	Resolve provider definitions for given type and name .
1789	Name of the email .
1790	Set the content id from the name if it is missing .
1791	Resolves a mime type based on the content type .
1792	Parse a type signature .
1793	Compute the size of an attribute .
1794	Puts the attributes of this symbol table into the given byte vector .
1795	Decode string .
1796	Decode query string .
1797	Starts the database .
1798	Check connection provider .
1799	Visit a method .
1800	Visit the end of the class .
1801	Create a method signature visitor .
1802	Convert an array of objects to a string .
1803	Convert a line to string array .
1804	Resolves a CtorInjectionPoint in the given Class .
1805	Creates a class reader .
1806	Returns the cached advice class reader for the given advice .
1807	Encrypt the given string .
1808	Decrypt string .
1809	Get a logger by name .
1810	Sets the cookie name .
1811	Create an action request .
1812	Create the wrapper object for the given wrapper class .
1813	Destroy bean .
1814	Shutdown all beans .
1815	Retrieves the messages from the specified folder .
1816	Start the application .
1817	Run the report .
1818	Prints an error message .
1819	Prints number of messages per sec .
1820	Map an existing file to a mapped byte buffer .
1821	Closes this archive .
1822	Performs the actual work count .
1823	Returns the position within the buffer .
1824	Offer a position to the buffer .
1825	Append a position to the end of the buffer .
1826	Closes the archive .
1827	Poll for error response code
1828	Stops a replay .
1829	Event when an image is available .
1830	Event when an image is unavailable .
1831	Create a status indicator reader .
1832	Create a status indicator reader .
1833	Sets the limit .
1834	Append the given source buffer to the current buffer at the given offset .
1835	Invoke the poll thread
1836	Creates a new byte buffer for an aeron directory .
1837	Creates a snapshot of the composite key .
1838	Creates the default header for the session .
1839	Writes the key buffer into the buffer .
1840	Writes the label buffer into the buffer .
1841	Establishes the connection to the given channel .
1842	Attempt to connect to the buffer .
1843	Closes the session by id .
1844	Starts a new recording .
1845	Stops the request .
1846	Creates a replay request .
1847	Stops the replay request .
1848	List all the records in a given record .
1849	List all recordings for a given request .
1850	List recording by recording id .
1851	Extend a recording request .
1852	Returns true if there is a recording position request .
1853	Get the stop position for a specific recording event .
1854	List existing subscriptions .
1855	Check whether an udp channel matches the given udp channel .
1856	Returns the destination address for the given channel .
1857	Returns a description for this udp channel .
1858	Add image connection to the destination .
1859	Inserts a packet into the buffer .
1860	Find a counter that can be used to control over the current counters .
1861	Put a parameter to the request .
1862	Returns the channel tag .
1863	Returns the tag of the entity .
1864	Add a session id to a channel
1865	Converts a parameter value to a long .
1866	Append a term to the header buffer .
1867	Update the publisher limit for this producer .
1868	Allocate an unsafe buffer position .
1869	Returns the label name for a specific type .
1870	Returns a number of available frame length .
1871	Clears the URI .
1872	Validates this channel
1873	Sets the prefix .
1874	Set the media URI .
1875	Set control mode .
1876	Set the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Open the datagram channel .
1880	Close the poller
1881	Returns true if the buffer is a valid frame .
1882	Receive network socket address .
1883	Add a retransmit action .
1884	Process timeouts for retransmit .
1885	Returns a string representation of the status .
1886	Allocate an AtomicCounter .
1887	Reset the vector with the given buffer .
1888	Validates this buffer .
1889	Validate the length of the vector .
1890	Returns the length of the term window length based on the given term buffer length .
1891	Validate socket buffer lengths .
1892	Validates the given page size .
1893	Validate the session id range .
1894	Validate unblock timeout .
1895	Write error code .
1896	Resets the state of the leader .
1897	Encode cluster members .
1898	Adds the publication status of the given members to the given list of members .
1899	Closes all members of a cluster member .
1900	Returns true if the cluster has an active quorum .
1901	Returns the rank of the cluster members .
1902	Resets the log position to the given values .
1903	Check to see if a vote is reached .
1904	Check if there is a vote on the cluster .
1905	Returns true if there is a majority vote for the cluster
1906	Determine a member .
1907	Validate member endpoints .
1908	Compares two cluster members .
1909	Returns true if the specified candidate member belongs to the specified cluster member .
1910	Returns true if the cluster member is equal to the given member .
1911	Utility method to check if an array of endpoints is not duplicate .
1912	Returns the index of the member with the given id .
1913	Removes a member from the old members array .
1914	Get the high id of the cluster members .
1915	Map an existing CNC file .
1916	Checks if the driver is active .
1917	Determines if the driver is active .
1918	Tests if the CNC file is active .
1919	Requests that the given CNC file should be terminated .
1920	Returns the length of the frame in the buffer at the given offset .
1921	Writes the length of the frame in the given buffer to the given buffer .
1922	Writes a short type into the buffer at the given offset .
1923	Writes the flags in the given buffer to the given buffer at the given offset .
1924	Writes the given term offset to the given buffer .
1925	Writes the term id in the buffer at the given offset in the given buffer .
1926	Find a counter id by recording id .
1927	Find a session id by its session id .
1928	Gets the recording id .
1929	Checks if the given counter is active .
1930	Writes an application specific feedback message .
1931	Reloads the file .
1932	Find the last term .
1933	Create a recovery plan .
1934	Create a recovery plan from the given list of snapshots .
1935	Append an entry to the end of the list .
1936	Append a snapshot .
1937	Commits a log position entry .
1938	Writes an entry to the cluster .
1939	Closes the session .
1940	Offers a vector to the index .
1941	Unblock the given log buffer .
1942	Retrieves the channel string from the buffer .
1943	Writes a channel message to the buffer .
1944	Checks the validity of the given term length .
1945	Validates the given page size .
1946	Compares the current active term count .
1947	Compute the position for an active term
1948	Compute the log length .
1949	Stores the default frame header .
1950	Applies the default header to the given metadata buffer .
1951	Rotate log .
1952	Initialise the tail with a term id .
1953	Returns the offset within the raw tail .
1954	Returns the raw tail value for the given metadata buffer .
1955	Compares the raw tail to the given buffer .
1956	Writes a token buffer into the current token buffer .
1957	Allocates a counter from the temp buffer .
1958	Returns the id of the specified counters .
1959	Returns whether or not the specified counter has replay data .
1960	Retrieves the snapshot recording id for a given counter .
1961	Converts a short flags to a char array .
1962	Writes a channel to the buffer .
1963	Offers a buffer to the cluster .
1964	Wrap the given buffer at the given offset .
1965	Writes the data to the buffer .
1966	Write the data to the buffer .
1967	Main method .
1968	Close the shared network runner
1969	Compute the current position .
1970	Allocate an aeron type counter .
1971	Returns the counter id for the given service id .
1972	Creates a snapshot of the stream .
1973	Allocate an AtomicCounter from a temporary buffer .
1974	Closes the connection .
1975	Dispatch recording descriptor .
1976	Add a new slab to the current pool .
1977	Set a byte at a given index .
1978	Add a statistics to the collection .
1979	Calculates a row ranges based on the given filters .
1980	Convert an array type to a group type .
1981	Convert a struct type to a group type .
1982	Annotate a message .
1983	Ends the previous bit packed run .
1984	Read one message .
1985	Retrieves a list of footers from the given file .
1986	Retrieves the footer from the given summary file .
1987	Reads the parquet metadata from the given file using the given metadata filter .
1988	Reads the next row group .
1989	Read the next row group .
1990	Reads a dictionary from the given ColumnChunkMetaData object .
1991	Add a writer to the ParquetManager .
1992	Remove a writer from the list .
1993	Updates total memory allocation .
1994	Registers a scale call back .
1995	Starts the stream .
1996	Starts a new block .
1997	Starts a new column .
1998	Write a dictionary .
1999	Write data page .
2000	Write a single column chunk .
2001	End a block .
2002	Copies data from the given input stream to the given position .
2003	Finalize the column index .
2004	Merges the specified set of Parquet metadata files into a single ParquetMetadata object .
2005	Merges the given set of files into the given output path .
2006	Write the metadata file .
2007	Merges the given metadata into one .
2008	Reads the value in the parquet .
2009	Checks whether the given schema can be null .
2010	Given an array of objects find the one that is one of the given objects .
2011	Creates an object of the given type based on the given schema .
2012	Parse the thrift meta data from the extra meta data .
2013	Factory method for creating ThriftMetaData from thrift class .
2014	Convert this thrift object to a meta data map .
2015	Write null value .
2016	Write a single page .
2017	Initialize this object from the input stream
2018	Allocate values buffer .
2019	Checks an enum value .
2020	Calculate bit widths for a mini block buffer .
2021	Throws an exception if the given exception is an exception .
2022	Get statistics based on a type name .
2023	Get a builder for the given primitive type .
2024	Merges statistics with the same type .
2025	Get the non - null schema .
2026	Creates a new task attempt context .
2027	Invoke the given method .
2028	Write string representation of members .
2029	Merges the given fields with the given group .
2030	Init counter from reporter
2031	Get a filter based on the given configuration .
2032	Retrieves all the footers for the given file .
2033	Generates a list of ParquetInputSplits for each row group
2034	Write the message to the output stream .
2035	Validates that the parquet schema has mapped to the parquet schema .
2036	Serialize a message .
2037	Creates a new DirectCodecFactory .
2038	Parse all required fields from the given record .
2039	Check for a set field .
2040	Read file meta data from an input stream .
2041	Closes the record writer .
2042	Set the schema for a job .
2043	Add a parquet type to the class .
2044	Asserts that the given column type is valid .
2045	Check that a long is cast to an int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Creates a schema mapping from a parquet schema .
2049	Write data page header .
2050	Skip to the next record .
2051	Writes the given object to the given job in the given configuration .
2052	Removes an entry from the cache .
2053	Put a new cache entry into the cache .
2054	Retrieves the current value for the specified key from the cache .
2055	Write an Avro schema .
2056	Write a value to the record consumer .
2057	Set the glob .
2058	Write content to the console
2059	Opens an InputStream for the given filename .
2060	Returns a new unbound record filter that matches the given column path .
2061	Convert a struct type to a MessageType
2062	Creates a new group type wrapper .
2063	Creates a new list type .
2064	Returns the merged key - value metadata map .
2065	Get the parquet split from the given input split .
2066	Retrieves a map of field names to their corresponding fields .
2067	Resolve the requested schema .
2068	Extract input files from a list of input files .
2069	Check that all the parquet files to be processed .
2070	Retrieves the input files from the given partition directory .
2071	Returns a new unbound record filter that filters the given page starting at the specified start position .
2072	Create a list consumer .
2073	Initialize path to partition info
2074	Merges all tuples of the given tuple .
2075	Returns the summary data for the given tuple
2076	Reads the next struct .
2077	Reads a map entry .
2078	Write an integer to the slab .
2079	Reads an int from the given buffer starting at the given offset .
2080	Set the schema for a job .
2081	Creates a stream if it doesn t already exist
2082	Create a new PipelineStageBean from the given stage library
2083	Creates a stage bean .
2084	Create interceptors .
2085	Create interceptor bean .
2086	Utility method to parse the schema .
2087	Convert a number of milliseconds to a number of days .
2088	Extract Avro schema from a record header .
2089	Upgrade v1 data format .
2090	Returns the length of the message .
2091	Copies blobstore resources to the staging directory
2092	Resets the fields .
2093	Report the health report for a thread .
2094	Registers the specified thread for the specified thread .
2095	Stores the configuration map in the disk .
2096	Check credential for the given web credential .
2097	Tries to upgrade dependencies if needed .
2098	Upgrade the library if needed .
2099	Upgrade stage if needed .
2100	Enables upgrade on a service instance .
2101	Enables upgrade for a stage .
2102	Returns a list of fields to null if they are null .
2103	Returns true if the given name is a system class .
2104	Appends the specified element to the end of this list .
2105	Adds the element and returns the evicted if it is evicted .
2106	Retrieves the value for the given key if it is present and invalidate the given value .
2107	Add the reported errors if needed .
2108	Retrieves a descriptor for a specific proto file descriptor .
2109	Get all file descriptors from the set of file descriptors .
2110	Populates the map with default values for all the file descriptors .
2111	Returns a descriptor for a specific message type .
2112	Converts a protobuf message to a sdc field .
2113	Convert a SDC field into a protobuf message .
2114	Compute the protobuf message to a protobuf message .
2115	Convenience method for upgrade to Jersey config .
2116	Check connection issues .
2117	Convert a kudu type to a field type .
2118	Create a field from a single result .
2119	Invoke a list of records .
2120	Returns the current text .
2121	Adds the missing config definitions to the given stage .
2122	Parses an HTTP response .
2123	Add the response headers to the record .
2124	Writes the response header to the given record .
2125	Writes the response header to the record header .
2126	Saves the metadata file .
2127	Configure the given issues .
2128	Appends the headers to the batch
2129	Increments the source offset by the given amount .
2130	Parse a batch result .
2131	Add the headers to the response .
2132	Resolve the request headers .
2133	Process the response .
2134	Returns whether the given property is defined in the configuration .
2135	Convert an exception to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Retrieves the credentials from the given credentials file .
2138	Provides a preview for the specified pipeline .
2139	Copies the current character to the given buffer .
2140	Removes logical duplicates from the given packages .
2141	Create empty batch time .
2142	Find the next main line in the given chunk .
2143	Resolves the given chunk for the given chunk .
2144	Closes the connection .
2145	Escape a quoted substring .
2146	Get flow control settings .
2147	Get a channel provider .
2148	Puts a batch of messages to the data channel .
2149	Compile the given expression .
2150	Digest the given expression
2151	Adds a dictionary to the given input stream .
2152	Adds a dictionary from the specified reader .
2153	Stops the aggregator .
2154	Rolls the data windows to the new data window .
2155	Serialize an object to a string .
2156	Deserialize a string into an object .
2157	Deserialize the content of a file into an object .
2158	Write the given record to the output pipeline .
2159	Evaluates EL expression
2160	Generate an inner field from the HiveTable
2161	Extracts the table name from the given metadata record .
2162	Retrieves the database name from the given metadata record .
2163	Retrieves the internal field from a Hive stage .
2164	Retrieves the location of a Hive stage .
2165	Retrieves the custom location from a Hive stage .
2166	Extract the AVO schema from the given metadata record .
2167	Retrieves the data format from the given metadata record .
2168	Creates a new field metadata field .
2169	Validates partition information .
2170	Generates a partition path from the given partitions .
2171	Serialize a schema to a file
2172	Sets the parameter index for the given operation .
2173	Get configuration
2174	Parses an rfc3 compliant time string .
2175	Format the given template with the given arguments .
2176	Starts the application context .
2177	Check if the record contains Solr fields .
2178	Filters the given list of field names .
2179	Send an error record exception to the given record .
2180	Parse a jar name from the given source name .
2181	Parses a URL .
2182	Creates a single instance of the Couchbase connector .
2183	Closes the bucket .
2184	Validates the Couchbase configuration .
2185	Extracts a label from a string representation .
2186	Verifies that a given dependency exists in the definitions map .
2187	Reads a secret from the specified path and stores it in the store .
2188	Gets the write operation type from the record header .
2189	Writes a document to the bucket .
2190	Builds a subdoc mutation .
2191	Generates the SQL string for an alter table .
2192	Configures this SASL authentication context .
2193	Take a batch of messages .
2194	Attempts to commit the given offset .
2195	Sends an error to the control channel .
2196	Injects the given stage .
2197	Get a list of definitions
2198	Get a publisher definition by name .
2199	Utility method to format a column name .
2200	Format the given value .
2201	Get information about a pipeline .
2202	Create a pipeline fragment .
2203	Returns a list of all pipelines for the specified filter
2204	Imports a pipeline fragment .
2205	Get the path to a file path .
2206	Retrieves the operation from the given record .
2207	Get the field path for the given column name
2208	Retrieves an enriched event from the queue .
2209	Retrieves a runner from the pipeline .
2210	Returns the runner for the specified idle time .
2211	Return a runner to the queue
2212	This method marks this runner as destroyed .
2213	Validate that the container is not destroyed .
2214	Checks to see if a stream exists .
2215	Get the last shard id .
2216	Process an error queue .
2217	Handle SQL exception .
2218	Returns a hash of the columns for the specified record operation
2219	Compare two files .
2220	Retrieves the PID value for a given process .
2221	Validate and extract fields to hash set .
2222	Generates a user group from the given Hadoop user .
2223	Roll a new stats bean based on the current time .
2224	Creates a snapshot of the current stats .
2225	Ensures that the directory exists .
2226	Write batch - records to the given batch .
2227	Write batch to batch .
2228	Writes all records in the given iterator to the given record iterator .
2229	Generate no more data event .
2230	Detect partition information
2231	Updates record header for given record .
2232	Process a single group element .
2233	Returns true if the two stages are the same .
2234	Entry point for the Mesos Cluster Manager
2235	Configures the OAuth client for the given client builder .
2236	Resolve headers .
2237	Get the HTTP method for the given expression and method expression .
2238	Fill null types .
2239	Retrieves the value of a field from a record .
2240	Loads a schema from the registry .
2241	Register a schema
2242	Retrieves the schema from the registry .
2243	Retrieves the schema ID from the given subject .
2244	Loads a schema from the registry by ID .
2245	Writes the id to the output stream .
2246	Detects the schema id of the data .
2247	Get default values from schema .
2248	Parses all messages in the given stage .
2249	Log validation results .
2250	Get the bad records from the error sink .
2251	Initializes the schema .
2252	Returns the collection of the out - edge - edge vertices that are connected to the given vertex .
2253	Returns the collection of incoming edge vertices for a given vertex .
2254	Serialize an offset map .
2255	Deserialize an offset map .
2256	Send a report to the queue .
2257	Gets the report with the given ID .
2258	Determines if the check point file exists .
2259	Writes the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handles an error .
2262	Copies the given blobId to the given destination .
2263	Returns a reader for the current file .
2264	Releases a reader .
2265	Set the dpm base URL .
2266	Add a default header to the request .
2267	Parse a date .
2268	Escapes the given string .
2269	Get the client .
2270	Initialize the GPU database connection
2271	Utility method to get the metadata for a specific GPU
2272	Creates bulk informer .
2273	Create a new event builder .
2274	Build Avro schema .
2275	Converts an Oracle code to a SQL operation type .
2276	Add jars to the job configuration .
2277	Add jars to the job .
2278	Check field order by name .
2279	Checks condition expression for given field name .
2280	Gets the offset of the file in the given file offset string .
2281	Call the premain method .
2282	Get the origin parallelism .
2283	Runs a query .
2284	Convert the fields to a map .
2285	Get the description of a table .
2286	Validates that the given table name matches rows .
2287	Returns the column type for the given field .
2288	Checks if the field is nullable .
2289	Get the schema for a table
2290	Gets the column properties .
2291	Returns the appropriate class for the given type name .
2292	Initialize the AerospikeClient with the given context .
2293	Get the topic for a record .
2294	Upgrades the given configs to a new version of the data format .
2295	Retrieves an input stream for reading .
2296	Opens an OutputStream for writing to the file .
2297	Returns true if the file exists .
2298	Parse the given permissions string into an FsPermission object .
2299	Ensure that all services are available .
2300	Creates an aggregator .
2301	Returns the aggregator unit .
2302	Creates the aggregator data .
2303	Creates an aggregator .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls the data window to the specified time .
2307	Acquires a login manager for the specified login type .
2308	Release this LoginManager .
2309	Convert a glob to a regular expression
2310	List object summary .
2311	Stops the snapshot .
2312	Generate empty batches for all idle runners .
2313	Creates the failure snapshot on the pipeline .
2314	Converts a record to a BoundStatement
2315	Sets this configuration from the given map .
2316	Generate lookup key .
2317	Helper method to handle partitioning on the reconstructed partitions .
2318	Reads the next line from the reader .
2319	roll the usage counter
2320	Enables the DPM for the given DPMInfo .
2321	Disable dpm for the given user
2322	Normalize the DpmBase URL .
2323	Retrieves a user token .
2324	Logout the given user auth token .
2325	Updates the token file in the given context .
2326	Updates the dpm . properties file .
2327	Creates a schema field for a specific type .
2328	Creates a complex schema for a given field .
2329	Retrieves the decimal scale or - 1 if invalid .
2330	Returns the default value for the given schema .
2331	Initialize metrics if needed .
2332	Compare two files based on the first time .
2333	Returns the index of the specified group in the specified group .
2334	Returns a list of the names of the group .
2335	Returns true if the string is escaped .
2336	Determines whether a character at the given position is escaped .
2337	looks to see if a character is inside a char class
2338	Count the number of open parens in a string .
2339	Extract group information from the named pattern .
2340	Replaces the given regular expression with a replacement character .
2341	Performs a GET request .
2342	Refresh the schema for the given schema and table .
2343	Returns whether an entry is expired .
2344	Returns the offset of the current file .
2345	Fast forward .
2346	Create an empty detached stage .
2347	Convert string to number .
2348	Parse a part .
2349	Parse N Values for the given buffer .
2350	Looks up the primary keys for the specified table .
2351	Creates the custom field mappings .
2352	Returns the string representation of the given field .
2353	Returns the name of the table .
2354	Set primary keys in the given record .
2355	Handle SQL exception .
2356	This method is used to execute a report .
2357	Prepares the batch stage .
2358	Calculate the finish time of the batch .
2359	Flattens the specified field into a map .
2360	Create a DetachedStage instance for the given stage .
2361	Execute the action .
2362	Returns a map of the columns to the columns of the given record .
2363	Returns the condition for the given partition column .
2364	Validates the given offset and returns a map of the actual offsets .
2365	Retrieves the list of requested generators .
2366	Returns an array with non - empty arguments .
2367	Returns the operation for the given operation .
2368	Convert bytes to display format
2369	Scans a live file .
2370	Return number of pending files
2371	Determines whether the named whitelisted name is whitelisted .
2372	Returns true if the versions match in the expected set .
2373	Main method .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a JdbcRecordWriter for a given connection string .
2377	Creates a new JdbcRecordWriter .
2378	Upgrade v1 to v2 .
2379	Extract a map of named groups .
2380	Queues a commit message to the producer .
2381	Creates an EmbeddableSDC .
2382	Sets the fields in the specified record .
2383	Retrieves the list of remote pipelines with a specific checkpoint .
2384	Creates a new remote data collector result .
2385	Creates a gauge .
2386	Returns a map of columns to parameters for the given operation .
2387	Generate header attributes for a file .
2388	Validate the given record .
2389	Deletes the tempquet file .
2390	Get avro input stream .
2391	Convert an InputStream to a DataFileReader
2392	Write parquet file to temp file
2393	Check input field for encryption .
2394	Checks the given field for encryption .
2395	Checks to see if a field is decrypted .
2396	Ensures that the field decrypted is decrypted .
2397	Prepares the given field to encrypt data .
2398	Replaces this matcher with a new pattern .
2399	Append a replacement string to the given string buffer .
2400	Returns a map of the names of the matched groups .
2401	Replace all properties with the given replacement string .
2402	Ensures that the avro schema exists
2403	Retrieves the value of the global variable .
2404	Create the event record .
2405	Create the event record for a specific stop event .
2406	Fix offset .
2407	Extract value for run time .
2408	Executes the add - partition query .
2409	Execute a set of table s properties .
2410	Execute describe .
2411	Executes the given query .
2412	Execute a query .
2413	Executes a batch of pipelines .
2414	Process consumer for pipeline .
2415	Gets the offset commit trigger .
2416	Checks to see if a pipeline error is triggered .
2417	Accepts consumer .
2418	Get the insert id for a record
2419	Get value from field .
2420	Sets the specified fragment in the record .
2421	Sets the given document in the given record .
2422	Set an n1QL row in the given record .
2423	Handle partial file data format .
2424	Returns true if the given gtid is in incomplete transactions with seqno
2425	Creates an object using the class loader .
2426	Sets the name of the stage creator .
2427	Logout from Kerberos .
2428	Set the exceptions for the given configuration .
2429	Replace variables in the given path
2430	Ensure that the given path is accessible for the given class loader .
2431	Start the EMR batch .
2432	Retrieves the directory path for a given record .
2433	Renames a temporary file .
2434	Determines if the record should be rolled back .
2435	Determines whether the given string matches the given pattern .
2436	Returns a map of offsets to the file names .
2437	Returns the remaining wait time .
2438	Get offsets from the file context .
2439	Creates a new instance of StageLibraryDelegate .
2440	Creates a new instance of StageLibraryDelegate .
2441	Creates a new instance of StageLibraryDelegateDelegate .
2442	Get the metric value from the given MetricElement
2443	Find the end of the header .
2444	Get the number of bytes in this request .
2445	Saves byte buffer to temp file
2446	Creates an SSLSocketFactory based on the keystore classpath and pass it to the classpath .
2447	Returns the mime type for a file based on the mime - type .
2448	Process the given session .
2449	Stop all connections .
2450	Add routes .
2451	Send response to output stream
2452	Send body to output stream
2453	Creates a new response object .
2454	Utility method to determine whether we should use the gzip .
2455	Add cookie to the request
2456	Unload the queue .
2457	Decode the given Base64 encoded value into a string .
2458	Encode the given cookie value using Base64 encoding .
2459	Sets the table name .
2460	Obtains the name of the given principal .
2461	Registers a spring session repository filter .
2462	Resolve the principal from the session .
2463	Retrieves a session from the session store .
2464	Returns the JNDI name for the given model node .
2465	Obtains the canonical names of the given view method .
2466	Registers an synchronization .
2467	Implement before completion of the last syncs .
2468	Retrieves the current transaction .
2469	Applies the deployment descriptor to the deployment .
2470	Identifies whether the cache region name is uniquely identifying the cache region .
2471	Retrieves the service name dependencies for the given subsystem context .
2472	Decreases the current read lock count .
2473	Increment the read lock count
2474	Add a service .
2475	Calculate the next expiration calculation
2476	Add the module to the deployment .
2477	Adds the top level bdas from the current bean deployment .
2478	Create the meta data for a POJO .
2479	Sets the config name and file .
2480	Get list of JS security meta data .
2481	Get the servlet URL mappings .
2482	Creates the servlet class mappings .
2483	Resolve the view .
2484	Get the names of Connectors that are available in the given operation .
2485	Parse core environment element .
2486	Parse the process ID element .
2487	Returns the path address for the operation .
2488	Set the path address .
2489	Returns the attribute value .
2490	Returns whether or not the given operation should be included in the given operation .
2491	Create a composite operation .
2492	Create an add operation .
2493	Creates an add operation .
2494	Creates a read attribute operation .
2495	Creates a write - attribute operation .
2496	Create an undefine attribute operation .
2497	Returns the context object .
2498	Add an URL context factory for the given scheme .
2499	Removes the given URL context factory from the given scheme .
2500	Loads all providers from the class loader .
2501	Modify the given deployment .
2502	Set the endpoints for the servlet
2503	Set the context root for the deployment .
2504	Get the transport class name for the deployment .
2505	Set the run as identity
2506	Pop the run as identity
2507	Process the management view .
2508	Injects the given property value into the given object .
2509	Returns true if the argument type matches the specified class type .
2510	Finds the method for the given name and property type .
2511	Find field by name and field type
2512	Initialize the options .
2513	Derives the information for the request .
2514	Collect Jdr report .
2515	Collect a jdr report .
2516	Registers a resource adapter .
2517	Unregister a resource adapter
2518	Register the common transformers .
2519	Write the parameters to the output stream .
2520	Read an exception from an input stream
2521	Returns the lock owner for the transaction .
2522	Release lock .
2523	Add content to SOS .
2524	Add the context parameter to the deployment .
2525	Obtains the component view .
2526	Invoke the endpoint .
2527	Returns the method which matches the given view method .
2528	Check if view method matches given method
2529	Creates resource description resource .
2530	Retrieves the EJB security meta data for the specified endpoint .
2531	Return the domain object for the given old and new domain .
2532	Ensure that the two specified domains are in the same order .
2533	Set the IDL name of the idl .
2534	Get the full name .
2535	Creates a JNDI name from the given name .
2536	Process the deployment .
2537	This method is called when an exchange is received . It is called when the handler completes .
2538	Returns true if the transaction is in the transaction registry .
2539	Locate the TransactionSynchronizationRegistry object
2540	Get ConnectionFactory
2541	Return the last component of a name .
2542	Returns true if the name is empty .
2543	Gets the name not found in the context .
2544	Creates an NamingException with the given message and cause .
2545	Creates a naming exception .
2546	Creates a new CannotProceedException .
2547	Creates an enumeration of the names of the given collection .
2548	Binding an object with the given name .
2549	Get an activeMQ component control .
2550	Parses the connection attributes .
2551	Create a component instance .
2552	Retrieves a virtual file from the resource root .
2553	Resolve runtime name .
2554	Creates a listener based on the resource definition .
2555	Returns a primitive analysis for the given class .
2556	Shutdown the component .
2557	Gets url patterns .
2558	Get the servlets metadata .
2559	Get the servlet mappings .
2560	Utility method to get a list of security Constraints from a JBoss WebWebMD .
2561	Retrieves the login config metadata for the given jboss web . xml .
2562	Retrieves a list of context parameters for the given jboss web . xml .
2563	Get the web resource collections meta data .
2564	Retrieves the initParams meta data for the specified servletMetaData .
2565	Creates a new SecurityConstraint .
2566	Creates a new web resource collection metadata object .
2567	Creates a new servlet meta data .
2568	Creates a new servlet mapping .
2569	Creates a new AuthConstraintMetaData object .
2570	Creates a new user data constraint .
2571	Creates a new param value .
2572	Creates a new param value with the given key and value .
2573	Registers interceptors for a SFSB component .
2574	Process injection targets .
2575	Shutdown the container
2576	Returns the JNDI name for the given model node .
2577	Resolves an attribute definition .
2578	Returns the type of the given url pattern .
2579	Determine whether a connection factory should create a pooled connection factory .
2580	Returns true if the given resource adapter should be created for the given resource adapter .
2581	Get the name of the activeMQ server .
2582	Returns the default persistence unit name .
2583	Starts the suspend controller .
2584	Stops the activity .
2585	Suspend the server .
2586	Stops the processing .
2587	The completion of the invocation .
2588	Called when a transaction is created .
2589	Starts the controller .
2590	Stops the controller .
2591	Get the capability name for the given capability base name and dynamic parts .
2592	Create resource roots .
2593	Returns a set of class loaders .
2594	Return true if there is a class file transformer for persistence .
2595	determines whether two phase - bootstrap should be applied to the persistence unit
2596	determines whether the default data source should be used as a default data source .
2597	Whether to skip Mixed synchronization type checking for persistence .
2598	Creates an ORB from the given server and environment .
2599	Initializes an ORB from an applet .
2600	Initialize the remote stub methods .
2601	Set the current naming store .
2602	Validate default values .
2603	Checks the parameter type for the given type .
2604	Look up the default value .
2605	Validate base type method .
2606	Retrieves an array of extended entity managers from the store .
2607	Convert a transaction status to a string representation .
2608	Add cache dependencies for given classification type .
2609	Extract database dialects .
2610	Identifies the database dialect .
2611	Identify a dialect .
2612	Check the database .
2613	Convert a string to a date .
2614	Set the node name .
2615	Marks the given deployment as parent .
2616	Read parameters from an input stream .
2617	Writes the object to the output stream .
2618	Write an exception to the output stream .
2619	Looks up an instance of the specified class .
2620	Begin the creation of SFSB in SFSB .
2621	Ends the creation of SFSB .
2622	Retrieve the current stack invocation .
2623	Push the given entity managers to the current JTA container .
2624	Pop the stack for the current SFS call stack
2625	Retrieves the current stack .
2626	Add dependencies for the specified deployment .
2627	Process the managed beans .
2628	Process the phase listeners in the deployment .
2629	Get the type IDL name for the given class .
2630	Insert a primitive value into an Any object .
2631	Convert a Java name to an IDL identifier .
2632	Returns true if the given string is a reserved IDL keyword .
2633	Get a signature for a class
2634	Returns the signature of a method
2635	Returns the name of a primitive type .
2636	Returns the BatchPermission for the given name .
2637	Retrieves the transaction scoped entity manager .
2638	Associates the specified value with the specified key in this map .
2639	Converts the given camel case to a security role .
2640	Retrieves the most recent entity version .
2641	Retrieves a map of timestamps for a timed object ID .
2642	Retrieves the directory name for the timed object .
2643	Add a listener to the target scope .
2644	Remove a listener for naming events .
2645	Fires an event .
2646	Closes a consumer .
2647	Adds a private credential to the given subject .
2648	Retrieves a reference to an object
2649	Adds a view interceptor to the view .
2650	Convenience method for substring substring .
2651	Create the inVM transport configuration for the InVM .
2652	Adds the name of the deployment to the deployment if it is relative to the deployment unit .
2653	Retrieves the root deployment unit .
2654	Get the service name .
2655	Create a view configuration object .
2656	Create an InjectionSource for the given service name .
2657	Returns the view interceptors for the given method .
2658	Adds an interceptor to the interceptor .
2659	Add an interceptor to the interceptor .
2660	Returns an ordered list of interceptors for the given method .
2661	Adds an interceptor to this proxy factory .
2662	Add an interceptor to the stack .
2663	Put private data .
2664	Throws an exception when an unexpected element is encountered .
2665	Retrieves the list of EJbEndpoints from the deployment .
2666	Retrieves a list of POJO endpoint from the deployment .
2667	Get the endpoint name from the servletMetaData .
2668	Get the endpoint class name .
2669	Retrieves a servlet by its name .
2670	Retrieves a required attachment from the deployment unit .
2671	Retrieves an optional attachment from the deployment unit .
2672	Get the JBoss WebWebMetaData from the deployment unit if present .
2673	Get the jboss port component meta data for the given name .
2674	Get the ejb endpoint metadata for a given class name .
2675	Determine the context root .
2676	Loads a class by name .
2677	Returns the resource with the given name .
2678	Returns a collection of resources for the given name .
2679	List all resources under the specified path
2680	Closes the current call stack .
2681	Retrieve an entity manager by pu scoped name .
2682	Registers the clean up listener for the given context instance .
2683	Process the deployment .
2684	Update the server config with the given attribute name .
2685	Check if all fields are public .
2686	Factory method for creating an Endpoint .
2687	Creates a new archive deployment model .
2688	Determines whether the deployment is a Jaxrs deployment .
2689	Sets the next timeout .
2690	Set the timer state .
2691	Merges the given deployment data with the deployment data .
2692	Add a module to the deployment context .
2693	Adds a dependency to the remote view .
2694	Returns all the container interceptors .
2695	Checks if the given method is at the given method .
2696	Ensures that only one element is required .
2697	Returns the type for the given class .
2698	Returns the component type at the given index .
2699	Creates the keystore resource definition .
2700	Returns a resource definition for the key managers .
2701	Retrieves the resource definition for the given trust managers .
2702	Converts a name into a name .
2703	Converts an in - place string into a vector .
2704	Parse the given string .
2705	Deactivates this object .
2706	Convert a CORBA servant object to a reference object .
2707	Perform authentication .
2708	Checks if the class matches the type
2709	Lookup a service reference by name .
2710	Unbind the given jndi name .
2711	Instantiates a bean based on the configuration .
2712	Configures the bean metadata for the given bean .
2713	Creates a join point for the given lifecycle config .
2714	Retrieves the current context selector .
2715	Convert a bean name to a bean name .
2716	Convert the class name to an instance name .
2717	Retrieves the class with the given name .
2718	Process annotations .
2719	Post parse the persistence units to be parsed .
2720	Validates the given descriptor .
2721	Creates the deployment descriptor .
2722	Create the web app descriptor .
2723	Returns the auth method for the specified deployment .
2724	Deploy the service descriptor .
2725	Adds an EJB bean to the given module .
2726	Creates a class for the given class .
2727	Returns an id for an anonymous object .
2728	Returns a copy of the PersistentPersistenceProvider
2729	Clear cached deployment specific providers
2730	Add a persistence provider to the list of persistence providers per class loaders
2731	Find the parent of the given class loader .
2732	Add service dependencies to the deployment context .
2733	Add persistence unit to the deployment context .
2734	Sets the annotation indexes for all resources in the deployment .
2735	Get persistence provider adaptor adaptor
2736	Save persistent provider adaptor
2737	Lookup a persistence provider for the given persistence unit
2738	Returns all annotated classes in the given set .
2739	Create the metadata for an EJB archive .
2740	Build the enterprise bean meta data .
2741	Add participant to the operation context
2742	Get the analysis object for the given class .
2743	lookup done for given class
2744	Creates a work in progress .
2745	Return the idl module name .
2746	Convert an integer to a hex string .
2747	Converts a long to a hex string .
2748	Determine whether the method is an accessor method .
2749	Determine whether a method is a mutator .
2750	Returns true if the method has any exceptions in the given method .
2751	Maps an attribute name to an attribute name .
2752	Attribute write method name .
2753	Checks to see if the operation names are mapped to a new IDL for the operation .
2754	clean up the upper case names
2755	Escape an IBAN name .
2756	Parses an XML environment element .
2757	Process the default context propagation element .
2758	Process attributes .
2759	Load multiple PersistenceProvider jar by name .
2760	Creates an add step handler .
2761	Adds the deployment unit to the deployment phase .
2762	Write attribute .
2763	Obtains the method interceptor for the given interceptor context .
2764	Creates a new session .
2765	Infers the destination name from the given address .
2766	Registers the given endpoint handlers .
2767	Returns the set of job names for a given job .
2768	Initialize the given job resources .
2769	Returns the URI of the given request .
2770	Create a new Resolver using the given URL and env .
2771	Lookup a name .
2772	Bind an object to a named object
2773	Call the unbind operation .
2774	Returns an enumeration of the bindings for the given name .
2775	Call the destroy method .
2776	Destroy the given subcontext
2777	Calls a binding .
2778	Create a subcontext .
2779	Lookup a link .
2780	Add a property to the environment .
2781	Removes a property from the environment .
2782	Add the attributes to the transformation description .
2783	Parses a credential from the stream .
2784	remove a security domain
2785	Lookup JNDI for given context name .
2786	Create a modular reference .
2787	Create a modular reference .
2788	Create a modular reference .
2789	Returns a local IDL type for the given type code .
2790	Wait for a service .
2791	Computes the masked password .
2792	Initialize the security vault .
2793	Start the vault session .
2794	Print an attribute creation .
2795	Displays the vault configuration .
2796	Add the configuration to the keystore .
2797	Ensures that the given value is not null .
2798	Get the service name for a deployment .
2799	Inserts a value into a Any object .
2800	Returns whether the given permission implies the given permission .
2801	Returns the string representation of the action .
2802	Get the name of the log file .
2803	Send a state change notification
2804	Turns a CORBA object into a CORBA native object .
2805	Returns the value for the given type .
2806	Returns the name of the context service .
2807	Returns all interceptors .
2808	Add an interceptor for the given method .
2809	Add a service
2810	Obtains a list of interceptors associated with a method .
2811	Return an ordered list of interceptors for the specified method .
2812	Add a timeout interceptor to the interceptor .
2813	Add an interceptor to the list of interceptors for a specific constructor .
2814	Add an interceptor to the post constructors .
2815	Add an interceptor to the list of preDestroy interceptors .
2816	Add a pre passivate interceptor to the chain .
2817	Add an interceptor to the list of interceptors .
2818	Sets the component create service factory .
2819	Remove JNDI aliases for the given entries .
2820	Accepts an EJB transport .
2821	Get the context service name of a component .
2822	Get the context service name of the given module .
2823	Creates a bind info for an environment entry .
2824	Creates a BindInfo for the given JNDI name .
2825	Retrieves the cache for the domain .
2826	Return an array of ValueMemberDefinitions
2827	return an array of ValueMemberDefinitions for typeCode
2828	Creates the subsystem root .
2829	Parse the given XML element .
2830	Starts the naming service .
2831	Adds a component integrator to the target container .
2832	Creates the service name for the job operator .
2833	Add a component description .
2834	Add a message destination .
2835	Returns a set of views for the specified view type .
2836	Return a set of components for a given component .
2837	Retrieves the view descriptions for a given view .
2838	Resolve a message destination .
2839	Build the resource transformation description .
2840	Adds a DEFAULT attribute with a default value .
2841	Rename an attribute .
2842	Pop the security context from the state cache
2843	Loads the id s ids .
2844	Ensure that the version is valid .
2845	Compute the slot for the given JSF version .
2846	Get the TypeCode for a constant .
2847	Add type code for given class .
2848	Utility method to create a module definition .
2849	Add all interfaces in the given container .
2850	Create a list of abstract base values .
2851	Add the given class .
2852	Add an interface definition .
2853	Add a value definition .
2854	Add an exception definition .
2855	Determine the class level - level injection type .
2856	Checks whether the subsystem is enabled .
2857	Start the service .
2858	Stops the store .
2859	Check whether the given method type is allowed .
2860	Check synchronization .
2861	Retrieves a set of class names for all shared TLDs .
2862	Get the map of timers to wait for transaction completion .
2863	Utility method to get extra parameters .
2864	Extract the parameters from the given model .
2865	Convert a type to a Class .
2866	Converts the given value to an object .
2867	Obtains the type of the given values array .
2868	Checks if the given type names are valid .
2869	Retrieves the next binding .
2870	Get more more more than one binding list .
2871	Map a binding .
2872	Observe a health check .
2873	Closes all health checks .
2874	Creates an object reference for an EJB container .
2875	Creates a handle for an EJB home .
2876	Returns the value of the specified node .
2877	Skips the specified amount of bytes in the input stream .
2878	Checks that two elements are not equal .
2879	Adds a component description .
2880	Add all class loaders for the given top level .
2881	Unbind the given name .
2882	Lookup a name in the context .
2883	Lists the given name with the given name .
2884	Lists the bindings for the given name .
2885	Add a context handle .
2886	Save the context handle with the given context object properties .
2887	Adds an IO subsystem to the deployment context .
2888	Creates the welcome content handler .
2889	Obtain a bean instance from the pool
2890	Calculate the operation analysis map .
2891	Collect metrics for a resource .
2892	Create a new deployment unit .
2893	Deploy the target for the given service target
2894	Publish the web app to the target service .
2895	Stops the web application .
2896	Starts the service .
2897	Registers an endpoint configuration .
2898	Retries the timer to retry .
2899	Called after timer processing .
2900	Get the declared methods on a class .
2901	Get the declared fields .
2902	Returns the Constructor with the given parameters .
2903	Obtains a method from a class and its parameters .
2904	Adds an extension to the operation context .
2905	Determines whether or not the given parameter is allowed to be allowed by the resource type .
2906	Migrate an operation to a generic factory class
2907	Cancel the current state .
2908	Run the action if not cancelled .
2909	Change the type in the schema .
2910	Returns whether the index without the given index should be executed .
2911	Estimate the number of indexes for an object .
2912	Find all the classes in the directory .
2913	Returns a list of classes that implement the given interface .
2914	Get the generic type for a field
2915	Evaluates a record .
2916	Derives a field type from the record .
2917	Updates the record with the given record .
2918	Find record by ID .
2919	Tries to get a subset of nodes for sharded query
2920	Moves all equalities from the given WHERE clause to the left one .
2921	Add orderBy to the order by taking the order by the order of the projection .
2922	Extract sub - queries .
2923	Returns true if the cluster is from the given cluster
2924	Finds the class with index for an index .
2925	looks to see if the given class is a descendant of the given class
2926	Retrieves the order direction of an order .
2927	Checks for multiple index lookup conditions .
2928	Finds the index descriptor for a given block .
2929	Builds an IndexSearchDescriptor for the given index .
2930	Compute the common factor for an index .
2931	Creates an ODocumentHandlers instance based on a strategy .
2932	Allow the role to be allowed in the resource specific to the resource specific .
2933	Returns whether this rule is defined for the specified resource type .
2934	Get the compact server status string .
2935	Initialize the system database .
2936	Load local databases .
2937	Remove a member from the cluster .
2938	Obtain a new lock manager
2939	Assigns the lock manager to the cluster .
2940	Commit the current micro - transaction
2941	Rollback the rollback
2942	Called when an index changes to a new one .
2943	Updates the record cache after rollback .
2944	Prepare a file for deletion or replacement .
2945	Atomically moves the source file to the target .
2946	Get the disjoint patterns that are disjoint from this pattern
2947	Execute a local node only if it is local or not .
2948	Parses an array of characters .
2949	Returns whether the connection is connected or not .
2950	Merges two ByteBuffers into one .
2951	Splits a short into two buffers .
2952	Execute the command .
2953	Adds a single value to the index .
2954	Removes the given value from the map .
2955	Executes the OQuery command .
2956	Execute the first query .
2957	Creates the channel .
2958	Checks that the given offset is within the region .
2959	Replace content with new content file .
2960	Execute a command .
2961	Flushes the request to the channel .
2962	Add the host to the local host
2963	Begin a request for a binary request .
2964	Get database .
2965	Get a connection by ID .
2966	Kill the network .
2967	Interrupt the channel .
2968	Disconnect the given channel .
2969	Push all the client connections to the server
2970	Swap the entry at the given index with the new value .
2971	Releases all locks
2972	Synchronize the schema .
2973	Update the metadata .
2974	Moves the iterator to the next record .
2975	Read the next character from the stream .
2976	Execute the query .
2977	Execute onAsyncReplicationError .
2978	Registers a compression class .
2979	Get the limit of the number of open files .
2980	Returns true if the given expression is an indexed function .
2981	Moves this buffer to the specified position .
2982	Fill the buffer with the specified number of bytes .
2983	Execute the last step in the stack .
2984	Execute the execution step .
2985	Evaluates the record .
2986	Execute the operation .
2987	Loads the configuration from the storage .
2988	Parse an OSQL query request .
2989	Execute this request .
2990	Updates the schedule for a particular pattern .
2991	Add an index definition to the collection .
2992	Splits an aggregation on an aggregation .
2993	Determine object to object .
2994	Returns the collate for the specified document
2995	Get the string value .
2996	Advances the probe .
2997	Execute the command .
2998	Build an ODocument from a file
2999	This method checks the hash of a password against the hash table .
3000	Creates a hash from the input string .
3001	Checks if PBKDF2 algorithm is supported by this class .
3002	Creates an index engine .
3003	Iterate over all vertices in the graph
3004	Iterate over the edges in the graph
3005	Get partition key .
3006	Returns the number of timed tasks in the pool .
3007	Creates the active features .
3008	Checks if the changes container is filled up .
3009	Parse the timeout value .
3010	Parses the current lock .
3011	Creates a cluster in the database
3012	Frees a cluster by id
3013	Start the cache .
3014	Shutdown the profiling .
3015	Factory method for singleton result set .
3016	Grant an operation to an operation on a resource specific resource .
3017	Revoke an operation on a resource .
3018	Returns true if the record matches the record .
3019	Bind parameter values to the passed map .
3020	Resets the hash table to the new value .
3021	Returns the index of an item in the hash table .
3022	Applies a random number to a seed .
3023	Creates an index .
3024	Drops indexed indexes for this property .
3025	Retrieves the index .
3026	Retrieve the linked class .
3027	Writes the document to the document .
3028	Removes a listener from the list .
3029	Registers a database .
3030	Send timeout request .
3031	Creates a copy of the database with the given user .
3032	Try to merge the given object with the same ID as this object .
3033	Replace the object with the new object pointer .
3034	Transform result .
3035	Execute the command .
3036	Closes all open databases .
3037	Invoked when a storage is unregistered .
3038	Returns a set of the names of all function types .
3039	Get all collate names .
3040	Returns a set of all the names of the command types
3041	Get the field size and type from the stream
3042	Write status code .
3043	Write the headers to the response
3044	Write the records to the response .
3045	Write a record to the response .
3046	Send a response .
3047	Send a stream to this response .
3048	Open an OObject database in the database
3049	Closes this database .
3050	Listen all changes in the collection in the collection .
3051	Complete the operation .
3052	Pushes all component counters to the snapshot .
3053	Push the current WritCacheCounters onto the snapshot .
3054	Sets storage counter .
3055	Push the current WALCounters onto the snapshot .
3056	Pushes all counters for the specified component .
3057	Stops the write cache timer .
3058	Stops the fuzzy checkpoint timer .
3059	Stops the full checkpoint timer .
3060	Stops the commit timer .
3061	Stops the wAL record timer .
3062	Stops the wAL flush timer .
3063	Parse an OSQL statement
3064	Initialize messages thread .
3065	Method to start the disconnect timer
3066	Remove this record from the database .
3067	Assigns the specified property to this graph element .
3068	Remove a property from the graph .
3069	Check if a class in the schema exist in the schema
3070	Wrap an oIndexCursor .
3071	Define a new vertex attribute strategy .
3072	Define an edge attribute strategy
3073	Creates new records based on class name .
3074	Creates new records based on cluster ids .
3075	Add an index entry .
3076	Merges the given sets into the target set .
3077	Update the record .
3078	Can execute function without index .
3079	Prepares keys .
3080	Write a single page .
3081	Reads the page at the given index .
3082	Removes the given page .
3083	Open the file
3084	Check if replication is active .
3085	Returns the new node strategy .
3086	Get the execution mode for the cluster .
3087	Checks to see if the cluster is read - only .
3088	Get a map of cluster names to a list of cluster names .
3089	Get all the servers in the cluster .
3090	Check if a server contains all cluster clusters
3091	Check if a server contains a specific cluster
3092	Get master servers .
3093	Get all the servers in the cluster .
3094	Get all clusters on a specific node .
3095	Returns all clusters owned by the specified node .
3096	Get the owner of the cluster .
3097	Retrieves the current cluster owner for the specified cluster name .
3098	Get the servers in the cluster .
3099	Get the server names .
3100	Get a set of data center names .
3101	Retrieves the write quorum value .
3102	Check if cluster is sharded .
3103	Returns a list of server names in the specified data center .
3104	Get the data center of a server .
3105	Get the global read quorum field for the cluster .
3106	Gets the write quorum .
3107	Get the cluster configuration .
3108	Get the data center for a distributed database configuration .
3109	Clear initialization stack .
3110	Obtain an index by name .
3111	Drop an index by name .
3112	Add a vertex to OrientVertex .
3113	Add an edge to the graph
3114	Retrieves a vertex by id .
3115	Return an iterable of vertices of the specified class .
3116	Return an iterable of edges of the specified class .
3117	Creates an edge by id .
3118	Reuse the current database .
3119	Shutdown the database
3120	Returns a new vertex type for OrientVertex .
3121	Retrieve an OrientVertexType by name .
3122	Create a vertex type .
3123	Drop vertex type .
3124	Returns an edge type by name .
3125	Create an edge type .
3126	Retrieves an element by id .
3127	Drop an element by key .
3128	Creates an index .
3129	Remove an exception listener
3130	Notifies all listeners that an exception is thrown .
3131	Stop monitoring .
3132	Registers the mbean with the given storageId .
3133	Unregister a MBean
3134	Retrieves the cached WritCacheCountersHolder
3135	helper method to fetch statistics from all threads
3136	helper method to fetch all component counters for a component
3137	Compress the given string .
3138	Return the value of the property with the specified name .
3139	Detaches an entity from this object .
3140	Returns the version of the object .
3141	Return a new command
3142	Set the persistent object in the database .
3143	Unset the dirty object .
3144	Get the index types .
3145	Get all engine names .
3146	Get the missing nodes in the response .
3147	Retrieves a list of duplicated response groups .
3148	Calculate the best response group .
3149	Compute the quorum response .
3150	Retrieves the list of responses from the responses .
3151	Retrieves an execution plan from the database .
3152	Returns true if an index should be executed on target .
3153	Get the library code .
3154	Release database engine .
3155	Returns the next page for the given atomic operation .
3156	Update the size .
3157	Retrieves the value at the given index .
3158	Check if the index can be used by an index based on an order by an order in the index .
3159	Returns the index of the first outside of the string .
3160	Jump to the specified character sequence .
3161	Calculate the jump character .
3162	Sets the fetch plan .
3163	Enqueues a record to be processed .
3164	Cancel a record .
3165	Enqueue a repair cluster
3166	Returns the set of dependencies for a given pattern
3167	Create a pojo instance from the class name .
3168	Register entity classes for all class names .
3169	Registers an entity class for the given class .
3170	Set the class handler .
3171	Acquires a database connection .
3172	Retrieves the number of connections available for a given user .
3173	Acquires a database connection .
3174	Execute the update .
3175	Looks up an iterator of the given class loader and returns it .
3176	Check the cache memory .
3177	Creates a vertex from a JSON object .
3178	Creates an edge from a JSON object .
3179	Creates a JSONObject from an element s properties .
3180	Convert an element to an ObjectNode .
3181	Executes an import .
3182	The status of the job .
3183	Returns a map of the active datacenter names to a set of datapoints .
3184	Extracts the algorithm name from the given cipherTransform .
3185	Creates an object from an OSymmetric key configuration .
3186	Creates an OSymmetric key from an input stream .
3187	Create an OSymmetric key from an input stream .
3188	Encrypt the given bytes using the given transform .
3189	Saves this key to an output stream .
3190	Save to keystore .
3191	Set the child context .
3192	Add an object to the unique result .
3193	Get the value of this field as an object .
3194	Authenticates a user .
3195	Get the map entry .
3196	Retrieve the current record .
3197	Read current record .
3198	Get the transaction
3199	Get a no - tx graph
3200	Setup database pool .
3201	Get a property by name .
3202	Commit the transaction
3203	Parse the current token .
3204	Get the next token .
3205	Gets the token at the specified index .
3206	Generate the ParseException for the expression .
3207	Returns an Iterable over all vertices in the graph with the given direction
3208	Removes the vertex from the graph
3209	Add an edge to the graph
3210	Add an edge to the OrientEdge
3211	Get the connection class name .
3212	Get a connection based on the current direction
3213	Processes broken rids of a JSON file .
3214	Returns a map of methods to the console .
3215	Execute a task on the local node .
3216	Get the number of nodes that match the given statuses .
3217	region OutputStream Implementation
3218	Wait for the next retry .
3219	Returns the value of an argument .
3220	Returns true if there is at least one parameter in the request
3221	Connect to the remote server .
3222	List all the databases in the network .
3223	Get server information .
3224	Check if a database exists .
3225	Drop database .
3226	Free the database for the given storage type .
3227	Release a database .
3228	Returns the cluster status .
3229	Execute the given index .
3230	Retrieves an OrientDB graph from the database .
3231	Parse retry .
3232	Save record .
3233	Delete record from cache .
3234	Get the authentication header for the database .
3235	Authenticates the user using the given username and password .
3236	Check if the user is authorized to access the given resource .
3237	Run the server .
3238	Adjust the beginning of a line .
3239	Utility method to set a bucket pointer .
3240	Retrieves the bucket pointer at the given offset .
3241	End an atomic operation .
3242	Acquires the exclusive lock for the given operation .
3243	Change the maximum amount of memory in the memory cache .
3244	Try to listen on the current port .
3245	Read parameters .
3246	Shutdown the log manager .
3247	add item to list
3248	Removes an entry from the map .
3249	Acquires an open lock .
3250	Retrieves the value associated with the given key .
3251	Clear internal data structures .
3252	Closes the map with the given key .
3253	Empty read buffers .
3254	Add a task to the state buffer .
3255	Called after an entry has been read .
3256	Puts an entry into the read buffer at the given index .
3257	Returns the closest power of two to the given value .
3258	Invoked when an event occurs .
3259	Convert an object to a number .
3260	Convert all the mappings in this object to the map .
3261	Get the serializer for the given object type .
3262	Add shutdown handlers .
3263	Retrieves an engine by name .
3264	Executes the optimization .
3265	Executes the request .
3266	Add a reader to the reader state array .
3267	Authenticates an OUser .
3268	Creates the metadata class .
3269	Attempts to acquire a read lock .
3270	Returns the vertex at the given direction
3271	Returns the id of this element
3272	Sets a property on the underlying element .
3273	Remove a property by key .
3274	Clear the contents of the root subtree .
3275	Delete all subTrees
3276	End the batch .
3277	Create a vertex in the graph .
3278	Parse a strategy .
3279	Return list of positions from embedded collection
3280	Execute the given index .
3281	Checks to see if the given field is a persistent link .
3282	Fill record with iRid .
3283	Set the version of the record .
3284	Get the record type .
3285	Initialize database instance .
3286	Print the stack trace of the given exception at the given level .
3287	Execute an index query .
3288	Convert the record to a record .
3289	Registers a server command .
3290	Create a user configuration from a user document .
3291	Analyze the search condition .
3292	Create an indexed property .
3293	Attaches the given object to the given object .
3294	Retrieves the index class for an index .
3295	This method transfers the next value to the next value in the database
3296	Truncate the database .
3297	Add a base class .
3298	Add polymorphic cluster ids to the index of the cluster .
3299	Serialize a link to a stream .
3300	Release a pointer .
3301	Check for unreleased memory leaks .
3302	Clear all allocated pointers
3303	Convert a byte array to an integer .
3304	Invoked when database is open .
3305	Installs the cluster on the specified class
3306	Dumps the current server s status .
3307	Returns the index of the specified object in the array .
3308	Returns the index of the specified object in the array .
3309	Returns all the clusters that are resolved by the target query .
3310	Handle the result .
3311	Get the temporary rid counter
3312	Report the tip for the given message .
3313	Parse a fetch plan .
3314	Parse the given string to check whether the given string is no cache .
3315	Optimized sort
3316	Get the status .
3317	Execute the operation .
3318	Handle a JVM error .
3319	This method will put an index value into the index .
3320	Rollback the given micro - transaction .
3321	Execute the command .
3322	Registers a new cluster in the database .
3323	Set the value of a property
3324	Execute the schema .
3325	Execute the DATABASE .
3326	Deletes the record from the database .
3327	Find hooks for a specific type .
3328	Deletes the specified record from the database .
3329	Counts a view by its name .
3330	Counts a class by iClassName .
3331	Invoke on the current thread .
3332	Register an encryption algorithm .
3333	Returns the index of the given position in the binary data chunk .
3334	Parses the next word from the current position .
3335	Get the parsed word .
3336	Parse the character sequence .
3337	Parses the next keyword .
3338	Check if the passed character is the separator .
3339	Execute the command .
3340	Clears configuration files .
3341	Get as byte array offset .
3342	Extracts the token from the given token type .
3343	Acquires an access token from the resource .
3344	Copy the current access token from the context .
3345	Returns true if there is no more characters .
3346	Reads a line from the byte array .
3347	Read a line from the buffer starting at the given offset .
3348	Skips the specified number of bytes in the stream .
3349	Skip n bytes .
3350	Ensures that the given offset is within the array length .
3351	Merge sort sort .
3352	Swaps the elements of the specified swapper .
3353	Perform a parallel sort .
3354	UtmurHash3Hash3 MurmurHash3 hash function .
3355	Utility for MurmurHash3 MurmurHash3 .
3356	Write the remaining data to the file .
3357	Truncate the file to the given size .
3358	Sets the position of the underlying stream .
3359	When a consumer refresh metrics reporting it to the consumer refresh metrics .
3360	Waits for all completed tasks to complete .
3361	Find matches .
3362	Finds the types that depend on the current schema .
3363	Removes snapshots from the snapshot .
3364	Returns a hash code for a field .
3365	Checks if two fields are equal in the specified ordinal .
3366	Remove references outside the given schema
3367	Called when an announcement is detected .
3368	Called when a cycle is completed .
3369	Read header tags .
3370	Extract the primary key from an object .
3371	Clear all segments .
3372	Reads the ordinal from the data input stream
3373	Returns the size of the current bit set .
3374	Returns a string representation of a field .
3375	Copies data from source to dest
3376	Copies data from source to destination .
3377	Compares the given byte array to the given sequence .
3378	Copies data from source to destination .
3379	Copies data from source to destination .
3380	Reads data from an input stream and copies it to the underlying stream .
3381	Writes len bytes to the output stream starting at the given startPosition .
3382	Ensures that the segment at the given index has capacity .
3383	Returns the index of the given field in the given name .
3384	Calculate the select bucket size and total number of selected buckets .
3385	Returns true if there are any collections in the given dataset .
3386	Generates the files in the given directory .
3387	Generate the files in the given directory .
3388	Returns true if the specified key matches the specified ordinal .
3389	Returns the record key for the specified ordinal .
3390	Creates a FieldPath for the given type and path .
3391	Creates a new field path based on the hash index .
3392	Creates a new field path for a specific prefix .
3393	Put an object into the map .
3394	Calculate the average word length .
3395	Returns true if the given key is present in the TST
3396	Returns the percentage of the specified cardinality .
3397	Add a field for the specified type .
3398	Returns an ordered list of all schemas in the given collection .
3399	Initialize with the default version .
3400	Get the value at the given index .
3401	Find records that match the given field name and value .
3402	Returns a map of matching records that match the given fieldName and fieldName .
3403	Set element match paths .
3404	Set element key paths .
3405	Calculate the indexes .
3406	Restore the state from the last state .
3407	Runs the cycle .
3408	Add a key to be excluded from this set .
3409	Exclude the state engines that are not referenced by the state engine .
3410	Writes the payload to the data output stream .
3411	Calculate type metrics .
3412	Write the data to the given buffer .
3413	Writes an integer to the buffer .
3414	Writes a fixed length long to the buffer
3415	Return the specified ordinal to the pool .
3416	Sorts the free list .
3417	Compute a hash for the given key and field type .
3418	Returns a hash value for the given key .
3419	Resize storage to a new storage array .
3420	Find the free ordinal for the given ordinal .
3421	Prepare for write operations
3422	Compares the given serialized representation with the given key .
3423	Grows the key array .
3424	Rehash the previous data with the same key .
3425	Creates an empty empty key array .
3426	Returns true if the field matches the given index .
3427	Find a matching element
3428	Swap the current state of the read state
3429	Calculate the size of a hash table .
3430	Run the compaction cycle .
3431	Writes a snapshot to the given output stream .
3432	Writes the delta to the output stream .
3433	Adds the given schema name to the set if it is not null .
3434	Normalize the path to a parameter name .
3435	Reindex hash index .
3436	Find all matches in the hash table .
3437	Trigger an async refresh with a random delay .
3438	Trigger an async refresh after a delay .
3439	Adds a new type diff .
3440	Calculate the type diff .
3441	Writes a long to the output stream .
3442	Writes an integer to the output stream .
3443	Write an integer to the byte array at the given position .
3444	Read a v int from the stream .
3445	Read a v long from the stream .
3446	Add view at the specified index .
3447	Refresh the size of the loading views .
3448	Update the UI for this mode .
3449	Performs the pull operation .
3450	Overrides the default over scroll based on the specified amount .
3451	Adds a rule to the given name .
3452	Adds one or more facts to the rule .
3453	Creates a new rule builder .
3454	Creates a new rule builder .
3455	Returns a new builder with the specified fact type .
3456	Returns a builder with the specified result type .
3457	Applies the given rule with the given name and value .
3458	Applies the given rule to the given delegate .
3459	Applies an action to this builder .
3460	Creates an instance of the given rule .
3461	Retrieves the first annotated field of the given class .
3462	Retrieves a method annotated with the given annotation .
3463	Retrieves an annotation from the given class .
3464	Registers an auditable rule .
3465	Updates the status for an auditable rule .
3466	Returns a map containing the status of the rule .
3467	Create a new RuleBook with the given result type .
3468	Add an action .
3469	Add an action .
3470	Reset the default value .
3471	Creates a new rule with the specified type .
3472	Returns a list of POJO rules .
3473	Reads an empty line from the file content .
3474	Convert a list of services to an array of Service objects .
3475	Retrieves a list of ports from an image .
3476	Extract the ports from the configuration
3477	Parse a port mapping .
3478	Add a port if not null .
3479	Shift the list of service ports to null .
3480	Adds missing parts to the given service .
3481	Append an image stream to a target file .
3482	Determines whether the given service port matches the given int or string .
3483	Utility method to convert a service name to an environment variable .
3484	Get the host and port for the given service name .
3485	Associates the given map with the given name if the given value is not already present in the map .
3486	Merges the given map with the given map .
3487	Merges two maps .
3488	Puts all of the values in the given map to the given map .
3489	Wait until a pod is ready .
3490	Validates the Kubernetes ID .
3491	Converts the specified entity to an item list .
3492	Retrieves the resource version .
3493	Check whether a pod is ready .
3494	Retrieves the current context .
3495	Checks if the given name exists in the given list .
3496	Returns whether or not the given resources exists in the given project .
3497	Retrieves a fragment from the given file .
3498	Converts map of environment variables to a list of EnvVar objects .
3499	Merges two Metadata objects .
3500	Merges the map with empty strings .
3501	Checks whether the pod spec is local or not
3502	Retrieves a map from the given file .
3503	Add port if valid .
3504	Get the JSON configuration string for the given server .
3505	Returns the configuration for the specified plugin .
3506	Get a secret configuration .
3507	Download file to the given target file .
3508	Compare two versions .
3509	Returns the processor configuration with the specified profile .
3510	Look up a profile by name .
3511	Reads all profiles from the classpath .
3512	Loads all profiles from the classpath with the given name from the classpath .
3513	Finds the profile file in the given directory .
3514	Returns a list of all the meta infos for the specified extender .
3515	Obtains a list of profiles from a YAML file .
3516	Returns the image pull policy from the resource configuration .
3517	Returns true if the current context is open .
3518	Retrieves the replica count .
3519	Return the first child element with the given name .
3520	Installs the template
3521	Remove tags with the given name .
3522	Applies a new namespace .
3523	Applies the specified project to the specified project .
3524	Applies the project to the given entity .
3525	Get the namespace for the given entity
3526	On apply error .
3527	Creates a builder .
3528	Adds the Kubernetes namespace to the request .
3529	Retrieves environment variables .
3530	Convert duration string to seconds .
3531	Utility method to convert a string to a duration .
3532	Scans the files that match the given patterns .
3533	Sets the OpenShift features for OpenShift features .
3534	Returns true if the service has an IngressRule
3535	Parses the given mapping from the given input stream .
3536	Returns a generator context .
3537	Extract the generator config from the given profile .
3538	Returns an Enricher context .
3539	Extract enricher configuration from the environment .
3540	Returns the default icon .
3541	Copies the app config files to the given directory .
3542	Reads properties from a URL .
3543	Returns the spring boot version of the spring boot .
3544	Creates a list of service objects .
3545	Enrich enricher .
3546	Returns the raw configuration map for this processor .
3547	Flattens a map .
3548	Extracts the watcher config from the configuration
3549	Retrieves the singleton template from the given resources list .
3550	Retrieves the timestamp for a build .
3551	Retrieves the value for the given key .
3552	Returns an unmodifiable map with the given name .
3553	Prepares a list of named processors .
3554	Add the from builder to the builder
3555	Returns the default from the given runtime mode
3556	Returns the name of the image .
3557	Gets the registry .
3558	Retrieves the online on the configuration .
3559	Gets the external service URL .
3560	Retrieves the value of the given property as a boolean .
3561	Creates a jest client .
3562	Create internal node .
3563	Scans all plugins .
3564	Creates a new AmericanExpressionsBalance from a JSON string .
3565	Sends a request to retrieve the countries - balance balance .
3566	Creates a PayPal payment resource from a JSON string .
3567	Performs an HTTP GET request .
3568	Sends an HTTP POST request to the server .
3569	Creates a new VenmoConfiguration from a JSON object .
3570	Collect data from FragmentFragment .
3571	Collect data about device data .
3572	Collect data for PayPal device data .
3573	Retrieves the metadata ID for the payment .
3574	This method is used to check if a signature is valid .
3575	Get an optional string value from a JSON object .
3576	Parses a list of payment method nonce nonce .
3577	Gets the browser checkout recipe .
3578	Gets the billing agreement .
3579	Perform an HTTP GET request .
3580	Submits a POST request to the server .
3581	Perform an HTTP POST request .
3582	Start a new payment .
3583	Applies a local payment to the fragment .
3584	Add listener .
3585	Removes listener from BraintTree .
3586	Requests the billing agreement .
3587	Dispatch an activity result .
3588	Parses the paypal account .
3589	Convert a list of words to a dictionary .
3590	Remove a list of words from a list of words
3591	Convert a list of tokens to a list of strings .
3592	Extract phrases from a sentence .
3593	Detokenize a list of tokens .
3594	Fetches data from the given channel and reads it from the given channel .
3595	Joins a list of NALUnits into a byte buffer .
3596	Joins a list of NALUnits into a buffer .
3597	Returns the profile for the integer
3598	Calculate fixed precision for a list of taps .
3599	Read the next marker to the given output stream
3600	Reads the next marker to the next marker .
3601	Find the maximum available frame .
3602	Perform the modification of the specified file .
3603	Copies data from the source file to the destination file .
3604	Returns the duration of the edits in the specified track .
3605	Calculates a time - value for a particular frame number .
3606	Converts a time value to a frame .
3607	Calculate the total number of times to edit by time .
3608	Calculates the amount of edit to edit to the edited movie time .
3609	Calculates the qt frame number for a movie
3610	Converts a video frame to a time string .
3611	Convert a timecode value to a timecode frame
3612	Utility method to format a timecode track .
3613	Compute a 7 - bit integer .
3614	set a value to a list
3615	Returns true if this color space matches the given color .
3616	Returns the size of the given component at the given compaction .
3617	Create a copy of the given input stream .
3618	Reads an index from the buffer .
3619	Create a WAV header .
3620	Creates a new WAVHeader from an array of headers .
3621	Parse AAC decoder specific data .
3622	Encode a symbol
3623	Reads the decoder s data structure .
3624	Splits a movie into a list of edit edits based on a particular timestamp .
3625	Decode a frame
3626	Sets whether data is big endian .
3627	Block the given BMBP
3628	Encodes a video frame .
3629	Encodes the given long value into an array of bytes .
3630	Calculate the length of the given long .
3631	Adds a new packet .
3632	Reads data from the file .
3633	Decode a single bit .
3634	Decode a single byte .
3635	iterate ahead of the buffer
3636	Returns the sample frequency for an integer .
3637	Builds a prediction on a plane .
3638	Stores a block in a block .
3639	Computes the coefficients for a given level at the given level .
3640	Divide a block by division .
3641	Concatenate bits from one or more bits .
3642	Rewind a value in reverse order
3643	Rewind the range in reverse order
3644	Seek to a specific frame
3645	Creates a picture from the video store .
3646	Get the gain id of a change in the log .
3647	Converts a byte array into an integer array .
3648	Converts an integer array into a byte array .
3649	Converts an AudioFormat into a float buffer .
3650	Converts a float buffer into a byte buffer .
3651	Interleave the contents of an AudioFormat using ByteBuffer .
3652	Deinterleave the contents of the AudioFormat into the given output buffer .
3653	Get encoded size of video .
3654	Builds the map out of a box .
3655	Build the group map to use for the specified action .
3656	Read a batch from the given ByteBuffer
3657	Reads a 32 - bit integer array from the given byte buffer .
3658	Calculates the MVP statistic
3659	Encode a single frame .
3660	Encode an IDR frame .
3661	Encode a single frame .
3662	Get all supported codecs .
3663	Get the set of supported codec IDs .
3664	Add a reference to the slot .
3665	Remove reference from the queue .
3666	Flushes all available references to the tracker .
3667	Load a library
3668	Unpack library .
3669	Delete temporary files
3670	Get a default AudioChannel
3671	Get a audio channel from a specific layout .
3672	Make a media packet .
3673	Get the version information .
3674	Get the default time base .
3675	Make a new Demuxer .
3676	Play a video stream .
3677	Displays a video frame at the specified time .
3678	Make a codec descriptor .
3679	Prints the given option to the given stream .
3680	Registers a factory for the given protocol prefix .
3681	Generates a unique name .
3682	Make a media resampler .
3683	Get the list of supported video frame rates .
3684	Get the supported video pixel formats .
3685	Get the supported audio sample rates .
3686	Get the supported audio formats .
3687	Get the list of supported AudioChannel layouts .
3688	Set a flag on the coder .
3689	Sets a flag on the coder .
3690	Get a decoder
3691	Create a new Demuxer object
3692	Get the list of muxer formats .
3693	Make a filter graph .
3694	Get the bit stream type .
3695	Retrieves a ByteBuffer from the given offset .
3696	Make an audio frame .
3697	Resample picture to resampler .
3698	Validates that the given image is of the correct type . Throws an IllegalArgumentException if the exception is thrown .
3699	Validates that the given picture picture is correct .
3700	Get the filter graph .
3701	Get the meta data for this video .
3702	Determines the CPU architecture based on a string .
3703	Returns the CPU architecture for the given gnu string
3704	Get the OS family based on the name .
3705	Returns the OS family based on the given gnu string .
3706	Plays the given filename .
3707	Loads a specific library .
3708	Sets the loaded library .
3709	Attempt to load a library .
3710	Initialize search paths .
3711	Returns true if the given library name is already loaded .
3712	Record a screenshot of the current window .
3713	Delete this object from the pool
3714	Open a stream at the given position .
3715	Get a Muxer object
3716	Make a set script transaction
3717	Decode the given input string into a byte array .
3718	Generates a random seed .
3719	Get information about a specific transaction .
3720	Retrieves a list of address transactions for an address .
3721	Retrieves a list of transactions from an address .
3722	Retrieves a range of block headers .
3723	Get block by signature .
3724	Send a request to a transaction .
3725	Adds a script to the chain .
3726	Compile the given script .
3727	Write primitive array
3728	Flush buffer to stream .
3729	Write an object to memory .
3730	Read the last direct class .
3731	Writes an object to the output .
3732	Set the MMF data
3733	Get specificity of a class .
3734	Resize the memory to the given size .
3735	Remove a binary from the index .
3736	Writes an Ascii String to the stream .
3737	Set output stream .
3738	Utility method to create a JSTConfiguration object .
3739	Creates struct configuration object .
3740	Calculates the number of bytes that can be written to the file .
3741	Clear cached objects
3742	Get an input stream from an input stream .
3743	Get an object input from a byte array
3744	Get an object input from a byte array
3745	Get an object output for this object
3746	Register cross - platform class mapping .
3747	Returns the cp name for a class
3748	Write an integer to the output stream
3749	Write an integer to the output stream .
3750	Write an integer to the stream
3751	Write primitive array .
3752	Write byte array to buffer .
3753	Cache a field info object for the current class .
3754	Called when an object is written to the stream .
3755	Notifies the listeners that an object has been written .
3756	Get the serialization class info
3757	Write an array
3758	Set the string to the given string .
3759	Write primitive array .
3760	Take all of the changes from the current location .
3761	Rebuild all changes in the given byte buffer .
3762	Registers an object for write .
3763	Writes an object to the output stream .
3764	Converts an array to an object .
3765	Read a byte array .
3766	Read an integer from the stream .
3767	Back the poll .
3768	Set whether thread pool is enabled .
3769	Starts an embedded cassandra cassandra connection .
3770	Clean up data embedded in Cassandra .
3771	Copies the given resource to the given directory .
3772	Print the current thread info for the current thread .
3773	Tests if a remote port is available for a given port .
3774	An empty subscriber state .
3775	Creates a map of OpxOpDescriptors from a JSON file .
3776	Calculate the output shape
3777	Utility method for testing
3778	add AND condition
3779	Returns an array with the given condition
3780	Perform an OR condition
3781	Applies a where condition to a given condition
3782	Return the first index of the given INDArray
3783	Converts the array into a flat buffer .
3784	Creates a FunctionProperties object from Fluo
3785	Convert a collection of properties into a flat buffer .
3786	Set the exception .
3787	Set the first exception if the exception is null .
3788	Merges two coordinates .
3789	Partition the data set by chunk .
3790	Convert an onnx type to a DataBuffer type .
3791	Shutdown the transport
3792	Get the architecture of the current device
3793	Convert a column to an image
3794	Pooling 2D array
3795	Creates a compression descriptor from the given byte buffer .
3796	Splits the given list into batches .
3797	Validate the given arrays .
3798	Set the op type
3799	returns ninspace
3800	Flattens the given matrices .
3801	Computes the bilinear products for a single tensor
3802	Create a complex ndarray from given data .
3803	Creates a complex n - value of a given value .
3804	Create a complex n - dimensional array from the given shape
3805	Returns true if the sync should be replicated .
3806	Sets the sub - components of a complex number .
3807	Compute a complex number .
3808	Calculate ceil .
3809	Negate a complex number .
3810	Calculate the absolute value of the complex number .
3811	Computes the power of a complex number .
3812	Get an aeron context .
3813	Binaryize a scalar at the given cutoff
3814	Sample a dataset
3815	Returns the memory footprint of the ndarray
3816	Convert an exception to a string .
3817	Extract a simple hostname from a full hostname .
3818	Convert an array of Strings to a string .
3819	Converts a byte array into a hex string .
3820	Extract string array from given delimiter
3821	Splits the given string using the given separator .
3822	Splits the given string into an array with the given separator .
3823	Find the index of the next character in the given string .
3824	Escape a string to be an HTML string .
3825	Joins the given strings with the given separator .
3826	Convert a string to a camel - case string .
3827	Replaces all the occurrences of tokens in the given template with the given map .
3828	Get stack trace .
3829	Returns inverse matrix .
3830	Support the subscript operator for BigInteger .
3831	Is actual on host side .
3832	Is actual on device side .
3833	Create shape information
3834	Create shape information
3835	Check if shape is vector .
3836	Get the order of an ndarray
3837	Get the offset for an array
3838	Convert an array of ints to an index
3839	Gets a short at the specified index .
3840	Allocate data buffer .
3841	Copies data from one buffer to another
3842	Returns a data buffer for a given array of float data .
3843	Returns the URI for the kafka .
3844	compute power of ndarray
3845	log of ndarray
3846	Maximum value of a scalar
3847	Max function .
3848	Minimum function for scalar
3849	Minimum function .
3850	Stabilize an ndarray
3851	Examples an ndarray
3852	log1p
3853	Prepares an ndarray
3854	Adjust a given step by a given number of steps
3855	Returns the next data set .
3856	Computes the S - G - A - QR decomposition
3857	Build allocation shape from data buffer
3858	Determines whether the given name exists in the path .
3859	Reads data from an object input stream .
3860	sweepatches to the next invocation
3861	Create an npy INDArray from the given object .
3862	Create an ndarray from a npy file
3863	Allocates a pointer to the specified memory .
3864	Attaches an object to the cache .
3865	Returns true if the server is started .
3866	Execute the given op
3867	Flush the queue
3868	Returns an InputStream for this resource .
3869	return the device for the given thread id
3870	Attaches a thread to a thread
3871	Get the next device .
3872	Returns the name of the operating system .
3873	Calculates the ARCH type .
3874	Publish an ndarray
3875	Starts the server .
3876	Create data buffer .
3877	Intercept an operation on an int data type
3878	Add the given complex number to this complex number .
3879	Called to process a payload .
3880	Average pooling 3d operation
3881	Perform a depth - 1 operation
3882	Resets the state of this class .
3883	Returns the name of the given op .
3884	Allocate new INDArray and allocate new array
3885	Return the shape of this variable
3886	Evaluate the output .
3887	Create an ndarray
3888	Flattens the given vector to an array .
3889	Center the given array
3890	Truncate the given ndarray to the given dimension
3891	Pad the given ndarray with zeros to the target shape
3892	Compute the index of an array .
3893	Publish an array to all devices
3894	This method is used to send an aggregation message .
3895	Returns the gamma value rounded to the specified precision .
3896	Compute the square root of a x .
3897	Calculate cbrt .
3898	Compute root of root .
3899	Compute the absolute value of x .
3900	Internal method to calculate an exponential value .
3901	Compute power of two numbers .
3902	Raise an integer to a number .
3903	Sigma s sin .
3904	Append x .
3905	Compute cosh .
3906	Computes the sinh value of xh .
3907	Compute tanh value .
3908	Calculate the arcs of an x value .
3909	Compute cosh .
3910	Returns the Gamma value of x .
3911	Calculate a broad approximation of the result .
3912	Multiplies the given BigDecimal with the given scale .
3913	Scale BigDecimal precision .
3914	Convert an error to a precision .
3915	Put function for given id
3916	Get inputs for a function
3917	Put an array for given variable name
3918	Put shape for given variable name
3919	Associate an array with the given variable
3920	Get the property for the given function instance
3921	Add a property for given function
3922	Add the outgoing arguments for a function
3923	Add function arguments for the given function
3924	Check if the given function has arguments .
3925	Evaluate the given input map
3926	Create a variable with the specified shape
3927	Apply an array to one SDVariable
3928	Apply zeros to the given SDVariable
3929	Remove an argument from a function .
3930	Set the gradients for a SDVariable
3931	Avg pooling 3d operation .
3932	Output a GUCell with the given base name
3933	Execute a list of differential functions
3934	Create a while statement .
3935	Execute the specified function .
3936	Execute the given function with the given name .
3937	Execute backwards and end result
3938	Add place holder as place holder
3939	Allocate memory in memory .
3940	Returns the length for the given data type .
3941	Returns the name of a DType for a given allocation
3942	Get the data type from the context .
3943	Returns the integer value of the specified op name .
3944	Destroy all workspaces for current thread
3945	Print allocation statistics for current thread
3946	Perform a trmvolution
3947	documentation interface
3948	compute the accumulation
3949	Perform threshold decode on an encoded INDArray
3950	Returns the node name based on the input name .
3951	Execute the given scalar operation
3952	Assert that no workspace is open
3953	Computes the negative log likelihood for the given labels
3954	Requests to start a request for a given time .
3955	Try to request to the toE ee
3956	Release to the current state
3957	Get current access state
3958	Build an environment .
3959	Sends the message to the clipboard .
3960	Initialize the current data set from a list of examples
3961	Init garbage collector threads
3962	Get device pointer .
3963	This method is used to synchronize the data buffer .
3964	Applies an update to the history
3965	Synchronize to host .
3966	Create an ndarray index from the given index
3967	Returns a map of the field names to their values .
3968	Checks if there is place holder inputs .
3969	Perform a diff operation
3970	Format an ndarray
3971	Imports a graph from the given TFGraph .
3972	Convert an array to a blob
3973	Loads a complex ndarray from a blob
3974	Saves the given array to the database .
3975	Copy the real array to the given array
3976	Copy the imaginary array to the given array
3977	Computes the epsilon value of this complex number .
3978	Assigns an array to another .
3979	documentation inherited from interface
3980	Puts a single row into the matrix .
3981	Put a vector at the given column
3982	Subroutine of subdarray
3983	Add an ndarray to another
3984	Calculate sub - vector .
3985	Add this vector to another
3986	Assigns a value to a complex number .
3987	Creates a complex vector from the vector
3988	Compute eigenvalues for a matrix
3989	Computes the generalized eigenvalues of A and B
3990	Returns the index of an array .
3991	Copies one - dimensional vector to another .
3992	Compute a scalar vector .
3993	Process a SkipGram request .
3994	Returns the number of non - zero values for the given weights
3995	Performs a reduction .
3996	Gets the no - arg constructor .
3997	Returns a MethodHandle for the given class and arguments .
3998	Invoke a method handle .
3999	Retrieves an annotation from the given annotations .
4000	Retrieves the annotation from the given class .
4001	Returns true if the annotation is present on the class .
4002	Creates a proxy .
4003	Load an entity
4004	Saves an entity .
4005	Create a proxy for a memcache service
4006	Retrieves the metadata for the given kind .
4007	Query keys only .
4008	Launches a key query .
4009	Performs a normal query .
4010	Execute a projection query .
4011	Query a key query .
4012	Partition the iterator by chunkSize .
4013	Loads an iterator from the given keys .
4014	Create a message for a specific path .
4015	Creates a key for the given pojo .
4016	Compares two objects with the identity hash code .
4017	Constructs a key from Google Cloud Datastore .
4018	Returns the key for the given typed key .
4019	Returns the kind of the given class .
4020	Returns true if the type has missing type parameters .
4021	Determine whether the super type is the super type of the given type .
4022	Get the exact direct super types of the given type .
4023	Capture the given type .
4024	Get a translator for the given type key and path .
4025	Retrieves the populator for the given class and path .
4026	Gets the index instruction .
4027	Returns true if the method is of interest .
4028	Retrieves all the properties of the given class .
4029	Gets the key metadata for this entity .
4030	Retrieves a value from the cache .
4031	Execute the current round .
4032	Fetch pending entities .
4033	Add the discriminators to the class .
4034	Register a subclass of this class .
4035	Returns the type of a collection .
4036	Get map key type .
4037	Returns a forward path for the given path
4038	Returns the final path .
4039	Returns the path string represented by this node .
4040	Returns the depth of this Path .
4041	Put all given updates to the cache .
4042	Empty the cache .
4043	Caches all buckets in the given bucket to the cache .
4044	Get all values from the cache .
4045	Returns the keys of a collection of buckets .
4046	Find key fields .
4047	Sets the key in the given container .
4048	Sets the id of a pojo .
4049	Returns the key value for the parent meta data .
4050	Register a subclass for the given superclass .
4051	Returns true if two types are a subclass of type .
4052	Transform the owner type for the given class .
4053	Retrieves the annotation for the given annotation type .
4054	Adds all values from the given session to this session .
4055	Load a result from the round robin transaction .
4056	Execute the round .
4057	Translates a result into a Map .
4058	Fetch a set of keys .
4059	Load the given entity .
4060	Creates a raw key with the given id and type .
4061	Returns the raw key for the given key .
4062	Returns the value of the given key .
4063	Convert a url - safe key to a key .
4064	Creates a new transactional implementation .
4065	Creates a transactional transaction .
4066	Perform commit .
4067	Returns true if the given value matches the given conditions .
4068	Utility method to create an object from the cache .
4069	Get an async datastore for this entity .
4070	Get the metadata for the given entity .
4071	Allocate a key range .
4072	Open the objectify .
4073	Closes the stack .
4074	Iterates over the index values in the list and sets the index to the index .
4075	Creates a new reference .
4076	Retrieves and throws an exception .
4077	Add a new value to the map
4078	Returns true if the task is done .
4079	Generates an array of IF conditions for the given field .
4080	execute the engine
4081	Returns the container matching the specified type .
4082	Get the Stat for a particular kind .
4083	Unwraps the given exception .
4084	Retrieves a translator for the given type key .
4085	Gets the root .
4086	Creates a translator for a type key .
4087	Loads a value from a container .
4088	Retrieves the property value from the container .
4089	Set a value on a POJO
4090	Saves the property value .
4091	Get the value .
4092	Writes extensions to the message .
4093	Write the content category
4094	Writes the content categories to the JsonGenerator .
4095	Process the given snippet .
4096	Returns an iterable of bids from the response .
4097	Get bid by id .
4098	Update bid bid response list .
4099	Remove bid from the response list that matches the given filter .
4100	Obtains an iterable of the imps specified by the request .
4101	Read extensions from a JSON parser .
4102	Returns whether the current token is empty to null .
4103	Registers an additional reader .
4104	Registers a new OpenRtJsonWriter for the given class .
4105	Process a Snippet
4106	Process the snippets .
4107	Updates the given objects based on the given updater .
4108	Filters the list of objects based on the given filter .
4109	Get the current name .
4110	Reads the start of an object .
4111	Starts an array .
4112	return the next token from the JsonParser
4113	Write an integer field to the JsonGenerator
4114	Writes a list of strings to the JsonGenerator
4115	Write an array of ints to the JsonGenerator
4116	Write a list of longs to the JsonGenerator
4117	Write list of enums to the JsonGenerator
4118	Resolve target URL .
4119	Fixes a pure query URL to a URL .
4120	Extract host segments from a URL .
4121	Get host name .
4122	Gets the url from the given url .
4123	Load a list from storm configuration
4124	Extract the configuration element from the given configuration .
4125	Get the protocol for a given URL .
4126	Generates a byte array from the WARC information .
4127	Extract url from a URL .
4128	get the metadata for an outlink
4129	Filters the given metadata and returns it .
4130	Add a timestamp to the queue .
4131	Checks to see if the given name is a valid field name .
4132	Extracts the charset name from the given byte array .
4133	Extracts the charset from the text content .
4134	Retrieves charset from the given buffer .
4135	Searches for an array of bytes .
4136	Set the value for the given key .
4137	Return the first value found in the metadata .
4138	Retrieves a list of cookies from an array of strings
4139	Checks whether the given cookie domain matches the given URL .
4140	Returns the key to be used for a robot .
4141	Retrieves the robot rules from the cache .
4142	Extract meta tags .
4143	Ack for a tuple
4144	Filters the given URL based on the metadata .
4145	This method does the actual filtering .
4146	Reads the rules from the specified rules file .
4147	Process the given URL and replace query elements with the query elements .
4148	Loads the navigation filters from storm configuration .
4149	Add a record format .
4150	Calculate the amount of time between the time last query .
4151	Triggers the maximum number of queries .
4152	Load parse filters from storm configuration .
4153	Append a new node to the document .
4154	Ignorable characters .
4155	Add processing instruction .
4156	Adds a comment to the document .
4157	Append cdata .
4158	Begin DTD declaration .
4159	Set prefix mapping .
4160	Returns the canonical value for the given tuple
4161	Trims the text of the given text .
4162	Checks the given metadata for a custom interval .
4163	Load URL filters from storm configuration .
4164	Set the number of items in the wheel
4165	Resolve size and state for given size .
4166	Set the empty item drawable
4167	Set the angle of the wheel .
4168	Updates the position of the selected item .
4169	Invalidate a wheel item at a given position .
4170	Converts a position to a fixed position .
4171	Update the angular velocity by a given delta time
4172	Get the contrast color from a map entry .
4173	Clamp the value to the specified upper limit .
4174	Writes the coveralls file .
4175	Gets the data as ByteBuffer .
4176	Sets the string to the given string .
4177	Make an array of Strings
4178	Make an ArrayChar from a string .
4179	Construct an ArrayChar from an array of Strings
4180	Creates a char array from an array of Strings .
4181	Returns an array of time interval offset for a given Grib2 record .
4182	Show this window .
4183	Show the window if not already set .
4184	Write size estimate .
4185	Main method for testing
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Creates a plural for the given name .
4189	Returns true if the specified date is included .
4190	Returns the intersection of this range with the specified clipping range .
4191	Extend the range with the given date range .
4192	Extend the start with the specified date .
4193	Sets the start .
4194	Sets the end .
4195	Set the duration .
4196	Calculate the duration .
4197	Add a map bean to the map .
4198	Print yyer error .
4199	This method returns the name of the NCD location .
4200	Returns a string representation of this object .
4201	Create a file from the given byte array .
4202	Compute the bounds for the specified LatLonRect .
4203	Sets up the value of the slider .
4204	Compute chunking for a given set of dims .
4205	Register a watcher .
4206	Process the watch events .
4207	Sets a reference date .
4208	Opens a feature dataset .
4209	Create a new FeatureDataset
4210	Determines if the specified feature type is ok with the given criteria .
4211	Searches for an existing CDDF file .
4212	Write catalog .
4213	Convert catalog to HTML
4214	Gets the CSS .
4215	Get the header string for the host .
4216	Creates a dynamic catalog from the given path .
4217	Add all the global services to the catalog
4218	Initialize the given credentials provider with the given user agent and user agent .
4219	Retrieves the content of the given URL .
4220	Puts the given content to the given url .
4221	Retrieves a front page for testing .
4222	Create a catalog from the given match path
4223	Extract the Geospatial coordinate from a Gds collection .
4224	Retrieves a single dataset from the given GribCollection .
4225	Returns true if the two vertices are logically equal .
4226	Creates a new unit ID .
4227	Parse an attribute string .
4228	Read top - level data from the file .
4229	Convert two shorts to an int .
4230	Convert a byte array to an integer .
4231	Convert julian days to a date .
4232	Make a valid NetcdfdfObject name from the given name .
4233	Returns true if the given name is a valid netcdf3 object name .
4234	Open the file for writing
4235	Reads data from an ucar .
4236	Reads the data subset from a section in a Ucar .
4237	Fill variables in the ncfile .
4238	Creates a time struct with the specified time index .
4239	Make a time struct for a given calendar .
4240	Returns true if the specified time template exists .
4241	Add a server side function .
4242	Retrieve a BoolFunction by name .
4243	Get BTFunction by name .
4244	Load a new function .
4245	Get the level name .
4246	Returns the level description for the given grid record .
4247	Get the level unit for a given level .
4248	Determine the projection type to use .
4249	Determines if the specified grpc record is vertically or not .
4250	Is a layer a layer?
4251	Creates and returns a transform for the specified variables .
4252	Make a VariableTransform for a coordinate transformation .
4253	Create a projection .
4254	Entry point for this class .
4255	Saves the current state of this collection to the preferences .
4256	Creates a Chronology with the specified time zone .
4257	Write count .
4258	Writes an array to the serialized array .
4259	Writes bytes to the output .
4260	Writes a number of bytes to the output stream .
4261	Initialize the event management
4262	Create a calendar date range from a given date range .
4263	Factory method to create a Grib2 Grib2 Gds .
4264	Compares the specified text with the specified DDS .
4265	Compute the DASparse with the given text .
4266	flip grid header
4267	Read data from a GIDAS grid .
4268	Main method for testing .
4269	Write a constraint .
4270	Writes the headers to the file .
4271	Write operations .
4272	Scans the given directory and passes it to the given closure .
4273	Scans the given log file and passes it to the given closure .
4274	Get the data type for a grid .
4275	Find a grid record .
4276	Read data packed by nword .
4277	Unpack data .
4278	Compute the number of data points .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Prints all grid grids .
4282	Get the next byte from the stream
4283	Creates a calendar date based on the given calendar .
4284	Creates a calendar date from the given date .
4285	Creates a calendar date from the specified number of milliseconds .
4286	Creates a calendar date with the specified number of milliseconds .
4287	Parse udunits string into a calendar date .
4288	Get the difference between two calendar fields .
4289	Create a CDM array at the given data cursor .
4290	Sets up the request parameters .
4291	Escapes a string .
4292	Creates a list of slices from the given rangelist list .
4293	Unwraps a given file .
4294	Returns true if the given dimension set contains variable length .
4295	Compute the effective shape .
4296	Add a date
4297	Compute the result of this unit by the given value .
4298	Returns the result of this unit divided by the given scale .
4299	Computes the result of this unit by divising the given scale .
4300	Raises this unit to the specified power .
4301	Convert this object to a derived unit .
4302	Convert this object to a derived unit .
4303	Convert this object to a derived unit using the given unit .
4304	Get the canonical string representation of this object .
4305	Reads the data from the given variable iterable .
4306	Reads a 2 - bit data set from the coords set
4307	Flattens a list of stations .
4308	Find an inv service by name .
4309	Get the size of the datasource .
4310	Get the start of the index .
4311	Returns the number of points to the specified datatype .
4312	Write an XML document to an output stream .
4313	Calculate preferred layout size for the given target container .
4314	Verify that the given Crawlable dataset is descendant .
4315	Generates a proxy catalog for a Crawlable catalog .
4316	Returns a CalendarDateUnit with the given name and string .
4317	Create a new CalendarDateUnit with the given udunit string .
4318	Creates a calendar date unit based on the specified calendar field .
4319	Calculates the offset from a reference date .
4320	Makes a calendar date .
4321	Returns the quantity dimension .
4322	Check to see if a file is a valid input file
4323	Reads all station names from a file .
4324	Read data for a variable
4325	Read an array of data from a variable
4326	Reads data from the given section in the given section and writes them to a byte channel .
4327	Calculates the elevation of an angle .
4328	Calculates a step for a range .
4329	Calculates the angle of the radians in degrees
4330	Calculate the data for the specified data .
4331	Calculate the nyvent value
4332	Builds a vertical transform for this dataset .
4333	Set debug flags .
4334	Set the extended index mode .
4335	Reads data for a single frame .
4336	Determine whether a variable is missing or not .
4337	Get the LatLon bounding box .
4338	Prepare the structure data .
4339	Appends tabs to the given string buffer .
4340	Pad a string with a given width .
4341	Fill an integer with the given width
4342	Returns a long padded with the specified width .
4343	Format a byte size .
4344	Show the specified value .
4345	Show 2 d .
4346	Creates a string representation of an array .
4347	Flattens this slice to the last index .
4348	Convert this constraint to a string representation .
4349	Create a slice from the source and the target slice .
4350	Atomically maps a slice to a long value .
4351	dump bytes into a byte buffer
4352	This method dumps a byte buffer into a byte buffer .
4353	Gets the type identified by name .
4354	Retrieves an ellipseid from the given EpsgId .
4355	Decode vlen data .
4356	Decodes vlen arrays into an array
4357	Extract the URL from the given URL .
4358	Get the text content from the URL .
4359	Filters tags from the input stream .
4360	Reads data from variable and writes it to a byte channel .
4361	Adds all attributes to the model .
4362	Removes the given attribute .
4363	Remove the attribute with the given name ignoring case .
4364	Returns a list of offsets in the current time units .
4365	Add an action source listener .
4366	Convert a string to a date .
4367	Get the standard or ISO - 8601 date
4368	Get the date origin .
4369	Returns the value of this property as a Date object .
4370	Creates a date based on the given value .
4371	Returns the value of the given date .
4372	Converts a double value into a standard date string .
4373	Get the grid spacing in meters .
4374	Add dimensions to the network .
4375	Add a coordinate axis to the network .
4376	Create a projection matrix for the given parameters .
4377	Add all the GDS parameters to the given variable .
4378	Add a coordinate system variable .
4379	Create a projection from the current location .
4380	Internal method to make the projometric basis .
4381	Construct a Mercator for the projection .
4382	Creates the sub - geometries .
4383	Set the x y - coordinate of a line .
4384	Read a dataset .
4385	Read a dataset scan .
4386	Reads metadata from an URL and converts it to an object .
4387	Returns the level type 1 .
4388	Check to see if the file is a valid magic file
4389	Write an array of bytes .
4390	Set the clearName attribute .
4391	Get the coordinate name for a given axis type .
4392	Get the coordinate name for a given dimension
4393	Builds the XML response .
4394	Build DapException object from XML exception object .
4395	Returns a list of levels for breakup levels .
4396	Creates a z - coordinate name .
4397	Creates new variables for a given variable .
4398	Make a time coordinate axis from a reference .
4399	Cut a floating point value
4400	Main method .
4401	Wrap the given netcdf file .
4402	Opens a dataset .
4403	Clear all coordinate systems
4404	Find a coordinate by type
4405	Find a coordinate by full name
4406	Find a coordinate system by its name .
4407	Find a coordinate transformation by name .
4408	Return true if we need to enhance the given set .
4409	Set the values for a given variable
4410	Sets the values of a variable
4411	Creates an array based on an array of strings .
4412	Returns the index of this vector .
4413	Retrieves an existing MFileOS7 .
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize a vector .
4416	Adds a new ThreddsMetadata to this object
4417	Add documentation for the specified type .
4418	Removes the documentation of the specified type .
4419	Return the number of bytes that can be added to the segment .
4420	Determine if a given NetcdfFile represents a minefile .
4421	Tries to get the latest version of the given Dataset .
4422	Extracts a list of names from a parameter name
4423	Build a list of attribute names to represent a set of converters .
4424	Builds the coordinate system for a given netcdf dataset .
4425	Recursively find the coordinate axes .
4426	Find the coordinate system referenced by the variables in a network .
4427	Make a copy of the coordinate system .
4428	Make a copy of the coordinate system for a given dataset .
4429	Utility method to determine if a coordinate axis is for a specific variable .
4430	Add a coordinate variable to the given dimension .
4431	Adds a subset to the dataset .
4432	Delete a dataset
4433	Recursively scans the specified dataset .
4434	Tries to delete an InvCatalog .
4435	Initialize the request
4436	Counts the counter for a name
4437	Add a symbol .
4438	Compares two table row at the specified column
4439	Compares two boolean values .
4440	Return the group scope .
4441	Pass an attribute map to the DAP node .
4442	Checks to see if the time range is valid .
4443	Returns whether the slice is at the start of the iteration .
4444	Registers the named class .
4445	Registers a class .
4446	Check if dsp is registered in the registry .
4447	Unregister a dsp .
4448	Creates a new Grib2Tables factory for a given server version .
4449	Calculate the total time interval in hours
4450	Returns an array of time intervals for a given Grib2 record .
4451	Returns the vertex type for the given code .
4452	Finishes the iteration .
4453	Sorts the nodes in the Dap .
4454	Get a random file from a part number
4455	Find a variable with the given attribute .
4456	Searches for a variable in the dataset .
4457	Returns the name of the variable with the given attribute value .
4458	Find a variable with the given attribute name .
4459	Find a nested structure in a given structure .
4460	Determines whether the dataset has a structural record structure .
4461	Retrieves the literal value for the given key .
4462	Retrieves a feature type by key .
4463	Get the variable name from the dataset .
4464	Returns the value of a cell at the specified index .
4465	Compute a long value .
4466	Returns a copy of the coordinates array .
4467	Creates a new section with the specified range .
4468	Finds the index that is closest to target
4469	Get short name .
4470	Add an action to the menu .
4471	Return a match for a given path .
4472	Main method .
4473	Returns the index within the specified range of data
4474	Adds a picture to the cache .
4475	Reports cache contents .
4476	Stop loading .
4477	Method to stop the background loading of the given URL
4478	Create an HTTP GET method
4479	Make an HTTP method .
4480	Generates a random element from the given base type .
4481	Returns the next number value in the specified range .
4482	This method extracts data for a given section of a given section .
4483	Get a file system provider for the given URI .
4484	Read the stations table .
4485	Returns the index of the given element .
4486	Removes the data variable with the given name .
4487	Convert a height into a metric name .
4488	This method is used to read all data from a section of a given section .
4489	Set the number of colors
4490	Calculate transform for given rectangle
4491	Create an AuthScope from a given URI
4492	Finishes this segment .
4493	Returns whether this factor is the reciprocal of this factor .
4494	Retrieves the catalog for a given directory .
4495	Returns the index of the first item in the list .
4496	Retrieves the metadata content from the given dataset .
4497	Read metadata content .
4498	Add the metadata content to the catalog element
4499	Validate the catalog content
4500	Read the catalog generation config element .
4501	Read a DatasetSource element .
4502	Read dataset namer element .
4503	Reads a dataset filter from a dataset .
4504	Read result service element .
4505	Create the catalog generation element .
4506	Create a DatasetSource element .
4507	Create the datasource element .
4508	Create a dataset filter element .
4509	Create the result service element .
4510	Determines whether or not the given flag exists for the given flag .
4511	Invoked when the top - level menu is empty .
4512	Add to the given sub - menu .
4513	Adds parameters to the given file .
4514	Create a parameter from the given words .
4515	Get a parameter by name
4516	Reads the contents from the stream and converts it to a String .
4517	Reads the content from the stream and closes it .
4518	Replace the file template with the given parameters .
4519	Set the station id variable .
4520	Accepts a buffered value and sets it to the store .
4521	Show the format information about the field .
4522	Retrieves a bitmap from the given file .
4523	Set the name of the netcdf file .
4524	Sets the debug flags .
4525	Parse name .
4526	Determines whether the given DStruct is a group .
4527	Get the dimlen dimension for a given object
4528	Add a dimension to a group
4529	Construct a list of dimensions for the specified group .
4530	Returns true if the given dap is unsigned .
4531	This method is used to read data from a server .
4532	Get an icon from a resource name
4533	Get an image by name .
4534	Creates a cursor based on an image .
4535	Utility method to read data from a given index into a data - fill array .
4536	Read data fill from the given index and fill it with the given fill value
4537	Read data fill with given data type
4538	Creates an array of primitives .
4539	Converts a byte array to a char array .
4540	Convert a char array to a byte array .
4541	Converts a byte array to a char array .
4542	Extracts a section from a ParsedSectionSpec object .
4543	Helper to create an ArrayStructure from an ArrayStructure
4544	Get a scalar value .
4545	Retrieves the structure of a member .
4546	Retrieve an Array representing the members of a member .
4547	Recompute the structure of a DAP variable .
4548	Add dimensions to the network .
4549	Creates a CrawlableDataset .
4550	Normalize a path .
4551	Add an explicit dataset .
4552	Add a dataset scan .
4553	Scan for the given cancel task .
4554	Create the datasets .
4555	Retrieves a specific dataset .
4556	Create a dataset .
4557	Put a resource control on this dataset .
4558	Add a point
4559	Get bb upper bounds .
4560	Get bb lower lower bounds .
4561	Perform validation .
4562	Check if this dataset matches the target .
4563	Add all data from the specified feature point to this station .
4564	Parses a constraint .
4565	This method is used to evaluate the clause
4566	Prints a constraint to the given print writer .
4567	Remove from an OOS file .
4568	remove all dimensions of a variable
4569	Checks to see if there is an unknown dimension in the list and if so adds it to the list .
4570	Searches for a group with the specified name .
4571	Read the content of the Xlink .
4572	Return the URI for this dataset .
4573	Set the projection for this component .
4574	Add a layout component .
4575	Invalidates the layout container .
4576	Remove a component from the constraint map .
4577	Get the minimum layout size .
4578	Layout all components in the target container
4579	Determine if the coordinate system is a radial coordinate system .
4580	Get the maximum radius .
4581	Open a connection to the URL
4582	Convert a geographic coordinates to a fixed point vector .
4583	Convert a x - axis coordinate to a vector .
4584	Convert a Lambda_GOES coordinate to a point array .
4585	Convert a scan geometry to sweep angle .
4586	Convert sweep angle to scan coordinates .
4587	Set the runtime coordinates .
4588	Write a point observation dataset to a file
4589	Rewrite a point dataset .
4590	Gets array sequence .
4591	Returns the full name of the parent .
4592	Returns the unique ID of this object
4593	Retrieve an InvAccess by type .
4594	Find a dataset by name .
4595	Gets the parent catalog .
4596	Retrieves metadata for the current catalog .
4597	Find an inv service by name .
4598	Retrieves variables for the given vocab .
4599	Find all inv CatalogRef in the given list .
4600	Escapes a path for a URL .
4601	Add the given vector to the end of the array
4602	Extract data from an array
4603	Compute Rho - distance .
4604	Returns the detail info .
4605	Build a structure for the specified parameters .
4606	Create a missing variable .
4607	Create a variable for the given parameters .
4608	Add all attributes to the ncfile
4609	Get the size of the stn var .
4610	Creates a 1D array
4611	Returns the index of yy in yy .
4612	Retrieves a simple error message .
4613	Reduce the top of a yy rule .
4614	Read the DMR data from the input stream .
4615	Read an error message .
4616	Read data from the input stream .
4617	Reads the header from the input stream .
4618	Converts an ISO - 8601 string to a date .
4619	Reads a table from a URL string .
4620	Transfer group variables to target group .
4621	Get the stn file for given location .
4622	Open the raf file
4623	Return the starting position for the given index .
4624	Return the end of a given index .
4625	Creates a collection with all the files in the group .
4626	Set the edit value
4627	Returns the data type for the given format .
4628	Calculate the ECF - F - F - F - F - F - F - A - F - F - F - F - F - F - F - F .
4629	Clean unit string .
4630	Clean name .
4631	Checks whether a unit is a unitless unit .
4632	Factory method to create a notes instance .
4633	Returns the var id of a given note .
4634	Parses a DAS file .
4635	Find a DodsV for a given name
4636	Find a DodsV for a given DDD
4637	find a child by index
4638	Returns the parent group for this ncfile
4639	Get the dimension at the specified position .
4640	Returns the index of the specified dimension .
4641	Get the string representation of the units attribute .
4642	Retrieves the shape as a Section .
4643	returns a slice of the specified record .
4644	Sets the enum typed definition .
4645	Reads a range from the given ranges .
4646	Read string .
4647	must be cached
4648	must be cached
4649	Writes a CDL object to the stream .
4650	Returns a string representation of this variable
4651	Set the data type .
4652	Sets the dimensions for this shape .
4653	Resets the shape for this dimension .
4654	Set the dimensions for this variable .
4655	Resets the dimensions of this group .
4656	Set the dimension at the specified index .
4657	Set the cache .
4658	Get all dimensions in this panel .
4659	Calculate the bounding box for this coordinate system .
4660	Finish all vertices .
4661	Get all datasets in this dataset .
4662	Returns true if the dap name ends with the given dap context .
4663	Open the DMRDF .
4664	Build the DMR .
4665	Recursively build the seqtypes for a given CDM variable .
4666	Builds the dimensions for the requested cdm .
4667	Find an enum that corresponds to the given varenum .
4668	Extracts the core dimension from the given list .
4669	Scans a file and prints the count of messages .
4670	Process buf message .
4671	Perform a POST request .
4672	Get the transform for pix
4673	Return true if the map area needs to rotate .
4674	Get the center area of the map .
4675	Convert a world coordinate to a point in screen space .
4676	Pan to pan the screen .
4677	Zoom to the specified location
4678	Reconcation from the given bounding box .
4679	Add an object to the list .
4680	Remove an object from the list .
4681	Send an event to all listeners .
4682	send an event to all listeners
4683	Print the given command to the given writer .
4684	Prints the command to the output .
4685	Print data in a variable
4686	Print a variable in the given section .
4687	Prints a structure data structure .
4688	Print array .
4689	Print an Array to a PrintWriter .
4690	Writes an ncML file to the given writer .
4691	Read a double attribute .
4692	Add a parameter to a coordinate transformation .
4693	Main method for testing .
4694	Retrieves an object based on the requested atom type .
4695	Returns true if the given granularity level is positive .
4696	Returns true if this is a derived unit .
4697	Create a label based on the given quantity ID .
4698	Set bit offset .
4699	Read n bits from current byte into an unsigned integer .
4700	1 - b - b - b
4701	Opens a connection to the given URL .
4702	Get the DAS command .
4703	Retrieves the DDS for a given CE
4704	Get the complete CE .
4705	Convert a projection point to a LatLonPoint .
4706	Get idv dataset catalog .
4707	Converts a date range to a date range .
4708	Utility method to read data from a UIC file .
4709	Creates and sets Attribute information for the spaceship information .
4710	Extract data for the sensor information .
4711	Read root element .
4712	Clean XML character data .
4713	Escape a string to a UTF - 8 string
4714	Escape a string to be an URL query string
4715	Utility method to unescape a string .
4716	Decode backslash .
4717	Encode a string .
4718	Add global attributes to the network .
4719	Swap two bytes at the given offset .
4720	Swap four bytes at the given offset in the given byte array
4721	Swap a double at a given offset
4722	Swap a float .
4723	Swap a double .
4724	Convert a short to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Return a subset of this view with the specified range .
4728	Writes the last modified date to the file .
4729	Creates a vector from a vector .
4730	Starts the xml output .
4731	Write features to the file .
4732	Add levels to the list .
4733	Add dimensions to the network .
4734	Add variables to the given netcdf file .
4735	Find the coordinate transform for a coordinate type .
4736	Returns the index of the given record .
4737	Exit the timer .
4738	Returns a file object for the given location .
4739	Retrieves an existing file or null if it exists .
4740	Show the cache files .
4741	Delete all files in the given directory and s cache
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Main method for testing .
4745	Searches for a point in the Earth .
4746	Searches for a point in the tree .
4747	Returns a new LatLonPoint for the given latitude and longitude .
4748	Load a picture from the current thread .
4749	Loads a picture from the URL .
4750	Loads the source picture
4751	Stops loading .
4752	Method to stop loading of the source picture
4753	Get image size .
4754	Set source image .
4755	Get the standard URI for this dataset .
4756	Make the association data descriptor .
4757	Copies information from one list to another .
4758	Count the total number of bits in subKeys .
4759	Compares two DataDescriptors
4760	Load the header .
4761	Loads the data in the stream .
4762	Get a data field by name .
4763	Retrieves an array of doubles by name .
4764	Returns the string array with the given name .
4765	Get a boolean field by name .
4766	Returns the name of a field .
4767	Get the names of all the fields
4768	Print Dbase data .
4769	Get the attributes map .
4770	Set the DAP attribute .
4771	Removes an attribute from the list .
4772	Get the DAP group .
4773	Get the parent container .
4774	Get the escaped name .
4775	Returns the path to the container .
4776	Get the group path .
4777	Returns the FQQName based on the current path .
4778	Returns whether the parent is top - level .
4779	Build the DAP DataComponents
4780	Associates a BeanCollection with the given key to the given value
4781	Retrieves a list from the map .
4782	Retrieves an object from the preferences .
4783	Read data from a compressed file .
4784	Print the contents of the DAP .
4785	Print a compound instance .
4786	Writes an element to a string .
4787	Write the element to the file .
4788	Write the element to the output stream .
4789	Write an element to a writer .
4790	Create an element for the given dimension .
4791	Create a projection matrix for an attribute container .
4792	Get an Attribute from the AttributeContainer .
4793	Get a base unit .
4794	Creates a unit .
4795	Build base unit .
4796	Add a unit to the database .
4797	Returns the singleton SI instance .
4798	Finds a coordinate element .
4799	Find the index of the target coordinate .
4800	Subtracts a subset of the coverage coordinates .
4801	Open a dataset .
4802	Open a feature dataset
4803	Add attributes to a Netcdf dataset .
4804	Read data from a file .
4805	Assembly the given parts .
4806	Convert a string to a canonical name .
4807	Normalize the given string .
4808	Compile the DAP dataset .
4809	Close the catalog .
4810	Returns the element with the specified key .
4811	Associates the specified key with the specified key in this map .
4812	Get the current date
4813	Print the attributes for the given DAP node .
4814	Print an attribute .
4815	Returns whether the attribute is a special attribute .
4816	Print the dimensions of the specified variable .
4817	Check to see if the file is a valid area file
4818	Sets the area attributes to the given variable .
4819	Set the attributes of the navigation block .
4820	Returns the named calendar class .
4821	Sets the attributes to the given value .
4822	Finds the coordinates for a particular table .
4823	Finds a coordinate name by type .
4824	Finds a coordinate by type .
4825	Find a coordinate for a particular type .
4826	Find dimension by type .
4827	Find the best coordinate system .
4828	Finds the dependent component of the CoverageCoordAxis .
4829	Get a variable .
4830	Deserialize the data from the given source .
4831	Reads a marker from the data input stream
4832	Writes a marker to the data output stream
4833	Throws a SAX fatal error .
4834	Creates a series .
4835	Example .
4836	Utility method to get a string from a member object
4837	Returns a copy of the parameter list .
4838	Set the list of stns .
4839	Set the selected station .
4840	Redraw the panel
4841	Deserialize an object .
4842	Write the object to the stream .
4843	Merge the given unit and symbol map .
4844	Add a unit .
4845	Add an alias to the symbol table .
4846	Retrieves a unit by id .
4847	Add a new unit by name .
4848	Add a unit to the symbol map .
4849	Utility method to add a unique unit to the map .
4850	Add this menu to the given menu .
4851	Find a record based on the drs position .
4852	Read data from the given dataset and store it in memory .
4853	Serialize a dataset into a DataOutputStream
4854	Get the values of a parameter from the DADDER
4855	Create a copy of this view with default map area .
4856	Open a feature dataset
4857	Open a feature dataset
4858	Opens a dataset .
4859	Add attributes to a Netcdf dataset .
4860	Removes duplicates from the given list .
4861	Add a part to the group .
4862	Make a GribCollectionMutableCollectionMutableCollection for the given index .
4863	Returns an instance of RegExpand - based RegExpancer with the given substitution pattern .
4864	Returns a RegExpand&lt ; RegExpand&gt ; instance with the given substitution pattern .
4865	Write query to file .
4866	Reads the structure data from the given Ucar .
4867	Loads a photo from a URL .
4868	Set a buffered image to be displayed .
4869	Applies the zoom to the scl picture
4870	Paint component .
4871	Decodes and returns TTF data .
4872	Decode and return a String representation of TDT_IT_TTF_Tuple .
4873	Converts an array of int ids into a int value .
4874	Get the first day of the i - th month
4875	Convert IV coordinate to a string .
4876	Writes an array of values to the given values in the given array .
4877	Get the packed packing name .
4878	Returns the data type for the specified type .
4879	Read data from an input stream
4880	Write the output stream to the given output stream .
4881	Gets the tag enum .
4882	Get the next image .
4883	Return size of given type .
4884	Computes the sum of an array .
4885	Sets the grid s bounds .
4886	Sets the overlap value
4887	Clear grid .
4888	return true if rect should be cleared
4889	Find the intersection with the specified rectangle .
4890	Find the intersection with the specified point .
4891	Finds the closest point in the grid .
4892	Returns the squared distance from the point to the given point in the cell .
4893	Retrieves or creates a base unit .
4894	Search for the given fragment .
4895	Search for a file type in the file system
4896	Decode the file extension to determine if the path ends in .
4897	Checks whether the given location is a DTD or not .
4898	Checks if the given location is a DAP4 file .
4899	send data2 to output stream
4900	Retrieves the suffix of a given fqn .
4901	Retrieves the prefix of the given fqn .
4902	Locates a file in the specified absolute path .
4903	Locates and returns the filename of the given relative path .
4904	Extract bytes from the given ByteBuffer .
4905	Get the structure path for a given variable .
4906	Returns null if the path is null .
4907	Joins an array of strings using the specified separator .
4908	Determines whether a path contains a drive letter .
4909	Returns a list of all protocol names separated by a path .
4910	Converts an indexed template to a list of slices .
4911	Converts the given offset in the given DAP variable to a list of slices .
4912	Check if the list of slices is contiguous
4913	Checks if a list of slices is single point .
4914	Converts a list of slices to an index .
4915	Read data from an input stream .
4916	Set the station info .
4917	Sets the short names of the coordinates .
4918	Retrieves the feature collection from the catalog .
4919	Add the declaration to the parent group .
4920	Update the list of groups in the specified list .
4921	Find a variable in the group .
4922	Get the axis type .
4923	Returns the GribStatType corresponding to the given time range .
4924	Extracts and returns the coverage coordinates .
4925	Retrieves a list of range indices .
4926	Sets the defaults for this object .
4927	Returns the session ID .
4928	Set the maximum number of redirects for this session .
4929	Sets whether or not sessions should be used in the session .
4930	Closes this instance .
4931	Sets the authentication and proxy credentials .
4932	Track an HTTPS session .
4933	Set the global credentials provider
4934	Validate catalog .
4935	Creates an index based on the shape .
4936	Compute the stride for each dimension
4937	Creates an index from the given ranges .
4938	Reduce an index to one
4939	Returns a new index for the specified dimension
4940	Transpose an index to a sub - index .
4941	Creates a permutation of the specified dims .
4942	Get an index iterator for a given array
4943	Returns the current element value .
4944	Set the current index .
4945	Sets the value of the specified dimension .
4946	Sets the dimension of the vector .
4947	Returns the name of the time interval .
4948	Create a calendar date range .
4949	Creates a list of fileDATE dates
4950	Creates a list of parameters from the DMPP param .
4951	returns a list of the available station list
4952	Create a new station .
4953	Get the list of registered station names .
4954	Get the list of dates .
4955	Returns the index of the station with the given ID .
4956	Get the file type .
4957	Add an indented depth .
4958	Set the depth for this node .
4959	Read an index from a single file
4960	Configure a directory scan .
4961	Returns true if scan is needed .
4962	Applies scan to the dataset and returns true if there was a new one .
4963	Set debug flags
4964	Add a variable .
4965	Create the output file with the given cancel task .
4966	Validate an XML document .
4967	Converts this slice into a string representation .
4968	Set the original variable
4969	This is a convenience method that copies data from the underlying variable
4970	This method is used to read data from a section in a sub - section
4971	Return true if the structure is needed .
4972	Convert an Array to an ArrayStructure
4973	Convert member info to a member info object
4974	Find a variable from an org name .
4975	Returns true if the variable has data .
4976	Enhances the variables in this dataset .
4977	Determines whether a resource is allowed to perform a resource control .
4978	Create an empty sequence sequence .
4979	Create an ArraySequence sequence .
4980	Create a sequence for the specified parameters .
4981	Add vertical coordinates to a variable .
4982	Reads the catalog XML from the URL .
4983	Read the catalog XML from the given URI .
4984	Tries to read an inv catalog from the given URI .
4985	Write the catalog to output stream
4986	Gets a metadata converter .
4987	Generate IDless ID .
4988	This is the superclass method .
4989	Divide this unit by one .
4990	Copies input from input to output .
4991	Returns true if this is compatible with the specified type .
4992	Writes a point to the JSON string
4993	Write point .
4994	Write the line to a string .
4995	Write a polygon
4996	Retrieves the value of the named attribute from the given node .
4997	Get subnodes from a parent node .
4998	Parse the response node .
4999	Pass attributes to the DAP node .
5000	Get a subset string for a given variable .
5001	Create an ArrayStructure from an ArrayStructure .
5002	Sets the member array of the specified member .
5003	Create a structure from the given structure .
5004	Returns the type of the given geometry name .
5005	Build a station from the given structure data .
5006	Compile an AST .
5007	Compile a filter .
5008	Add a dimension to the DAP .
5009	Creates an ArrayObject for the given index .
5010	Returns true if this rectangle is inside the specified region .
5011	Extend the specified LatLonPoint with the specified point .
5012	Extend the specified LatLonRect with the specified LatLonRect .
5013	Calculate a LatLonRect that intersect the specified clipping rectangle .
5014	Add two arrays to a array .
5015	Returns true if the two arrays are concatenated .
5016	Returns true if the shapeA is equal to the rankB
5017	Convert an Array to an array .
5018	Copies the given array to the given array .
5019	Copies the boolean values from the given array to the given result .
5020	Copies the objects from the given array to the given array .
5021	Get min max .
5022	Set double value .
5023	Create a catalog builder .
5024	Factory method for creating a Projection .
5025	Unescapes an identifier .
5026	URLDecode a string .
5027	Unescape a URL .
5028	Escape a string .
5029	escape a string
5030	Tokenize an escaped escaped name .
5031	Returns the index of the first occurence of the given character .
5032	Converts a backslash string to a backslash string
5033	Read an atomic scalar value .
5034	Get the path for the given cursor
5035	Return the UIDDefaults of the specified class
5036	Gets the class .
5037	Compile the DAP variables .
5038	Compile a structure array .
5039	Compile a DAP structure .
5040	Compile sequence .
5041	Compile a DAP - Query .
5042	Reads an 8 - byte long from the stream .
5043	Get the Field corresponding to the specified field .
5044	Returns the value of the field with the given name .
5045	Sets the value of the field with the given name .
5046	Add a field .
5047	Add a CheckBox field .
5048	Add a date field .
5049	Add a double field .
5050	Add an integer field .
5051	Add a password field .
5052	Add a text field .
5053	Add a TextComboField .
5054	Add a TextArea field .
5055	Add a heading to the layout component .
5056	Add a component to the layout .
5057	Add an empty row
5058	Find the active frame .
5059	Calculates the cell spacing for this cell .
5060	Gets factors .
5061	Copies the factors of this dimension .
5062	Returns an array of factors for the given power .
5063	Returns true if this dimension is a reciprocal of the specified dimension .
5064	Determines whether all factors in this factor are dimensionless .
5065	Create a query param table based on the given path and lookup table .
5066	Factory method to create a param table from an element .
5067	Adds a lookup table to the lookup table .
5068	Add a parameter table to the view .
5069	This method will throw an exception when this unit is not possible .
5070	Convert an input vector into a derived unit .
5071	Initialize the unit table .
5072	Create a vertical variable for a vertex .
5073	Reads the name from the file .
5074	Reads a short from the byte array at the given offset .
5075	Read an integer from the byte array at the given offset .
5076	Read a float .
5077	Read a double from the byte array at the given offset .
5078	Internal method to add an alias to a unit .
5079	Add a symbol to the unit .
5080	Creates a converter for the two given types .
5081	Set the structure data .
5082	Set point data .
5083	Draw the graphics object
5084	Get all the shapes in the map .
5085	Reads the data from the stream .
5086	Reads data from the input stream and stores it in the given buffer .
5087	Read more bytes from the input stream
5088	Read len bytes from the stream starting at the given offset .
5089	Skips the next n bytes .
5090	Add dimensions to the network .
5091	Calculates the index of the given record .
5092	Returns true if the file is a valid file .
5093	Open the RDF file
5094	Read data from a variable
5095	Read one row data into a byte array
5096	Creates a dataset from a network .
5097	Create a vector for a variable .
5098	Fire the map area event .
5099	Set the map area .
5100	Set the map area in the current location .
5101	Set the map area of a lat lon .
5102	Set the projection to a new projection
5103	Add all the actions to the menu .
5104	Redraw the redraw timer .
5105	Adds new screen size to the screen .
5106	Set the selected variable .
5107	Retrieves a double value at a given offset .
5108	Retrieves a double value at the given index .
5109	Retrieves an object at the given index .
5110	Convert an ent_id to a name .
5111	Reads a scaled integer .
5112	Find parameter by name ignoring case .
5113	Try to advance to the current odomometer .
5114	Swap the byte order .
5115	Gets the time steps per file .
5116	Retrieves the full path to the file name .
5117	Returns a list of file names to be used for a single file .
5118	Returns the path to the DDF file path .
5119	Returns the full path for the given filename .
5120	Add a ch subsub .
5121	Converts a reference date into a TimeCoordvValue .
5122	Reads the NEX data from the file
5123	Returns a copy of the uncompressed data starting from the specified offset .
5124	Generate code for a 12 - 1 code structure .
5125	Create a circle structure for a given position .
5126	Read the message header from the file .
5127	Create a PCBar code for a vector .
5128	Creates a structure for a code file .
5129	Generate code for unlinked vector .
5130	Returns an array containing all of the data stored in the given table .
5131	returns an array of values for the given array
5132	Add a variable to the network .
5133	Add a parameter .
5134	Uncompress the given buffer
5135	Converts a byte array into an unsigned integer .
5136	Converts a byte array into an integer .
5137	Converts a byte array into an object .
5138	Process the DMR request .
5139	Get the request state for this request .
5140	Sends an error response .
5141	Add anchor point to the anchor
5142	Stretch the current stretch .
5143	Return the bounds of the anchor .
5144	Return the bounds of the last anchor .
5145	Format a date only .
5146	Utility method to replace all data variables in the structure
5147	Ensure that the memory array size is at the given attribute .
5148	Reads a 2 - bit integer from a file .
5149	Reads an unsigned integer from a file .
5150	Reads a 4 - bit integer from a file .
5151	Reads a 2 - bit integer from a file .
5152	Reads a 4 - bit integer from a file .
5153	Reads a 4 - bit float from a file .
5154	Calculate a 4 - bit float from a 16 - bit integer .
5155	Reads a 64 - bit integer from a file .
5156	Count the number of bits in the given bitmap .
5157	Create a copy of this projection object .
5158	Creates a string representation of the field names to a String .
5159	Escapes a string so it can be escaped .
5160	Unescape a backslash string .
5161	Splits a backslash string into a list of Strings .
5162	Build a FMR inv .
5163	Get the service name for the specified path .
5164	Get the number of components projected to this map .
5165	Retrieves the reference time .
5166	Factory method to create an ArrayStructure .
5167	Simple index .
5168	Read a Grib1 record from a Grib1 index .
5169	Determine if the given netcfile is a M3 file .
5170	Create a UTM projection transform from the given dataset .
5171	Acquire area reader .
5172	Returns true if the specified date is before the specified date .
5173	Returns true if the specified date is before the specified date .
5174	Returns true if the specified date is after the specified date .
5175	Set the value at the given index .
5176	Add a coordinate system to this variable .
5177	Sets the unit string .
5178	Get the string representation of the unit .
5179	Initialize this transformer .
5180	Read catalog .
5181	Process a set of datasets and add them to the catalog
5182	Read catalog in the given directory .
5183	Returns true if the given lon is between the start and end .
5184	Convert a latitude to a string .
5185	Convert a long to a string representation .
5186	Compares this quantity to another .
5187	Retrieves the selected dataset .
5188	Sets the selected dataset .
5189	Create a tree path from the given node .
5190	Open all the catalog nodes .
5191	Set the catalog location .
5192	Sets the catalog .
5193	Find the alias for a variable .
5194	Write v int .
5195	Writes characters to the given string .
5196	Read characters in a char array .
5197	Set debug flags .
5198	Add a member .
5199	Hide the given member
5200	Get the names of the members
5201	Find a member by name .
5202	Read Grib1 bitmap from file .
5203	Restores the state of the panel to its state .
5204	Get the selected rows
5205	Return the index of the model in this table
5206	Retrieve an array from a member .
5207	Get the scalar value of a member .
5208	Retrieve an array as a double array .
5209	Retrieve a scalar value .
5210	Retrieve an array from a member .
5211	Get the scalar byte of a member .
5212	Get the byte representation of a member .
5213	Retrieve a scalar value .
5214	Retrieve an array from a member .
5215	Get the scalar value of a member .
5216	Retrieve the Java array representation of the given member .
5217	Retrieve a scalar value .
5218	Retrieve an array from a member .
5219	Get the character at the given member .
5220	Retrieve an array from a member .
5221	Write one dataset .
5222	Check if dataset is use .
5223	Creates a copy of the dataset .
5224	Copies metadata from one dataset to another .
5225	Retrieves the Thredds metadata .
5226	Add a product to the list .
5227	Show missing records .
5228	Show the summary of missing values .
5229	Find a record for the given time .
5230	Returns a string representation of the grid .
5231	Generates a long name for the first record .
5232	Provides a subset of coverage coordinates by an interval .
5233	Compares two byte arrays .
5234	Parses a DMR DMR DMR file .
5235	Process attributes in the DAP dataset .
5236	Add a list of coordinates to the partition .
5237	Sets a vector of gaussian coordinates .
5238	Parse a variable selector .
5239	Make a spec string for a given variable .
5240	See if there is a box 9 in the specified region .
5241	Close the connection and close the underlying connection .
5242	Execute the HTTP method .
5243	Identifies an encoder for an encoding station .
5244	Determine if the given axis is a coordinate .
5245	Set input stream .
5246	Reads the next character from the stream .
5247	start a progress monitor
5248	Converts a string into a URI .
5249	Exclude the given URIPart .
5250	Nullify a string .
5251	Joins given prefix and suffix
5252	Accepts a CrawlableDataset to accept a CrawlableDataset .
5253	Copies information from another GribCollection to the current one .
5254	Get the names of the files in sorted order .
5255	Sets the index file .
5256	Retrieves the index file in the GribIndexCache .
5257	Closes the index .
5258	Calculate the number of counters .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Deletes the named attribute .
5262	Renames a global attribute .
5263	Add an attribute .
5264	Add an attribute .
5265	Deletes a variable .
5266	Renames a variable .
5267	Decide file type based on the file type
5268	Writes the headers to the file .
5269	Write the members .
5270	Creates a string representation of the stations dataset .
5271	Returns the XML representation of the station collection .
5272	Write a string to the DRS .
5273	Send the XR data to the output .
5274	Send an error response .
5275	Close the output stream .
5276	Flushes the data to the output stream
5277	Creates a copy of this project .
5278	Returns true if there is at least one element in the stride
5279	Get the element at the specified position .
5280	Shifts the range with the specified origin .
5281	Read data .
5282	Read data for the given index .
5283	Return a subset of this vector with the specified stride .
5284	Return an iterable of catalog extensions
5285	Cleans up after deleting a tracker .
5286	Set the values .
5287	Returns an iterator to the data chunk for the specified section .
5288	Convert an array of ints into a double array .
5289	Get the dataset bounds .
5290	Check if the requested variables are contained in the requested group .
5291	Retrieves a DatasetSource from the data store .
5292	Get the physical path for a given location in the drap request .
5293	Adds all vertices to the network .
5294	Reads a GBI file .
5295	Finishes this record .
5296	Transfer all inherited metadata from parent .
5297	Copies metadata from another object to another
5298	Copies the in - memory metadata to the target metadata
5299	Set a list of contributors
5300	Adds a dataset at the specified index .
5301	Remove a dataset .
5302	remove a dataset
5303	Add a service to the list .
5304	Remove an inv service
5305	Set the services that will be referenced by this service .
5306	Remove the local metadata .
5307	Get user property .
5308	Check validity of this dataset .
5309	Returns a list of descriptor descriptors .
5310	Construct a server path from the HttpServletRequest .
5311	Get the capabilities .
5312	Get the feature at the specified location .
5313	Checks the required parameters to see if the request parameter is required .
5314	Handles http request .
5315	Get the capabilities for a given URL .
5316	Returns the size of the object in the given bucket .
5317	Returns the last modified time of the S3 object .
5318	Set the data from the dap .
5319	Returns a file view .
5320	Send a string to the response .
5321	Set the content length of the response .
5322	Returns the URI for the given request .
5323	Get the request path .
5324	Get the request base URI .
5325	Get parameter from request ignoring case .
5326	Saves this item chooser .
5327	Write a directory .
5328	Set bit offset for given data key .
5329	Creates a bit counter for the given sub - key .
5330	Computes the number of bits starting at the specified start position .
5331	Append a line to the end of the buffer .
5332	Create a document that represents a list of stations .
5333	Get the capabilities XML document
5334	Get the record at the specified location .
5335	Get the coordinate at a specific index .
5336	Add an item to the list
5337	Handle exception .
5338	Returns the slice at the specified index .
5339	Go to the end of the list .
5340	Retrieves the map for NCEP generation .
5341	Retrieves the given endpoint URL for the given endpoint
5342	Sets the attribute s value .
5343	Utility method to create a Grib1 GDS .
5344	Copies the data from the input stream to the output stream
5345	Reads the contents from an input stream into a string .
5346	Reads contents from an input stream to a byte array .
5347	Writes the given contents to the given output stream .
5348	Copies the given file into the output stream using the given buffer size .
5349	Copies data from the raf to the output stream
5350	Copies all files from one directory to another .
5351	Read file contents to byte array .
5352	Reads a file into a String .
5353	Write the contents to a file
5354	Write the contents of the given string to a file .
5355	Write an input stream to a file .
5356	Called when a parse exception occurs .
5357	This method is called when a DAP2Exception occurs .
5358	Send bad URL error page
5359	Get the catalog information .
5360	Print the catalog information for this server .
5361	Print the status .
5362	Print error in the URL .
5363	Gets the calendar date .
5364	Read variable data .
5365	Read ncml document from a string .
5366	Open an ncML collection .
5367	Allow the given string to be a valid string
5368	Remove UTF8 chars from a byte array
5369	remove all characters from the string
5370	Filter 7 bits .
5371	Make a valid CdmObject name from the given name
5372	Compare two strings .
5373	Pads the left to the right of the left .
5374	Pads the given string to the end of the string .
5375	Removes a string from a string .
5376	Removes c from s string .
5377	Removes the first character from the end of the string
5378	Collapses all whitespace characters in the given string .
5379	Replaces all occurrences of a string with a given character .
5380	Replaces all occurrences of a string with the replacement character
5381	Replaces all occurrences of the given pattern with the given value .
5382	Substitute a string in a given string .
5383	Substitute one string in the original string .
5384	Removes the character at the end of the string
5385	Utility method to replace a character in the string
5386	Replaces all occurrences of the characters in the string builder with the replacement character .
5387	Replaces the substring in the given string with the given substring .
5388	Trim the first occurence of a string
5389	This method is called when a collection update is updated
5390	Checks the state for updates .
5391	Called when the collection is updated .
5392	Show the unique templates .
5393	Get the datasets .
5394	Release the resources .
5395	Creates a deep copy of the data structure .
5396	Copy an ArrayStructure to an ArrayStructure
5397	Copies the data of an ArrayStructure to an ArrayStructure
5398	Creates a copy of the given structure object .
5399	Copy the data structure to a ByteBuffer
5400	Returns the amount of time interval in hours .
5401	Create a coordinate axis with the specified range .
5402	Factory method to create a TableAnalyzer .
5403	Gets the first feature type .
5404	Generate the table for the specified feature type .
5405	Synchronize the data in the grid .
5406	Generates a list of gaussian latitudes for a given type .
5407	Swap long at given offset
5408	Swap a float at a given offset
5409	Swap a character at the given offset
5410	Add coordinate axes to the dataset .
5411	Add a parameter to a coordinate transformation .
5412	Returns the group which is the common parent of this group
5413	Determine if this group is a parent group .
5414	Set the parent group .
5415	Adds a dimension to this group .
5416	Add a dimension to the group if not already present .
5417	Adds a group to this group .
5418	Adds an enum definition to the list .
5419	Add a variable to this group .
5420	Removes the given dimension .
5421	Creates a new group and adds it to the given path .
5422	Convert an alias to a DDS alias .
5423	Print the DAS object to the given PrintWriter .
5424	Retrieves a variable .
5425	Writes a grid to a data set
5426	Replace all missing values in the grid .
5427	Replaces all missing values in the grid .
5428	Get the x - shift of a long array .
5429	Writes the coverage data to the given array .
5430	Writes an exception to the response .
5431	Return the name of the libs inq .
5432	Make the top index file based on the configuration .
5433	Returns the type of the collection .
5434	Update the collection .
5435	Update the leaf collection according to the current configuration .
5436	Open a GribCollection from a file .
5437	Open a GribCollection from a given data file .
5438	Open a GribCollection from a data file .
5439	Returns true if the given URL matches the given pattern .
5440	Add a key - value pair to the collection
5441	Look up a key in the dictionary .
5442	Sets up all the data in the collection .
5443	Loads the file with the specified absolute path .
5444	Insert a triple into the trie
5445	Returns a list of Datasets .
5446	Find a dataset by name .
5447	Set the project to use .
5448	Determine how shapes should be drawn based on the graphics context .
5449	Make an array of shapes for each feature
5450	Compares this object with the specified ID .
5451	start a progress monitor task
5452	Determines if the collection index should be updated .
5453	Normalize given coordinates against the given list of encodes .
5454	Set object at given index .
5455	Returns the structure data at the specified index .
5456	Copies data from the specified structure to the specified index .
5457	Get a scalar object .
5458	Convert a scalar value to a double .
5459	Convert an integer to a scalar value .
5460	Extract a scalar value from a member .
5461	Extract a scalar value from a record .
5462	Extract a short from a record .
5463	Extract a character from a sequence .
5464	Extracts a scalar string from a record .
5465	Get an ArrayStructure object from the structure data .
5466	Retrieve an ArraySequence
5467	Get an ArrayObject at a given index .
5468	Returns the minimum value if the given value is within the given range .
5469	Evaluate a variable .
5470	Creates a string representation of this constraint .
5471	Returns true if the specified node is references to the specified DAP node .
5472	Evaluates whether the variable matches the specified DAPVariable .
5473	Returns the number of variables in the specified struct .
5474	Compute enums .
5475	Compute groups .
5476	Compile a CPE constraint .
5477	Check if the file is a valid file
5478	Make the action system for the system .
5479	Get byte order .
5480	Set byte order .
5481	Find a key by name .
5482	Find the file header with the given name .
5483	Get the header for a given DMF file .
5484	Print the parts .
5485	Get the index of a data point .
5486	Reads a DMF format from the data file .
5487	Read a DM_RSTR string from a file .
5488	Extract data from a DMPart object .
5489	Utility method to convert a bit b into a string
5490	Writes ncfile to channel .
5491	Parse a base element .
5492	Parse a grid element .
5493	Parses an alias element .
5494	Decode a list of key descriptors .
5495	Replicates the replication data structures .
5496	Get dataset filename .
5497	Gets the CF type of the file .
5498	Returns true if the two float values are equal .
5499	Returns true if the given DAPNode references to the given DAP node .
5500	Parses the given string .
5501	Pretty prints an object .
5502	Returns true if the specified variable is to beiled .
5503	Make an array of coordinates from a complete coordinate .
5504	Convert a LatLonRect object to a projection matrix .
5505	Show time series .
5506	Convert a list of attributes to a map .
5507	Return the values of this object as an array .
5508	Retrieves a numeric value at the given index .
5509	Write the object to the output .
5510	Sets the attribute value .
5511	Sets the attribute values .
5512	Set the values from an array
5513	Perform the scan .
5514	Generate the actual invocation catalog .
5515	Schedule a message .
5516	Open the target datatype
5517	Open a javadds dataset .
5518	Invoked when the tredds is closed .
5519	Sets up the dataset .
5520	Prepare the ui .
5521	Creates a JFrame that will be displayed in the window .
5522	Creates a full name from a list of coordinates
5523	Return the rank of a coordinate
5524	Find a coordinate with the given type .
5525	Get the ProjectionCT for this coordinate transformation .
5526	Returns true if this is a geo - axis .
5527	Returns true if the coordinate is a regular expression .
5528	Determines if the specified subset is in the specified set .
5529	Returns true if the list contains the given list of Axis
5530	Check if the given axis name contains the given axis name .
5531	Returns true if the given list contains the given domain .
5532	Contains the list of Axis types .
5533	Returns true if the specified axis has the specified type .
5534	Create a clone of this DAPNode .
5535	Retrieves the selected bean .
5536	Get the selected beans .
5537	Retrieves the selected cells from the table .
5538	Set the selected bean .
5539	Restore column state .
5540	Creates an unknown unit with the given name .
5541	Close the stream .
5542	Returns whether the given variable is an extra .
5543	Determine if a variable is a coordinate .
5544	Searches for a coordinate axis for a given coordinate .
5545	Adds all data variables to the given table .
5546	Add join join to given Cursor
5547	Create a station feature from the given structure data .
5548	Creates a node map .
5549	Factory method for creating SimpleUnit instances .
5550	Factory method to create a SimpleUnit with given name
5551	Creates a unit from the given name .
5552	Check if the given string is compatible with the given string .
5553	Checks whether a given date is compatible with the given date .
5554	Determines whether the given unit string represents a time unit .
5555	Calculates the conversion factor for the given unit string .
5556	Convert the given value to the given unit
5557	Returns true if this Ucar is an unknown unit .
5558	Get the value of this unit
5559	Create a new top - level clause .
5560	Create a new BoolFunctionClause .
5561	Create a sub - clause .
5562	Converts an Array to a BufferedImage
5563	Crawl catalog .
5564	Crawl catalog .
5565	Crawl datasource .
5566	Utility method to get a file from disk cache
5567	Checks if the given file location is already in the disk cache .
5568	Set debug leak flag .
5569	Get a sorted list of files
5570	Close the file .
5571	Seek to the given position .
5572	Writes the data to the file .
5573	Reads a byte from the file .
5574	Reads a short array .
5575	Read an unsigned integer from the stream .
5576	Read an n - th integer from the input stream .
5577	Read n ndarray .
5578	Read n float .
5579	Read n doubles from the stream
5580	Read nbytes .
5581	Read string from string .
5582	Write boolean array .
5583	Write short array .
5584	Write character sequence .
5585	Write an array .
5586	Write long array .
5587	Write float array .
5588	Write array .
5589	Write a string to the output .
5590	Writes an array of characters .
5591	Search for the next match in the file .
5592	Append query from parameter list to StringBuffer
5593	Factory method to create a collection .
5594	Find the index .
5595	Checks if the index is a leaf node .
5596	Constructs a list of children from the index reader .
5597	Scans all children of the given directory .
5598	Read MFiles from index reader .
5599	Returns a list of grids .
5600	Acquires a file cache .
5601	Remove the cache element
5602	Removes an element from the cache .
5603	Release a FileCacheable
5604	Returns an 8 - bit integer from 4 to 4 bits .
5605	Update the element in the cache .
5606	Clear the cache .
5607	Makes the vertical transformation for the given grid .
5608	Is the global long .
5609	Returns true if the vert axis is positive .
5610	Finds the XY index for a coordinate in the x - axis .
5611	Given a coordinate and a bounding box return the index of the x - coordinate array .
5612	Get the XY index for a given latitude and longitude .
5613	Return the x - index of the x - lon of the specified latitude and longitude .
5614	Calculates the position of the selected item .
5615	Returns the item index for the given pixel
5616	Iterate over all files in the collection .
5617	Downloads the remote files from the server .
5618	Returns the name of the subCenter .
5619	Construct a CalendarPeriod from a given unit string .
5620	Return a CalendarPeriod with given field value .
5621	Creates a calendar period from the given string .
5622	Returns the number of days in the specified calendar .
5623	Get the convert factor for a calendar period .
5624	Returns the value of this field in milliseconds .
5625	Return the offset between two dates .
5626	Reconstructs the index to the index .
5627	Initialize the tables .
5628	Add the path to the tree .
5629	Find the longest path match for the given path .
5630	Finds a data root from the request .
5631	Convert the data root to the data root .
5632	Returns a calendar date range for the given calendar .
5633	Reindex a list of coords .
5634	Creates a new netcdf file writer .
5635	Add a group to the named group .
5636	Add an enum type to a group .
5637	Delete an attribute from the group .
5638	Renames a group attribute .
5639	Add a record to the network .
5640	Abort the stream .
5641	Writes the bean s properties to the given output stream .
5642	Extract the Thredds metadata from the given Dataset .
5643	Divide this instance by the given offset .
5644	Converts this object to a derived unit .
5645	Converts this object into a derived unit from this object .
5646	Convert a variable to an array .
5647	Convert data to an array .
5648	Convert Dods to an array .
5649	Close all open databases .
5650	Open a database
5651	Converts an integer into a period .
5652	Ensures that the string array is enough to hold the given capacity .
5653	Gets the element at the specified index .
5654	Create an catalog for the given directory .
5655	Create a proxy catalog from the given path .
5656	Retrieves the coordinate type of the coordinate system .
5657	Factory method for creating Pds .
5658	Calculates the time at the given offset in the given time .
5659	Applies a scale factor to a given value
5660	Parses a local concept from a file .
5661	Adds a single item from an input stream .
5662	Clean a line from a string
5663	stores the given key and value for the given parameter number
5664	Writes the grib1 table to file .
5665	Write lookup table .
5666	Show local concepts .
5667	Main entry point for the EE .
5668	Get DatasetType by name .
5669	Expand the catalog .
5670	Append all datasets .
5671	Name all datasets .
5672	Create a named dataset .
5673	Tries to name recursively .
5674	Loads a source picture from the given URL .
5675	Stop loading with given url
5676	Called when a source picture has changed .
5677	Called when a source load progress is loaded .
5678	create a scaled picture in thread pool
5679	Get scaled picture size .
5680	Get a string representation of the scaled picture .
5681	Get a list of parts to be merged
5682	Create a header header for the given time .
5683	Get a list of CKs .
5684	Check the part of a valid group .
5685	Set the root directory
5686	Create the root directory .
5687	Creates a cache file for the given file location .
5688	Removes all files before the given cutoff time .
5689	Called when a disk cache is deleted .
5690	Determine whether a buffer is a byte buffer .
5691	Create a new coordinates axis based on a variable definition .
5692	Creates a copy of this coordinate axis with no cache .
5693	Checks if the data type is numeric .
5694	Writes the information about this axis .
5695	Retrieves a calendar from the UCAR attribute .
5696	Sets the list .
5697	Get the currently selected row .
5698	Increment the selected row .
5699	Return the index of the model in this table
5700	Set the slider index to the specified value
5701	Sort an array .
5702	Swap two strings .
5703	Checks if an existing file exists and if so returns it .
5704	Rotate a longitude .
5705	Create an XML store from the given file name .
5706	Create an XMLStore from an input stream
5707	Create an XMLStore from a resource
5708	Creates the filename for an app .
5709	Save this store to the prefs file .
5710	Saves the XML store to the output stream .
5711	Writes an atomic variable to the given destination .
5712	Writes the data in the DAP to the given destination .
5713	Writes the data in the given DataCursor instance .
5714	Write a sequence to the destination .
5715	Writes the given data to the given destination .
5716	Checks to see if a file is valid .
5717	Get the wmo ID
5718	Reads a number of records from the given field .
5719	Returns the data at the specified position .
5720	Get data points from a Grib2 data file .
5721	Decode data points to a data point .
5722	This method should be overridden by subclasses
5723	Create a file with the given location in the given location .
5724	Computes the size of a grid file .
5725	Create a file from a given location .
5726	Set the stations .
5727	Set the selected station .
5728	Select the station at the given point
5729	Pick the closest station in the world model
5730	Get the currently selected station .
5731	Returns the name of the given type .
5732	Obtains a list of stations in the specified region .
5733	Get a station by name .
5734	Get a DataIterator for a particular station .
5735	Create a DataIterator for a station .
5736	Reads data from a gate iterator .
5737	Returns the dot product of this vector .
5738	Returns the norm of this vector .
5739	Normalize this vector .
5740	Set all the services in the specified dataset .
5741	Returns the parameter with the given id .
5742	Get a parameter by id .
5743	Add a prefix .
5744	Add a symbol .
5745	Get the prefix for a given prefix .
5746	Return true if the source is ok .
5747	Get a parameter by name .
5748	Calculates the CRC of the raw data
5749	Determine whether the data is a thin byte .
5750	Returns the index of the field with the given name .
5751	Returns the name of the time range .
5752	Get the current time coord as a string .
5753	Set the next polygon
5754	Set the previous polygon
5755	Find a property by name .
5756	Sets the current projection .
5757	Extracts the offset from the specified time range .
5758	Registers an IO provider with the given class name .
5759	Registers a specific Iospi provider .
5760	Called when Iospice provider is preferred .
5761	Returns true if IospServiceProvider registered to the IospServiceProvider is registered .
5762	Returns true if IospService is registered to IospService .
5763	Returns true if location can be opened .
5764	Open a NetcdfdfFile .
5765	Open in memory .
5766	Open a file in memory .
5767	Opens a memory file from the given URI .
5768	Find the global attribute with the given name ignoring case .
5769	Converts this object to ncML file
5770	Write the CDL data to the given output stream .
5771	Write the CDL data to a PrintWriter .
5772	Write CDL part of the given indent and indent .
5773	Add an attribute to a group .
5774	Add an attribute to a group .
5775	Add a group to the specified parent group .
5776	Add a dimension to the specified group .
5777	Remove the given dimension from the group .
5778	Add a variable to the group .
5779	Add a variable to the group .
5780	Add a variable to the group .
5781	Remove a variable from the group .
5782	Send Iospike message to the root group .
5783	Make a record structure .
5784	Finishes this group .
5785	Read variable section .
5786	Copies the given variable into the given byte channel .
5787	Read array of arrays .
5788	Read a variable section from the given variable section .
5789	Generate a full name for a CDM node .
5790	Creates a fully qualified name with the given group name .
5791	Check whether the given MFile should be included .
5792	Check whether the given MFile should be excluded .
5793	Returns true if and false otherwise .
5794	Append the string value to the attribute .
5795	Check given string for validity .
5796	Force type checking .
5797	Check whether a string is a byte value .
5798	Check a short .
5799	Check an integer value .
5800	Check an integer value .
5801	Check a float value .
5802	Check a double value .
5803	Returns the data type for an attribute .
5804	Check if dataset is viewable
5805	Checks whether the given string is a valid boolean string .
5806	Determines if the specified alphanumeric string represents a valid alphanumeric string .
5807	Utility method to check if a given alphanumeric string is valid .
5808	Return true if the given path contains only one file path .
5809	Converts a unicode code point into a string with the given unicode character .
5810	get a parameter value for the given key
5811	Compares two sets of parameters .
5812	Reads the data from the stream .
5813	Process a BUFR message
5814	Removes all quotes from the given string .
5815	Makes all the variables in the stack .
5816	Write ncML file .
5817	Retrieves the value from the Thredds config if the key is not present in the config .
5818	Writes a CDL string to the stream .
5819	This method creates a new station helper and populates it with data from it .
5820	Check whether this result is valid .
5821	Returns the azimuth value for the message type .
5822	Returns the elevation of the message .
5823	Returns an array with all of the latitudes in the array .
5824	Returns a copy of the longitudes array .
5825	Returns an array with all the altitudes in the array .
5826	Returns the azimuth s azimuths .
5827	Returns an array with the elevations for the data structures .
5828	Return a copy of this structure with the specified member names .
5829	Selects all members with the specified variable .
5830	Add a member variable to this member .
5831	Sets the member variables in the list .
5832	Set the parent group .
5833	Calculate the total size of this variable
5834	Reads a structure data from a given position
5835	Read a vector .
5836	Get the structure data iterator for this object
5837	Get the data category for a given category .
5838	Get the class name .
5839	Add a parameter .
5840	Get the header string .
5841	Convert a LatLonRect object to a projection .
5842	Returns the version number for a given name .
5843	Get the zis position of the z axis .
5844	Delete the next file
5845	Set the color scale parameters
5846	Renders the plan view .
5847	Returns true if this H5Group is a child of the given H5Group
5848	Get a type by name
5849	Installs the given table in all columns in the given table .
5850	Sets the api key and secret key to use .
5851	Creates a label .
5852	Creates a label from the given lines .
5853	Creates an HTML label .
5854	Open a connection to a Cloud SQLite server .
5855	Convert a cloud sql types into a list of names .
5856	Open a connection to the given host and port .
5857	Removes the given logger .
5858	Compiles all source code files .
5859	Compile given class name with given source code .
5860	Adds a source code to the compiler .
5861	Read the graphic control .
5862	Returns the next bitmap .
5863	Creates a selectable string property for the current person .
5864	Initialize list events .
5865	Gets a person by id .
5866	Add a message to the internal map .
5867	Sets the person id .
5868	Create and inject a view model .
5869	Creates the view model model .
5870	Loads the list of countries .
5871	Loads the list of subdivisions .
5872	Adds a string property to the setter .
5873	Adds an immutable string property to the setter .
5874	Creates a new view step .
5875	Step for an FxmlView .
5876	Clear the given map from the given map .
5877	Creates the index events .
5878	Accessor method .
5879	Load an fxml tuple for the given view type .
5880	Create fxml path .
5881	Query for a style row
5882	Retrieves a pixel value from the image data .
5883	Retrieves the pixel values from the given image bytes .
5884	Validate that the image is a single channel .
5885	Creates a coverage data image .
5886	Set the tile data
5887	Runs a raw query .
5888	Wraps a query in a CursorResult object .
5889	Applies a query and returns the result .
5890	Queries a user query .
5891	Creates a cursor based on the given user query and user query .
5892	Get the feature row for the given geometry index
5893	Registers a new table with the given name .
5894	Retrieves the tile row for the specified zoom and zoom level
5895	Get the coverage data
5896	Get the coverage data for a tile
5897	Get the coverage data for a tile
5898	Get the coverage data tile results from the request
5899	Get the results zoom level zoomed by the tile matrix
5900	Get the coverage data tile results from the zoom level
5901	Get the coverage data zoom level out of the tile
5902	Get the tile matrix for the coverage data request
5903	Get the value for a tile at a specific location
5904	Set the icon row for the given geometry type
5905	Get the icon row for the given geometry type
5906	Open or get bindings database .
5907	Decode byte array to Bitmap .
5908	Compress the bitmap using the specified format and quality
5909	Create the table metadata
5910	Delete a geometry from the database
5911	Get or create the table metadata
5912	Retrieves the id of a GeoPackage
5913	Creates the table metadata for a cursor .
5914	Create and return the extension
5915	Get the feature row from the RTreeIndex table
5916	Performs a query against the database .
5917	Query for query by projection
5918	Applies the query to the given envelope .
5919	Returns the count of the envelope in the given envelope .
5920	Query for rows within the bounds
5921	Builds the where clause .
5922	Query for features within the bounding box
5923	Get the count within the bounding box
5924	Query for features within the envelope .
5925	Query for features within the specified range .
5926	Counts the number of samples within the specified range .
5927	Set bitmap data to a bitmap
5928	Set bitmap data to a bitmap
5929	Set the bitmap compression configuration
5930	Get the tile count .
5931	Adjust the bounding box based on the zoom and zoom level
5932	Adjust the global bounds of the Google Maps API .
5933	Adjust the WGS84 bounding box by the zoom level .
5934	Adjust the bounds of the GeoPackage .
5935	Get the bounding box for the zoom level
5936	Get the tile grid for the zoom level
5937	Query for a tile for the specified zoom level and zoom level
5938	Query for the tile at the zoom level
5939	Get the closest zoom level to the zoom level .
5940	Get the approximate zoom level for a given length
5941	Query for the tile grid for the zoom level
5942	Delete the tile at the zoom level
5943	Query for the zoom level at the zoom level
5944	Determine if the WGS84 tile matrix is a Google tile matrix .
5945	Retrieves the pixel value of a TIFF image .
5946	Get the pixel values from the TIFF image bytes .
5947	Validate the image with the coverage data
5948	Create a coverage data image .
5949	Set the pixel value at the given pixel
5950	Get or open the GeoPackage with the given name if not found in the cache
5951	Retrieves the current row from the table .
5952	Move the cursor to the next invalid cursor
5953	Query for style mapping rows by base id .
5954	Delete by base id
5955	Get a rectangle that contains the specified bounding box in the specified bounding box section
5956	Get a rounded rectangle using the specified bounding box and bounding box section .
5957	Delete missing databases .
5958	Create and close the GeoPackage
5959	Check if database is valid .
5960	Validate database and close on error .
5961	Validates database and closes database .
5962	Validate database .
5963	Validate that the database header is valid .
5964	Check if the database header is valid
5965	Add a collection of databases .
5966	Add a collection of external databases to the GeoPackage
5967	Imports a GeoPackage file into a GeoPackage file .
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata
5970	Create a new data structure .
5971	Populate the GeometryMetadata .
5972	Delete a GeoPackage ID
5973	Create or update the metadata if it exists .
5974	Update the geometry metadata
5975	Get the count for a table and bounding box
5976	Creates a GeometryMetadata object from a cursor .
5977	Update the rows matching the where clause .
5978	Draw a bitmap .
5979	Retrieves the simple attributes for the given ids .
5980	Checks the integrity check .
5981	Get a mapping DAO
5982	Get the simple attributes DAO
5983	Return a list of mappings for a specific base id
5984	Retrieves the mappings for a related relation
5985	Returns true if the given baseId and relatedId has the given baseId and relatedId
5986	Get the count for the cursor
5987	Register a cursor wrapper for a GeoPackage
5988	Read a table from a GeoPackage
5989	Get the tile from the request bounding box
5990	Draw the tile bitmap with the requested image .
5991	Reproject a tile to the requested tile .
5992	Retrieves the tile results from the requested request
5993	Calculate width and height of a point .
5994	Set density .
5995	Sets the line paint .
5996	Set the polygon paint
5997	Draw the tile at the specified zoom level .
5998	Draws a tile at the x y and zoom level
5999	Draws a bitmap index for the tile at the x and zoom level
6000	Query the number of features in the tile at the x and zoom
6001	Query for features in the bounding box
6002	Query for feature results in the specified zoom and zoom
6003	Query for features within the bounding box
6004	Draw the bitmap for all features in the x and zoom level
6005	Simplify the list of points by simplify the tolerance .
6006	Returns the paint for the specified feature style .
6007	Returns the paint for the specified feature style .
6008	Returns the paint for the specified feature style .
6009	Returns the paint paint for the specified feature style
6010	Get the paint paint for a feature style
6011	Get the style paint
6012	Get paint for a style row
6013	Get the paint for the specified style id
6014	Put a bitmap into the icon row .
6015	Creates an icon from an icon row cache .
6016	Creates a quote wrapper for the given values .
6017	Creates a bitmap based on the layers .
6018	Recycle the bitmap .
6019	Get the bitmap for the given layer .
6020	Get the canvas for the given layer .
6021	Creates a bitmap and canvas for the layer .
6022	Get the style mapping Dao
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature styles for a feature table
6026	Get the styles for a feature table
6027	Get the style for a feature table
6028	Get icons for a feature table
6029	Get the icon for a feature table
6030	Extract the feature styles from a feature row .
6031	Get the feature styles for the feature table
6032	Get the styles for a feature row
6033	Get icons for a feature .
6034	Retrieves the styles for the given feature id and mapping
6035	Retrieves icons for the given feature id .
6036	Set the feature style for a feature table
6037	Set the style for a feature table
6038	Set icons for a feature table
6039	Set the feature styles for a given feature row
6040	Set the feature style for a feature table
6041	Set styles for a feature row
6042	Set the style for a feature table
6043	Set the style for a feature row
6044	Set the style for a feature row
6045	Set the style for a feature table
6046	Sets the icons for a feature row .
6047	Set icons for a feature table
6048	Set the icon for a feature row
6049	Set the default icon for a feature row
6050	Set the default icon for the feature table
6051	Retrieves the style id for a given style .
6052	Retrieves or inserts an icon .
6053	Insert a style mapping
6054	Delete a table style mapping
6055	Delete the icon table mapping for the feature table and geometry type
6056	Delete the mapping table mapping
6057	Delete a table mapping
6058	Delete the mapping by the feature id .
6059	Get all style ids from a feature table
6060	Retrieves all icon ids for the given feature table
6061	Get all style ids for the given feature table
6062	Get all icon ids for the feature table
6063	Get image bytes .
6064	Flush output stream .
6065	Get the pixel at the specified location
6066	Reads all of the pixels from the file
6067	Draw the feature at the specified zoom level
6068	Draw a line path
6069	Draw a polygon path
6070	Add a line string to the tile .
6071	Add the polygon to the polygon
6072	Get the cache for the given table name .
6073	Remove the given feature row from the table
6074	Clear all caches and resize them
6075	Return the styles that should be used for the cache .
6076	Obtains the icons for the cached table .
6077	Get a RTree Index TableDao
6078	Set the width of the column
6079	Set the height
6080	Retrieves the derived width and height of the bitmap .
6081	Calculate the density of a tile in pixels
6082	Read blob value .
6083	Read a table from a GeoPackage Connection .
6084	Returns the color or the default color if null .
6085	Validate the color
6086	Creates a color from hex color and opacity .
6087	Get an instance of the GeoPackageManager .
6088	Set the progress for the feature index .
6089	Returns the index of the specified type in the given list .
6090	Search for the given feature row in the given list .
6091	Deletes a collection of Index Index .
6092	Deletes the index for the given row .
6093	Deletes the index for the specified geometry id .
6094	Delete the feature index for the given type
6095	Returns whether the index is indexed .
6096	Retrieves a list of indexed feature indexes .
6097	Query the feature index results .
6098	Returns the number of feature index in the database .
6099	Get the bounding box for the feature index .
6100	Query for feature index results within the bounding box
6101	Get the index type for an indexed type .
6102	Get the file from the given file path
6103	Get file path .
6104	Returns the geometry type .
6105	Set the geometry type
6106	Utility method to check if a bounding box exists .
6107	Replace x y and y coordinates
6108	Utility method to check if a url exists in the URL .
6109	Replace the bounding box
6110	Replace the bounding box by the URL .
6111	Get the geometry information
6112	Index the feature row
6113	Update the last indexed time
6114	Delete index .
6115	Delete the index for the given geometry id
6116	Returns true if the feature is indexed .
6117	Return a cursor based on the database metadata .
6118	Retrieves a cursor based on the bounding box
6119	Count the number of columns in the bounding box
6120	Return a cursor based on the Geometry Envelope
6121	Count the count within the Geometry Envelope
6122	Query for the bounding box
6123	Get the count of features in the bounding box
6124	Get the bounding box of the feature
6125	Get the geometry metadata for a cursor
6126	Get the feature row from the cursor .
6127	Retrieves the feature row for the given geometry metadata .
6128	Get the TileDao for a feature table
6129	Get the FeatureDao for a tile table
6130	Get the bounding box from the feature table and projection
6131	Query by id and related id
6132	Retrieves a list of unique base ids .
6133	Retrieves a list of unique IDs from the user mapping table
6134	Delete by base id
6135	Delete by related id
6136	Delete by id and related id
6137	Builds the WHERE clause for a base id
6138	Create and store the metadata
6139	Delete the table
6140	Renames the metadata .
6141	Update the name
6142	Get all the metadata
6143	Get the metadata for a database
6144	Get the metadata for a specific id
6145	Get the metadata for a given GeoPackage
6146	Determine if a database is external .
6147	Get the metadata at the path
6148	Returns a list of metadata where each column must match the given column
6149	Returns a list of metadata where no specific column should be found .
6150	Get a list of column names like like
6151	Create a GeoPackage metadata object
6152	Called when a view is created .
6153	Add parallax view to the Parallax .
6154	Invoked when the view is created .
6155	Create a custom view .
6156	Append an event to the log .
6157	Find the logback configuration file from the system properties file
6158	Get the URL for a resource
6159	Auto configur the logger
6160	Checks status on a resource .
6161	Convert an address to a string .
6162	Creates new executor service .
6163	Iterates all the converters starting with the specified converter .
6164	Prevents the rollover .
6165	Add a substitution property .
6166	Get a property by key
6167	Compile the given node .
6168	Get Eopt .
6169	Reads a Curent token from the current context .
6170	Escape the given string to the given buffer .
6171	Convert a date to a regular expression
6172	Begin processing the event .
6173	End an evaluator .
6174	Initialize this logger context with the given key .
6175	Creates a context selector .
6176	Sets up the logging context .
6177	Returns the path to the external storage directory .
6178	Get the database directory path .
6179	Returns the filename of the given filename .
6180	Returns true if the logging level is higher than the error level .
6181	Retrieves the property value for the given event .
6182	Updates the mask if necessary .
6183	Get the chain decision for an event .
6184	Creates key managers .
6185	Creates the trust managers .
6186	Creates a key store from the given system properties .
6187	Extracts the location from the given system property name .
6188	Creates a URL for the given location .
6189	checks to see if a Throwable is a Throwable
6190	Stops the logback hook .
6191	Prints the status of the given context .
6192	Prints the status of the given context .
6193	Print a status message .
6194	Write the first line of Throwable to the output stream .
6195	Gets an entry from the live map .
6196	Ends the end of the given key .
6197	Creates an object based on the given string .
6198	Renames src file to target file .
6199	Determine whether the target file is on different volumes .
6200	Get environment variable value .
6201	Retrieves the value of an android system property .
6202	Sets the MDC property map for this event .
6203	Output a mDC for all keys in the map
6204	Extract the stack trace for the specified class .
6205	Returns true if the current class is in the given list .
6206	Add a status .
6207	Add a status listener .
6208	Look up an implicit action for the given element .
6209	Get the applicable action list for the specified element path .
6210	Set the class loader .
6211	Gets the value for the given key in the system properties .
6212	Get the boolean value for the given key
6213	Decapitalize a name .
6214	Returns an array of MethodDescriptors for the given class .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Initialize errors .
6217	Adds an onConsoleStatusListener to the given context .
6218	Put the given property in the context stack .
6219	Retrieves the value for the given event .
6220	Checks to see if the logging event should be discarded .
6221	Prepare the shutdown hook .
6222	This method is called when an action is detected .
6223	Add the enabled protocols to the list of enabled protocols .
6224	Add the enabled cipher suites to the list of enabled cipher suites .
6225	Returns an array with the included strings .
6226	Convert a string to a scope .
6227	Sets the given properties on the interpretation context .
6228	Add an appender to the list of appenders .
6229	Detaches the given appender from the list of appenders .
6230	Removes the appender with the given name .
6231	Propagate the parent level to the parent level .
6232	Call the appenders on the logger .
6233	Detaches an appender from the specified appender .
6234	Creates a child log logger .
6235	Call the TurboFilter for the given marker .
6236	This method is used to log an event
6237	Opens the socket .
6238	Creates the missing parent directories if necessary .
6239	Converts this log level to integer .
6240	Convert an integer value to a level .
6241	Returns a set of URL occurrences for the specified resource .
6242	Returns a URL for the given resource .
6243	Returns the class loader for the given object .
6244	Obtains a class loader as a privileged resource .
6245	Returns the class loader of the given class .
6246	Start the tag encoder .
6247	Get the tag string for the logging event .
6248	Implementation of this method .
6249	Returns the index of the first character of the given name in the given string .
6250	Returns true if the logging event is in the list .
6251	Returns the thread name for the client .
6252	Determine whether two files are on the same file store .
6253	Start the session .
6254	Appends the given event object to the internal buffer .
6255	Sends the given message to the given buffer .
6256	Add a MDCValuePair to the list of MDCValuesPair .
6257	Create a converter for a given type .
6258	Create a composite converter .
6259	Determines the compression mode .
6260	Configure the given URL .
6261	configure the file
6262	Configure the given input stream with the given input stream .
6263	Builds the interpreter .
6264	configure the configuration
6265	Called when an event occurs .
6266	Returns the property value .
6267	Sets the name of this context .
6268	Returns true if the context has status listener .
6269	Returns the timestamp of the reset .
6270	Starts parsing .
6271	Returns the effective converter map .
6272	Get the file header .
6273	Get the file footer
6274	Begin processing the logback context .
6275	This method is called when an object is encountered .
6276	Creates a copy of the clients list .
6277	Add a client to the list .
6278	Remove a client
6279	Return a copy of the current thread s context map
6280	Returns the value of the given class .
6281	Calculate the next filter chain .
6282	Checks whether the current operating system is operating system .
6283	Initialize the default logger context
6284	Returns an array of files that match the given stem regular expression .
6285	print status of the current status
6286	Get the int value corresponding to the given facility string .
6287	Returns the database file corresponding to the given filename .
6288	Clear expired logs .
6289	Check if the given expiry time is expired .
6290	Helper method to insert the logging event .
6291	Append the given event to the given event .
6292	Bind logging event .
6293	Convert an object to a string .
6294	Compute the mask for a logging event .
6295	Merges the given event map with the current context properties .
6296	Insert an exception .
6297	Calculate the length of this PairPathMatch .
6298	Get the effective level .
6299	Set a property on this object .
6300	Returns true if the given class can be instantiated .
6301	Returns a HashMap representing the child value as a HashMap .
6302	Process an include event .
6303	Opens an input stream .
6304	Remove the beginning and end of the list .
6305	Start the server .
6306	Returns true if the exception is transient .
6307	Sets the hosts .
6308	Get the local index .
6309	Sync the data selection .
6310	Sync sync if needed .
6311	Wait a task .
6312	Asynchronously lists all the indexes in the data directory .
6313	Convert stream to char array
6314	Converts the stream to a byte array .
6315	Consumes data from the connection and closes the connection .
6316	Returns a list of hosts that should be up .
6317	Sets the place type .
6318	Starts the request .
6319	Put an entry into the LRU cache .
6320	Retrieves a value from the LRU cache .
6321	Waits for all threads to complete .
6322	Compare two version strings
6323	Reports an exception .
6324	Copies the given directory to the given target file .
6325	Loads the configuration from the given file .
6326	Retrieves the value of a static field .
6327	Get a method by name .
6328	Format the given value as a percentage .
6329	Format a double .
6330	Formats a long to fit into a string .
6331	Reads a JSON syntax character .
6332	Convert a byte to a byte value .
6333	Write a JSON string to the transport
6334	Write an integer .
6335	Write a double .
6336	Reads a JSON string .
6337	Reads a JSON numeric character from the stream
6338	Reads a JSON integer .
6339	Reads a double value .
6340	Read base64 string .
6341	Execute a method call .
6342	Invoke a request .
6343	Enqueue a method call .
6344	Get a file from a filesystem location .
6345	Update the decoration .
6346	Refresh repository view .
6347	Returns the resource history view
6348	Open the given text editor with the given name .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Create the default server .
6352	Start the thread .
6353	Set the keepalive flag .
6354	Set whether to omit this element .
6355	Set owner .
6356	Add a condition factor .
6357	Create condition term .
6358	Returns true if this condition matches the given condition .
6359	Retrieves the content of the DSL file for the specified input .
6360	Loads the DSL configuration from the specified file .
6361	Parses the configuration file .
6362	Create a menu for the given control .
6363	Add a response element .
6364	Add an encoded href .
6365	Inserts a new href before the new href .
6366	Removes an href from the root element .
6367	Add a prop .
6368	Returns the href of the element s href .
6369	Returns the status element of the node .
6370	Get the current stack frame .
6371	Returns whether the given class is a subtype of the given class .
6372	Returns whether the given collection contains the given proposal .
6373	Creates a clone of the given node .
6374	Reset the stream to the beginning .
6375	Creates the actions for the breakpoint .
6376	Adds a connection .
6377	Gets the value of the specified property .
6378	Removes a connection from this connection .
6379	Sets the location of this panel .
6380	Sets the value of the specified property .
6381	Sets the size .
6382	Utility method to dump an array of constraints .
6383	Create a lock entry .
6384	Adds a vertex to the vertex .
6385	Removes a vertex from the vertex .
6386	Start the bundle .
6387	Stops the bundle .
6388	Retrieves the string value for the given key .
6389	Returns the resource bundle
6390	Return the formors for the rule builder .
6391	Set the date - time from the given date string .
6392	Sets the date using the given pattern .
6393	Return a status for an error .
6394	Logs an error .
6395	Adds the given field editor to the list of fields .
6396	Adjust grid layout .
6397	Apply the specified font
6398	Calculate the number of columns .
6399	Initialize the field editor .
6400	Fires a PropertyChangeEvent to all registered listeners
6401	Set the active editor
6402	Adds the tool bar to the current tool bar .
6403	Determines the dialect to use .
6404	Creates a new context based on the supplied locator and locator .
6405	Saves this file in the given monitor .
6406	Creates the table listeners .
6407	Create a table .
6408	Put value into given URL .
6409	Put the given url into the table replacing the old value .
6410	Add a token to the tree .
6411	Add child to this node
6412	Set the file information .
6413	Adds a condition to the condition .
6414	Add a condition for a resource
6415	Returns true if this condition matches another condition .
6416	Get the prop .
6417	Retrieves the status of the element .
6418	Set the prop .
6419	Get the last line in the back text
6420	Return the last non - dash line in the back text
6421	Convert an id to a string
6422	Helper method to bind an id to a string .
6423	Convert an id to a message .
6424	Create the process .
6425	Create a sample jvm .
6426	Gets the runtime id .
6427	Visit a Rete .
6428	Visits a node .
6429	Returns the dot id of the given object .
6430	Add a remove property .
6431	Add a set property .
6432	Create a locator for the given resource URL and label .
6433	Get presenter recurrence .
6434	Returns true if the object is the same as the given status code
6435	Returns true if this condition contains the specified condition .
6436	Create a condition factor .
6437	Adds a list of pages .
6438	HTTP DELETE request
6439	Perform an HTTP POST request .
6440	Requests a job status .
6441	Execute the pull operation .
6442	Handles pull results .
6443	Sets the value at the given index .
6444	Add an active lock element .
6445	Filters the list of proposals that start with the given prefix .
6446	Retrieves the prefix from the given offset .
6447	Calculates the row list for a given root vertex .
6448	Paints the background .
6449	Creates an edit part for the given model element .
6450	Returns an image descriptor for the specified path .
6451	Declares an image registry .
6452	Add a vertex at the specified depth .
6453	Retrieves the index of a specific vertex .
6454	Get the total width .
6455	Dumps all the rows in the graph .
6456	Optimizes all rows .
6457	Load the rete graph .
6458	Initialize the graphical view .
6459	Draws a new graph in the graph .
6460	Returns the breakpoint for the given source name .
6461	Set the href for this node .
6462	Determines whether the device can talk to .
6463	Copy the specified object to the specified destination .
6464	Examine a multi status response .
6465	Extract the list of properties from a multi status table .
6466	Get the content of the response .
6467	Retrieves the list of active locks .
6468	Gets the specified property by its name .
6469	Perform a head request .
6470	Attempt to acquire a lock .
6471	Move the specified names to the destination .
6472	Performs the actual check .
6473	Refreshes the lock for the given lock token .
6474	Remove the specified properties from the request body .
6475	Removes the specified property from the list of properties .
6476	Set the content of an input stream .
6477	Sets the specified collection of properties .
6478	Set the property .
6479	Unlock the lock .
6480	Update the version of the document .
6481	Calls the version control on the server .
6482	Perform a delete operation .
6483	Expect a status code and throw an exception .
6484	Determines whether the specified property has the specified name .
6485	Write the request body to the output stream .
6486	Convert a byte array to a String
6487	Convert an array of ints to a String
6488	Set whether all the properties of the node should be allprop .
6489	Set whether the node is a propname .
6490	Replies the properties of the root node .
6491	Strips the last word .
6492	Update the tree .
6493	Writes the content to the output stream .
6494	Step over the current stack frame .
6495	Mark parser errors .
6496	Skip whitespace .
6497	Adds a resource to the target location
6498	Commit changes for the given file on the web server .
6499	Returns the age of this group .
6500	Get the content length .
6501	Get the maximum number of forward for this event .
6502	Determines if overwrite flag is true .
6503	Gets the passthrough .
6504	Retrieves the timeout value .
6505	Add a key - value pair to this context .
6506	Sets the value of the timeout attribute .
6507	Open DDL file
6508	Parses the content of the file .
6509	Extracts the object metadata from the text .
6510	Strips the object metadata .
6511	Add tokens to the given root node .
6512	Retrieves the children of the given text .
6513	Return an array of child nodes that match the given text .
6514	Adds the given prefix to the list .
6515	Prints the root node .
6516	Recursively print a node .
6517	Prints the specified number of tabs to stdout .
6518	Creates a JsonValue from the given text .
6519	Get an image descriptor
6520	Performs the actual invocation .
6521	Adds a request header field to the request .
6522	Create the file for the rule launcher .
6523	Create the rule file .
6524	Create the project flow file .
6525	Create the rule flow launcher .
6526	Retrieves the list of IUsableUnit items .
6527	Writes image to output stream .
6528	Returns the field name .
6529	Get the evaluator .
6530	Get the field value .
6531	Adds the properties from the given resource to the given properties file
6532	Send the baseline control for the given baseline .
6533	Bind a member to the given source .
6534	Replies the member at the given locator .
6535	Optimize the vertex vectors .
6536	Initializes the resource group for this view .
6537	Validate the page .
6538	Generate an entity tag .
6539	Get the opposite source vertex .
6540	validate otp s provider
6541	Check if the given user is the right user .
6542	get username for the file
6543	Adds the yuby key to a file .
6544	Verifies the OATH OATH of the given user name .
6545	Clear the secret .
6546	Returns the public key of the given OID .
6547	Validate otp format .
6548	Creates an Evaluation for the given node and source .
6549	Creates a new Evaluation instance
6550	Clears the cache .
6551	Checks if is Java 15 . 1
6552	Returns the package name of the specified object .
6553	Get the package name for a given class
6554	Returns a string containing the unique descriptor of an object .
6555	Get the class corresponding to the argument .
6556	Returns true if two classes are more specific than one of them .
6557	Finds the appropriate method for the given target object .
6558	Returns the value of the specified property on the given target object .
6559	Returns all property descriptors for the given target class .
6560	Retrieves the PropertyDescriptor from the given class .
6561	Returns the read method for the given name .
6562	Read a character .
6563	Introspects the expression .
6564	This is the main SELECT statement .
6565	Converts the given value to a long value .
6566	Convert a value to a double .
6567	Convert an object to a BigInteger .
6568	Convert an object to a BigDecimal .
6569	Convert an object to a string .
6570	Returns the numeric type for the given value .
6571	Convert the given value to the given type
6572	Convert an Object to an integer value .
6573	Retrieves the numeric type of two given types .
6574	Get the numeric type from v1 and v2
6575	Creates an integer from the given type .
6576	Pop the current evaluation object and sets the current evaluation object to the root Evaluation object .
6577	Generates the body of an OGNL getter method .
6578	Generates the POJO setter method .
6579	Flattens the children .
6580	Initializes this result .
6581	Escape character .
6582	Sets the root context .
6583	Returns the value for the given expression .
6584	Sets the value of the given expression in the given context .
6585	Set the value in the given tree using the given root .
6586	Determines whether the expression is a constant expression .
6587	Returns the default watch service id .
6588	Wait for a server to start .
6589	Read file as string .
6590	Reload the class loader .
6591	Retrieve an archiver by name .
6592	Check the resources for a given archiver .
6593	Read file into string .
6594	Create a Project .
6595	Add a system property .
6596	Add a system property .
6597	Open a new folder .
6598	Change the selected directory .
6599	Refresh the state of the button .
6600	Creates a file observer for the given path .
6601	Returns the selected directory as a result .
6602	Create a new folder .
6603	Check whether the given file can be read - only .
6604	Start a background job .
6605	Start a new list .
6606	Terminate the end of the list .
6607	Handle motion .
6608	Returns the rectangle that contains the crop rectangle .
6609	Compute a rectangle that can be placed inside a rectangle .
6610	Registers a listener to receive the video .
6611	Add a span to this span
6612	This method initializes the view with the specified position .
6613	Gets the view at the specified position .
6614	Convert a SpannedText object to a RTHtml
6615	Calculate the spacing between two paragraphs .
6616	Creates a unique file in the target folder .
6617	Determines the original file name .
6618	Given a name and an attribute name return the corresponding namespace .
6619	Returns the local name of the given name .
6620	Set an attribute on the given attributes .
6621	Set an attribute on an attribute .
6622	Get the name of the font based on the file path .
6623	Retrieves the font name from the given file path .
6624	Needs to be a new buffer .
6625	Writes an array of bytes .
6626	region OutputStream Implementation
6627	Reads data from an input stream to the current buffer .
6628	Writes remaining data to the output stream .
6629	Copies the remaining data into a byte array .
6630	Sets the selected font size .
6631	Converts a path to a unix separator
6632	Recompute focus .
6633	Ensure that the specified highlight is visible .
6634	Center the view based on the highlight view .
6635	Resets the document locator to a new document locator
6636	Validate the given value
6637	Add an element type .
6638	Set an attribute on an element .
6639	Set the parent .
6640	Get the element type by name .
6641	Returns the integer value for the given name .
6642	Cleans the specified paragraphs on the given editor with an indirection .
6643	Apply the given value to the current selection
6644	Checks whether the given domain is a valid domain .
6645	Called when an operation is executed
6646	Redo an editor
6647	Replaces all occurrences of the given search with the given replace string .
6648	Returns the thread status for the specified thread .
6649	Set the decoder options for the current thread .
6650	Returns true if the thread can be decoded .
6651	Decode a file descriptor .
6652	Retrieves a list of RTTypeface .
6653	Retrieves a map of all asset font names for the given context .
6654	Get system font names
6655	Initialize the stack
6656	Get a reader for the given source .
6657	Opens an InputStream for reading the given publici file .
6658	Add the attribute to the new element .
6659	Expand entities in the given source string .
6660	Look up an entity .
6661	Restart the current element .
6662	Pop the stack .
6663	Restore the popped element .
6664	Returns the prefix of the given name .
6665	Determine whether the given prefix is foreign .
6666	Trim quotes from the given string if it is null .
6667	Splits the given string into an array of strings .
6668	Rectify an element .
6669	Convert the buffer to a name .
6670	Set the state of the instance to save .
6671	Unregisters the editor
6672	Invoked when an event occurs .
6673	Called when a link is clicked .
6674	Reset the bitmap to the correct size .
6675	Returns the maximum zoom level of the bitmap .
6676	Returns true if the selected editor exists in the given editor .
6677	Helper to remove spans from a paragraph
6678	Encodes the given URL .
6679	Decode URL .
6680	Pick an intent from the given start path
6681	Rotate image with specified degree .
6682	Set the output .
6683	Writes the given character to the output stream .
6684	Writes a string to the output stream .
6685	Determine whether the given attribute is an attribute in the given qName .
6686	Write an escaped string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream if it does not exists .
6690	Wait for the stream activation .
6691	Complete the snapshot with missing snapshots .
6692	Wait for the next segment to finish .
6693	Helper method to get records from the KID .
6694	Perform an action with retry .
6695	Returns an instance of the specified action using the specified supplier .
6696	Checks that the given bucket is accessible .
6697	Loads and returns a serializable snapshot from the snapshot store .
6698	Invokes the wildcard expansion handler .
6699	Replaces the old pattern in string with the new pattern .
6700	Delete any characters that are not part of the given string .
6701	Add a resource lint report .
6702	Update the properties with the specified key from the configuration file
6703	Returns the configuration properties .
6704	Create an input stream to read the given wro file .
6705	Creates a map of resource post processors .
6706	Compile the given content .
6707	Reload the cache with a new value
6708	Reload model with new value
6709	Creates a servlet request from the given location .
6710	Create a new base name transformer .
6711	On error .
6712	Redirect to the given location .
6713	Process the given resource .
6714	Creates an expansion handler for the given group .
6715	Locates an input stream to the given location .
6716	Create the WroConfiguration from the servlet context .
6717	Registers the cache change listeners .
6718	Process the request .
6719	Set the WroConfiguration
6720	Identify group names .
6721	Merges the given WroModel into this one .
6722	Locates the given uri .
6723	Applies the post processors .
6724	Creates a processor for the resource post processing .
6725	This method does the actual processing .
6726	Splits a string into an array of options .
6727	Load properties from an input stream .
6728	Parses the given properties file .
6729	Creates a custom WroManagerFactory .
6730	Persists the resource fingerprints .
6731	Returns true if the group is a target group .
6732	Extend the classpath .
6733	Retrieves a resource as stream .
6734	Initialize a WroManagerFactory
6735	Set the model transformers .
6736	Compile the given string content with the given name .
6737	Process and merge the resources
6738	Process and merge resources .
6739	Runs the given resources in parallel .
6740	Applies the preProcessors to the given resource .
6741	Decorates the resource preProcessor .
6742	Persists the current generation .
6743	Get all declared fields .
6744	Rewrite a css URI .
6745	Compute new image location .
6746	Add a model transformer to the factory .
6747	Provide a response for processing the requested bundle
6748	Initializes the aggregated folder path .
6749	Extract variables from variables body .
6750	Parse the given CSS .
6751	Utility method to replace variables in css .
6752	Convert a resource post processor to a post processor .
6753	Is eligible for the given resource type .
6754	Applies the gzip operation to the response .
6755	Creates a new PathPatternProcessor that invokes specified patterns .
6756	Creates a path pattern processor that uses the supplied patterns .
6757	Creates a resource change handler .
6758	Remember the hash for a resource .
6759	Applies the given css import apply to the resource .
6760	Filter a collection .
6761	Determines if the request parameter is minimized .
6762	Finds the resources that should be imported .
6763	Compute the absolute URL for a resource .
6764	Create a string representation of the given items .
6765	Get alias list .
6766	Create the context .
6767	Evaluates the given reader with the given source name .
6768	Evaluates the given script with the given source name and source name .
6769	Process the resource bundle .
6770	Returns whether the given request is a handler request .
6771	Create handler request path .
6772	Rename a group .
6773	Compute the destination folder .
6774	Process a group .
6775	Check if the group has changed for a specific group .
6776	Locates a resource within the context folder .
6777	Creates a new object pool .
6778	Locates a stream from a jar file in the specified folder .
6779	Open a JAR file .
6780	Extract path from given URI .
6781	Returns true if the request should be minimized .
6782	Add a locator to the URI .
6783	Creates a new WroModelFactory which will decorate the given WroModelFactory .
6784	Add a require parameter .
6785	Process the given string with the given content .
6786	Log the summary of the resources .
6787	On processing a resource .
6788	Retrieves the lock for the given key creating it if necessary .
6789	Create process .
6790	Parse the given contents into an array of Properties .
6791	Get task info .
6792	Returns the compilation command .
6793	Parse the header .
6794	Add no - cache headers .
6795	Get the path info from the given location .
6796	Gets the servlet path from the given location .
6797	Checks whether the given path matches the given path .
6798	Load the regexp with the specified key .
6799	Copies the given reader to the given writer .
6800	Creates a temporary file with the given extension .
6801	Clean an image URL .
6802	Set an attribute on an object .
6803	Generates a data URI from an input stream .
6804	Generates the data URI .
6805	Sets the given WroConfiguration into the given context .
6806	Unset correlation id .
6807	Detect changes in the cache .
6808	Called when an exception occurs .
6809	Checks whether a resource is changed .
6810	Set the hash for a group .
6811	Check if there are resources of the given type .
6812	Creates a Process .
6813	Encode an object to a string .
6814	Process group elements .
6815	Parse group .
6816	Create a group from the given element .
6817	Parses a resource element and adds it to the collection .
6818	Get resources for a group by name .
6819	Log the current timer
6820	Stop the named timer .
6821	Get a timer of the given name in the current thread .
6822	Retrieves a new timer for the given name and thread id .
6823	Print the statistics of the aggregated states .
6824	wake up workers
6825	Checks to see if the current state should be processed .
6826	Ensures that all finished jobs are processed .
6827	Update counter if the snapshot is smaller than the given value .
6828	Default visit for the given premise .
6829	Instantiates an indexed object .
6830	Ensures that the loading stage is loading .
6831	Restore Saturation stage .
6832	Returns true if this class is in a consistent manner .
6833	Restore the class taxonomy .
6834	Restore instance taxonomy .
6835	Generate proof for the ontology .
6836	Pre - execute before execution
6837	Invalidates this context .
6838	Returns the collection to add to the collection .
6839	Get the collection of removed individuals .
6840	Creates an UnsupportedOperationException with the given name .
6841	Removes the element at the given position .
6842	Removes entries from the specified array at the specified position .
6843	Returns the index of the element at the specified del in the array .
6844	Returns true if the specified object contains the specified element .
6845	Add an element to the darray .
6846	Checks that occurrence numbers are positive .
6847	Adds the given timer .
6848	Add timers to the timer .
6849	Put key - value pair into the given keys and values
6850	Removes the entry at the given key from the map .
6851	Increases the size of the map to hold the given capacity .
6852	shrink the keys and values
6853	Saves the given configuration to disk .
6854	Writes a list of classes to a writer .
6855	Collects all instance nodes from the given node .
6856	Clear buckets .
6857	Combines an array of hashes into a single hash .
6858	Combine a list of ints into a single hash .
6859	Copies input stream to output stream .
6860	Returns an incompleteness monitor for the given InCompleteness monitor .
6861	Prints the contents of an entity to a writer .
6862	Submit an input to the buffer .
6863	Append an ELObject to the appender .
6864	Marks the given query as computed by the given index .
6865	Add a direct type node .
6866	Checks that the given start position matches the given start position .
6867	Filters the given set according to the given condition .
6868	Creates a map from the given functor .
6869	Adds an element to the data set .
6870	Removes an object from the data set .
6871	Adds an entry to the counter .
6872	Log memory usage .
6873	Set the reasoner configuration options .
6874	Shutdown the reasoner .
6875	Print the header .
6876	Print values to the log
6877	Creates a string from c to string
6878	Adds the given counter to the counter .
6879	Write resource .
6880	Get an ActionInputParameter by name .
6881	Retrieves the property descriptor for the given property path .
6882	Returns a map with all required parameters .
6883	Checks if is single value .
6884	Add a relation .
6885	Set the type of the link .
6886	Add a HREFL string to the link .
6887	Add a revision .
6888	Add a link parameter to the link .
6889	Expand the given template
6890	Get the list of rels .
6891	Returns the list of revs .
6892	Returns true if there are no required parameters .
6893	Get the value .
6894	Returns true if the parameter is hidden .
6895	Returns true if the given property contains the given property .
6896	Returns true if the annotation includes an implicit property .
6897	Returns true if the request is required .
6898	Returns the default value .
6899	Returns the parameter name .
6900	Get the exposed property name .
6901	Determines the vocabab for the specified mixin .
6902	Get the full query string .
6903	Append the form .
6904	Write an input button .
6905	Append an input parameter to the given input parameter .
6906	Appends an action to this builder .
6907	Returns the partial URI template components .
6908	Returns a copy of the partial URI template components without any optional parameters .
6909	Retrieves the first item with the given name .
6910	Retrieves the first item with the given rel .
6911	Returns an iterator over the elements in the data set .
6912	Creates an immutable hash map from an Equator .
6913	Creates a new PersistentTreeMap from the given iterable .
6914	Empty tree map .
6915	Returns a sorted set of entries .
6916	Returns the last key in this map .
6917	Construct an Xform from an Iterable .
6918	Performs a single fold .
6919	Drops elements until the given predicate evaluates to true .
6920	Applies the given Identifier to the given one .
6921	Creates a tuple from a map entry .
6922	Applies the function to the given item .
6923	Registers an array of classes .
6924	Returns the node at the given index .
6925	append an element to the end of the list
6926	Concatenates an iterable with the specified objects .
6927	Creates an immutable set that contains the given items .
6928	Create an immutable list with the given items .
6929	Creates a view of the specified items .
6930	Creates an immutable view of the specified items .
6931	Create an unmodifiable copy of an array .
6932	Create a string builder for the given length .
6933	String representation of an array
6934	Creates a lazy copy of the given producer function .
6935	Applies the value to the producer .
6936	Inserts an array into an array at the specified index .
6937	Copies the given array of items to a new array .
6938	Suspend the current transaction if the thread is associated with another thread .
6939	Before executing the async operation .
6940	Builds a list of component components .
6941	Validates a directory .
6942	Create inheritance link .
6943	Copies all declared methods from the given source class to the given destination object .
6944	Copies the given methods to the given destination class and exceptions .
6945	Creates the tree for the given root node .
6946	remove the entity with the current class loader
6947	Returns true if the given parameter name is enabled .
6948	Returns a set of names that are not already referenced by the component .
6949	Installs the service .
6950	Uninstalls the given service .
6951	Returns whether or not the given resource link name is referenced by this component .
6952	Retrieves the usage parameter set for a given SBBID .
6953	Reset all usage parameters .
6954	Retrieves a collection of profiles from the specified profile table .
6955	Retrieves the profile table activity .
6956	Retrieves a profile by an indexed attribute .
6957	Display the result .
6958	Append an array to a string
6959	Invoked when an event occurs .
6960	Binds a name to the cache .
6961	Remove an object from the cache .
6962	Look up a child name .
6963	Gets the cache name bindings .
6964	Retrieves the next event from the given event context .
6965	Returns true if this level is higher than the given one .
6966	Extract jar contents to destination directory .
6967	Copies data from input stream to output stream .
6968	Put an object into the map
6969	Attach the given SbbEntityId to this node .
6970	Detaches the given SbbEntity from this node .
6971	Returns true if no sb entities are attached .
6972	Gets the set of Sbb entities that are attached to this node .
6973	Attach timer to this node .
6974	Detaches the timer identified by the given timerID .
6975	Returns true if there are no timers attached to this node .
6976	Get the set of attached timers .
6977	Add the given name to the namespace .
6978	Remove the given name from the set .
6979	Returns true if there are no names bound .
6980	Get the set of names bound to this node .
6981	Set cmp attribute .
6982	Return the cmp attribute with the given name .
6983	Creates a copy of the cmpAttributes copy .
6984	Initialize MBean notification information .
6985	Send a usage notification .
6986	Download a file from the deployment root .
6987	Update the components in the deployment .
6988	Installs the given DeployableUnit
6989	Uninstall the deployed components from SLEE .
6990	This method will be called when an uninstalled unit is installed .
6991	Show the status of the components .
6992	Determines if the log record is logable .
6993	Retrieves the logger for the given record .
6994	Retrieves a set of Slee Components that refer to the specified component .
6995	Collects all the SbbEntities from the node .
6996	Returns the given permissions .
6997	Returns the source code sources .
6998	Determines if the specified profile exists in the specified table .
6999	Remove a profile table from the database
7000	Update the configuration properties with the given properties .
7001	Invoked when the container is active .
7002	must be synchronized
7003	Activate the entity adaptor context
7004	Deactivates the entity
7005	Schedules end of aRA entity .
7006	remove this entity
7007	Returns the resource adaptor interface for the given resource type .
7008	This method is called when a service is active .
7009	Return an ActivityHandle for a given handle .
7010	Called when an activity is ended .
7011	Update the RCConfiguration with the specified properties .
7012	Verify that all the properties in the configuration are valid
7013	Invoked when the resource adapter is stopping .
7014	Called when the ra object is in active state .
7015	Unconfigured resources .
7016	Unset the resource adaptor context .
7017	Unset the fault transient resource adaptor context .
7018	Build the profile attribute map .
7019	Executes the runnable .
7020	Gets the activity context handle .
7021	Remove this bean
7022	Return the usage MBean for the given parameter set name .
7023	Decorate an abstract class
7024	Fires an event .
7025	Fires an event .
7026	Invokes the getCMP method on the given SbbEntity
7027	Gets the service usage parameter set .
7028	Get all abstract methods from a class .
7029	Returns the interface methods from the specified interface .
7030	Create the object pool for the given profile table .
7031	Remove the pool for the given profile
7032	Returns true if the given notification source is owner of the given notification source .
7033	Raises an alarm from the given notification source .
7034	Gets the usage parameter set .
7035	Returns the event type descriptor .
7036	Determine whether the given deployable unit should be accepted .
7037	Initialize a DeployableUnit
7038	Starts the deployment .
7039	Stops the deployment
7040	Show the deployment status .
7041	Executes after commit actions .
7042	Execute after commit priority .
7043	Execute after rollback actions .
7044	Execute before commit actions .
7045	Execute before commit priority .
7046	Get the names of all tracers defined in this class .
7047	Creates tracer .
7048	Remove replicated data .
7049	Registers the editor components .
7050	Process the given SleeComponent with the usage parameter set .
7051	Returns the object pool for the given service ID .
7052	Create the object pool for the given service ID .
7053	Suspend an activity .
7054	Starts an activity .
7055	End an activity
7056	Checks the validity of the fire event .
7057	Fire an event .
7058	Generates the concrete class for an SbbLocal object .
7059	Make the getter method .
7060	Convert a string to an object .
7061	Sets the profile ID .
7062	Extracts the message from the result .
7063	Check whether the given object contains the given entity .
7064	Returns true if the collection contains all of the elements in the collection
7065	Remove all elements from the collection
7066	Returns true if this level is higher than the given level .
7067	Resolve the internal state .
7068	Remove classes from the class pool
7069	Add a profile call to the profile .
7070	Return the profile object for the specified profile .
7071	Pass the profile object to the tx end of the transaction .
7072	Set the component ID from the given text .
7073	Create the concrete activity context class .
7074	Generate the concrete methods .
7075	Set cmp attribute .
7076	Adds a name binding to the cache .
7077	Removes all names from the cache .
7078	Remove the given name from the cache .
7079	Attach timer to cache .
7080	Removes all registered timers from the cache .
7081	Attach the given SbbEntityId to the cache .
7082	Detach an sbb entity from the cache .
7083	Returns a sorted set of SbbAttaches to the given set .
7084	End the activity
7085	Add a component to this deployment .
7086	Get a collection of all external dependencies in this UUID .
7087	Returns true if the external dependencies are satisfied .
7088	Check if the unit has already been deployed .
7089	Retrieves the list of install actions related to this component .
7090	Returns all the management actions related to this component .
7091	Checks to see if the referring component has a referring component
7092	Close the given profile and profile
7093	Get the object name for the profile
7094	Change write state to read - write mode .
7095	Invoked before setting the profile field on the profile .
7096	Invoked after a cmp field is set .
7097	Before getCmpField is called before the profile is set .
7098	Invoked after a getCmpField has been set .
7099	Invoked before the management method is invoked .
7100	Invoked after a management method invocation .
7101	Deletes a file or directory
7102	Create the default Constructor .
7103	Create the default usage parameter getter method .
7104	Creates the getter method for the sbb entity .
7105	Create the fire event methods .
7106	Create the getActionInterface method .
7107	Add an expression to the list .
7108	Associates the specified target object with the specified key in the wrapper map .
7109	Binding the given name to the given target object .
7110	Decorate an AbstractSbbAbstract class
7111	Invoke the given method on the given proxy .
7112	Returns the real field name for the given field name .
7113	Set the value of the specified field in the activity .
7114	Returns the value of the specified field .
7115	Set the profile context .
7116	Initialize the state of the profile .
7117	Unset the profile context .
7118	Returns the profile local object .
7119	Fires an event if needed .
7120	Returns the profileCmpSleeWrapper for the profileClee10Wrapper
7121	Creates a new class with the specified name and interfaces .
7122	Creates an inheritance link for the specified class .
7123	Adds an annotation .
7124	Adds the member values to the annotation .
7125	Retrieves the ActivityContext for the given activity .
7126	Get the ClassPool for this classloader
7127	Sets the deployable unit .
7128	Clears the class loader .
7129	Executes an activity in the given scope .
7130	Checks if the given class is an interface with the given name .
7131	Returns all abstract methods of an interface .
7132	Resolves an entity by resource name .
7133	Checks whether tracer name is valid for the given tracer name .
7134	Retrieves a collection of profiles matching the specified query name .
7135	Check the dependencies for a Slee component .
7136	Utility method to create a temporary deployment directory
7137	Creates transactional entity manager .
7138	Request to start the running state .
7139	helper method to switch a class loader
7140	Make a proxied proxy call .
7141	Checks the transaction .
7142	Converts the given time to a TTL string .
7143	Is the profile class visible
7144	Return the profile object for the current transaction in the current transaction
7145	Returns the list of logger names that match the specified regular expression .
7146	Reset logger level .
7147	Clear loggers
7148	Add a Logger .
7149	Add new socket handler .
7150	Remove a handler .
7151	Convert tracer name to log4j logger name .
7152	Sets the level to the log4j level of the log4j log4j .
7153	Assigns the log4j level to the trace level .
7154	Resets the flags on the cache level .
7155	Send notification for trace level .
7156	Checks whether the tracer name is valid .
7157	Write an object to the output stream .
7158	Reads an object from the stream .
7159	Adds a domain to the list of direct dependencies .
7160	Provides a list of all URLClassLoaders .
7161	Find a class by name .
7162	Find a resource by name .
7163	Find resources locally .
7164	Create and register the profile mbean mbean .
7165	Resume a transaction
7166	Builds a set of SbbIDs from the ComponentRepository .
7167	Gets all the resource adaptor links .
7168	Initialize the Slee .
7169	Shutdown the Slee .
7170	validate state transition .
7171	Generate the named usage parameter getter method from the profile object .
7172	Update the field with the given value
7173	Builds a PolyJDBC connection from the database .
7174	Add value to the insert query .
7175	Executes the given operation .
7176	Create a RegionRequest from a string representation
7177	Get the region of this box .
7178	Resolve an image dimensions .
7179	Returns the annotation object that should be used for an annotation .
7180	Sets the viewing hints .
7181	Add view hints to the resource .
7182	Sets the renderings .
7183	Adds more rendings to the resource .
7184	Merges an ImageApiProfile .
7185	Merges the specified ImageApiProfile into this one .
7186	Create a RotationRequest from a string representation .
7187	Create a size request from a string representation .
7188	Initialize the AndroidDebugBridge
7189	Pull a file from the disk
7190	This method will push the popBox to the device
7191	Push the launch command to the local temp directory .
7192	Deletes the temp file .
7193	Pull the full dump to the pc .
7194	Retrieves the crash log .
7195	Remove all characters in the text editor .
7196	Add spaces to the text editor
7197	Tokenize an HTML string .
7198	Converts the given text to a Markdown link .
7199	Escape special chars in the given text editor .
7200	Add an exception to the batch .
7201	Closes all statements .
7202	Find the fully qualified class name of a type .
7203	Write to filer
7204	Write bit vector 1 divider
7205	Appends a bit string to a bit vector .
7206	Reads data from an input stream .
7207	Gets a JSON object .
7208	Retrieves a list of types from the path with the given key and an expected type .
7209	Attaches the kov reporter object to the specified extent object .
7210	Add a screen capture from an image path .
7211	Set system info .
7212	Creates an Selector for a property
7213	Creates a Selector that selects a property as an alias .
7214	Extract validation annotation data .
7215	Retrieves an array of Annotation objects for a given property on the given class .
7216	Returns the annotations for the given property on the given class .
7217	Gets the property descriptor .
7218	Look up an object expression .
7219	Creates an object from a map .
7220	Creates an object from the given map .
7221	Creates an object from the given value map .
7222	Convert an object to a map
7223	Convert an object to a map .
7224	Obtains the values of the annotation .
7225	Creates a new composite validator .
7226	Lookup a list of validators from the metadata .
7227	Looks up a FieldValidator in the registry .
7228	Apply meta data to a validator meta data .
7229	If the property is null remove it from the map
7230	Sets the time .
7231	Returns the size of the cache .
7232	Calculate the hash of the given object .
7233	Creates default options .
7234	Open a database .
7235	Writes a bunch of values to the database .
7236	Removes all keys from the database
7237	Iterate over the specified start key and return an iterator .
7238	Load all data in the database .
7239	Closes the database .
7240	Reduces an object by an object .
7241	Reduces an array by a long .
7242	Compute the variance of a vector .
7243	Returns the mean value of the specified range .
7244	Invoke a method from an object argument
7245	Reduces an array of float by reduceBy .
7246	Creates a ISO UTC time string for the given timestamp .
7247	Returns true if the object matches the specified criteria
7248	Binary Criterion .
7249	Creates a criteria from a list .
7250	Creates a Criteria from a JSON string .
7251	Adds an array to the end of the list .
7252	Returns the maximum element of the given array .
7253	Returns the first element of the list based on the given sort
7254	Returns the last element of the list based on the given sorts
7255	Returns the last of the last element in the list
7256	Returns the least element of the list
7257	Returns the minimum element of a list .
7258	Returns the minimum element of the given array .
7259	Process an array of maps .
7260	Handles a collection of maps .
7261	Creates an object from a map .
7262	Get the value for the given key .
7263	Creates a tool tip with the given name and field name .
7264	Generates the label value .
7265	Add a hex encoded character to the buffer .
7266	Process read operations .
7267	Process write operations .
7268	Start processing the data queue .
7269	Support the subscript operator for string
7270	Returns the slc string starting at the specified index .
7271	Determine whether a string is in a given string
7272	Add c to string
7273	Add objects to a string buffer .
7274	Compact a string .
7275	Splits a string into an array .
7276	Splits the string by space .
7277	Splits the string by the given pipe .
7278	Convert char array to string array .
7279	Convert a string to a camel case .
7280	Determines whether the specified string is inside of the specified string .
7281	Computes the under bar case .
7282	Convert a number to a string .
7283	Creates a sort based on the given sorts .
7284	Sort the list according to the specified fields .
7285	Return the comparator for the given fields
7286	Creates a list of comparators for the given fields .
7287	Determines whether the specified value is in the specified map .
7288	Checks if two int values are equal .
7289	Compare two int arrays .
7290	Returns the sum of the values in an array
7291	Round up an integer to a power of 2 .
7292	Sort the list using the specified sort method
7293	Sorts the given list using the given sort method .
7294	Set field value from map .
7295	Converts an object to a list .
7296	Creates SQL for loading all version data .
7297	Copies the given list to a deep copy .
7298	Determines whether the specified object has a field with the specified name .
7299	Checks if class has a field with the specified name .
7300	Checks if class has field with given name .
7301	Gets the first primitive from the given class .
7302	Get the sortable field name from a value
7303	Compares this cache entry to another .
7304	Compare this cache entry with another time stamp .
7305	Sort the list based on a list of sorts
7306	Sorts the given list using the given sortBy method .
7307	Sorts the specified map of entries according to the specified sort order .
7308	Sort the values of the specified map .
7309	Returns a collection of the keys in the given map sorted by the given key .
7310	Sorts the given array using the given sort method .
7311	Returns a Comparator for the given field access .
7312	Creates a Comparator that returns a Comparator based on the given boolean values .
7313	Retrieves the value for the given key .
7314	Retrieves the value for the given key from the cache .
7315	Calculate the order .
7316	Evict the list if needed
7317	Initialize the object if needed .
7318	Allocate a byte buffer with the given size .
7319	Determines if the processing loop should exit .
7320	This method will block until the input channel is closed .
7321	Flush the queue to disk
7322	Starts the monitor .
7323	Start the monitor .
7324	Retrieves an object from the map .
7325	Create the main query plan .
7326	Filter the given group .
7327	Set file time .
7328	sync output to disk
7329	Closes the output stream .
7330	Write the next buffer to the output stream .
7331	Write data to disk
7332	Initialize the output stream
7333	Puts all the given values into the given map .
7334	Convert key to byte array .
7335	Retrieves the meta data for the given property on the given class .
7336	Extracts the validator meta data from a string .
7337	Retrieves the meta data for the specified class and property name .
7338	Extracts the validator meta data .
7339	Extract validator meta data from annotations .
7340	Convert an annotation data to a validator meta data .
7341	Splits the string using the specified limit .
7342	Splits the string by white space .
7343	Splits the string by delimiter .
7344	Removes characters from a string .
7345	Splits the given string into an array with the given delimiter .
7346	Parses a double from a buffer .
7347	Parses an int from the given buffer .
7348	Parses a long from the given string .
7349	Gets the object property by the given path .
7350	Gets the fields from an object .
7351	Returns the type of the property for the given root object .
7352	Injects the specified value into the specified object with the specified path .
7353	Set the idx value of a property in the given class .
7354	Retrieves the value of a collection property from an object with the given name and path .
7355	Gets the property value of the given object .
7356	Gets the integer value of the specified property .
7357	Initialize this message with the details about the message .
7358	Create a message for the given key and arguments .
7359	Create message .
7360	Converts a list of keys to an array of values .
7361	Get subject .
7362	Parse the given text .
7363	Sends an HTTP request .
7364	Deletes a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	List resources in the given path .
7368	Trigger a replication .
7369	Queries a single value .
7370	Add descending view .
7371	Synchronize all documents in the db .
7372	Retrieves a design document from the database .
7373	Retrieves a list of all design documents .
7374	Retrieves a design document from the given ID .
7375	Saves replicator document .
7376	Find replicator document .
7377	Find all replicator documents .
7378	Remove replicator document .
7379	Find an object from the database .
7380	Find documents that match the given query .
7381	Check if a document exists in the database .
7382	Bulk insert .
7383	Write an object to the uri .
7384	Performs an HTTP PUT request .
7385	Sends a POST request to the given URI .
7386	Execute a DELETE request .
7387	Validate the response .
7388	Sets the entity into the HTTP request
7389	Add an attachment
7390	Returns the changes .
7391	Reads the next row
7392	Convert a double to the format
7393	Shutdown the lock
7394	Writes an observable to the given output stream using the given OutputStream .
7395	Add tags to the given metric .
7396	Verify and create temporary tables .
7397	Returns the id of the given namespace .
7398	Check if the request is a query
7399	Send authentication request .
7400	Get the verb for the request .
7401	Generates the subject access for the given namespace and resource name .
7402	Invoked when a request result is available .
7403	Handles a request failure .
7404	Initialize this instance with the given configuration
7405	Find all scheduled jobs in the given time slice .
7406	Converts a bucket map to a list of points .
7407	End the exchange .
7408	Retrieves all data from the bucket starting from the given timestamp .
7409	Creates a new buckets from the given range .
7410	send message to producer
7411	send one - way message to producer
7412	Send a message to the producer
7413	Applies a scan to the given cursor .
7414	Set a value for a given property .
7415	Add a file to the zip archive
7416	Replace the given text with the given file .
7417	Build the zip file .
7418	Generate Metrics for a given component and data buffer .
7419	Fetches content .
7420	Fetches content for an order item .
7421	Upload an export transformation to the given ZIP file
7422	Generates a MetricsMetrics for the given Iterator .
7423	Creates a random file in the specified directory .
7424	End the object .
7425	Register a adaptor for the given type .
7426	Registers an attribute renderer in the given group .
7427	Prepare the template .
7428	Add a new domain to the assembly .
7429	Set a property on a JSON object .
7430	Add a child object to the collection
7431	Creates a file from a directory .
7432	Copies the input stream to the output stream using the specified hashAssembler .
7433	Parse the given file .
7434	Parse an XML document from a reader .
7435	Return a stream of all nodes in the given parent .
7436	Returns a stream of nodes in the given parent element .
7437	Gets the first child element in the given parent element .
7438	Returns a stream that contains all named elements in the given parent element .
7439	Validate XML .
7440	Main method .
7441	Create a builder from an input stream .
7442	Loads content from resource .
7443	Process an entry .
7444	URL - encodes the given string .
7445	Set the signature for this request .
7446	Removes all whitespace from the given data array .
7447	Sign the request .
7448	Set the data for the specified object key .
7449	Complete the multipart upload .
7450	Invoked when the notification is updated .
7451	Add the given entry to the notification state .
7452	Returns whether the timer has expired .
7453	Get notification by id .
7454	Returns all addressees for a notification
7455	Get addressee DTO .
7456	Get events by notification id
7457	Get the event with the given id .
7458	Build the URL for a single notification endpoint .
7459	Retrieves a JpaEntry by id .
7460	Retrieves an authentication token if it has expired .
7461	Returns the size of the list .
7462	Adds new categories to the list .
7463	Fetches the current SSP notification .
7464	Create a notification response .
7465	Map the response to a notification response
7466	Map a notification entry to a NotificationEntry .
7467	Attaches the list of actions to the notification .
7468	Return a URL based on the SSP entry .
7469	Creates a notification category from the portlet request .
7470	Get the notification source for the portlet request .
7471	Invoked when the target notification is updated .
7472	Read the notification response .
7473	Retrieves the taskId attribute from the portlet request .
7474	Extract a single user ID from the response .
7475	Hide the notification .
7476	Get the attributes map .
7477	Normalizes the coordinates of the point .
7478	Returns true if the specified boxA contains the specified box A .
7479	Calculates the closest point to a point .
7480	Calculates the signum of a point .
7481	Set the values from a Se3 .
7482	Sets the x - axis of x and y to the specified rotation type
7483	Converts a polygon in order to the output coordinates .
7484	Converts a polygon into a 4 - bit quadrilateral .
7485	Calculate the rectangle that points to the specified quadrilateral
7486	Fill the specified polygon with the specified rectangle .
7487	Compute the center of a quadrilateral
7488	Computes the average vertexes for a polygon
7489	Computes the convex hull .
7490	Remove a polygon from the polygon
7491	Returns the average of the point on the polygon
7492	Computes the area of a polygon
7493	Returns true if the quadrilateral contains a point .
7494	Determine whether a point contains a triangle .
7495	Calculate the intersection of two lines .
7496	Calculate the intersection point of two lines .
7497	Calculate the intersection point of a line
7498	Calculate the intersection of two line segments .
7499	Calculate the intersection of two polygons .
7500	Returns true if the ellipse contains the given point
7501	Calculates the intersection of two rectangles .
7502	Get the value of a matrix at a given index .
7503	Convert a matrix to a quaternion .
7504	Extracts a rotation matrix from a rotation matrix .
7505	Sets the rotation of the rotation matrix .
7506	Compute the rotation rotation matrix .
7507	Compute the rotation matrix .
7508	Sets the rotation of the rotation matrix .
7509	Convert an Euler type to a matrix .
7510	Convert an axis into a rotation matrix .
7511	Set the angle of the slope
7512	Utility method to compute a twist from a motion matrix
7513	Sets the transformations to be applied to the end of the frame .
7514	Performs a linear interpolation .
7515	Solve a point vector .
7516	Solve a point on a plane
7517	Returns the length of the side at the specified index .
7518	Returns true iff point is inside the specified point .
7519	Converts a ConicGeneral image into a ConcatVector .
7520	Convert a ConicGeneral to a ConcatVector .
7521	Converts a ConcolaGeneralGeneralGeneralGeneralGeneralFeature into a ConcatGeneral .
7522	Converts a ConicGeneralFeature into a ConicGeneral image .
7523	Divide the x tuple by a vector value .
7524	Convert a GeoTuple into a matrix .
7525	Convert a DynamoT tuple into a tuple 3D tuple .
7526	Sets the rotation vector .
7527	Calculate the distance between two angles
7528	Returns true if the line intersects the line .
7529	Checks to see if a point is inside a plane
7530	Returns true if the line intersects the specified line .
7531	Performs interpolation between two vectors .
7532	Extracts quaternion from q
7533	Processes the input points and computes the hull
7534	Sets the motion to 0
7535	Converts a Segment into a homography matrix .
7536	Converts a Seet into a homography matrix .
7537	Creates a 2 - dimensional Segment from axis vectors .
7538	Returns true if the two vectors are identical to the specified tolerance .
7539	Convert a latlon to a unit vector .
7540	Determine whether two points are on a line .
7541	Calculates the squared radius of a line
7542	Calculates the closest point to the given line .
7543	Returns the closest point in the line .
7544	Returns the closest point in the plane to the given plane .
7545	Finds the closest point in the line .
7546	Returns the closest point in the specified pointB .
7547	Computes the transformed point .
7548	Computes the tranformation transform from the specified Segment .
7549	Returns true if this quadrilateral is equal to the given tolerance .
7550	Calculate the acute angle between two lines .
7551	Convert a line to a line parameter .
7552	Convert a line product to a line .
7553	Convert a line segment to a line segment .
7554	Convert a LineGeneralGeneralGeneral to a float .
7555	Converts a point in a line .
7556	Convert a point from two points .
7557	Convert a line to a line .
7558	Converts a line parameter from a source .
7559	Convert a line parameter to a line parameter .
7560	Converts a plane normal to a plane .
7561	Converts a plane normal to a plane normal .
7562	Converts a plane normal to a plane normal .
7563	Computes the coordinates of a point at a given point .
7564	Convert a plane to a vector .
7565	Returns true if the given T is identical to the given tolerance .
7566	Creates a copy of this object .
7567	Returns the squared norm of the vector .
7568	Computes the t - value for a point .
7569	Returns true if there are more elements .
7570	Returns true if the parabola is equal to the given tolerance .
7571	Calculate the center of a point .
7572	Calculates the acute angle between two lines .
7573	Returns true if p is infinity .
7574	Creates a list of points in a point using the specified standard deviation .
7575	Convert a H_H coordinate to a point in e .
7576	Subtracts a point from a and b
7577	Returns true if the two given coordinates are identical .
7578	Sets this rectangle to be equal to the specified rectangle .
7579	Converts an ellipse into an ellipse .
7580	Compute a point from the ellipse .
7581	Computes the angle of a point in an ellipse .
7582	Computes the tangent vector for the specified ellipse .
7583	Selects the tangent from an ellipse .
7584	Returns the corner at the specified index .
7585	Calculates the Euclidean distance between two lines .
7586	Calculates the Euclidean distance between the two points .
7587	Calculates the distance between two points .
7588	Computes the distance between a point and a point .
7589	Calculates the distance between a cylinder and a point .
7590	Returns the Euclidean distance between two lines .
7591	Computes the slope of a segmentA .
7592	Returns the Euclidean distance between the given point and p .
7593	Calculates the squared Euclidean distance between the two quadrilateral points .
7594	Returns the squared distance between a polygon and p .
7595	Computes the Euclidean distance from a polygon to a point .
7596	Calculates the distance from the line .
7597	Returns the squared distance between an ellipse and p .
7598	Calculates the 2 - dimensional Euclidean distance to the specified point .
7599	Add a new transformation to the path .
7600	Returns the closest point to the given line .
7601	Returns the closest point in the ellipse
7602	Computes the polynomial coefficients .
7603	Creates a vector from a vector .
7604	Convert a vector to a vector .
7605	Returns true if the two vectors are identical to the specified tolerance .
7606	Normalize vector .
7607	Creates a matrix matrix .
7608	Convert a DMatrixRMaj .
7609	Calculates the Euclidean distance between this and another point .
7610	Sets the ellipse .
7611	Normalize this vector .
7612	Calculate the angle between two points .
7613	Returns the quadrilateral of the given quadrilateral .
7614	Returns the value of a polygon
7615	Computes the mean value of a point .
7616	Calculates the order of points .
7617	Computes the normal for a set of points
7618	Check if polygon is convex .
7619	Multiply a scalar value .
7620	Calculates the maximum value of this vector .
7621	Returns the distance between the specified two points .
7622	Returns the squared Euclidean distance between two points .
7623	Generates a point from a plane on the plane .
7624	Creates a point from the specified mean and z values .
7625	Creates a list of points from the mean and standard deviations
7626	Calculates the mean point of a list of points .
7627	Computes the mean of point 3D points .
7628	Invalidates all credentials from the cache .
7629	Invalidates all cache entries that satisfy the given predicate .
7630	Combine a collection of collections to a set of Strings .
7631	Retrieves the set of server - specific configuration files from the given directory .
7632	Retrieves a set of configins for the server .
7633	Retrieves a set of server - specific xml files from the given server file .
7634	Parses an include node from the server file .
7635	Parses a single feature manager node .
7636	Downloads and returns a file containing jons .
7637	Retrieves a set of features from a set of files .
7638	Utility method to determine if a list of features should be opened .
7639	Returns true if the given collection contains the given name ignoring case .
7640	Returns the next product version .
7641	Extracts the symbolic name from the given jar file .
7642	Find a jar based on the installation map .
7643	Returns true if one file is a replacement jar
7644	Extracts the version string from the file name .
7645	Compare two versions
7646	Executes the product info command .
7647	Determine whether the given artifact is a spring - boot - boot - boot - jar file .
7648	Retrieves the value of an Arquillian property .
7649	Check if the specified file is working in this environment
7650	Move the given length by the given length .
7651	Returns whether two objects are equal .
7652	Loads an integer from the string representation .
7653	Helper to throw an Exception .
7654	Verify the TURT .
7655	Swaps a new puzzle with the specified target .
7656	Get the distance between all cells .
7657	Prints a message to the specified location using the specified format string .
7658	Prints a formatted message to the given locale and arguments .
7659	Show a chance to show a messaged decision .
7660	Write a variable .
7661	Returns a uniform range of values
7662	Compute a uniform vector
7663	Calculate the poisson distribution .
7664	Computes the value of an array .
7665	Main method for testing
7666	Capitalizes the first character of a word .
7667	Convert the first character of a word .
7668	Ensures that the given path ends with .
7669	Converts a CriteriaJoin to a SQL join
7670	Returns the token string for the given token .
7671	Extract the auth token from the request
7672	Extracts the auth token from the cookie list .
7673	Registers the given Guice binding to the given environment .
7674	Get all role permissions for a given parent .
7675	Add a projection list
7676	Convert a JobInfo object to a JobDetail .
7677	Convert a trigger to a trigger .
7678	Sets the repeat interval values .
7679	Sets start time .
7680	Send an item to the queue
7681	Writes the data to the output stream .
7682	Initialize the scheduler
7683	Returns a collection of all the fields of the given class .
7684	Returns a map of field names to field names .
7685	Create a response for an exception .
7686	Configures the encryptor with the given configuration .
7687	generate hash for attributes
7688	Generate a new token string
7689	Send an item .
7690	Generates a strong password .
7691	Change the password of a user .
7692	Retrieves a user from the store .
7693	Hashes a password .
7694	Verifies that the given string is a valid account name .
7695	Verify a password .
7696	Provide the search model .
7697	Attempts to commit the current transaction .
7698	Handles a transaction error .
7699	Starts the transaction .
7700	Configures field by name .
7701	Determines whether the resource is authorized to the given method .
7702	Parses an object to date .
7703	Returns the response .
7704	Binary access .
7705	Binary access .
7706	Apply a less than comparison to the given object
7707	Binary restriction to the given value
7708	Applies a greater than expression to the given value .
7709	Binary access .
7710	Creates a new restriction with the specified name and value .
7711	The IN operator
7712	Adds a namespace .
7713	Returns a resource representation with the given content .
7714	Creates a resource representation with the given rel .
7715	Returns a resource representation with the given value .
7716	Add a namespace to this resource .
7717	Determines whether the specified byte array can be decoded .
7718	Encode a string to a byte array .
7719	Returns true if the readers are equal
7720	Moves src to dst .
7721	Utility method to create a new file .
7722	Returns the base name of the given file .
7723	Adds the padding to the buffer .
7724	Get the short name of a class .
7725	Returns all the super types of the given class .
7726	Verifies a given password .
7727	Reads a string from system in system .
7728	Append a byte to the buffer .
7729	Append the given byte array to the current position .
7730	Creates a copy of the given array .
7731	Returns a new fraction of this Fraction .
7732	Creates a new Fraction from this Fraction .
7733	Returns a new Fraction that is multiplied by this Fraction .
7734	Divides this Fraction by the given Fraction .
7735	Returns the maximum of the specified values .
7736	Get the minimum of the specified values .
7737	Checks the given condition .
7738	Fetches data for a given location and altitude .
7739	Fetches data from a given location and returns it .
7740	Fetches data from the specified location and values .
7741	Retrieves a list of market data for an hour .
7742	Find the nearest forecast for a given date .
7743	Fetches data for a particular forecast query .
7744	Creates a simple long term forecast .
7745	Creates a new MeteoExtractor forecast for the series of events .
7746	Create a location from a string representation .
7747	Fetches the content of the resource .
7748	Creates a string name for the given point .
7749	Searches for a given point and returns it .
7750	Create a URI from the given string .
7751	Determines whether the current date falls within the specified date .
7752	Retrieves the point forecast for a given date .
7753	Returns the best fit forecast for the specified day .
7754	Fetches the content for a given position and latitude and latitude .
7755	Fetches data for a given latitude and language .
7756	This method will attempt to open the database
7757	Invoke a string method .
7758	Acquires an object from the given data source .
7759	Gets the referenced object .
7760	Gets the wrapped object .
7761	Get a configuration object from the service path .
7762	Retrieves whether the given configuration should be true .
7763	Creates an iterator for the given service .
7764	Returns the decoder for the given bootstrap configuration .
7765	Loads all services for the given interface .
7766	Returns the corresponding module for the given interface .
7767	Acquires input stream .
7768	Returns the size of this data source .
7769	Gets the wrapped data .
7770	Returns a string representation of the given index .
7771	Returns the prefix of this name .
7772	Returns true if the type is colored .
7773	Execute the regular expression .
7774	Calls the loop to find a loop .
7775	Sets the subset of the specified subexpression .
7776	find the concatenated subexpression
7777	dissect the given subexpression
7778	Clones an outs from one to another .
7779	Recursively recursively recursively
7780	Marks the left of a subre .
7781	Returns a copy of the nfa node .
7782	Parse a subre .
7783	Perform a deltraverse operation .
7784	Generate a new color for the given state .
7785	Clone a single word .
7786	Read the scannum .
7787	Parses a bracket .
7788	scan plain text
7789	Add a subre to the array .
7790	Caches a single character .
7791	Perform the actual rendering .
7792	Gets the color for a given codepoint .
7793	Return the pseudo color for this color descriptor .
7794	Process a subrange of a range .
7795	Updates the color descriptors for the given node .
7796	Assigns a color chain to a given color object
7797	Uncolor chain .
7798	Utility method to dump all color descriptors .
7799	Positions the lexer .
7800	fix prefixes
7801	Invoked when an interpolated expression is encountered .
7802	Retrieves the color for a given codepoint .
7803	Initialize state sets .
7804	Goes through the last state set .
7805	Returns a UnicodeSet for the given character .
7806	Retrieves a set for the given class name .
7807	Sorts a sequence of arcs based on first and last invariants
7808	Get a string representation of the flags
7809	Set a new state .
7810	Copies out outs from old to new state
7811	Copies the ins from one state to another .
7812	Copies the ins from one state to another .
7813	Copies all outputs from one state to another .
7814	drop a state
7815	Remove a state from a state .
7816	Copy an arc to a given location .
7817	Duplptraverse a state .
7818	Determines the special colors for the parent .
7819	dump the current state to disk
7820	dump a state to the log
7821	dump a state to a string buffer
7822	dump an arc to a string buffer
7823	dump an arc to a string buffer
7824	Optimized iteration .
7825	Returns the flags for the next operand .
7826	Combine two Arc types .
7827	Removes all unreachable states .
7828	Marks the given state as reachable .
7829	Check that a state can reach the given state .
7830	Iterates through all the states and removes empty branches .
7831	Implements the unempty state .
7832	Retrieves the rule parameters .
7833	Get a map of rule interpreter plugins .
7834	Retrieves a map of report plugins .
7835	Returns the selection for the given rule set .
7836	Runs the command line .
7837	Gets the error message .
7838	Generate standard options .
7839	Gather the options from the task factory .
7840	Gather task names .
7841	Interprets a command line .
7842	Get the command line .
7843	Execute a task .
7844	Read properties .
7845	Prints usage .
7846	Gets the home directory .
7847	Creates the class loader .
7848	Retrieves a set of ids that contain all ids of the specified cell .
7849	Get all ids that intersect the specified range .
7850	Returns the URI for the given target method and parameters .
7851	Add a path .
7852	Returns the number of routes .
7853	Add a route to the routing table
7854	Add a route to this router .
7855	Add a route to the endpoint .
7856	Returns true if any of the given request path tokens matches the given request path .
7857	Checks if the given property value is equal to the given value .
7858	Returns the file name for the given owner and name .
7859	Compares two folders .
7860	Compares two entries .
7861	Compares two Bookmarks .
7862	Set the servlet class last modified time .
7863	Return a list of the dependent dependants .
7864	Find a class by name .
7865	Parse the authorization header .
7866	Get a ProtectedFunctionMapper .
7867	Map a mapping to a function name .
7868	Creates a ProtectedFunctionMapper for the given function and method name .
7869	Resolves a method by prefix .
7870	Set the values from the given character array .
7871	Resolve a variable .
7872	Parses the given input file into nodes .
7873	Parses the given inFileName into nodes .
7874	Parses a tag file in the given file jar file .
7875	Perform the actual parsing .
7876	Create a Compiler
7877	Get resource as stream .
7878	Calculates the last modified time of the channel .
7879	Find class loaders .
7880	Checks whether the given class loader is the parent of this class loader .
7881	Start the class loader .
7882	Read the stream header from the stream .
7883	Returns a pagination result .
7884	Creates a MetaKey from the given string .
7885	Fill required resources .
7886	Get tag file info .
7887	Parse the implicit tld .
7888	Returns the checksum for the given file name .
7889	Retrieves the size of a given file .
7890	Validate the channel name .
7891	Seek to the given block .
7892	Locates a block by its position in the stream .
7893	Retrieves a list of artifacts for the given channel .
7894	Update the current state of the opts .
7895	Calculates the 1 - byte price for 1 .
7896	Calculate the list of available positions .
7897	Calculate the normal match price for a given position .
7898	Throws an expected byte .
7899	Throws an invalid byte .
7900	Scan all the tlds in the jar cache .
7901	Scans the TLD file for the given resource path .
7902	Add a jsp servlet wrapper .
7903	Return the parent class loader .
7904	Set a bytecode .
7905	Get the bytecode birth time of a bytecode .
7906	Saves the given class name to the given file .
7907	Check that we need to compile the jsp files .
7908	Initializes the classpath .
7909	Starts the thread .
7910	Stops the thread .
7911	Runs the compiler .
7912	Find a channel by name .
7913	Find a channel .
7914	Update the map of deploy groups for the given model .
7915	Returns the list of deploy groups for the given channel .
7916	Copies data from the input stream to the output stream .
7917	Parse the content of a JSP file into a JSP node .
7918	Parses attributes from jsp reader
7919	Parse quoted string
7920	Add an include directive .
7921	Parse jsp attribute and body .
7922	Add an attribute .
7923	Add a child node to the list
7924	Find attributes .
7925	Returns an iterator for all child nodes .
7926	Find all children with the given name .
7927	Returns a copy of this object .
7928	Find the alias for a given name .
7929	Set the thread to use .
7930	Unset the thread s thread .
7931	Returns the wrapped stream .
7932	Write an optional field to the writer .
7933	Writes a string to a writer .
7934	Add an element to the parent element .
7935	Add the first element with the given name .
7936	Write out the body content to the given Writer .
7937	Set the writer .
7938	Allocates the buffer size .
7939	Map the expressions to a JavaScript function .
7940	Returns the current state that matches the given key .
7941	Registers a model provider .
7942	Stream data from input stream to consumer .
7943	Webdav monitor .
7944	Determines if the request is authenticated .
7945	Close the output stream .
7946	Creates a new GsonBuilder .
7947	Encode for encoding .
7948	Concatenate the given map with the given metadata .
7949	Get a throwable attribute from the ServletContext .
7950	Checks if the given coordinates is a checkum extension .
7951	Finishes writing to the stream .
7952	Get the exception .
7953	Evaluates an expression .
7954	Create a prefix based on the OSGI configuration .
7955	Check if the file is XML .
7956	Parse a tag file and return a tag info object .
7957	Load a class file .
7958	Remove protobuf type files from temp vector .
7959	Main method .
7960	Set the uri root .
7961	Scans all files in the given directory .
7962	Locates and locates the uri root .
7963	Initializes the system class loader .
7964	Moves the position of the current position .
7965	Returns true if the string matches the given string .
7966	Returns whether or not the specified string matches the specified string .
7967	Skips until the first character in the given string .
7968	Skips characters until the next escape character is found .
7969	Skips until the end of the tag is found .
7970	Parse a quoted token .
7971	Pop a file from the current state .
7972	Returns an unclassified coordinates for this object .
7973	Filters a list of aspectInformation objects based on the given predicate
7974	Get missing IDs for all required aspect information .
7975	Sets the resource prefix .
7976	Sets the resource prefix .
7977	Encode prefix .
7978	Converts this node to a tree .
7979	Merges the errors in the binding result with the given result .
7980	Initializes the binder .
7981	Scans the channel aspectInformation object and returns a map of the result as a map .
7982	Unqualify the given path .
7983	Invokes the TagPlugin .
7984	Retrieves a byte array from the given size
7985	Retrieves an int array from the given size and fills it with zeros .
7986	Convert an artifact result into an AetherResult
7987	Get the resource as stream .
7988	Validate the given page .
7989	Adds an input stream to the stack .
7990	Retrieves the encoding from a jar file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Return the real path to a file
7994	Retrieves a URL from the resource .
7995	Open the resource as stream .
7996	Get the paths for a given path .
7997	Log a message and exception
7998	Add a filter .
7999	Calculate the number of bytes needed to keep the dictionary size .
8000	Returns the memory usage for a dict .
8001	Sets the contents of the preset dictionary in the given array .
8002	Moves the move window to the buffer .
8003	Fills the input stream with data from the given byte array .
8004	Process pending bytes .
8005	return the length of the match in the buffer
8006	Return the length of the match in the buffer .
8007	Verifies that the matches are in the list .
8008	Moves the seek position to the current position .
8009	Recycle the stream .
8010	Flush buffer .
8011	Clear output buffer .
8012	Flush the output stream .
8013	Closes the output stream .
8014	Writes the given string to the output stream .
8015	Allocate char buffer .
8016	Throws a javac error .
8017	Generates a list of the keys from the given map .
8018	Generate the Java class file .
8019	Compile the java files .
8020	Remove generated files .
8021	Initialize the JavaCompiler
8022	Determine whether the given path is in the system jar .
8023	Quote a character .
8024	Processes the declaration .
8025	Generate the tag handler pool for the given node .
8026	Generate an XML stream for an XML node .
8027	Generate the postamble .
8028	Generate postamble .
8029	Generate the tag handler .
8030	Generate the attributes of the tag handler .
8031	Parses the given input stream and returns a map of meta key .
8032	Export the given channel to the output stream .
8033	Validate an xml view .
8034	Get a tag handler .
8035	Parse an expression string into a Nodes Node .
8036	Find the first property that matches the prev extension .
8037	Determine whether the given URI is a JSP page .
8038	Print a comment
8039	Prints a string .
8040	Prints a string .
8041	print a single string
8042	Get the expression in the given expression .
8043	Checks that scope is valid .
8044	Escapes the given string .
8045	Validate expression
8046	Get the class name of the tag handler .
8047	Make a Java package name from the given path .
8048	Splits the given path in the given path .
8049	Makes a Java identifier .
8050	Convert a char to a string .
8051	Returns true if the specified key is a Java key .
8052	Adds the given property to the map .
8053	Convert a modifier to a string .
8054	Returns a sorted set of metadata entries .
8055	Runs the users .
8056	Extract basename from given name .
8057	Put a value in the cache .
8058	Load the data for the specified locator and key in the cache .
8059	Builds the metrics collection for the given payload .
8060	Resolves a number .
8061	Write object to output stream without tag .
8062	Retrieves the TTL for a given rollup .
8063	Creates the prepare statements for the metrics_locator .
8064	Track delayed metrics for a given tenant .
8065	Track delayed metrics for a given tenant .
8066	Read an unversioned double or varint from the stream
8067	Puts an unversioned double value into the output stream .
8068	Returns an unmodifiable map of all the properties .
8069	Create container .
8070	Schedule slots to be eligible for sampling .
8071	Clear the given slot for the given slot key .
8072	Add an event listener to the emitter .
8073	Add a listener to the emitter .
8074	Remove the given event .
8075	Emits an event with arguments .
8076	Returns a list of listeners for the specified event .
8077	Get the remote name .
8078	Append a rollup event to the output stream .
8079	Extract timestamp from file name .
8080	Start server .
8081	Compute a rollup type for the given source type .
8082	Creates IOContainer from configuration .
8083	Put a TTL value into the granularity map .
8084	Compute the maximum of the output headers .
8085	Formats the headers into a string .
8086	Formats the output .
8087	Register metrics .
8088	Set the thread pool name .
8089	Add the given metric index to the given metric .
8090	Get the complete metric names from the given metric index map
8091	Get tokens from a locator .
8092	Adds a batch of statements to the batch .
8093	Creates a granularity from a set of intervals .
8094	Computes the granularity from the requested duration less than or equal to the requested duration .
8095	Set the current server time .
8096	Returns a set of unique hosts
8097	Get the maximum number of connections per host .
8098	Retrieves an Iterable for the metric column families .
8099	add metrics to the container
8100	Add a collection of metrics to the database .
8101	Retrieves a set of locators for a given rollup context .
8102	Fetches the list of metric names from an elasticsearch index .
8103	Returns the regex to match the given query .
8104	Start the storage manager .
8105	Stops the upload .
8106	Returns true if locator is currently in the batch layer cache .
8107	Returns whether a locator is currently in the discovery layer cache .
8108	Returns true if locator is currently in token discovery layer .
8109	Check to see if the specified locator for a particular slot is ready for a particular slot .
8110	Set the delayed locator for a slot for a given slot .
8111	Maps the specified range into an iterable map .
8112	Creates an iterator for range for the specified granularity .
8113	Inserts the given collection of metrics .
8114	Insert metrics in the specified column family into the cache .
8115	Check if a metric is delayed .
8116	Return a bound statement for a given metric if it is delayed .
8117	Retrieves the metadata values for the given locator .
8118	Creates a serializer for the given type .
8119	Returns true if the content - type is valid .
8120	Returns true if the request is valid .
8121	Indexes a list of objects in the batch .
8122	Check that the aggregated metrics are present .
8123	Called when the downloadDir is in progress .
8124	Creates a new instance of Extractor based on the configuration .
8125	Determines if the current operating system name matches the os name .
8126	Starts the download process .
8127	Stops the queue .
8128	Creates a new instance of PNSignalingParals .
8129	Add a list of ice servers .
8130	Add an ice servers .
8131	Send a message to a user
8132	Send message to all peers .
8133	Gets theweireAdreserver .
8134	Gets the value of the userDefinedSimpleField property .
8135	Gets the value of the userDefinedAnyField property .
8136	Sets the value of the ApiProlder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the status .
8139	Gets the status of the XJ driver .
8140	Gets the status information .
8141	Gets the import modus .
8142	Gets the adressdicker .
8143	Gets the value of the waehrung .
8144	Gets the bodenabel property .
8145	Set the region property .
8146	Set the area value .
8147	Sets the value of the address property .
8148	Change the description .
8149	Sets the value of the renting rate period .
8150	Sets the value of the FurnishedAd .
8151	Set the value of the phone1 property .
8152	Set the value of the phone2 property .
8153	Sets the value of the contact name .
8154	Set the phone info .
8155	Set the main email .
8156	Sets the value of the cc email .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the Epart value .
8160	Set the javrgang value .
8161	Sets the GebaeudeRestart attribute .
8162	Set the bueroTyp value .
8163	Check if the given string is numeric or not .
8164	Sets the Gebiete value .
8165	Sets the gruppe value .
8166	Set the agent value .
8167	Gets the value of the property property .
8168	Set the stand value .
8169	Gets the value of the userDefine property .
8170	Sets the value of the zeiteininin .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haaus property .
8173	Gets the value of the bueroP axises .
8174	Gets the value of the forecasterBE property .
8175	Gets the value of the landUndologies property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinsistort .
8178	Gets the value of the terrain type property .
8179	Sets the uefang value .
8180	Sets the warn type .
8181	Get a country name from a country name .
8182	Retrieves the country 2 -3 code from an ISO33 code string .
8183	Returns the country code for a given country .
8184	Retrieves the country - specific country - 1 for the given iso2 string .
8185	Returns the name of a country .
8186	Translates a country name .
8187	Gets the value of the ANBieter property .
8188	Set the category property .
8189	Gets the value of the PDF property .
8190	Sets the value of the AktorArtifact .
8191	Set the realestate items .
8192	Sets the PATCH value .
8193	Downgrades the document to the previous version .
8194	Upgrade the document .
8195	Gets the value of the content property .
8196	Get all the field names .
8197	Sets the value of the blick property .
8198	Sets the pausmiete value .
8199	Set the monatsmiete value .
8200	Gets the parker .
8201	Sets the value of the lastenauf entry .
8202	Sets the ZustandArt attribute .
8203	Gets the value of the feld .
8204	Handle validation event .
8205	Dumps this record to a writer .
8206	Retrieves the value at the given position .
8207	Prints the entire record .
8208	Set the value at the given position .
8209	Set the ctype property .
8210	Sets the haustyp value .
8211	Gets the value of the energypass property .
8212	Sets the keyer value .
8213	Sets the grund type .
8214	Sets the value of the Geschl attribute .
8215	Set the beam type .
8216	Gets the value of the wiedholerSchedule property .
8217	Gets the value of the teilungs .
8218	Upgrade the document version .
8219	Gets the value of the bvorzt .
8220	Gets the value of the wunsch property .
8221	Sets the art value .
8222	Sets the modus value .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Set the handel typed attribute .
8226	Downgrades the document version to the previous version .
8227	Sets the value of thepi property .
8228	Sets the value of the api property .
8229	Sets the value of thepi property .
8230	Gets the value of the row property .
8231	Sets the DANZos value .
8232	Gets the value of the Anhang property .
8233	Gets the value of the objekt .
8234	Gets the value of the objekt .
8235	Gets the hauss category .
8236	Gets the AusstartsAttribute value .
8237	Gets the value of the vermarktarts part .
8238	Gets the value of the interessent property .
8239	Sets the wert value .
8240	Sets the value of the Ackerland property .
8241	Sets the berwart s value .
8242	Sets the bootsteende value .
8243	Sets the buero value .
8244	Sets the value of the Jaguar property .
8245	Sets the doppelhaus attribute .
8246	Sets the einfamil reference .
8247	Sets the EinzelGross property .
8248	Sets the value of the Einzelger .
8249	Sets the value of the garagen property .
8250	Sets the value of the GIS property .
8251	Sets the value of the expression property .
8252	Sets the value of the GewerBE property .
8253	Sets the value of the hotel property .
8254	Sets the value of the JAXBE property .
8255	Sets the value of the keineBigation attribute .
8256	Sets the value of the kleingewer .
8257	Sets the value of the lager property .
8258	Sets the value of the Mehamilies attribute .
8259	Sets the value of the Obpflflater property .
8260	Sets the parkhaus attribute .
8261	Sets the value of the producer .
8262	Sets the reihen value .
8263	Sets the stellplacet value .
8264	Sets the value of the villa property .
8265	Sets the value of the wald value .
8266	Set the Anbieter .
8267	Gets the value of the whnung .
8268	Gets the value of the Grundstueck property .
8269	Gets the value of the einzel handel property .
8270	Gets the value of the steagerLager property .
8271	Gets the value of the parkenen .
8272	Gets the value of the freizeitimmits property .
8273	Gets the value of the objektartZetter .
8274	Gets the value of the stellattart parameter .
8275	Sets the maximum Dauer value .
8276	Gets the value of the feature property .
8277	Set the zimmer type .
8278	Upgrade the document version .
8279	Sets the value of the keine attribute .
8280	Sets the erwaer property .
8281	Sets the value of the solarhening attribute .
8282	Sets the pelletion value .
8283	Set the value of the gas value .
8284	Sets the value of the oel property .
8285	Sets the value of the ferner .
8286	Sets the strom value .
8287	Sets the value of the kohle property .
8288	Returns a random string .
8289	Returns a random string of the specified length .
8290	Returns a random string of the given length .
8291	Gets the warnings value .
8292	Set the value of BENUTzer .
8293	Sets the value of the object property .
8294	Gets the value of the feed .
8295	Sets the moeb value .
8296	Gets the value of the serviceleist list .
8297	Set the sub - administrative area .
8298	Set the value of the city .
8299	Set the locality value .
8300	Downgrades the document to the previous version .
8301	Upgrade the document version .
8302	Set the value of the landscape property .
8303	Gets the value of the field property .
8304	Upgrade the document version .
8305	Gets the value of the adType property .
8306	Sets the value of the GarggewyType property .
8307	Set the plattart attribute .
8308	Gets the datenvender .
8309	Gets the knebanlage .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Set the new development availability .
8313	Set the value of the directions property .
8314	Set the co2 rating value .
8315	Set the value of the energy rating .
8316	Set the view title .
8317	Sets the property status .
8318	Sets the values of the pictures property .
8319	Sets the value of the bbaar attribute .
8320	Upgrade document version .
8321	Set the parken typed property .
8322	Setter for the alter attribute .
8323	Set the freize tip .
8324	Set the telefonart attribute .
8325	Set the emailart attribute .
8326	Sets the value of the odoSalesSales .
8327	Set the ODORentalRental value .
8328	Create a user defined simplefield XML element .
8329	Gets the value of the fehler .
8330	Sets the Erbp Exception .
8331	Gets the value of the stp .
8332	Gets the value of the valuelist property .
8333	Sets the minDauer value .
8334	Sets the zins typed value .
8335	Gets the value of the photo property .
8336	Set the metadata for this feed .
8337	Set the value of the projects property .
8338	Set the feed properties .
8339	Downgrades the version to the previous version .
8340	Upgrade version from previous version .
8341	Gets the value of the immuticle property .
8342	Gets the value of the objekt .
8343	Gets the value of the fehler liste .
8344	Gets the value of the status property .
8345	Set the value of the SonaryTyp property .
8346	Sets the DANZZO value .
8347	Gets the value of the danzen property .
8348	Gets the value of the DANzenFeatures property .
8349	Check whether the given exception is compatible with the thrown exceptions .
8350	Set bindings .
8351	Bind a prefix to a namespace URI .
8352	Remove a prefix from the namespace URI .
8353	Determines whether the given content has an opening tag .
8354	Consumes a comment token .
8355	Consumes the first comment at the given line .
8356	Returns the index of a comment token .
8357	Initialize logging
8358	Bind a prefix to a namespace URI .
8359	Adds an iterator to the composite .
8360	Add an option .
8361	Add string option .
8362	Adds an integer option .
8363	Add long option .
8364	Adds a double option .
8365	Add boolean option .
8366	Parse the command line arguments .
8367	Creates an instance of the given class .
8368	Invoked after the concurrency limit .
8369	Sets the target object .
8370	Prepares the object for the method .
8371	Find the matching method for this method .
8372	Convert an integer into an unsigned string .
8373	Serialize an object to a byte array .
8374	Deserialize the given byte array .
8375	Get the child element by tag name .
8376	Retrieves the textual value of the given child element .
8377	Retrieves all child elements of an element .
8378	Returns true if the node s name matches the given node name .
8379	Returns true if the node s name matches the given one
8380	Set the size of a string
8381	Monitors calls to a specific handle .
8382	Add an entry to the tracker .
8383	Ensures that the monitoring thread is alive .
8384	Calculates the string for a mobile phone number .
8385	Starts a prefix mapping .
8386	Ends the end prefix mapping .
8387	Add a callback .
8388	Parses the jar .
8389	Returns the text color of a specific item
8390	Sets the values in the list .
8391	Calculates the color of an item based on its position .
8392	Set text size .
8393	Calculates x value based on the x value of the item .
8394	Retrieves the intro data from the remote library .
8395	Returns the names of the keywords in the test library .
8396	Get the arguments for a specific keyword .
8397	Retrieves the documentation for a particular keyword .
8398	Start the remote server .
8399	Stop the remote server
8400	Starts the remote server .
8401	Convert properties from file to JSON format .
8402	Convert the given file to JSON .
8403	Converts an input stream to JSON .
8404	Converts properties to JSON string .
8405	Converts a map of strings to a JSON string .
8406	Convert a map of properties to a JSON object .
8407	Converts a map of properties to a map of properties .
8408	Convert properties to JSON string .
8409	Calculates the radius of a shadow .
8410	Creates an OcspFetcher .
8411	Find an immediate certificate from the certificate .
8412	Execute the MarkdownDirection
8413	Preprocesses all the files in the given directory .
8414	Utility method to substitute variables in the given template string .
8415	Get the title for a set of headers .
8416	Adds the title to the given HTML file .
8417	Substitute the variables in the given content .
8418	Updates the relative paths in the HTML .
8419	Copies files from one directory to another .
8420	Checks if the given path is part of the host .
8421	Wrap a child view at a specific index .
8422	Start an animation for the view
8423	Fade the view downwards .
8424	Calculate percentage based on width
8425	Applies the view to the view .
8426	Generates an intent to launch an intent .
8427	Launch the Activity
8428	Get a list of TODos .
8429	Get Fact Sheet list .
8430	Download file from response .
8431	Build a HTTP client .
8432	Create an AccessControlEntityResponse
8433	Implementation of updateDataModel
8434	Create a full export request
8435	Get the export list .
8436	Sets the OAuth2 token provider host .
8437	Sets the client id .
8438	Process the GraphQL multipart request for the given GraphQL request
8439	Get the list of bookmark lists for a bookmark type
8440	Adds permissions to the graph .
8441	Writes the given graph permissions to the graph .
8442	Add a set of rule sets to the MarkLogic .
8443	Closes the output stream .
8444	Execute a SELECT statement .
8445	Creates a dataset graph for a database connection .
8446	Limit the number of threads per process .
8447	Resize the operation .
8448	Apply a rotation on the specified degrees .
8449	Sets the gravity value .
8450	Strips profiles .
8451	Set the text font .
8452	Add a source image to the job .
8453	Add an image to the job .
8454	Parse the given arguments to the target object .
8455	Prints usage information about the given target object .
8456	Extracts the time unit from the given time string .
8457	Parses the target object .
8458	Execute the given URL .
8459	Execute a file .
8460	Reads actions from a file .
8461	Sorts the given list of rectangles by size .
8462	Render the given template text
8463	Retrieves the file for a specific slide .
8464	Check if the given mouse event is within the screen .
8465	Perform a selection overlap with the specified element .
8466	Execute an operation on the SQS queue .
8467	Executes an outbound operation .
8468	Require a file .
8469	Retrieves or creates a temp directory if one exists .
8470	Creates a new log value map .
8471	Log a message at the TRACE level .
8472	Log a trace event with a specific message .
8473	Log a message at debug level .
8474	Log a debug event with a specific message .
8475	Log a message at the INFO level .
8476	Logs an info message with a specific message .
8477	Information about an event .
8478	Log a message at the WARN level .
8479	Log a warning event with a specific message .
8480	Log a message at the ERROR level .
8481	Logs an error with the specified message and message .
8482	Add the given source location to the log .
8483	Helper method to start the steno wrapper .
8484	Write the given keys and values to the JSONGenerator .
8485	Serialize a throwable .
8486	Converts this object to a log value .
8487	Retrieves the caller data for the given logging event .
8488	Encodes the given value with the given encoder .
8489	Creates a new database
8490	Check the position for a given array position .
8491	Parses the save attributes of the cell .
8492	Save the data to the object in the context .
8493	Refresh the sheet row from the given context
8494	Parse save attribute string .
8495	Get save attr list from row
8496	Get the save attr from a list of attributes
8497	Sets the save object in hidden column .
8498	Sets the save attributes for the given sheet .
8499	Sets save attributes for a row .
8500	Prepare and store the data context for a cell .
8501	Format a number .
8502	Put shift attributes .
8503	Set the wb - bb .
8504	Retrieves the wrapper for this XSSFE instance .
8505	Get the formula evaluator .
8506	Recalculate the maximum number of columns that can be used for this sheet .
8507	Loads a web sheet from an input stream
8508	Load a web sheet
8509	Load a sheet by name .
8510	Export file .
8511	Performs the save .
8512	Process the submit .
8513	Populates the component from the body .
8514	Gets the current sheet configuration .
8515	Reads the object from the stream .
8516	Returns the locale for the given component .
8517	Obtains the picture from the rendered picture view .
8518	Gets the cell helper .
8519	Get picture helper .
8520	Gets the validation handler .
8521	Returns the chart helper .
8522	Converts a set of ptgs to a list of ptg groups .
8523	Convert a Ptg array to a list of Ptg groups
8524	Helper method to convert Ptg to Ptg for a particular shift .
8525	Extracts a single Ptg .
8526	Utility method to assemble a list of SerialRow objects
8527	Assembles the list of serial rows from the given Rows mapping
8528	Fix up a ref3 row relative to a row .
8529	Builds a dynamic row for a refpog .
8530	Builds a row for an area ptg .
8531	Get the bg color from the specified theme
8532	Retrieves the X color from a sp color table .
8533	Returns the automatic fill color for the given theme
8534	Get the X color from the scheme color table
8535	Creates X color from ctr rgb color
8536	Get the X color with auto fill parameters .
8537	Convert an XSSF color to a cl color .
8538	Convert an XSSF color object to a short array .
8539	Get bg color from cell style
8540	Finds a component name from a component .
8541	Populates the map of attributes for the given component .
8542	Find attributes of an object based on the method name .
8543	Set a property on an object
8544	Gets the value of an object property .
8545	Set control attributes for a cell .
8546	Find map form attributes .
8547	Sets up the picture charts for a cell .
8548	Set the chart style for a cell .
8549	Set picture style for a cell .
8550	Initialize the charts map .
8551	Retrieves the title of the chart .
8552	Sets the style of a series .
8553	Creates a chart using chart data .
8554	Setup the default bar style .
8555	Initialize the charts map
8556	Retrieves the id of a chart from its parent .
8557	Initialize the charts map
8558	Generates a single XF chart .
8559	Evaluates the expression to a collection object .
8560	Gets the full name from a row .
8561	Rebuilds the upper level formula .
8562	Sets up the upper level formula for a given cell .
8563	Build a cell formula for shift formulas .
8564	Gather rows mapping by full name .
8565	Change the index number in the shift map .
8566	Changes the final length of an upper level .
8567	Change the index number in the hidden column .
8568	Sets the full name in the hidden column .
8569	Retrieves the original row number from a row .
8570	Sets the original row number in hidden column .
8571	Finds the rows mapping from a shift map .
8572	Finds the rows mapping from a full name map .
8573	Find the item in a collection
8574	Builds the current configuration range .
8575	Returns whether the given row is static .
8576	Returns whether a row is static .
8577	Replace expression with cell value .
8578	Retrieves the index of the merged region .
8579	Get the list of skipped cells from a given sheet .
8580	Add the skip cell to the list in the given cell .
8581	Builds the comment from the given SheetAlias list .
8582	Builds a cell comment from a cell alias .
8583	Builds the configuration map .
8584	Gets the configuration for the given sheet .
8585	Build the form command from the given sheet configuration .
8586	Verify the last cell .
8587	Builds the configured sheet .
8588	Check and repair the last row
8589	Builds a list of commands from the given sheet .
8590	Sets the parent for a command .
8591	Checks if the list has at least one command in the list .
8592	Add command to sheet configuration map
8593	Copy the template for the given sheet .
8594	Builds the list of commands for the given cell .
8595	Move a line to a cell .
8596	Processes the given line and adds it to the list .
8597	Move a comment to a map .
8598	Creates a config command .
8599	Build attribute map .
8600	Retrieves the configuration for a given form command
8601	Sets the footer of a sheet .
8602	Sets the body of a sheet .
8603	Set header of sheet .
8604	Delete row .
8605	Remove all the ranges from the shift map .
8606	Finds the list of full name from the given row .
8607	Get each command based on the variable name .
8608	Insert an empty object into the data context
8609	Deletes the object in the context .
8610	Finds the collection data in the given context .
8611	Index the given configuration range in the given map .
8612	Returns whether the row should be added to the given row .
8613	Applies each template at the given index to the sheet .
8614	Evaluates a normal cell .
8615	Evaluates the formula for the given string .
8616	Returns true if the specified string is a user formula .
8617	Adds a comment to a cell .
8618	Evaluates a script expression .
8619	Remove all rows in the specified sheet .
8620	Removes a single row from the sheet .
8621	Removes the cached cell for the given row .
8622	Removes rows in the body from the body .
8623	Retrieves a picture view from the current page
8624	Retrieves the chart view id from the current page .
8625	Applies the given value to the given value .
8626	Gets the cell value with the given formula key .
8627	Get the string value of the cell without format .
8628	Get cell string string value with cell type
8629	Get cell string string representation with number type .
8630	Set cell value .
8631	Sets the string value of a cell .
8632	Sets the value of a cell .
8633	Sets the value of the given cell on the given cell .
8634	Set cell value .
8635	Copies rows from source to dest sheet .
8636	Copies a single sheet from one sheet to another row .
8637	Copies the source cell to the destination row .
8638	Copies the value of the given cell to the given new cell .
8639	Copies the style from source cell to the destination cell .
8640	Clone a comment on a cell .
8641	Creates an Anchor for a comment .
8642	Creates a comment for a cell
8643	Match a comment to a cell .
8644	Get VMLDrawing from cell .
8645	Get the CT shape from a cell .
8646	Gets the cell style from source cell .
8647	Convert a cell to a cell .
8648	Retrieves a row column from a component attribute .
8649	Retrieves the initial rows from the given configuration .
8650	Get a faces row from a body row
8651	Retrieves a faces cell from a body row
8652	Retrieves a POI cell from a sheet
8653	Get s key from poi cell .
8654	Get or add a tie cell in the map if it does not exist .
8655	Returns the current data context name .
8656	Evaluates the expression .
8657	Evaluates the given context .
8658	Write this object to the output stream .
8659	Remove a row from the map .
8660	Merge the given Rows into this one .
8661	Recovers the serial row from the given sheet .
8662	Retrieves the type of the chart .
8663	Convert a style to a BasicStroke
8664	Initialize the chart data from XSSF chart
8665	Set up the chart data
8666	Initialize the XSSF map for a sheet .
8667	Initializes the XSSF map for a sheet
8668	Retrieves the chart id of a CT2 chart .
8669	Extracts the chart id from a child node map .
8670	Build each object in the collection
8671	Save the data in the context .
8672	Recalculate the formula .
8673	Retrieves a POI cell from a tab .
8674	Retrieves a faces cell from the current page .
8675	Restore data context .
8676	Retrieve the last collected data context .
8677	Return true if we need to restore data context .
8678	Prepare collection data context .
8679	Change the row reference .
8680	Sets the first row reference .
8681	Set the last row plus the last row .
8682	Build cells for a given row .
8683	Build a single cell .
8684	Reads the data from the stream .
8685	Builds the categories list from the given CTA data source .
8686	Builds the series list .
8687	Builds a chart series in a list
8688	Creates a list of colors from a list of DTDs .
8689	Get the CTpt with the specified index .
8690	Set the command index map
8691	Extract picru map from a workbook .
8692	Index all of the picture structures in the sheet .
8693	Index photo in map
8694	Generate a picture style for a cell .
8695	Generate a string for chart style
8696	Get anchor size .
8697	Returns the pattern .
8698	Get the chart view .
8699	Recover this cell .
8700	Get row style .
8701	Get the cell style for a cell .
8702	Get cell font color .
8703	Get the string decoration for a cell .
8704	Get cell style .
8705	Get the style for the cell .
8706	Get cell alignment from cell style
8707	Get vertical alignment from cell style .
8708	Calculates the total height of a sheet
8709	Setup cell style .
8710	Get input type from cell s cell .
8711	Retrieves a set of resource paths .
8712	Get resource as stream .
8713	Removes the prefix from the resource .
8714	Evaluate input type .
8715	Find bean by name .
8716	Join an array with the given separator .
8717	Round a double value to the specified places .
8718	Retrieves the tab type .
8719	Returns the tab style .
8720	Get the default date pattern .
8721	Returns the decimal separator for the given default locale .
8722	Get the separator by default Locale .
8723	Set the tie command alias list .
8724	Builds a list of variables to use for a given sheet .
8725	Build the watch list for a cell .
8726	Adds the given row to the watch list if it is not present .
8727	Returns true if string is a valid command string .
8728	Parse the attributes of a comment .
8729	Get attribute key in map by cell .
8730	Parse attributes on a cell .
8731	Returns the position of the bracket at the given start position .
8732	Parses an attribute string into a map .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Splits an attribute .
8736	Process special attributes .
8737	Process calendar attributes .
8738	Process the select item attributes .
8739	Gathers special attributes .
8740	Parses a comment to map .
8741	Find the index of the first non - cell name in the input string .
8742	Removes the chars from the given string .
8743	Convert a number to the excel column name .
8744	Convert a column name to an integer .
8745	Get cell by cell reference .
8746	Calculate the 2 - bit height units of a given height .
8747	Checks if a string is a date .
8748	Parse a date string .
8749	Check if str is numeric .
8750	Decides whether the given character should continue to continue .
8751	Set a property on an object
8752	Compare two cell index .
8753	Returns whether the given child is inside the given configuration range .
8754	Clear hidden columns in the given sheet .
8755	Delete hidden columns from a row
8756	Deletes a cell from a row .
8757	Process event .
8758	Called when new status changed .
8759	Validate with the current row in current page and row in the current page .
8760	Validate by TieWebSheet
8761	Checks the error message from the context .
8762	Validate all rules for a single cell .
8763	Validate the given value and replace it with the given expression .
8764	Validate that the target cell is valid .
8765	Validates that all rows in the current page are valid .
8766	Validate row in current tab
8767	Validate a row in the current sheet
8768	Refresh cells in current page .
8769	Refresh all cells in the cell in the given row .
8770	Set submit mode in view map .
8771	Perform validation before validation .
8772	Clear this template
8773	Load header rows .
8774	Load the header row without the configuration tab .
8775	Fill header cells .
8776	Get the header column style .
8777	Get width style .
8778	Loads the header row with the given configuration tab .
8779	Get the column width .
8780	Clear sheet data
8781	Initialize tabs .
8782	Load data context .
8783	Refresh the data for this sheet .
8784	Refresh data for a row .
8785	Refresh data for a cell .
8786	Returns the index of the tab with the given tabname .
8787	Load a work sheet
8788	Prepare work sheet .
8789	Sets the first page of the view .
8790	Saves the object map in the view map
8791	Set the row info .
8792	Load body row .
8793	Assemble the body row .
8794	Refresh cell .
8795	Process a refresh cell .
8796	Creates dynamic columns for the specified tab .
8797	Add a row to the sheet .
8798	Refresh body rows in the parent panel .
8799	Execute the setUnsavedState
8800	Returns the boolean value of the status of the view .
8801	Find the common constructor for the given type .
8802	Write input stream to output stream .
8803	Write long .
8804	Writes a line to the Writer .
8805	Set the traffic stats tag for the result .
8806	Add a bitmap to the result .
8807	Adds an asset file descriptor .
8808	Remove the parameter with the given name .
8809	Add a header to the request .
8810	Clear the result .
8811	Call this method to play the playback .
8812	Call this method to stop playback .
8813	Bind to the context .
8814	Unbind the radio listener
8815	Removes a listener from the streaming stream .
8816	Store image to disk .
8817	Converts stream to string .
8818	Converts an InputStream to a String using the provided BufferedInputStream .
8819	Send data to the output stream .
8820	Returns the number of available bytes .
8821	Closes the input stream .
8822	Read data from the stream .
8823	Reset input stream .
8824	Send the start .
8825	Send the content header to the given OutputStream .
8826	Send the content type header .
8827	Send the transfer encoding header
8828	Send the end of the header .
8829	Send end .
8830	Sends an array of parts to the output stream .
8831	Calculate the total length of an array of parts
8832	Determine whether the URL should be redirected .
8833	Sends the not Modified response .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header for the given file .
8837	Closes the channel .
8838	Overwrites the content header to the given OutputStream .
8839	Sends data to the output stream .
8840	Installs the cache .
8841	Retrieves the working directory .
8842	Gets the cache response .
8843	Creates an input stream for the body from the snapshot .
8844	Reset bitmap .
8845	Retrieves an SSL context for the given keystore .
8846	Validates a keystore .
8847	Replace the scale type .
8848	Stop location listeners .
8849	Get a PendingIntent using the specified request builder .
8850	Disconnect the given connection .
8851	Bind to the service
8852	Unbind the service .
8853	Notify all views that the view has changed .
8854	Open the connection to the target channel .
8855	On accept data .
8856	Called when the application is reset .
8857	Wait for the loader for the specified time .
8858	Helper method to set text or hide the given text
8859	Hide soft input .
8860	Shows soft input .
8861	Toggles soft input from given text view .
8862	Calculate width .
8863	Called when an exception occurs .
8864	Clear the cache for a given url .
8865	Populates an image .
8866	Cancel image loading .
8867	Create an image consumer for the given view .
8868	Sets an image result from a result consumer .
8869	Sets the loading image .
8870	Starts an image loader .
8871	Put an image into the memory cache .
8872	Release a buffer .
8873	Invoked when the URL connection is prepared .
8874	Add a parameter to the request .
8875	Establishes a connection to a URL .
8876	Returns the MD5 hash of the given text .
8877	Returns the String identifying the given CUblas
8878	Returns the String identifying the given CUblas stat
8879	Checks the given result and throws a CudaException with the given result .
8880	Checks to see if the CUBLAS status is SUCCESS .
8881	Add a single lexeme id to the lexer .
8882	Add an ending occurrence to the end of the list
8883	Get the estimated estimate for the end id .
8884	Print a long description .
8885	Verify that the given attribute value matches the given attribute value .
8886	Convert attribute values to KAML format .
8887	method to verify and set an attribute value
8888	Removes the kamols markup format from the given string .
8889	Gets the current metrics .
8890	Add the query string to a query string
8891	Process a list of metric data .
8892	Parses a JSON string .
8893	Gets the connection config .
8894	Perform the actual operations .
8895	Create a generic code list reader .
8896	Create a generic code list reader .
8897	Create a reader for GC04 column set .
8898	Create a generic code list reader .
8899	Create a generic code list reader .
8900	Create a reader for GC10 column set document .
8901	Get the id of the passed column .
8902	Get the row value for the passed row ID .
8903	Get the column with the specified ID .
8904	Get all key IDs in the passed column set .
8905	Get the key of the passed column set by ID .
8906	Check if the passed column id is a key column .
8907	Create a column .
8908	Create a key .
8909	Set the number of lines to skip .
8910	Add a column at the specified index .
8911	Create a generic code list writer .
8912	Create a generic code list writer .
8913	Create a GenericodeWriter for GC04 column set .
8914	Create a generic code writer .
8915	Create a GC10 code writer .
8916	Create a GC10 column writer .
8917	Factory method for GC4 code list .
8918	Factory method for GC4 code list .
8919	Factory method for GC4 .
8920	Factory method for GC10 code list .
8921	Create a generic CodeListValidator for GC10 .
8922	Returns a validator for GC10 column set .
8923	Send the app feed back to server
8924	Sets the context .
8925	Get the log level .
8926	Get capture on the thread pool .
8927	Set the maximum number of bytes required to store the log store .
8928	Prepend the given metadata to the given message .
8929	Add the stack metadata to the stack trace
8930	Creates a JSONObject with the given information .
8931	Log location information
8932	Set the user identity
8933	Retrieves a byte array from the given file .
8934	Starts the location updates .
8935	Size the given region .
8936	Size of the given region .
8937	Size of a region .
8938	Reads a snapshot record .
8939	Writes the current timestamp to the given stream .
8940	Returns an array of time values for the specified index .
8941	Convert a file to a chart
8942	Get a pool for a given server name
8943	Get a pool for a given locator
8944	Checks if a region is already in the JMX
8945	Get a member by its name .
8946	Returns a list of host names .
8947	Looks up a host name for a host .
8948	Check if data is an exception and send an exception .
8949	Returns a collection of results with the given function .
8950	Flattens the given collection to the given collection .
8951	Execute the query .
8952	Creates a cache listener for the entry .
8953	Creates a cache listener for deletion after deletion .
8954	Handle exception .
8955	Returns an array containing all onRegionFilterKeyFacts as a copy of the onRegionFilter object .
8956	Execute the export function .
8957	Returns a list of host names .
8958	Execute the function .
8959	Get the name of the application .
8960	Constructs the SSL configuration from the given Properties .
8961	Get a region by name .
8962	Get region by name .
8963	Construct the comparison between source and target map
8964	Returns true if the value is at the given insertion point .
8965	Close this stream .
8966	Dumps all gfs files in the given directory to a csv file .
8967	Main entry point for testing .
8968	Retrieves a JMX object .
8969	Stops members on a host
8970	Shutdown member .
8971	Shut down the JVM .
8972	Shuts down a redundancy zone .
8973	Stores pagination map in the result keys .
8974	Retrieves a map of the results of the specified page criterion .
8975	Imports a region .
8976	Check that the locators match the locators
8977	Builds the check sum map .
8978	Builds a hash map for a given region .
8979	Returns the value of the given column in the given table object .
8980	Returns true if the given TypeMirror is a type of integer .
8981	Serialize an object to a byte array .
8982	Deserialize a byte array .
8983	Creates an instance of the given class .
8984	Check for a table id .
8985	Check for a column .
8986	Check for a super type .
8987	Generates the schema for the table
8988	Generate Java code .
8989	Emit getId method .
8990	Converts the query to observable
8991	Checks if the given column name is equal to the given column name .
8992	Returns the value or the given string if the string is blank .
8993	Capitalizes the first character of the given string .
8994	Returns true if the given TypeMirror is a type of the given type .
8995	Get descending order .
8996	Reads the temperature value from the current device .
8997	Get the name for a given type .
8998	Log a message .
8999	Logs an error message .
9000	Returns a list of all icon fonts .
9001	Retrieves a list of icons .
9002	Creates the SLD editor layout .
9003	Gets the background decoration .
9004	Raises x .
9005	Set the values to the given array .
9006	Compute an integer by the given scale .
9007	Compute the root root of an integer .
9008	Compute the sum by the given scale .
9009	Compute a number to be ln .
9010	Calculate new nton number .
9011	Computes the concatenation of x and the given scale .
9012	Calculate the sum of x times .
9013	Compute the square of the x value by the specified scale .
9014	Print the pi string .
9015	Generate a timestamp string .
9016	Set limits .
9017	Add a value to the histogram .
9018	Prints the length .
9019	Adds the given complex to this complex .
9020	Subtract a complex number from this complex .
9021	Multiplies the given complex value .
9022	Divide a complex number .
9023	Sets this matrix to the given matrix .
9024	Get a row vector from this matrix .
9025	Get a column vector from this matrix .
9026	Set the values from the given array .
9027	Returns the transpose of this matrix .
9028	Add the given matrix to this matrix .
9029	Subtract the values from this matrix .
9030	Multiplies the matrix by the given value .
9031	Computes the product of this matrix .
9032	Print the matrix to the given stream .
9033	Set an image resource .
9034	Validate coefficients .
9035	Compute the next position .
9036	Clear the internal sld .
9037	Convert a sld descriptor to an XML representation .
9038	Convert a sld descriptor to an sld .
9039	Validate sld .
9040	Validate sld .
9041	Calculates the area of a given point .
9042	Set this matrix from a matrix .
9043	Sets this vector to the specified array .
9044	Compute the inverse matrix .
9045	Calculate the determinant .
9046	Returns the normalized norm of this matrix .
9047	Solve a column vector .
9048	Prints the matrix to the given output stream .
9049	Loop forward elimination .
9050	Performs a forward substitution .
9051	Performs a linear substitution .
9052	Advance x to a vector .
9053	Convert square matrix into a square matrix .
9054	Generate a random vector .
9055	Iterate over the iteration loop .
9056	Compute the next position .
9057	Check position .
9058	Compute the next position .
9059	Check that the interval is valid .
9060	Compute the given addend value .
9061	Compute a single - bit integer by p .
9062	Raises the given power to the given power .
9063	Perform a linear iteration of the algorithm
9064	Get sldManager .
9065	Convert a long value to a char array .
9066	Decompose the sign of the given bits .
9067	Print the current value .
9068	Validates that the float exponent value is valid .
9069	Validates that the IEEE 64 - bit exponent value is a float value .
9070	Validates that the doublebased exponent value is valid .
9071	Validates that the IEEE 64 - bit exponent value is positive .
9072	Creates a SldGwt service async .
9073	Compute the next random value .
9074	Get the next random value .
9075	Compute the next random number of random values .
9076	Create an array of Sieve .
9077	Returns an array of prime factors for the specified pn .
9078	Iterate over the iteration loop .
9079	Compute the next position .
9080	Checks that this position is equal to the previous one .
9081	Set the JavaFX application .
9082	Sets the configuration from the given file .
9083	Sets the default configuration .
9084	Initialize FXML loader .
9085	Set the latl location .
9086	Extract the host - port pair from a service .
9087	Retrieves an attribute definition for the given attribute definition .
9088	Returns true if the given attribute definition matches the given attribute definition .
9089	Sanitize a string .
9090	Set the geocode address .
9091	Applies a list of components to the request .
9092	Query the names for the services
9093	Query the service instances by name .
9094	This method is used to get a list of all the collaborators to by the authenticated user .
9095	Get the meta data for a decimal
9096	Change the password for a logged in user
9097	Get all users
9098	Get the gravatar for the given email address
9099	Get the gravatar for a given user
9100	Populate from ElasticSearch JSON object .
9101	Returns the ElasticSearch field type .
9102	Create a flow step .
9103	Update a flow step
9104	Retrieves a flow step by id .
9105	Get a FlowStep by step
9106	Get a list of all steps by flow .
9107	Delete a flow step
9108	Force delete flow step
9109	Populate the list of all the form fields .
9110	Closes the connection .
9111	This method is called when an object is received .
9112	Called when the connection is closed .
9113	Get the ECHO messages from the return value set .
9114	Returns a list of all items in the user .
9115	Create a new table record .
9116	Delete form container
9117	Gets the form flow history .
9118	Gets the form and field history .
9119	Gets the most recent data for the given form param
9120	Locks the form container .
9121	Unlock the form container
9122	Unlock a form container
9123	Map a form container to a form container
9124	Convert a list of roles to a list of roles .
9125	Create a form definition
9126	Update form definition
9127	Get a form definition by id param id .
9128	Get form definition by name .
9129	Gets all by the given logged in user .
9130	Delete form definition
9131	Generate the key from the form definition .
9132	Initialize memcached client
9133	Shutdown the pool
9134	Converts a string to a long .
9135	Convert a document to a PDF file
9136	Get the field values for a form id
9137	Create a flow step entry .
9138	Create a flow step exit rule .
9139	Create a flow step rule .
9140	Update a flow step rule .
9141	Update flow step exit rule .
9142	Update flow step rule .
9143	Moves a flow step entry up .
9144	Move a flow step entry down .
9145	Delete a flow step entry .
9146	Delete a flow step exit rule .
9147	Delete a flow step rule
9148	Initialize the encrypted data from the auth response param
9149	Get all user queries
9150	Get all the roles .
9151	Get the service ticket as hex string .
9152	Create a field text mask .
9153	Create a text barcode field .
9154	Create a decimal spinner field .
9155	Create a decimal slider field .
9156	Create a new field .
9157	Update field text mask .
9158	Update a field in a formcode
9159	Update field decimal spinner .
9160	Update the field decimal slider
9161	Update a field in a form field .
9162	Gets a field by name .
9163	Gets the fields based on the form name and the logged in user .
9164	Gets the form fields based on the specified form type id and logged in .
9165	Delete a Field
9166	Force delete field to be deleted
9167	Get the meta data for a table field
9168	Update the field value with the specified field value .
9169	Gets an index .
9170	Create a flow object .
9171	Update a flow
9172	Get a flow by id
9173	Get a flow by name
9174	Delete a flow
9175	Force delete flow .
9176	Update the field value with the specified value .
9177	Get all the global field values
9178	Retrieves a map ID and title map .
9179	Decrypt an encrypted data packet .
9180	Closes the connection .
9181	Init a new request handler
9182	Get the exception message verbose .
9183	Create admin user
9184	Gets an access token .
9185	Get user profile information from the given access token .
9186	Execute the given HTTP request with the given body .
9187	Execute the POST request .
9188	Creates a response handler for the HTTP response .
9189	This method will check if the connection is valid
9190	Obtain the closeable HTTP client for a given trust store .
9191	Get the path to a fluid system trust store
9192	Closes the connection .
9193	Returns a list of Fluid items for a given job
9194	Send a form to a flow
9195	On close .
9196	Invoked when a message is received .
9197	Send a single message to the server .
9198	Sends a message to the remote endpoint .
9199	Closes the session .
9200	Execute the native SQL query synchronously .
9201	Perform a POST request .
9202	Apply License to License
9203	Create a field text plain text field .
9204	Create a field paragraph paragraph text .
9205	Create a Paragraph Text object .
9206	Create a field multi - choice field .
9207	Create a date time field .
9208	Update field text plain text field .
9209	Updates the Paragraph text for the specified route .
9210	Update field date - time field date and time .
9211	Update field decimal .
9212	Update the field value with the specified route value .
9213	Create a field value .
9214	Get Configuration by key
9215	Get all configurations
9216	Create an attachment
9217	Get an Attachment by id .
9218	Delete an attachment
9219	Force an attachment to be deleted
9220	Parses an XSD file .
9221	Create the class loader using the given jar path .
9222	Throw an exception if the element is not to be used .
9223	Throw an exception if the element is missing .
9224	Throws an exception if the element is missing .
9225	Get schema node from filePath
9226	Validates that the element must be present .
9227	Throw exception if attribute is not present .
9228	Converts the value to the target type .
9229	Creates a new cli interface .
9230	Create a Cli instance using options .
9231	Parse arguments .
9232	Parses an argument using the given options .
9233	Add a builder to the URL builder .
9234	Remove a footer view .
9235	Returns the value at the specified point .
9236	Generate a 3D gradient for a coordinate vector .
9237	Compute a 32 - bit integer for a given integer values .
9238	Calculate a 32 - bit value for a given vector .
9239	Calculate the cubic interpolation between two points .
9240	Compute the scurve of a curve .
9241	Set the bounds of the lower bounding box .
9242	Process the event .
9243	Process the event .
9244	Extract account id from a CloudTrailEvent .
9245	Applies the rule entity to the rule .
9246	Get the event serializer for the given input stream
9247	Create a file in the root folder .
9248	Creates a new directory .
9249	Restores the original value from the system properties .
9250	Creates the delegate implementation .
9251	Add an object to the collection .
9252	Set a String property
9253	Retrieves an array of String values from the given base name .
9254	Returns the next state for the given action name .
9255	Remove garbage collected soft reference from the GC queue .
9256	Gets the target type .
9257	Get the parameterized type from the cache .
9258	Returns the type variable for the given type variable .
9259	Print stack trace .
9260	Print stack trace .
9261	Utility method to replace an object .
9262	Run the task .
9263	Sets the current task .
9264	Check whether the task is accepted .
9265	Called when a task is rejected .
9266	Indicates whether the task is started .
9267	Called when a task completes .
9268	Stop the task .
9269	Get the next job from the queue .
9270	Add a job to the queue
9271	Converts a name to blocking mode .
9272	Resolve the serialized object .
9273	Setup the catalog readers .
9274	Add a reader to the catalog .
9275	Copy the readers to the catalog
9276	Creates a new catalog .
9277	Load all catalogs from the catalog files .
9278	Parses a URL into a catalog .
9279	Parses the list of catalog files to be processed .
9280	Parse the catalog file .
9281	Handles an unknown entry .
9282	Parses all the catalog entries in the catalog .
9283	Resolves the given entity name in the catalog .
9284	Resolves the catalog .
9285	Resolve a system ID .
9286	Resolve a URI .
9287	Resolve the catalog for the given catalog name .
9288	Returns an absolute URL for the given system identifier .
9289	Normalize URI .
9290	Encode a byte into a hex string .
9291	Adds a serialized entry to the list .
9292	Creates a soft value ref .
9293	Fires an event on all registered listeners .
9294	Adds an exception to the list .
9295	Creates the delegate list .
9296	Compares this TimerTask to another
9297	Returns the current value .
9298	Get the object at the given index .
9299	Set an object at the given index
9300	Removes all SoftObjects from the queue
9301	Add an entry type .
9302	Returns the integer type for the given entry name .
9303	Returns the number of entry arguments for the specified type .
9304	Retrieves an entry argument .
9305	Set the context class loader .
9306	Swaps a queue .
9307	Remove a node at a given index .
9308	clean up timeoutImpl object
9309	Loads a class from the class loader .
9310	Preload the protocol list .
9311	Creates a URL stream handler .
9312	Checks to see if there s any handler packages in the current protocol .
9313	Returns the current value .
9314	Creates the delegate implementation .
9315	Makes a synchronized counter .
9316	Make a long counter .
9317	Returns true if the extension in the current namespace is in the extension namespace .
9318	Check a notification on the stream .
9319	Binding the given name to the given target object .
9320	Get the object instance from the given object
9321	Applies the substring to the given string buffer .
9322	Splits the string using the specified delimiter .
9323	Joins the given byte array .
9324	Converts the object to string .
9325	get the current value
9326	Creates the entry map .
9327	Get a value from the map
9328	Gets the value associated with the specified key .
9329	Remove a key from the map .
9330	Flushes all entries to the map .
9331	Get the list of valid keys .
9332	Set the resolution .
9333	Retrieves an entry for the given key .
9334	Retrieves an Iterator for elements that match the given tag name .
9335	Utility method to get a single element from an element
9336	Get optional child element by tag name .
9337	Get the content of an element .
9338	Retrieves the unique child content of an element with the given tag name .
9339	Get the content of an optional child element .
9340	Set the maximum number of threads to work .
9341	Set the blocking mode
9342	Set the blocking mode name .
9343	Execute the given task .
9344	Resolve a catalog ID .
9345	Resolve a public catalog entry .
9346	Resolves an external system by resolver .
9347	Resolves an external public identifier .
9348	Utility method to get a catalog resolver .
9349	Append vector .
9350	Retrieves a vector for a given system ID .
9351	Resolves a given system identifier .
9352	Resolves all resolutions in the specified catalog .
9353	Find all the catalog entries for the given system id .
9354	Resolve all sub - catalogs .
9355	Read a catalog from the URL
9356	Reads a catalog from an input stream .
9357	Connect to the file .
9358	Opens an OutputStream for writing to the file .
9359	compare to the next node
9360	This method is called when a node is removed from the head .
9361	Get the value for this header .
9362	Creates a snapshot entry .
9363	compare right - up
9364	Creates a log logger .
9365	Adds the given objects to the given buffer .
9366	Get the short name of the class .
9367	Returns the string representation of this class .
9368	Returns an enumeration of the system properties .
9369	Returns the property group for the specified basename .
9370	Retrieves a Constructor for the given class type .
9371	Creates a copy of the object .
9372	Deref the object from the expected type .
9373	Initialize the listeners .
9374	Update jndi cache .
9375	Returns a HashSet containing all the keys in this instance .
9376	Returns a set containing the entries in this set .
9377	Removes the given property listener from this list .
9378	Fire a PropertyAdded event to all listeners .
9379	Fire property removed event .
9380	Notifies all listeners that a property has changed .
9381	Notifies all listeners that a property has changed .
9382	Creates a property name based on the given base name .
9383	Loads the properties from the specified property reader .
9384	Loads the properties from the given class name .
9385	Returns the property group for the specified basename and index .
9386	Returns whether the entity is resolved .
9387	Resolve the given system ID .
9388	Resolve a system ID as a URL
9389	Resolves the classpath name for the given system ID .
9390	Set the text as a Document
9391	Normalize the public id
9392	Encode an identifier into an identifier .
9393	Decodes an identifier into an identifier .
9394	Replaces all occurence of oldStr with newStr
9395	Start the timer .
9396	Stop the loop .
9397	Make a synchronized watch .
9398	Compares this object to another object .
9399	Generate a hashcode for the given byte array .
9400	Generates a hashcode for the given array .
9401	Creates the map .
9402	Set the value to the field instance
9403	Read the next token from the input stream .
9404	Initialize DateEditor .
9405	Add a vertex to the graph
9406	Set the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a breadth - first search on the given vertex .
9409	Performs a depth - first traversal .
9410	Find a vertex with the given data
9411	Find cycles .
9412	Normalize the given string .
9413	Parse the given XML string into an Element .
9414	Parse the given XML stream and return the root element .
9415	Parse the given input source into an element .
9416	Creates an element by name .
9417	Resolve the qualified name .
9418	Copies attributes from the source element to the destination element .
9419	Returns true if the node has child elements .
9420	Get all child elements of the given node .
9421	Get the text content of a node
9422	Retrieves all child elements from the given node with the specified name .
9423	Retrieves the parent element of a node .
9424	Add a resource to be waiting
9425	Read catalog from an input stream
9426	Read a catalog from a URL .
9427	Get the local host address .
9428	Resolves an entity by its public id .
9429	Sets the value of the specified system property .
9430	Prints out information about a class .
9431	Describe a String representation of a class .
9432	Strips the package name from the given class name .
9433	Get the package name from a class name .
9434	Force the class to load .
9435	Returns the primitive wrapper for a primitive class .
9436	Copies all interfaces from the given class to the given list .
9437	Get all the unique interfaces of a class
9438	Returns true if the given class is a primitive wrapper type .
9439	Instantiates an instance of the specified class using the default classloader .
9440	Returns a getter method by name .
9441	Returns a setter method for an attribute .
9442	Convert a name to a Java class .
9443	Get a system property by name .
9444	Get filenames for given property name
9445	Retrieves a weak reference from the set .
9446	Returns an iterator over this set .
9447	Creates an LLLister for the given protocol .
9448	Returns a set view of the specified map .
9449	Adds a bound property listener .
9450	Removes a bound property listener .
9451	Determines whether the string is null or not .
9452	Returns a PropertyEditor for the given type name .
9453	Register an editor for the given type name in the given editor type .
9454	Converts the text value of the given type to the given type .
9455	Get the class loader for the specified Thread .
9456	If the Throwable is an ApplicationDeadlockException return null .
9457	Schedules execution of a timeout .
9458	Take work from the queue .
9459	Create a subcontext .
9460	Lookup an object in the context .
9461	Checks if the given object is an instance of the given context .
9462	Appends the information about the class .
9463	Get a transition by name .
9464	Read the properties from the property file .
9465	Get verbosity .
9466	Query whether the resources should be translated .
9467	Retrieves the catalog files .
9468	Get the catalog files .
9469	Query the preferred value for the resource .
9470	Query the use - catalog property
9471	Resolves an entity by its public identifier .
9472	Resolve a href relative to the base URL .
9473	Convert the given URI to an absolute URI .
9474	Resolve an object class .
9475	Invokes the setter method .
9476	Gets the local name of an element .
9477	Returns the namespace URI of the given node .
9478	Returns the namespace URI of the given element .
9479	Create a list from an enumeration .
9480	Returns an input stream for the given filename .
9481	Loads properties from the given properties file .
9482	Loads properties from the specified properties file .
9483	Add an edge to this graph
9484	Add an outgoing edge
9485	Adds an incoming edge .
9486	Returns true if this edge has the given edge .
9487	Removes an edge from this graph
9488	Find an edge in the graph
9489	Find an edge in the graph
9490	Returns the cost of this vertex .
9491	Copies the contents of a jar into a ZIP file .
9492	Returns true if there are more items in the iteration .
9493	Fires an event .
9494	Install JVM type provider .
9495	Removes all files that match the given filter .
9496	Dispatch an action on the FX thread .
9497	Gets an event stream of the given type .
9498	Creates the fxml path .
9499	Streams one or more records from one or more records .
9500	Streams many - to - one stream to a stream
9501	Returns a stream which contains a stream of 1 - to - 1 to - 1 .
9502	Returns a stream which contains one - to - one stream of the given r2 .
9503	Returns whether the given page should be allowed for the given page .
9504	Checks the generated instruction .
9505	Entry point for the analyzer .
9506	Main method for testing .
9507	Get the sum of word degree .
9508	Helper to convert the arguments to a Map .
9509	This is a convenience method for providing a resource loader .
9510	Checks that data source is correctly connected .
9511	Creates an iterable that iterates over the specified instance .
9512	Create array of given type .
9513	Create a list of objects .
9514	Create a collection of objects based on a type token .
9515	Create a list of objects .
9516	Finds the left type of an instance of the left type
9517	Checks that the right type is of the right type .
9518	A validation exception .
9519	Checks that an object is of the given type .
9520	Creates a new Try that is not an object of the specified type .
9521	Creates a Jdbc on the given data source and username and username .
9522	Run in the database in the given sql .
9523	Return a query in the database using the given SQL .
9524	As boolean array .
9525	Builds a query by example .
9526	On upgrade .
9527	Backup the table to the given suffix .
9528	Restore this table in the given context .
9529	Set empty text .
9530	Write to csv .
9531	Unescapes quoted string .
9532	Extracts the values from a CSV string .
9533	Convert string to map
9534	Convert map to string
9535	Join list .
9536	Joins the given list of strings .
9537	Read the data from the index .
9538	Write to index .
9539	Ensures that the id field contains an id field .
9540	Retrieves the base DAO model for the given entity .
9541	Returns the bind type .
9542	Imports from csv .
9543	Backup all tables in the given context .
9544	Restore all tables from a CSV file .
9545	Writes the index to the file .
9546	Creates a query from the given entity manager .
9547	Creates a typed query .
9548	Renders the query .
9549	delete the given id
9550	Save an object .
9551	Update an object in the table
9552	Add an item to the WHERE clause .
9553	Add a sub - query .
9554	Returns the next active stack .
9555	Creates an empty stack .
9556	Adds the given plan to this binding .
9557	Select a plan based on the selected policy
9558	Select a plan at a random position
9559	Sets the plan variables for a given result .
9560	Gets the result at the specified index .
9561	Gets the parents .
9562	Get the children .
9563	Grow a byte array by the specified incrementing amount .
9564	Creates a Logger .
9565	Advances the loop .
9566	Set the goals .
9567	Pause for the user input .
9568	Initializes the pool to use for ncores .
9569	Initializes an IntentionSelectors thread .
9570	Starts an intention selection in the main thread
9571	Shutdown an intention selection thread .
9572	Registers an extension .
9573	Resets the catalog .
9574	Loads an agent .
9575	Find the plan for a given goal type .
9576	Create an agents in the catalog .
9577	Loads a class from the class name .
9578	Loads an extension from the class name .
9579	Check if two objects are equal
9580	Returns the usage message .
9581	Parse the arguments .
9582	Parses an argument with the given option .
9583	Evaluate an agent .
9584	Returns the object at the given index .
9585	Find an AObject by name .
9586	Push an object onto the stack .
9587	Gets the object at the given index .
9588	Adds an object to the list .
9589	Removes the last element from the list .
9590	Get the type of the given object .
9591	Returns true if the given belief matches the given query
9592	Main entry point .
9593	Converts the given string to a byte array .
9594	Posts a goal to the Stackdriver
9595	Send a message to an agent .
9596	Send a message to the agent
9597	Returns a byte array containing all goals .
9598	Creates a new belief set .
9599	Adds a new belief to the beliefbase .
9600	Evaluate a query .
9601	Suspend the current agent
9602	Gets a field by its name .
9603	Registers the given number of Neighbours for a given random number .
9604	Builds a random name .
9605	Runs the program .
9606	Check if the stack is valid .
9607	Remove all finished agents .
9608	Creates a new goal .
9609	Shutdown the pool
9610	Sets whether or not an agent is idle .
9611	Moves the specified pin from the specified pin to the specified pin .
9612	Initialize the program .
9613	Wait until all pools are idle .
9614	Terminate all the agents .
9615	Check if all pools are idle
9616	Returns the pool id of an agent .
9617	Picks the expression .
9618	Sets the expression .
9619	Creates a join expression for the specified attribute .
9620	Recursively find a join for the specified index .
9621	Find or create a join for a given property
9622	Returns whether to end the response .
9623	Get upload stream .
9624	Overrides the default implementation to handle the request .
9625	Check if parameter with given name exists .
9626	Get parameter value by name .
9627	Parse the given expression and return a map of the parameters .
9628	Configure the transaction manager .
9629	Returns the target file .
9630	Writes an artifact to the output file .
9631	Set the instance field on the managed class .
9632	Retrieves the Constructor for the given implementation class .
9633	Build a string representation for the given descriptor .
9634	Returns the method for the given method .
9635	Returns the type of the given field .
9636	Get the dependency value for a given class .
9637	Persist the file to the log .
9638	Set the default link for the given rels
9639	Set the default link template for the given rel
9640	Handles all the links .
9641	Adds links to the response .
9642	Adds links to the request .
9643	Parses a link object and adds it to the map .
9644	Retrieves or creates a new empty map if the key is not present .
9645	Handle allowed capabilities .
9646	Is the given method allowed?
9647	Registers an instance processor .
9648	Registers an instance factory .
9649	Registers an instance processor .
9650	Registers a class processor .
9651	Obtain an instance of the given interface .
9652	Add an argument to the list .
9653	Create target file list .
9654	Convert this object to XML .
9655	Initialize this producer with the given variables .
9656	Returns whether the given file is a reference to the given template .
9657	Create a template model from a reader .
9658	Create a parameterized template model from the given file .
9659	Sets the request path .
9660	Get an observable starting from the given start index .
9661	Creates an instance of the given string .
9662	Set a field in the given instance .
9663	Add capture to the given appender .
9664	Removes the given appender from the given logger .
9665	Clears the given appender from the given appender .
9666	Reads an array of arguments .
9667	Parse the model .
9668	Resolve proxies .
9669	Get files in the given directory .
9670	Parses the given directory .
9671	Check if the resource is fully resolved .
9672	Find all EObjects in the given resource set .
9673	Set the model directories .
9674	Set file extensions .
9675	Sets the resources for this model .
9676	Advances to the next record .
9677	Set String array to String array .
9678	Set a parameter to a boolean parameter .
9679	Execute a SQL statement .
9680	Converts an instance string into an instance .
9681	Merges the template content with the specified template .
9682	Get model directory .
9683	Get the template directory .
9684	Writes the value to the HTTP response .
9685	Start the web UI .
9686	Configures the web window .
9687	Print the print dialog .
9688	Writes an input stream to the output stream .
9689	Invokes the method on the proxy .
9690	Attaches this servlet to the given HttpServletRequest .
9691	Detaches this request .
9692	Returns cookies .
9693	Dump the information about this request .
9694	Returns the invocation meters .
9695	Applies the given event stream to the given event stream .
9696	Set the remote host .
9697	Retrieve an event stream parameter .
9698	Removes the given prefix from the given path .
9699	Find the common directory between two files .
9700	Convert an absolute path to a relative relative path .
9701	Convert relative path to absolute path .
9702	Get the depth of a file .
9703	Dumps an error on the request context .
9704	Send an object to the response .
9705	Add a param template to the list .
9706	Adds a list of parameterized template templates .
9707	Initialize the param templates .
9708	Returns a list of parameterized template models that are reference to the given template file .
9709	Enables or disables the save button .
9710	Performs delete .
9711	Invoked when an element is deleted .
9712	Instantiate an instance of a managed class .
9713	Returns an array of files in sorted order .
9714	Returns a snapshot of the results .
9715	Get the summary for the given directory .
9716	Get sub - summary row .
9717	Create an instance of this class .
9718	Gets the setup class .
9719	Returns a list of all model directories .
9720	Retrieves a list of resource resources .
9721	Sets the collection of candidates to container .
9722	Loads configuration from the given input stream .
9723	Show an error notification .
9724	Returns true if the given parameter is an object of the type .
9725	Reads the data from the HttpServletRequest .
9726	Reads an object from the given input stream .
9727	Extracts the parameter from the FitCell .
9728	Gets the value of the hints property .
9729	Returns true if the request is an XHR request header .
9730	Determines whether the request is an Android request .
9731	Handles incoming message event
9732	Retrieves a list of properties with the specified annotation .
9733	Retrieves an annotation on the given property on the given field on the given property .
9734	Log a message
9735	Looks up the specified domain and returns the result .
9736	Determines whether the given whois has a live parser .
9737	Retrieves a managed class .
9738	Get the managed method for a managed class .
9739	Called when an exception occurs .
9740	Appends the message to the cell if present .
9741	Get a Boolean value as a Boolean .
9742	Determine if this ResultSet object is a wrapper for the specified class .
9743	Serialize the HTTP response .
9744	Get cookie by name .
9745	Add cookie with given name and value .
9746	Remove cookie by name .
9747	Returns an iterator over the cookies in this request .
9748	Get the target file list producer .
9749	Add a field to the class .
9750	Compile the class .
9751	Returns true if the response matches the given token .
9752	Returns the name of the file .
9753	Ensures that the given URI has a trailing slash .
9754	Attempts to login the request with the given username and password .
9755	Returns the http servlet request .
9756	Invoke the managed method
9757	Execute a mutable method .
9758	Execute an immutable transaction .
9759	Returns an array of files that match the given filter .
9760	Retrieves the last file in this directory .
9761	Get the concrete configuration type .
9762	Returns true if path starts with the given path component .
9763	Returns a list of factories that implement the given model type .
9764	Creates an HTTP session for the given instance .
9765	Serialize the file to the output stream .
9766	Reads metadata for this request .
9767	Handles the actual request .
9768	Shut down the statement .
9769	Close all event streams
9770	Handle allowed methods .
9771	Handles the upload .
9772	Delete the data from the server .
9773	Extract column parameters from the FitRow .
9774	Returns an array with the name of the command line arguments .
9775	Schedule a periodic task .
9776	Cancel a timeout task .
9777	Loads the views from the configuration file .
9778	Returns the next file in the collection .
9779	Try to load the application configuration file .
9780	Prints the welcome banner
9781	Prints the stopped banner .
9782	Create a ChameRIA instance .
9783	Register a shutdown hook .
9784	Trigger a notification .
9785	Triggers a trigger .
9786	Inserts and replaces the given fit row .
9787	Returns the counts of all files
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInEnd - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspect - gets
9836	setter for ascpects - sets
9837	getter for triples - gets
9838	setter for triples - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter forIsObjUri - gets
9846	setter forIsObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurerences - gets
9868	setter for occurerences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	set bit at index
9879	Free the given buffer .
9880	Creates a new cache value based on the given cache directory and file name .
9881	Rehash the array with a new size .
9882	method to generate a HELM2Notation
9883	Checks to see if there is any brackets in the annotation section .
9884	Add details to the M - M - M group
9885	Convert group to HELM2
9886	Add an element to the group
9887	Runs the program .
9888	Checks the validity of a polymer id .
9889	Checks if the given polymer ID in the connection section is valid .
9890	Validates the connection s details .
9891	Validates a group ID
9892	Checks whether the given string is repeated
9893	Checks if is peptide or rna polygon
9894	Convert this object to a JSON string
9895	Gets the simple polymer with the given ID .
9896	Returns the current grouping .
9897	Returns the HELM2 output as a String
9898	method to convert all polymer to HELM2
9899	Convert a connection to HELM2 format
9900	Convert the group to HELM2
9901	Convert annotation section to HELM2
9902	Get a list of all polymer ids
9903	Get a polymerNotation by id
9904	method to set PolymerElements
9905	Convert the HELM file to the conversion
9906	Set annotation .
9907	Sets the count .
9908	Decide MonomerNotation for given string
9909	Decide which MonomerNotation group is in the given group .
9910	Decide an entity based on the string
9911	Returns the value of this interval
9912	Parses the HELM2 HELM file
9913	Set nucleotide from given string
9914	Set the grouping for a String
9915	Returns the statistics about this worker thread .
9916	Creates an ADI graph from the given set of edges .
9917	Creates an ADI graph .
9918	Initialize incoming paths .
9919	Returns a list of all the nodes in the graph .
9920	Subscribe the given pattern to the given method .
9921	Request the subscribe_count command .
9922	Unsubscribe the given pattern .
9923	Perform a reply .
9924	Write a return sync object to the output stream .
9925	Poll for a timeout .
9926	Shutdown the system .
9927	Utility method to ensure an exception is thrown .
9928	Unlock the run state
9929	Creates a new worker .
9930	Tries to add a worker to the container .
9931	Registers a worker in the current thread .
9932	Unregisters worker from worker threads .
9933	Tries to activate a work queue .
9934	Run a worker .
9935	Awaits a work queue .
9936	Returns the number of queued tasks .
9937	Returns the common work queue .
9938	Returns the help complete for an external task .
9939	Submit a ForkJoinTask .
9940	Creates a thread join pool .
9941	Retrieves the current value in this queue waiting for the specified timeout .
9942	Builds a string from an AJson .
9943	Returns a thread pool statistics .
9944	Creates a list from an array of elements .
9945	Reverses the array in reverse order
9946	Applies the predicate to the given collection .
9947	Applies the left fold to the given collection .
9948	Applies a function to the end of the list .
9949	Adds a task to the queue .
9950	Create an option from a nullable .
9951	Create a new hash map from keys and values .
9952	Creates an empty list map .
9953	Creates an AListMap from an equality iterable of elements .
9954	Create an AListMap from the given keys and values .
9955	documentation inherited from interface
9956	Normalize resource name .
9957	Marshal a bound value .
9958	Returns a subSequence of this CharSequence
9959	Returns a binary search for the given list .
9960	Returns a binary search for the given list .
9961	Sends an email .
9962	Sends an email .
9963	Bind the given handler .
9964	Binds a filter binding .
9965	Returns whether the given role has the given role .
9966	Retrieve an integer value from a long .
9967	Remove duplicate Strings from an array
9968	Returns a string that should be placed in the given string .
9969	This method should be called at the beginning of a run .
9970	Login the user with the specified password .
9971	get login with login user
9972	Retrieves the login user from the request .
9973	Checks whether the given password matches the given salt .
9974	Saves the current user in the cookie .
9975	Generate a key for a login key
9976	Retrieves a user from a cookie .
9977	Forward to the web context .
9978	Append the file separator to the given path .
9979	Converts a parameter to a long value .
9980	Print a message on the stack .
9981	Get the CallInfo for the specified level .
9982	Convert char array to byte array .
9983	Convert charSequence to byte array .
9984	Converts a byte array to a simple char array .
9985	Converts charSequence to byte array .
9986	Looks up the locale data for the given code .
9987	Submit a promise to the job .
9988	Crops an image to a given file
9989	Schedules an invocation .
9990	Invoke the given direct invocation .
9991	Get rest operations .
9992	Render an error .
9993	Render ajax forbidden message .
9994	Computes the template for the given view .
9995	Parse the action path and return the path .
9996	Render data tables .
9997	Render empty data tables .
9998	Sets the list of items currently in the combo box .
9999	Sends the response to the client .
10000	Returns all the instances of the specified type
10001	Return the current method name .
10002	Compact memory .
10003	Propagate metrics to the global metrics collection .
10004	Encode the given string .
10005	Get charset from file
10006	Copies data from the input stream to the output stream .
10007	Copies input stream to output stream .
10008	Copies the input stream to the output using the default encoding .
10009	Copies the reader to the given output stream .
10010	Copies the character count from the reader to the given writer .
10011	Copies the given reader to the given output stream using the default encoding .
10012	Copies the given reader to the given output stream using the given encoding .
10013	Compare two input streams
10014	Compare two input readers
10015	Applies the given processor to the output .
10016	Get the SQL string for a given groupName and SQLId .
10017	Unmarshal a string into an object .
10018	Unzips the given zip file to the given destination directory
10019	Create a PermissionDialogFragmentFragment from the given PermissionBean .
10020	Set the key listener to be invoked when the dialog is pressed .
10021	Registers a core value type .
10022	Determines whether the specified value matches the regular expression .
10023	Checks if the string is a mobile .
10024	Checks if the string is a phone number .
10025	Checks if the string is a birth day .
10026	Checks if is a URL .
10027	Checks if the given string is a date time .
10028	This method processes the http request .
10029	Encodes the given String into base64 .
10030	Decode base64 string to byte array .
10031	Decode hex string to byte array .
10032	Read utf8 properties from stream .
10033	Reads the content of an input stream into a string .
10034	Reads the content of the file into a String .
10035	Write binary data to a file
10036	Copies the given source directory to the given target file .
10037	Serialize an XML document to a String .
10038	Returns a Document from the given xml file .
10039	Create a Document from the given xml string .
10040	Create a Document from an input stream .
10041	Validate an XML signature .
10042	Sign a document with a public key .
10043	Returns whether the given class is cache safe .
10044	Returns whether the given class is an array or not .
10045	Returns whether the given class is an array wrapper array .
10046	Resolves a primitive class if it is a primitive type .
10047	Checks if lhs is assignable from left - hand side .
10048	Returns whether the given value is assignable to the given type .
10049	Get all interfaces implemented by an instance .
10050	Retrieves all interfaces for the given instance .
10051	Writes the temporary configuration file to the temp file .
10052	Extract variables from the given URI .
10053	Adds a permission to this permission .
10054	Creates a DruidPlugin based on the given dbUrl .
10055	Bind an extension to the given extension point .
10056	Returns the given context .
10057	Returns the primitive value for the given primitive type .
10058	Convert an object to a type .
10059	Converts the given object to the given value type .
10060	Retrieves a parameter from the request .
10061	Retrieves a Cookie parameter from the request .
10062	Create a session parameter .
10063	Init data source .
10064	Sets the shared variable .
10065	Set a parameter to a given value .
10066	Sets the value of the specified field to the specified value .
10067	Show the permission dialog .
10068	Determines whether all the given values are granted .
10069	Returns true if any of the given values is denied .
10070	Find by SQL SELECT
10071	Find the first record that matches the given SqlSelect .
10072	Return true if the model is new .
10073	Returns true if the given method declares an exception .
10074	Remove garbage collected data from the queue .
10075	Put the given value into the weak reference map .
10076	Return true if the given string matches the given pattern
10077	Reads arguments and displays the corresponding arguments .
10078	Retrieves protobuf entity .
10079	Returns true if the protobuf object is a protobuf .
10080	Retrieves all protobuf attributes of the given class .
10081	Returns a protobuf getter for the field .
10082	Returns the pojo s pojo setter name .
10083	Returns the object mapper .
10084	Gets the JsonFactory .
10085	Convert an object to a JSON string
10086	Sets the borders .
10087	Retrieves a user record from the database
10088	Copies out the given attribute values to the given target object .
10089	Copies attribute values to target object .
10090	Get a property .
10091	Set a property .
10092	Add an app to the frame
10093	Saves an access token .
10094	Gets the access token .
10095	Returns the default ClassLoader
10096	Retrieves a resource from the class loader .
10097	Retrieves a resource as stream .
10098	Gets the contents of the specified class as a stream .
10099	Initialize this object from the given uri .
10100	Initialize the scheme from a URI .
10101	Initialize the path from the given string .
10102	Set the scheme from the scheme
10103	Set the userinfo attribute
10104	Set the hostname of the host
10105	Set the port number .
10106	Append the path .
10107	Set the query string .
10108	Set the fragment .
10109	Get the URI string .
10110	Creates a prepared statement by using an iterator .
10111	Initialize the persistence provider .
10112	Get the muffin from the file .
10113	Set the muffin value for this param .
10114	Get the clipboard contents
10115	Set the clipboard contents
10116	Open an input stream to a file
10117	Load services by type .
10118	Sets the service parameters .
10119	Get service parameters from an operation .
10120	Find parametrized service by id .
10121	Find by service class .
10122	Parses the response .
10123	Returns an iterator over the elements in this buffer .
10124	Get encoding from xml string
10125	Get the parent logger .
10126	Creates a connection from the given connection .
10127	Obtains the authorization code for the given URL .
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit an ExecutableDeclaration .
10131	Get an option .
10132	Returns a filter that matches the specified modifiers .
10133	Returns a filter that matches the specified kind .
10134	Returns a filter that matches the given predicate .
10135	Returns a new DeclarationFilter that matches this Filter .
10136	Get the result as a map .
10137	Enables access to the given constructor .
10138	Prepare an object query for the given object .
10139	Replaces a single slash with a hyphen character .
10140	Convert a byte array to a hex string .
10141	Get the indexes for the given parameter name .
10142	Parse a SQL statement .
10143	Convert collection to protobuf .
10144	Set the field value .
10145	Set the field value .
10146	Check whether this file should be accepted .
10147	Creates an instance of a result set .
10148	Map the list of expected state labels to integer values .
10149	Extract the values from the expected values
10150	Returns the generic supertype for the given class .
10151	Invoke the poll thread .
10152	Poll the next object
10153	Returns the field with the specified name recursively .
10154	Returns the declared methods of the specified class .
10155	Returns the method with the specified name and parameter types .
10156	Returns all declared methods of the specified class .
10157	Retrieves an array of constructors for the given annotation .
10158	Print a single byte
10159	Returns the index of the first occurrence of the specified substring in the given string .
10160	Removes all chars from a string
10161	Clean up the state of the state .
10162	Initialize audit object .
10163	Initialize the message queue .
10164	Initialize the pw validator class .
10165	Initialize the pw authenticator class .
10166	Resolves a locale code for the given locale .
10167	Lookup a locale by code .
10168	Creates an instance of a Statement
10169	Clear the elements
10170	Add an element to the stack
10171	Removes the first element from the stack .
10172	Create an input stream for this file .
10173	Parse arguments .
10174	Returns true if the tokens in the given string match the given patterns
10175	Move one of the specified coordinates .
10176	Returns whether this rectangle encloses this rectangle .
10177	Returns true if the specified point is inside the specified region
10178	Returns the intersection with the specified rectangle .
10179	Returns the union of two rectangles
10180	Replace the x and y coordinates of this rectangle .
10181	Replace the y - axis with the specified rectangle .
10182	Returns the column of a given column
10183	Returns the row of a given row .
10184	Get the bounds of a given cell relative to this cell .
10185	Calculate the columns .
10186	Calculates the number of rows .
10187	Unwraps a throwable .
10188	Main method .
10189	Called when a new byte buffer is updated .
10190	Copies the code buffer to the given byte buffer .
10191	Renders given list of WAM instructions .
10192	Initialize the application context .
10193	Returns a copy of this query parameter with the specified parameters .
10194	Add a new child to the collection .
10195	Clear all children .
10196	Returns the next solution .
10197	Add instructions to this body .
10198	Add instructions to the current WAM instruction list .
10199	Set the value of a property change event .
10200	Registers a work panel .
10201	Update the component flags .
10202	Creates a new type .
10203	Returns true if the term is a variable .
10204	Optimize a list of WAMInstruction instructions
10205	Compares two collections .
10206	Service the http request .
10207	Render the start tag .
10208	Renders the button .
10209	Resets the generator to train .
10210	Check that all data in the training examples have been set .
10211	Get a value from the map .
10212	Get the index of the given key in the map .
10213	Sets the value at the given index .
10214	Remove an object from the map .
10215	Remove the value at the given index .
10216	Returns true if the property exists for the given name .
10217	Sets the setter method for the given property .
10218	Retrieves the value of the given property .
10219	Checks if the given primitive type is assignable from the given primitive type .
10220	Initialize the setters for the given callee .
10221	Returns the decision tree for the given state .
10222	Initializes the decision trees for the specified decision tree .
10223	Unify all free variables in the given query .
10224	Unify the given terms .
10225	Unify a variable .
10226	Compile a single query .
10227	Find the maximum arguments in a clause .
10228	Allocate a query register .
10229	Gather position and occurrence information .
10230	Print the given predicate .
10231	Displays the given query .
10232	Puts a 32 - bit integer into the given buffer at the given length .
10233	Converts a byte buffer into a string .
10234	Get the string value for this attribute .
10235	Set the string value for the attribute .
10236	Reads a term .
10237	Determines whether or not the specified class exists .
10238	Determines whether the specified class is a subtype of the specified class .
10239	Determines whether the given parent class is a sub type of the given parent class .
10240	Returns whether the given class is a sub - type of the given parent class .
10241	Retrieves the class for the given class name .
10242	Creates a new instance of the given class .
10243	Create an instance of the given constructor with the given arguments .
10244	Invoke a method on the given object with the given parameters .
10245	Invoke a method on an object .
10246	Invoke a static method .
10247	Returns the constructor for the given arguments .
10248	Returns a set of setters for the specified object .
10249	Wraps the given Queue into a Queue .
10250	Utility method to create a Queue from a Queue .
10251	Gets the type from an object .
10252	Reset the queue .
10253	Returns the current goal .
10254	Creates a new type .
10255	Add a supported time zone name .
10256	Add an alternate dimension to the catalog .
10257	Add a dimension to the table .
10258	Returns a set of free variables .
10259	Returns a set of free variables in a query .
10260	Compares two search nodes .
10261	Writes the given object to the given output file .
10262	Reads a stream into a string .
10263	Creates a search node .
10264	Generate a trace indent string for the given delta .
10265	Allocate argument registers .
10266	Returns whether the last body in the argument is the last argument .
10267	Returns an ordinal classification for a given named property .
10268	Checks to see if all examples have the same classification for the given example .
10269	Choose the best property for the output .
10270	Creates a new functor with the given name and arguments .
10271	Returns a variable with the given name .
10272	Execute the action with an error handling .
10273	Retrieves the list at the given index .
10274	Set the texture .
10275	Implements the paint method .
10276	Creates a buffered image .
10277	Create a graphics2D context .
10278	Creates a binary image for the given pixel values .
10279	Creates a buffered image .
10280	Sets the queue search algorithm .
10281	Performs a breadth - first search .
10282	Start the search .
10283	Main program .
10284	documentation inherited from Prolog
10285	Reads a list of terms .
10286	Reads a functor .
10287	Reads a list of arguments .
10288	Flattens the term list .
10289	Reads a variable .
10290	Parses an integer literal .
10291	Parses a float literal .
10292	Parse a string literal .
10293	peek and consume a directive
10294	Assigns an operator name to the given comparator .
10295	Initializes the built - in operator table .
10296	Consumes the next token .
10297	Tries to consume the next token .
10298	Bind the session to the current thread .
10299	Rollback all resources .
10300	Copies the given iterator into the target collection .
10301	Reserves a call point .
10302	Convert the given time to milliseconds .
10303	Convert a number of ticks to a number of years .
10304	Return a number of ticks set to a given amount of hours
10305	Return the specified ticks set to the specified amount of minutes
10306	Return the specified ticks set to the specified second .
10307	Return the ticks with the given year set to the given year
10308	Returns a number of ticks to start at the specified month in the specified month .
10309	Return the ticks with the given date set to the given date
10310	Calculates the number of milliseconds from the given year .
10311	Returns the month of the year .
10312	Read a byte block from the source .
10313	Applies the given entry to the entry and returns the sequence number .
10314	Retrieves the entry for the given key .
10315	Places an entry into the hash table .
10316	Rehashes the table .
10317	Process the action .
10318	Set the next available state .
10319	Sets the prevAvailable state .
10320	Set the finished state .
10321	Obtains an instance of the WAM resolving a symbol table .
10322	Returns an iterator over all variables in the sequence .
10323	Calculate the i - th value for the given probabilities .
10324	Returns an array of probabilities for the given counts .
10325	Set the ticks .
10326	Performs the actual action forward .
10327	Creates a URL from a string .
10328	Return information about the current request .
10329	Retrieves the headers from the current request context .
10330	Retrieves the current cookies information .
10331	Retrieves the request parameters .
10332	Retrieves information about the request scope .
10333	Retrieves information about a page scope .
10334	Retrieves the current session scope attribute .
10335	Retrieves information about the application scope .
10336	Retrieves the user principal name from the current page context .
10337	Write the debug table .
10338	Convert a list of properties to a HTML table
10339	Performs the search .
10340	Set the current screen state .
10341	Walk the given term .
10342	Compares two search nodes .
10343	Update the registered registers .
10344	Notifies all registered listeners that a change has changed .
10345	Removes all constants from the given clause .
10346	Determine whether the given context is in top - level state .
10347	Convert the array to an array .
10348	Sets the arguments .
10349	Returns the fixity for this component .
10350	Returns whether this associative is in fix .
10351	Compares this op to another .
10352	Handle a property change event .
10353	Register a work flow controller .
10354	Creates an enum attribute factory for the specified class .
10355	Create a component factory .
10356	Retrieves the storage cell for this variable .
10357	Returns whether this variable is bound to the given cell .
10358	Sets the attribute at the given position in the given attribute set .
10359	Set a row attribute for a given row .
10360	Returns the AttributeSet attribute for the given column .
10361	Retrieves the attribute at the given row .
10362	Internal insert method .
10363	Creates a new time range type .
10364	Creates a new type .
10365	Determine whether the given value is an instance of a CharSequence .
10366	Creates the initial context .
10367	Update all registered registers .
10368	Return the name of this expression
10369	Starting from the front of the search .
10370	Creates a new search node from the current search node and the reverse path .
10371	Cache a block .
10372	Obtains a property for the specified resource name .
10373	Set the rate at the given rate .
10374	Read data from the source block .
10375	Skips specified number of bytes .
10376	Gather the arguments of the disjunctive disjunctive disjunction .
10377	Read an integer from the given byte array at the given offset .
10378	Write an integer to the byte array at the given offset
10379	Writes a 24 - bit integer to the byte array at the given offset .
10380	Reads a 24 bit integer from the buffer at the given offset .
10381	Reads a short from the byte array at the given offset .
10382	Write a short to the byte array at the given offset
10383	Creates a new tree search state for the given operator .
10384	Returns an iterator over all operators in the tree .
10385	Returns the id of the attribute value .
10386	Returns the attribute value .
10387	Set the value of the id .
10388	Converts a list of strings to an array of strings .
10389	Convert an array of strings to a list
10390	Convert a name to a camel - case name
10391	Convert a string to a case .
10392	Returns a string representation of the current logging configuration .
10393	Helper method to list the handlers .
10394	Resolves a call point with the given name .
10395	Sets the code point to a code point .
10396	Returns whether this attribute is a sub category of the specified attribute .
10397	Returns the id of this attribute .
10398	Returns the value at the specified level .
10399	Get the last value .
10400	Serialize an attribute .
10401	Read an object from the given input stream .
10402	Compute the heuristic heuristic heuristic .
10403	Computes the modulo operator .
10404	Adds an error message .
10405	Utility method to handle exceptions .
10406	Writes the given string to the output .
10407	Classify the given state .
10408	Compares two Ts .
10409	Creates an iterator that iterates over this instance .
10410	Calculate the log base2 for a given value .
10411	Returns the 2 - bit log base32 for the given value .
10412	Returns true of log base10 v2 .
10413	Utility method to determine the integer value of a given value .
10414	Calculate the integer value for a given long value .
10415	Calculate the int value for a given long value .
10416	Returns the character count of an integer .
10417	Returns an integer count for a long value .
10418	Calculates the number of characters required to represent the given integer value for the given integer value and scale .
10419	Set the head of the assembly .
10420	Emits the emitted code to the given byte buffer .
10421	Set the current work flow state .
10422	Applies the given candidate to the predicate .
10423	Retrieves the value of the named property .
10424	Returns a list of properties for the specified key and method name .
10425	Returns an iterator that iterates over the elements in the given base and modifier .
10426	Create array properties .
10427	Sets the rate of the rate .
10428	Evaluates the given numeric type .
10429	Attempts to load the properties file .
10430	Retrieves the properties using the given system property .
10431	Obtains the properties using the classpath .
10432	Obtains the properties using CWD .
10433	leave the given functor
10434	Returns the value of this variable .
10435	Set the substitution
10436	Create a priority queue .
10437	Closes the connector .
10438	Appends an event to the socket .
10439	Invoke a connector thread .
10440	Initialize the printers .
10441	Commits the current transaction if necessary .
10442	Rolls changes to the current transaction .
10443	Applies an operation to the transaction .
10444	Add a cached operation to the cache .
10445	Acquires the global write lock for the given transaction id .
10446	Release the global write lock .
10447	Enlist this resource with the current session .
10448	Enter a rule set into the rule set .
10449	Inserts an element into the queue waiting up to the specified timeout if necessary .
10450	Retrieves an element from the queue and removes it from the queue until it is expired .
10451	Put an element into the queue .
10452	Inserts an element into the buffer .
10453	Returns the next element in the source .
10454	Get the value of the specified property as a boolean .
10455	Get a property as integer .
10456	Get a property as Long .
10457	Call the specified mixin .
10458	Sets the VisitorVisitorVisitor on the node set .
10459	back the undo operation
10460	Retrieves the data for the given WAM call point .
10461	Execute the given query and extract the bindings for the given query .
10462	Decode an argument from a variable map .
10463	Capture the fields of the object .
10464	Restores an object from the cache .
10465	Retrieves a value for the specified attribute .
10466	Put an attribute into the cache .
10467	Returns all the field names for the given class .
10468	Execute the test runner
10469	Offer an element to the queue .
10470	Poll for data in the queue .
10471	Creates a search node .
10472	Create a priority queue .
10473	Creates a new simple walker .
10474	Creates a goalWalker for a given unary predicate .
10475	Creates a term walker .
10476	Creates a new positionWalker for the given positional predicate .
10477	Creates a new post fixer that parses the given position visitor .
10478	Load properties from an input stream .
10479	Creates a Properties object from the given file .
10480	Creates a Properties object from the given URL .
10481	Retrieves a properties file from the given path .
10482	Compute the size of the grid .
10483	Initialize font metrics .
10484	Add a PropertyChangeListener to the Listener
10485	Add a property change listener .
10486	Remove a property change listener .
10487	Fire a property change event to all listeners .
10488	Creates a new type .
10489	Perform a fade in the specified group .
10490	Show the left vertical bar .
10491	Show left bar .
10492	Shows right bar .
10493	Sanitize radio elements .
10494	Wait for the specified amount of time .
10495	Waits for the specified amount of time for the specified timeout .
10496	Execute this mojo .
10497	Appends the classpath to the given command line .
10498	Creates a new type .
10499	Prints the information about the application .
10500	Initialize console reader .
10501	Evaluates the query .
10502	Evaluate the query .
10503	Convert a boolean value to a MultiTypeData object .
10504	Convert a byte value to a MultiTypeData object .
10505	Converts a character string to a multi - type data object .
10506	Convert a short string to a multi - type data object .
10507	Get the multi - type data for a string .
10508	Get the multi - type data for a long .
10509	Convert a float value to a multi - type data object .
10510	Convert a double value to a multi - type data object .
10511	Create a MultiTypeData object from a string
10512	Convert an object to a multi - type data object .
10513	Convert an object to an object .
10514	Put an attribute on the page context .
10515	Clear the data up to the given key .
10516	Expands the key to a new key .
10517	Internal insert method .
10518	Compares two search nodes .
10519	Parses the given terms .
10520	Returns the operators that match the given fixity .
10521	Checks to see if the candidate operator is one of the given fixities .
10522	Create a new search node .
10523	Returns the right - pad string with the given size .
10524	Get the error information .
10525	Gets the options in force .
10526	Prints the usage string for the command line .
10527	Adds trailing pairs to the given Properties object .
10528	Adds options to the given Properties object .
10529	Add an option to the map .
10530	Takes a list of free arguments and converts them to a Properties object .
10531	Check the argument format for the option .
10532	Compares two iterators using the given mapping function .
10533	Retrieves an enumeration list of options .
10534	Returns the command line options .
10535	Set the stemmer to the given value .
10536	Get the actual stemmer .
10537	Returns the stem of a word .
10538	Main method .
10539	Creates a new type .
10540	Resets the internal state of the data area .
10541	Retrieves the trace environment frame .
10542	Get the trace choice frame
10543	Call the function .
10544	Return the next stack frame .
10545	Determine the backtracking loop .
10546	Add data to the trail
10547	Uninds a range of data from the two points .
10548	Tidy up to a single point .
10549	unify two references
10550	Unify constant .
10551	Print a single slot for the given mode .
10552	Generate a random seed state object .
10553	Determines whether the current version of the puzzle is solvable .
10554	Gets a copy of the child state using the given operator .
10555	Returns an iterator which iterates over the list of operators .
10556	Create a pretty printable string .
10557	Utility method for swapping a tile at a specific location .
10558	Swap two tiles at the same location
10559	Turn a string into a character list .
10560	Creates an empty state from the given character list .
10561	Converts a log record to a log message .
10562	Convert log4j level to log4j .
10563	Add an element to the queue .
10564	Queues an element to be queued .
10565	Increments the size of a record .
10566	Decrements the size of the record .
10567	Checks if new size threshold crosses new water size threshold .
10568	Returns an enumeration of the given context .
10569	Returns a list of bindings for the given name .
10570	Add a property to the environment .
10571	Remove the given property from the environment .
10572	Run the garbage collection .
10573	Add a literal
10574	Resolves a named mixin .
10575	Push a variable reference .
10576	Set the maximum height for a row .
10577	Update the maximum size of a column
10578	Execute the action forward .
10579	Make a new node for the given successor .
10580	Execute the action forward .
10581	Substitute a builtinTransform .
10582	Initialise the symbol table .
10583	Walk the top level check .
10584	Returns the string representation of a list .
10585	Returns whether two numbers evaluate to true .
10586	This method blocks until the server is running .
10587	Invoked when the application is shutdown .
10588	Signal that the application is shutdown .
10589	Add an element to the heap .
10590	Calculate the next log2 value .
10591	Update the minimum node .
10592	Compare two nodes .
10593	Inserts a new node into the root list .
10594	Restart the sweep thread .
10595	Find all elements that match the method .
10596	Returns all elements of the search method .
10597	Find all solutions .
10598	Find the next element .
10599	Restores the values from the given object .
10600	Retrieves a value for the given property in this memento .
10601	Put a multi typed data value into the specified class .
10602	Put a new value under the given property name .
10603	Capture the object of the object .
10604	Removes the element from the list .
10605	Convert modifiers to string .
10606	Parses a string to an integer .
10607	Converts a string to a date .
10608	Determines whether a string is a date .
10609	Determines if a string represents a time .
10610	Determines if a string is a date time .
10611	Creates a TokenSource for the given string .
10612	Creates a token source for the given file .
10613	Creates a token source for the given input stream .
10614	Determine whether or not the given instruction is constant .
10615	Determine whether the given instruction is a void instruction .
10616	Returns whether the given WAM instruction is a non - arg instruction .
10617	Retrieves the operators .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children of this operator .
10620	Generates a string representation of the arguments for this invocation .
10621	Retrieves the summary .
10622	Retrieves records .
10623	Execute query .
10624	Emits the given byte buffer to the given machine .
10625	Set the basic type for a given class
10626	Processes the input stream .
10627	print a variable binding
10628	Apply a set of solutions to a map of solutions .
10629	Runs the stream .
10630	Process the incoming stream .
10631	Returns the current time .
10632	Calculates the current uuid time .
10633	Update the metadata for a specific track .
10634	Updates the status of the player .
10635	Handles the final output .
10636	Creates the start music request for a specific event .
10637	Handles an event request .
10638	Send a start music request to the listeners .
10639	Initialize the reader .
10640	Start the reader thread .
10641	Shutdown the connection .
10642	Reset the parser .
10643	Starts parsing packets .
10644	Process an incoming packet .
10645	Sets the option .
10646	Creates a new chat with the specified user .
10647	Internal initialize method .
10648	Resets this object to the given state .
10649	Sets the value for the given key .
10650	Adds a filter to the list .
10651	Process the request .
10652	Clear all stored values .
10653	Initialize the server .
10654	Send a packet to the queue .
10655	Get the next packet .
10656	Open stream .
10657	Obtains a list of string descriptors .
10658	Returns true if the descriptor contains the given descriptor .
10659	Add an event life cycle listener .
10660	Shutdown the executor .
10661	Returns true if the two files are equal .
10662	Ensures that the ByteBuffer is direct .
10663	Validates an entry .
10664	Mask the given key .
10665	Returns whether two objects are equal .
10666	Returns the entry for the specified key .
10667	Resizes the map to a new capacity .
10668	Append all mappings to the given map .
10669	Removes an entry from the map .
10670	Remove an entry for the given key
10671	Remove an entry from the map .
10672	Add an entry to the table
10673	Create delegating to base map .
10674	Encode a string to an XML - encoded value .
10675	Encode a byte array into a hex string .
10676	Encodes the given string using Base64 encoding .
10677	Encodes a byte array into Base64 string .
10678	Iterate over the collection .
10679	Sets the controller to be able to select a specific controller .
10680	Configures the controller to jump to a jump progress .
10681	Set the controller as a callback .
10682	Set a controller to change the volume .
10683	Broadcasts the availability of a playlist .
10684	Handles resource resources .
10685	Handle a volume .
10686	Handles a jump .
10687	Handles a select track .
10688	Get thread cache .
10689	Get the named request cache .
10690	Returns the alt field name for the given field and stream id .
10691	Returns a new map based on the include and exclude properties
10692	Returns the shard path for a given id .
10693	Adapt the given object to a Session object .
10694	Invoke a method on the target object .
10695	Deletes all children under the given path .
10696	Update an entity
10697	Sets the ping interval .
10698	Schedules a ping task .
10699	Add multiple application options .
10700	Returns true if the specified option is in use .
10701	Parses the command line arguments .
10702	Print usage information for the given application .
10703	Parse command line arguments .
10704	Initialize the XMPP connection .
10705	Send the start TLS request .
10706	Tries to get the compression handler .
10707	Requests the stream compression .
10708	Starts a new stream compression .
10709	Notifies all listeners that an error occurs .
10710	Notifies all connection listeners that the connection has failed .
10711	Register a SASLMechanism .
10712	Get a list of SASLMechanism .
10713	Gets the output plugins .
10714	Log an info message and exception .
10715	Log an error message .
10716	Logs a message and stack trace .
10717	Create a start event .
10718	Create a start event .
10719	Notify listeners that the specified string has been written .
10720	Provides a way to provide a resource with a specific resource .
10721	Returns true if the given source ID contains resources from the given source ID .
10722	Provide whether or not the given resourceIDs contain one of the given IDs .
10723	Provides a list of resources that match the given IDs .
10724	Retrieves an item from the cache .
10725	Returns the key for the given key
10726	Remove a cached item from the cache .
10727	Put an item into the cache
10728	Returns a copy of the CF locations map
10729	Includes the given file .
10730	Includes the given jar in the current location map .
10731	Add a SASL mechanism .
10732	Convenience method to add a list of mechs to the system .
10733	Creates a thread to write debug messages to the console .
10734	Activate a safe post processor .
10735	Register common events .
10736	Registers an event listener .
10737	Registers an event ID .
10738	Perform the lock .
10739	Unregisters an event ID .
10740	Determines whether an event can be run .
10741	Establishes a new DSE Session .
10742	Create a player error from the source .
10743	Start playing music .
10744	Stops the playback .
10745	Adds a command to the player .
10746	Creates a playlist .
10747	Create a Broadcaster .
10748	Appends part to the URL builder .
10749	Add a query parameter to the URL .
10750	Add a query parameter to the URL .
10751	Add a query parameter to the URL .
10752	Add a query parameter to the URL
10753	Retrieves a playlist from an event model .
10754	Invoked when the launch button is triggered .
10755	Make sure the launch is finished .
10756	check if URL exists
10757	Invoked when a browser button is clicked .
10758	Create an image icon .
10759	Main method .
10760	Returns a copy of this IntArray with the given values .
10761	Export the data as a HashMap .
10762	Get the value at the given index .
10763	Get the value for a key
10764	Get an integer value .
10765	Get a double value .
10766	Get the string value .
10767	Create a command resource .
10768	Verifies that the given string represents a command .
10769	Verifies that the given command can be played .
10770	Verifies a given command and capabilities .
10771	Execute a batch of statements .
10772	Returns all subclasses of the given class .
10773	Returns all subclasses that match the given class .
10774	Search for classes in the given location .
10775	Searches for all files in the given directory .
10776	Search all jar files in the given location .
10777	Converts the resource to a list
10778	Returns the total number of inner maps .
10779	Process a packet .
10780	Extract a volume from an event model .
10781	Issue an error response .
10782	Creates an error response .
10783	Determines whether an Identifiable is a target .
10784	Set the login value for the given time interval .
10785	Creates a set .
10786	Sets the name of the user .
10787	Update the state .
10788	Returns a collection of the roster groups that this entry belongs to .
10789	Appends RSM element to the query element .
10790	Parse RSM element .
10791	Filters the objects of the given rsm response .
10792	Create an exiting event .
10793	Reload roster .
10794	Create a roster entry .
10795	Returns a collection of all the entries in the roster .
10796	Obtains a presence resource from a resource .
10797	Sets the presence unavailable packets .
10798	Fires a roster changed event .
10799	Set the digest value
10800	Create a resource .
10801	Creates a player request for a player .
10802	This method will return the time passed to the event model .
10803	Registers a listener .
10804	Initialize the Properties File
10805	Reload the properties
10806	Parse stream error message .
10807	Parse the mechanisms element in the list .
10808	Parse the list of compression methods .
10809	Parses a packet extension .
10810	Decodes the given string to an object type .
10811	Verifies whether the given event model can be played or not .
10812	Extract the current playback state from a resource .
10813	Returns the secret key to use for the specified subdomain .
10814	Returns whether or not a given subdomain is allowed .
10815	Associates the specified key with the specified key in the map .
10816	Returns a set view of the keys in this map .
10817	Returns a collection of values for this object .
10818	Removes the mapping from the reference map .
10819	Retrieves an entry for the specified key .
10820	Returns the hashCode for the given key and value pair .
10821	Creates a new hash entry .
10822	This method determines whether or not the given event should be controlled .
10823	Sets if present .
10824	Updates the most recent presence .
10825	Send a message to all registered listeners .
10826	Generate a script .
10827	Initializes the output directory .
10828	Load properties file
10829	write a file to a file
10830	Obtains the progress for an event .
10831	Creates a collection with the specified collection .
10832	Creates a collection of service resolver .
10833	Get the config object .
10834	Returns the thread pool .
10835	Create a stop music source .
10836	Verifies that a player is a target player .
10837	Retrieves a cluster by username and port number .
10838	Add a connection listener .
10839	Add a packet listener .
10840	Add a packet listener .
10841	Notifies all listeners about a packet .
10842	Add a packet interceptor .
10843	Notifies all interceptors of the Packet .
10844	Converts an object to an object .
10845	Attempt to reconnect to the server .
10846	Returns the id of the current thread .
10847	Validate the node .
10848	Gets the key associated with the given value .
10849	Returns the value at the given index .
10850	Returns the node that is valid for the given index .
10851	Look up a node in the tree .
10852	Compares two objects according to the specified order .
10853	Get the least node at the given index
10854	Gets the node at the specified index .
10855	Returns the next node after the given index .
10856	Returns the most recent node for the given node .
10857	Returns the least valid node that is not valid for the given index
10858	Copies color from one color to another
10859	Returns true if the specified node is red .
10860	Determines whether the specified node is black or not .
10861	Returns the grand parent node for the given node at the given index .
10862	Returns the parent of the given node at the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate the left node at the specified index .
10866	Rotate the right node at the specified index .
10867	Insert a subtree at the specified index at the specified index .
10868	Performs a red - delete operation .
10869	Ensures that the object is not null .
10870	Inserts a new value into the map .
10871	Returns whether the specified key is present in the current thread .
10872	Check whether the current value contains the given value .
10873	Retrieves the value for the given key .
10874	Removes the given key from the map .
10875	Deletes all entries in the current thread .
10876	Returns a set of the keys in this map .
10877	The collection of all the values in this map .
10878	documentation inherited from interface Map
10879	Copies entries from the current map to the new map .
10880	Removes expired objects from the cache .
10881	Cancel the cache .
10882	Invoked when the application is active .
10883	Creates a player request for a specific playlist .
10884	Initialize the roster store with the given base directory .
10885	Open a roster store .
10886	Scans a range of addresses for a specific address .
10887	Convert a subnet address into an InetAddress .
10888	Export the result into a HashMap .
10889	Import a single track from a hash map .
10890	Add all applications in the given set .
10891	Execute an application
10892	Prints the list .
10893	Prints usage .
10894	Main method .
10895	Creates a MuteEvent
10896	Creates a MuteEvent
10897	Get the data schema by name .
10898	Write a file to a file
10899	Determine if this jar is in a jar .
10900	Add an application option .
10901	Return a list of all the fields in the thrift schema
10902	Get a field by name .
10903	Returns the package name of the given entry .
10904	Map content to values .
10905	Creates an event listener .
10906	Set the current state of this iterator
10907	Iterate over the collection .
10908	Perform an iteration .
10909	Extracts the current track info from the given event model .
10910	Exports the data .
10911	Imports a resource .
10912	Create a buffered image from the given lines .
10913	Obtains an image from the given URL .
10914	Perform a GET request .
10915	Reverses the elements in the source map to the target map .
10916	Computes the multiplication of this Cartesian product .
10917	Must be called from outside of the thread
10918	Return the object to the pool .
10919	Create ended event .
10920	Get the current track .
10921	Update a track .
10922	Shuffle a shuffle .
10923	Verify that the capabilities can be played .
10924	Exports the data to a HashMap
10925	Escape a string to be an XML string .
10926	Send a challenge .
10927	Converts this object to JSON .
10928	Process the queue .
10929	Handles an event .
10930	Join all queues .
10931	Sets the given property to the given value .
10932	Removes a property .
10933	Adds a principal .
10934	Removes the specified principal from the set of principals .
10935	Called when the root window is closing .
10936	Collects the response descriptors .
10937	Called when an event occurs .
10938	Checks if the resource is permanent .
10939	Sets the name of the group .
10940	Returns true if the specified key is in the set .
10941	Returns true if the hash map contains the given value .
10942	Associates the specified value with the specified key in this map .
10943	Clear the hash table .
10944	Returns the hash code for a given key .
10945	Check if two keys are equal
10946	Returns whether two values are equal .
10947	Ensure that there is at least the given capacity .
10948	Calculate the new capacity .
10949	Creates an iterator over the entries in this map .
10950	Loads a row from an input stream
10951	Registers the components in the module .
10952	Initialize this add - on
10953	Notifies all connections that a connection failed .
10954	Notify the reconnection on a given number of seconds .
