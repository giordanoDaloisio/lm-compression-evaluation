0	helper method to do the actual work
1	Wrap an observable source .
2	Returns an iterable of the elements in the list sorted by the given function .
3	Observable from a ConnectableObservableObservable .
4	Create a new unicast processor with the specified capacity .
5	Create a new unicast processor .
6	Try to try to subscribe to a scalar subscriber .
7	Creates a Streamable that contains a scalar value .
8	Resets all variables .
9	Creates a Maybe from a CompletableSource .
10	Construct a Maybe from a Single .
11	Retries the Future with the given predicate .
12	Validates that an object is not null .
13	Returns the identity function .
14	static wrapper .
15	Returns a function that returns a function value .
16	Creates a function that casts to the specified type .
17	Create a new unicast subject .
18	Create a new uncast subject with the specified capacity .
19	Creates a new unicast subject with the given capacity .
20	Creates a new unicast subject with the given delay .
21	Returns an exception if the queue is not empty .
22	Waits for the current thread to get an error from the queue and returns it as an exception .
23	Waits for the element to be executed .
24	Drains a queue from a queue .
25	Submits a request to a subscription and returns the result .
26	Performs postComplete .
27	Completes the current value .
28	Returns the value of the notification .
29	Get the error .
30	Checks whether the upstream and the next Disposable is disposes .
31	Atomically updates the upstream with the next reference .
32	Validates the upstream and the next subscription .
33	Atomically updates the upstream AtomicReference .
34	Cap a long .
35	Compute cap of a long
36	Atomically adds the requested long to the end of the list if necessary .
37	Converts a Throwable to a NullPointerException .
38	Adds an object to the end of the list .
39	Shuts down the purge thread .
40	Creates a new ScheduledExecutorService instance with the given ThreadFactory .
41	Sets the subscription .
42	Loops the queue .
43	Wraps a Throwable if the Throwable is a RuntimeException .
44	Flatten a Throwable into a List
45	Throws an exception if the given exception is an exception .
46	Clears all resources .
47	Returns the number of resources in this group .
48	Try to try to see if the source is a scalar value .
49	An Observable with a scalar value .
50	Accepts a subscriber .
51	Accepts an element and accepts it .
52	Starts the queue .
53	Start unbounded queue .
54	Offer an item to the queue .
55	Returns the disposed .
56	Completes the current value .
57	Notifies the listener that an error occurs .
58	Mark the Future as completed .
59	Concatenates the Publisher into a sequence of values with a delay between 0 and 1 .
60	Concatenates an iterable into a sequence of elements .
61	Returns a list containing all elements in the stream sorted by the given function .
62	Waits for the consumer to finish .
63	Request a number of events .
64	Add a subscriber to the end of the list
65	Remove a subscriber from the list
66	Observes a ConnectableFlowable from a given scheduler .
67	Parses the annotations of the method .
68	Sets the delay in milliseconds .
69	Creates the error response .
70	Returns the delay in milliseconds based on the given unit
71	Create sample data .
72	Returns HttpMethod instance corresponding to given method .
73	Search for a user .
74	Creates a hash from raw password .
75	Checks if the raw password matches the given password .
76	Checks if a Spring Security Core is compatible with Spring Security Core .
77	Returns whether or not the spring checks should be disabled .
78	Retrieves the springframework version from the classpath .
79	Registers an attribute exchange with the given identifier pattern .
80	Get an OAuth2 client configurer .
81	Get an OAuth2 resource server .
82	Returns the channel request matcher registry .
83	Compares the specified LDAP attribute with the specified value .
84	Retrieve an LDAP context .
85	Search for single attribute values .
86	Searches for a set of attributes that match a given filter .
87	Search for single entry in the directory .
88	Builds the search controls .
89	Looks up all the primary keys in the list .
90	Build the web authentication details object .
91	Creates the embedded server definition .
92	Create servlet api filter .
93	Create the Jaas API filter .
94	Whitelisted default types .
95	Insert the spring security filter chain into the web application context .
96	Get the token for a series .
97	Gets the granted authorities .
98	Creates a new cipher instance .
99	Invoked after all properties have been set .
100	Handle authentication .
101	Check if the principal has changed .
102	Performs authentication .
103	Checks the content length to write .
104	Maps a collection of authorities to a set of authorities .
105	Sets the URL of login processing
106	Update the authentication defaults .
107	Update access defaults .
108	Map a password value .
109	Extract the value of a remember - me cookie
110	Encodes the given array of Cookie tokens .
111	Sets the cookie .
112	Resolve an argument .
113	Extracts the artifact from the request .
114	Gets the CAS service port .
115	Get the principal of the authentication object
116	Logout out the session .
117	Authenticates the given Authentication token .
118	Helper method to build the provider URL .
119	Set the context environment properties .
120	Returns the full URL .
121	Render the end of the tag .
122	Initializes the UserDetails service .
123	Gets the UserDetailsService .
124	Adds the PkceParameters to the provided Map .
125	Returns true if the request requires authentication .
126	Requires authentication .
127	Proxy service ticket .
128	Returns whether the current user is authenticated .
129	Returns true if the request should be proxied .
130	Create a method security expression root .
131	Retrieve JWK set
132	URL - encode a value .
133	Returns a collection of groups based on the current user .
134	Load user by assertion .
135	Get the pre - authenticated principal .
136	Concatenate two arrays .
137	Creates a new byte array from an array .
138	Get the list of granted authorities .
139	Pre - processes the map .
140	Gets the granted authority .
141	Adds a granted authority collection to the result .
142	Returns the principal for the user principal .
143	Retrieve a shared object .
144	Build the redirect URL for the given request .
145	Intercept interceptor .
146	Helper method to ensure that the user has a role .
147	Converts a list of roles to an array of Strings .
148	Processes the auto - login cookie .
149	Called when the login succeeded .
150	Attempt to switch to a user .
151	Attempts to exit the user .
152	Sets the exit user url .
153	Display public index .
154	Apply spring security filter .
155	Decode the given token .
156	Check if this request is authorized using the given access expression .
157	Check if authorization is allowed for access .
158	Converts the specified JWT into a collection of granted authorities .
159	Generate a CsrF token .
160	Display admin page for a contact .
161	Display the add permission for a contact .
162	Handles a AddPermission .
163	Deletes a permission .
164	Returns the role prefix for the default role if present .
165	Create a UserDetailsResourceFactory bean from a string representation .
166	Returns the values of the specified attribute .
167	Returns the first value of the specified attribute .
168	Encodes the given CharSequence .
169	Decodes the given byte array .
170	Look up parameter names in the given object .
171	Handle a new contact .
172	Find attributes that are specified by method .
173	Add a secure method .
174	Get all config attributes
175	Checks if the mapped method is part of a mapped name .
176	Configures any existing request .
177	Handle a bind exception .
178	Returns a random contact
179	Clears session exception .
180	Gets the field .
181	Create service url .
182	Creates the redirect url .
183	Extracts the SHA prefix for a SHA prefix .
184	Performs pre - authentication .
185	Checks the stack for a list of filters .
186	Return all registered types .
187	Returns the cause of the given throwable .
188	register access manager
189	Convert a collection of user authorities to a set .
190	Compare two byte arrays .
191	Sets the default failure URL .
192	Sets the function to resolve the hidden inputs .
193	Builds the request URL .
194	Replies if the given URL is an absolute URL .
195	Returns an attribute list for the given identifier .
196	Converts a result set into an identifier .
197	Create entries in the table .
198	Creates an object identity .
199	Updates object identity .
200	Saves the request to the session .
201	Creates a new server web method matcher .
202	Returns a MatchMatcher that matches any of the exchange .
203	Creates a text encryptor .
204	Creates a text encryptor .
205	Creates an encryptor that encodes a queryable text .
206	Writes the headers to the response .
207	Determines the target URL for the request .
208	Determine the target URL .
209	Sets the target url parameter .
210	Looks up the directory with the given id .
211	Build a distinguished name with the specified username and username .
212	Creates the shared objects .
213	Configure jaas using login configuration .
214	Get current date
215	Internal parse date .
216	Update the cache if value is null or empty .
217	Sets authentication details from the request .
218	Determines the security name for the given subject .
219	Returns the groups associated with the specified securityName .
220	Changes the password of a user .
221	Build the LDAP distinguished name for the group .
222	Throw an exception if the number of sessions is exceeded .
223	Copy details from source AuthenticationToken to destination
224	Returns the chain that matches the given request .
225	Returns a list of all filters .
226	Retrieves the web application context .
227	Returns the full dn representation of the given distinguished name .
228	Updates the session attributes .
229	Creates a basic authentication scheme .
230	Add a list of filters to be submitted .
231	Adds a filter to the REST endpoint .
232	Creates a basic authentication scheme .
233	Creates a new authentication scheme .
234	Creates a new authentication scheme .
235	Proxy the given URI
236	Print the response options to the given output stream .
237	Redirect configuration to RestAssignedConfig
238	Sets the encoding charset to use .
239	Sets the default object mapper .
240	Sets the object mapper for the given JAXB object mapper .
241	Build mock mock config
242	Set the mock mock service configuration .
243	Set object mapper config .
244	Define the mock config for the given json config
245	Creates a mock config for the given xml configuration .
246	Set the encoder config .
247	Set mock header config .
248	Create mock mock config with async config .
249	Create a mock mock configured for the mock service .
250	Create a mock mock configuration for a multi part .
251	Set the mock param config .
252	Set matcher configuration .
253	Allow all hostnames .
254	Declares a new XML path config .
255	Creates a path config with the specified prefix and namespace URI .
256	Perform a HTTP request .
257	Set the request headers
258	Sets proxy .
259	Specifies the name of the multi part .
260	Add a header to the request .
261	Set basic authentication credentials .
262	Start NTLM for NTLM
263	Create new headers with additional headers
264	Reset the configuration .
265	Sets a header .
266	Build the response .
267	Matches a cookie with the given value matcher .
268	Matches a cookie that has a comment .
269	Matches the expiry date .
270	Matches a cookie by its domain .
271	Matches a cookie path .
272	Returns a Matcher that matches the securedMatcher .
273	Builds a cookie matcher that matches httpOnly .
274	Matches a cookie by its version matcher .
275	Matches the maximum age of the cookie .
276	Expect a header to be read .
277	Adds a header to the response .
278	Expect that the given cookie name has the expected value .
279	Creates a proxy configuration for this proxy .
280	Configure a number return type .
281	Sets the default parser to use .
282	Sets the default log stream .
283	Enable logging of the request and response validation if validation fails .
284	Creates an HttpRequestBase object based on the given URI and the given parameters .
285	Set a default boundary .
286	Adds an attribute to the MockRequest .
287	Adds a header to the request .
288	Add a multi part .
289	Add additional result handlers .
290	Sets a custom parameter .
291	Add http client parameters .
292	Configures the HttpClientFactory to use .
293	Sets the HTTP ClientConfig for this Multipart mode .
294	Retrieves a value .
295	Returns an integer value .
296	Returns the value of the property as a byte .
297	Returns a short value .
298	Returns the float value .
299	Returns the double value .
300	Returns a long value .
301	Returns an unmodifiable list with the given path and generic type .
302	Gets a map value .
303	Gets an object by its path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Create a new form parameters config .
309	Writes the response to the if it matches the provided matcher .
310	Creates a new cookies instance .
311	Remove all keys from the backing map
312	Indexes the explicit bindings for this context .
313	Gets a binding from the given key .
314	Gets a binding for a constant key .
315	Cleans up JIT bindings for internal dependencies .
316	Remove failed JIT bindings
317	Gets the internal dependencies of a binding .
318	Creates an uninitialized binding .
319	Returns all the parameters from the given context .
320	Binds an injector .
321	Binds the logger .
322	Returns true if the given member has no binding annotation .
323	Determine whether a method overrides a method .
324	Initializes the delegate receiver .
325	Return the type for this type .
326	Resolve all types in the given array .
327	Lets the type for the given key .
328	Prepare built - in converters .
329	Normalizes the given class loader .
330	Checks if the class has the same version of cglib .
331	Check if the given member is public or not .
332	Returns a Key for the given Key .
333	Requests an instance of the specified injection point .
334	Validates all pending injections .
335	Create a new instance of the given arguments .
336	Wrap the servlet request .
337	Creates a new factory using the given scope .
338	Make the given scoping .
339	Normalize a path .
340	Gets an annotation instance .
341	Checks if retention policy is enabled for runtime .
342	Finds the scope annotation in the given annotations .
343	Finds the binding key for the given type and annotations .
344	Returns the name of a key .
345	Initializes the delegate provider .
346	Adds the direct type binding .
347	Returns the constructor for the given constructor .
348	Returns true if the given interceptor has scope annotation .
349	Creates a real map binder .
350	Returns a new key for the given key .
351	Creates a new instance using the given construction context .
352	Replaces the source with the error message .
353	Create a Module for the given module .
354	Get all registered methods .
355	Checks if the configuration is not fully qualified .
356	Determines whether a constructor has the same parameters as the given constructor .
357	Returns the dependencies for the ctor .
358	Returns the set of removed dependencies
359	Check if the factory is valid for OptimizedInjector or not .
360	Returns the binding for the given injector and arguments .
361	Invokes the method handle .
362	Handles missing bindings for a specific key .
363	Installs a real multibinder .
364	Gets the key for a new item .
365	Returns the next filter for the given request .
366	Returns true if at least one inject annotation is present .
367	Gets the internal constructor .
368	Returns the dependencies for this instance .
369	Searches for a module .
370	Returns an annotation for the given method .
371	Gets the line number of the given member .
372	Initialize this instance .
373	Wrap a callable in a callable
374	Transforms a callable .
375	Validate and canonicalize object .
376	Retrieves a member object from the cache .
377	Creates an injector for the given type listener .
378	Creates a list of injectors for the specified injection point .
379	Creates a new key for the given type and annotation strategy .
380	Returns an instance strategy for the given annotation .
381	Returns a strategy for the given annotation type .
382	Removes the stack trace from the given throwable .
383	Gets the binding source .
384	Format the given messages as a formatted string .
385	Creates a new message with the given message format and arguments .
386	Creates a new Message with the given Throwable and arguments .
387	Creates a message from a Throwable and a message .
388	Convert an object to another object .
389	Checks if the class should be skipped .
390	Gets the stack trace element .
391	Main method .
392	Push the state of the dependency .
393	Pushes the given key to the internal state .
394	Factory method for initializing .
395	Extracts the object from the given provider and returns it .
396	Process connection event .
397	Adds a connection event processor .
398	Get the task result .
399	Floor a Throwable .
400	Registers a processor for command code .
401	Registers a default processor .
402	Get processor by command code .
403	Tries to get the given url .
404	Decode protocol code .
405	Gets all connections .
406	Scan the pool .
407	Get and initialize connection pool with given URL .
408	This method creates a connection pool if it does not exist .
409	Remove task task from queue .
410	This method is called when a connection pool is needed .
411	Creates a connection to the connection pool .
412	Closes a connection .
413	Called when the connection is closed .
414	Closes the connection .
415	Sets the specified attribute to the specified value .
416	Register a user processor
417	Register a processor to rpc server
418	Dispatch rpc request to user processor
419	Deserialize rpc request command .
420	Pre - processes the remoting request .
421	print timeout log
422	Debug logging of rpc request .
423	Process the command .
424	Invoke the invocation callback .
425	Called when a command is received .
426	Convert a BitSet to a byte .
427	Converts an integer value to a BitSet .
428	Adds a reconnect task .
429	Stop the process .
430	Converts the request to a remoting command .
431	Filters the given list of connections .
432	Monitor connection pool .
433	Close the last select connections
434	Gets a boolean property .
435	Simple info log
436	Check if request timed out .
437	Returns user processor by class name .
438	Returns a random connection from the list of connections .
439	Returns the value of the specified key or the default if the key is not found .
440	Get a property .
441	Resolve response object .
442	Deserialize response object from response command .
443	Converts a ResponseCommandCommandCommand to a Throwable if possible .
444	Detail error message .
445	Helper method to create RpcServerException .
446	Prints a connection trace log
447	Returns a new EventLoopGroup .
448	Returns the remote address of the given channel .
449	Returns the local address of the given channel .
450	Gets the remote IP address .
451	Get the hostname of the remote host
452	Returns the local IP address of the given channel .
453	Get the remote port .
454	Get local port .
455	Parse a SocketAddress to host IP address .
456	Adds a connection .
457	Remove and close the connection .
458	Gets current connection .
459	Register a custom serializer
460	Get custom serializer by class name
461	Register custom serializer for command code .
462	Get custom serializer by code .
463	start connection monitor thread
464	Check if the remote address is connected
465	Initialize write buffer water mark .
466	Build framed data frame .
467	Batch write .
468	Set the code .
469	Validate UTF - 8 .
470	Update the payload .
471	Checks if the handshake has the requested protocol .
472	Translates single frame length limit .
473	Helper method to translate a single frame size .
474	Generate the final key .
475	Process continuous frame .
476	Process binary data .
477	Log runtime exception .
478	Process a frame .
479	Called when a frame is finished .
480	Check if frame is not not finished .
481	Process a close frame .
482	Checks if the buffer limit is exceeded .
483	Gets the payload from the byte buffer list .
484	Returns the total number of bytes in the buffer list .
485	Translate a handshake request .
486	Creates a new handshake builder .
487	Decode frames .
488	Close a connection due to an error .
489	Closes the connection due to an internal error .
490	Generates the error response for an error .
491	Sends the given text to the client .
492	Resets the websocket connection .
493	Starts the connect read thread .
494	Returns the port of the URI .
495	Sends the handshake .
496	Sets the connection lost timeout .
497	Stop connection lost timer .
498	Starts the connection lost timer .
499	Restarts the timeout timer .
500	Attempts to detect a connection lost .
501	Cancels the connection lost timer .
502	A websocket handshake .
503	Sends a ping frame .
504	Stops the socket .
505	Gets the port .
506	This method is used to perform additional read .
507	Actually accept the selector .
508	Synchronized .
509	Performs a single write .
510	Initialize the selector and server thread .
511	Ensure that there is only one thread .
512	Shutdown the server .
513	Get Socket from WebSocket
514	Broadcasts data to all clients .
515	Broadcasts the text to all clients .
516	Broadcast data to a network
517	Create a list of frames for the draft
518	Copies from source to destination .
519	Starts the association .
520	Get an EntityManager by name .
521	Asynchronously executes a transactional block .
522	Convert the given arguments to a Scala buffer .
523	Wraps the given arguments if necessary .
524	Gets a localized message .
525	Retrieves a translation message for the specified keys
526	Checks if a key is defined in the specified language .
527	Gets the preferred messages for this language .
528	Returns preferred messages .
529	Sets the language of the result .
530	Sets the bindings for the given modules .
531	Set the bindings .
532	Add bindings .
533	Creates a copy of this self .
534	Sets the overrides .
535	Sets the overrides .
536	Disable the given modules .
537	Invokes the given context with the given context .
538	Creates a CompletionStage for the given request .
539	Returns existing file .
540	Returns the binding .
541	Static factory method for constructing a tuple .
542	Construct a tuple .
543	Converts an ExecutionContext to an Executor .
544	Creates a new JPAConfig object .
545	Creates a new JPAConfig object .
546	Creates a new JPAConfig object from the given map .
547	Creates a string from a callback name .
548	Creates a JsonNode from a callback
549	Register a new constraint validator .
550	Creates a new instance of a constraint validator .
551	Retrieves a method matching the given name and parameter types .
552	On client error .
553	Handles a bad request .
554	On unauthorized page .
555	On not found response .
556	Handles server error .
557	Logs a specific error .
558	Converts a throwable to a useful exception .
559	On error .
560	Creates a server error .
561	Creates a new documentation handler from a list of files .
562	Creates a new documentation handler from the given directory .
563	Create a new build doc handler from a directory and a jar file .
564	Builds a documentation handler from a directory and a list of files .
565	Creates a documentation handler from a jar file .
566	Consumes the data .
567	Parse content from content .
568	Creates an HttpEntity from string content .
569	Convenience method to create an HTTP chunked entity .
570	Creates a Status with the given status code and content .
571	Sends a JSON status message with the given status code .
572	Creates a response with the given content .
573	Sends an HTTP status message to the given status code .
574	Checks status of a file .
575	Find a user by id
576	Returns the preferred language .
577	Identify a unique URL .
578	Add fragment to the url
579	Returns the absolute URL of the given request .
580	Returns the web socket URL .
581	Simplified function for invoking the connection function .
582	Function to create a connection function .
583	Returns a server instance with the given parameters .
584	Convert an object to JsonNode .
585	Converts a JsonNode to a Java object .
586	Converts a string into a JsonNode .
587	Parses a JSON stream from an input stream .
588	Relative path .
589	Generates canonical form of the given URL .
590	Selects a constraint from a set of constraints .
591	Parse a constraint .
592	Timeout the given CompletionStage after the given amount .
593	Checks if two classes are assignable from the toClassArray .
594	Parses a cron expression
595	Get the next cron interval
596	Creates a new WSWS client with the given configuration .
597	Returns a builder for the given application context .
598	Returns the result .
599	Sets a session value .
600	Set flash value .
601	Returns a binding key with the specified instance .
602	Returns a binding key with the specified annotation .
603	Converts this binding to java binding .
604	Convert this binding to Java binding
605	Converts the binding into a Java Binding .
606	Converts this binding into Java bindings .
607	Converts the underlying binding into a Java type
608	Returns a list of available languages .
609	Returns the preferred language for the given application .
610	Creates a reader from a map of evolutions .
611	Creates a default evolutions reader
612	Deletes all generated statements from the database .
613	Enables configuration for this application .
614	Applies a loader to the application .
615	Loads the application from the given modules .
616	Loads Guice application with given modules .
617	Loads the specified modules .
618	Load the Guice application with the given bindings .
619	This method wraps Guice application builder .
620	Encodes the cookie .
621	Get the entity manager bound to this context .
622	Get the entity manager stack .
623	Pushes the entity manager to the stack .
624	passing with splitter
625	Pass a flow into a single flow .
626	Creates a new actor reference flow .
627	Converts an array of error arguments to a list of arguments .
628	Creates a new form with the specified value .
629	Gets the global errors .
630	Returns the error as JSON .
631	Returns the value associated with the given key .
632	Fill form with data .
633	Parse a string to a given class
634	Converts a string value to a type .
635	Print a value
636	Print a field .
637	Print a type .
638	Register converter .
639	Registers a SimpleFormatter for the given class .
640	Registers an annotation formatter for the given type .
641	Encode a cookie .
642	Select nodes from a path
643	Convert a Java List into a Seq .
644	Creates a new Seq from the given array .
645	Creates a sequence from an array .
646	Creates a mapped web socket acceptor .
647	Accepts and returns a WebSocket stream that accepts the input .
648	Make sure the given object is accessible .
649	Computes the promotion costs for a primitive class .
650	Computes the total cost of the given arguments .
651	Computes the cost of an object transformation between two classes .
652	Look up a message at language level .
653	Look up a list of keys and arguments .
654	Create a new database from the given parameters .
655	Creates a new ParallelSorter for the given arrays .
656	Sort the index using the specified Comparator .
657	Merge sort .
658	Invokes a protected method .
659	Calls a function on the stack .
660	Loads an argument .
661	Emit a field instruction .
662	Emit zero or null .
663	Unbox or zero .
664	Process an array .
665	Compare two nulls
666	Resolve all bridge methods .
667	Get methods from superclass and interfaces
668	Filters the given constructors .
669	Sets the superclass .
670	Generates the get field .
671	Adds the signature of a method .
672	Returns the cardinality .
673	Sets the naming policy
674	Finds all methods in a given array of methods .
675	Resolve a child path .
676	Read string .
677	Sets the host of the request .
678	Create a new HttpRequest instance with the given method and destination .
679	Start connect request .
680	Start building GET request .
681	Start POST request .
682	Start PUT request .
683	Start HTTP PATCH request .
684	Start HTTP DELETE request .
685	Start HEAD request .
686	Start HTTP TRACE request
687	Start HTTP OPTIONS request .
688	Sets the path .
689	Set cookies header .
690	Add a query parameter .
691	Add a query map
692	Set the query string
693	Return the query string
694	Get the host URL .
695	Set basic authentication header .
696	Sets host header .
697	Creates a new request buffer .
698	Execute and receive and receive response .
699	Returns the range of the given range .
700	Returns the number of handlers in the chain .
701	Collect all action interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collect all action run times .
705	Sets a simple property .
706	Gets the index property .
707	Extract the name of this property .
708	Returns a PrintWriter .
709	Sets an object reference .
710	Returns the object reference .
711	Lookup an object reference .
712	Returns the descriptor for the given table .
713	Find table descriptor by column ref
714	Returns the table alias for the given table .
715	Register a table reference .
716	Look up a table reference by its name .
717	Register a hint .
718	Serializes a value to a JSON context .
719	Inject attributes .
720	Inject the parameters in the servlet request .
721	Inject uploaded files .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Converts a column to a column name
725	Store value in prepared statement .
726	Prepare get value .
727	Returns a set of all wrappers .
728	Resolve a wrapper class .
729	Creates a new wrapper object
730	Converts a path to the system s system separators .
731	Determines the path from a filename .
732	Splits a filename into parts .
733	Relative path .
734	Register a new component .
735	Add an action configuration to the web app .
736	Initializes the madvoc web app .
737	Registers default defaults .
738	Register the madvoc components .
739	Exclude jar files .
740	Includes the given jars .
741	Includes the included entries .
742	Exclude the given entries .
743	Scans a jar file .
744	Recursively scan the class path .
745	Returns the bytecode signature of a class .
746	Scan class files .
747	Scans the entries .
748	Create a new transaction .
749	Gets the default scope .
750	Gets or creates a new scope with the specified type .
751	Executes a specific madvoc scope .
752	Decode a byte array to a byte array .
753	Generate a CSRF token .
754	Make sure the set size is expired .
755	Check if a CSRF token is expired .
756	Creates a copy of the given object .
757	Copies this bean .
758	Visit property .
759	Initialize this entity .
760	Resolve a scope .
761	Register a Petite bean .
762	Registers a bean definition
763	Remove a bean by its type .
764	Resolve bean names for a given type .
765	Register a new CtorCtorInjection Point .
766	Register a PropertyInjectionPoint in the given bean name .
767	Register a new Petite Set Injection Point .
768	Registers a new method in the given bean definition .
769	Registers new init methods for the given bean name .
770	Register destroy methods for a given bean .
771	Register a Petite provider .
772	Register a new Petite provider .
773	Iterate over bean types of given type .
774	Define the parameters .
775	Intercept an action .
776	Resolves java version .
777	Push an integer onto the stack .
778	Check that the argument index is valid .
779	Create advice field name .
780	Create advice method name .
781	load all the arguments of a special method .
782	Load method arguments .
783	Load method arguments .
784	Generates instructions to load an argument at the given index .
785	Store an argument at the given index .
786	Prepare return value .
787	Creates a key for method signatures .
788	Create a new array .
789	Store an integer into the array .
790	Extract encoding from content type .
791	Returns true if the given flags are empty or not .
792	Extracts the bearer token from the given request .
793	Require authentication .
794	Prepares the file to be download .
795	Set the response content .
796	Returns all cookies with the given name .
797	Reads the request body from the specified request .
798	Read the request body from the request .
799	Stores the context path variable .
800	Stores the context path .
801	Check if the given name is a GET parameter .
802	Returns null if the parameter array is null or empty .
803	Copy request parameters to attributes .
804	Invokes the body of the given fragment .
805	Render the body .
806	Render the body to a string .
807	Invokes the init methods of the bean definition .
808	Call destroy methods .
809	Create a new instance of the bean
810	Inject parameters .
811	Rewrite the action path .
812	Add a header .
813	Put a property into the map .
814	Adds a base property .
815	Put profile property .
816	Get profile property .
817	Resolves the given value with the given profiles .
818	Extracts all profiles from the target map .
819	Reads a 32 - bit word from a byte array
820	Hashes a password and a salt .
821	Compare a plaintext password .
822	Copies all the bytes from the stream into the output stream .
823	Copies bytes from the input stream to the output stream .
824	Parse an action definition .
825	Resolve action configuration .
826	Detect alias .
827	Read the action interceptors .
828	Read the filtered action filters .
829	Read the package action path .
830	Read method action action path .
831	Method alias .
832	Create an action runtime .
833	Updates the response after the last modified date .
834	Apply advice to proxy class .
835	Injects the target object into the proxy .
836	Visits an annotation .
837	Resolve real name .
838	Resolves a real name for the real name .
839	Look up the type data for a given type .
840	Lookup type data for a given type .
841	Finds the annotated class .
842	Resolve a name for a type .
843	Resolves the real name of a type .
844	Get the file content .
845	Copy the bootstrap methods array .
846	Sets the major version and class name .
847	Puts the constant pool into the given byte vector .
848	Puts the bootstrap methods .
849	Add a constant field reference .
850	Adds a constant method ref .
851	Adds a constant reference to the constant pool .
852	Adds a member reference .
853	Adds a constant or float to the constant pool .
854	Adds a constant or float or float .
855	Adds a constant or double to the constant pool .
856	Adds a constant or double to the table .
857	Adds a constant name and descriptor to the constant pool .
858	Adds a constant name and type descriptor .
859	Adds a string to the constant pool .
860	Adds a string to the constant map .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a constant .
864	Adds a constant or invoke method to the bootstrap method .
865	Adds a constant to the constant pool .
866	Adds a static or invoke dynamic reference .
867	Adds a constant to the constant pool .
868	Adds a UTF8 reference .
869	Adds a bootstrap method .
870	Adds a new type to the class .
871	Hash a name .
872	Removes all elements from the map .
873	Returns all values for the given name .
874	Returns an iterator over the entries in this map .
875	Returns a list of all the entries in this map .
876	Increases the capacity to ensure that it is larger than the minimum capacity .
877	Appends a character sequence to the buffer .
878	Visits an annotation .
879	Create the first proxy .
880	Create the first chain delegate .
881	Create the first method delegate to the chain .
882	Parse a string into a Path .
883	Pushes a field to the path .
884	Configure the servlet context .
885	Execute the next method
886	Returns all the field descriptors .
887	Override in order to register proxetta .
888	Converts JTA transaction mode to DbTransactionMode .
889	Reads the property .
890	Puts all of the mappings in the specified Map .
891	Appends a buffer to the end of the list .
892	Write this object to a writer
893	Write the list to the output stream .
894	Write list to output stream .
895	Returns the string value for the given key .
896	Get an Integer by key
897	Get a Number by key
898	Get a double .
899	Get a float .
900	Get a value from the map
901	Put a value for the given key .
902	Sets the folder to use .
903	Receive messages from a folder .
904	Updates the flags from the received email .
905	Close folder if opened
906	Returns the parameter with the given name .
907	Create an alias for the target string .
908	Validate action .
909	Adds a new violation .
910	Sets the mime type .
911	Sets the raw data to download .
912	Sets the target input stream .
913	Sets the target class .
914	Sets the target class .
915	Creates proxy data .
916	Create the proxy .
917	Define the proxetta .
918	Creates a new Proxy instance
919	Dumps the proxy class in debug folder .
920	Set the From address for the given personal name .
921	Set the recipient address .
922	Add to recipient address .
923	Sets the reply to .
924	Set the cc recipient addresses .
925	Sets a text message .
926	Sets an HTML message .
927	Adds a header to the request .
928	Get a system property by name
929	Returns the boolean value for the given name .
930	Returns the int value for the specified name .
931	Returns the long value for the given name .
932	Get resolved parameters .
933	Serialize a key value to the JSON context
934	Look up a path alias by alias .
935	Resolve alias .
936	Resolve the result path in the path
937	Resolve the result path string .
938	Gets the index of the last slash in the specified string .
939	Gets the index of the last dot after a slash .
940	Gets the index of the first dot after a slash .
941	Strips the last camel word from the name
942	Resolve schema name .
943	Resolve column descriptors for given property .
944	Initializes this sketch .
945	Multiply a column .
946	Modify a variable by j .
947	Schedule a key schedule .
948	Initializes the key message .
949	Encrypts a block .
950	Convert a byte array to a long array .
951	Removes any surrounding string .
952	Returns the path to the target method .
953	zips a file
954	Gzip file .
955	Ungzip file .
956	List the contents of a zip file .
957	Unzip a zip file .
958	Adds a file to the ZIP output stream .
959	Adds content to a ZIP output stream .
960	Returns the field descriptor for the given name or null if not found .
961	Gets the property descriptor .
962	Sets the bundle name .
963	Sets the locale of the given session .
964	Gets the locale from the session .
965	Filters parameters for a bean name .
966	Add profiles .
967	Reads a little endian long from a byte array .
968	Reads data from an input stream .
969	Reads a label from the given bytecode offset .
970	Returns the bytecode offset of a type annotation .
971	Read element values .
972	Read verification type info .
973	Read the attributes of an attribute .
974	Return the CtorDescriptors of the class .
975	Gets ctorDescriptor .
976	Returns the transient bean map .
977	Create the request map .
978	Converts an array of objects to a long array .
979	Initialize the decora manager .
980	Add a consumer to be invoked on a file .
981	Add a search path .
982	Add a search path .
983	Includes the given patterns .
984	Exclude the given patterns .
985	Add a path to the list .
986	Find all files in the directory .
987	Initialize the rules .
988	Returns an iterator that iterates over all the files in this queue .
989	Resolve the wiring mode for the given type .
990	Resolve the bean name .
991	Get the output writer .
992	Returns the output stream .
993	Returns the class name .
994	Returns a descriptor for a constructor .
995	Gets method descriptor .
996	Gets a descriptor for a method .
997	Append the descriptor .
998	Gets the size of this variable .
999	Parses the arguments and returns the size of the arguments .
1000	set rollback only
1001	Performs commit or rollback .
1002	Rollback the transaction .
1003	Requests a resource from the transaction .
1004	Pushes a single name .
1005	Write string .
1006	Writes a character .
1007	Writes a char sequence .
1008	Sets the log level name .
1009	Start a region .
1010	Checks whether the value is contained in the include value .
1011	Register a pseudo function .
1012	Lookup a pseudo function .
1013	Write proxy information .
1014	Visits an annotation .
1015	Create a static initial constructor block .
1016	Create the proxy constructor .
1017	Process super methods .
1018	Finds the last index in a given range
1019	Enables the given string .
1020	Replace ASM instructions .
1021	Collect the attributes of the first attribute .
1022	Register default SQL types .
1023	Registers a new SQL type .
1024	Looks up the SqlType for the given class .
1025	Lookup SqlType .
1026	Creates a socks4 proxy information .
1027	Factory method for socks5 proxy .
1028	Factory method for HTTP proxy .
1029	Gets the total number of threads transactions .
1030	Get total number of threads with a given status .
1031	Associates a transaction with another transaction .
1032	Continue a transaction if the source and destination are read - only
1033	Lookup a resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append the path name .
1036	Align the left and padding to the right .
1037	Serialize an object into a pretty - printed string .
1038	Converts a string into a camel - case string .
1039	Format a single paragraph .
1040	Convert tabs to spaces .
1041	Escapes a string so that it is valid .
1042	Unescapes a string .
1043	Resolves a bean by its name .
1044	Get a bean by name .
1045	Initialize bean definition .
1046	Invokes the provider .
1047	Registers a bean .
1048	Sets a bean property .
1049	Retrieves a bean property .
1050	Shuts down the scope .
1051	Resolve parameters from a method or constructor .
1052	Render the body of the form .
1053	Resolves the property .
1054	Close the DOM tree .
1055	Create a new element node .
1056	Adds a tag .
1057	Removes the last child node if it is empty .
1058	Get the query string .
1059	Gets the class name for the action .
1060	Calculates the to to to the given size .
1061	Iterate over a collection .
1062	Iterate an array .
1063	Replaces all occurrences of substrings with a string .
1064	Replaces the char in a string with the given character .
1065	Replaces all occurrences of the given chars with the given string .
1066	Replaces the first occurence of a string .
1067	Replaces the first occurrence of the specified char with the given character .
1068	Replaces the last occurence of s .
1069	Replaces the last substring of a string with a given character .
1070	Removes a string from a string .
1071	Removes the specified character from the string .
1072	Checks if all given strings are empty .
1073	Check if all strings are blank .
1074	To string array .
1075	Changes the first character of the string .
1076	Convert a string to title
1077	Removes all chars from the given string and returns the resulting string .
1078	Checks if a string starts with a given index ignoring case .
1079	Checks if s ends with c .
1080	Count the number of occurrences of the substring in the source string ignoring case .
1081	Compare two strings ignoring case .
1082	Gets the index of a whitespace within the specified string .
1083	Removes the leading character from the string if present .
1084	Strips the trailing character from the string .
1085	Removes the given character from the string .
1086	Strips the given character from the string .
1087	Strips the given character from the string .
1088	Crops all the given strings .
1089	Remove all whitespaces from the beginning of the string .
1090	Removes all whitespace from the end of the string .
1091	Returns the index of the first substring in the string
1092	Joins a collection of objects using the given separator .
1093	Joins an array into a single string .
1094	Convert charset to new charset name .
1095	Compares the specified character at the specified index to the specified string .
1096	Surround a string .
1097	Adds a prefix to a string .
1098	Adds a suffix to a string .
1099	Cut the first occurence of string .
1100	Cut from string .
1101	Cut a prefix .
1102	Cut a string .
1103	Removes the surrounding string from a string .
1104	Inserts a string into the source string .
1105	Creates a string repeating the source string .
1106	Reverses a string .
1107	Determines the maximum common prefix of two strings .
1108	Find common prefix .
1109	Shorten a string .
1110	Converts a string to uppercase .
1111	Removes quotes from the string .
1112	Convert a byte array to a hexadecimal string .
1113	Get byte array from string .
1114	Detect quote character .
1115	Visits a property .
1116	Visits an enum value .
1117	Visits an annotation .
1118	Register a new type .
1119	Register an entity .
1120	Remove an entity from the map .
1121	Create entity instance .
1122	Sets the target interface .
1123	Inject target field into wrapper
1124	Look up all annotated properties for a given type .
1125	Detect database and configure a database .
1126	Closes the output stream .
1127	Writes a byte to the output stream .
1128	Remove session id from request .
1129	Gets the name .
1130	Serializes this ByteArray to a byte array .
1131	Write the message to a file .
1132	Write the message to the output stream .
1133	Appends the argument to the argument .
1134	Prepend the argument to the argument .
1135	Change return type .
1136	Sets the text portion of the text .
1137	Register a TypeConverter for the given type .
1138	Looks up a TypeConverter for the given type .
1139	Execute query with the given query
1140	Selects elements from a collection of CSSSelectors .
1141	Processes selected nodes .
1142	Selects the first node that matches the query .
1143	Walk all descendant nodes recursively .
1144	Recursively walk the root node .
1145	Selects the node and adds it to the result list .
1146	Filter the selection .
1147	Deserializes a c map from the packed string .
1148	Refill the zz buffer
1149	Returns a page data .
1150	Remove the select part .
1151	Remove from FROM .
1152	Removes the last order by .
1153	Decode HTML .
1154	Detect nx .
1155	Builds the SQL ORDER BY clause .
1156	Builds the pagination SQL .
1157	Resolve column mappings for given type .
1158	Find by column name .
1159	Find by property name .
1160	Returns the property name for the given column .
1161	Returns the column name for the given property .
1162	Replies the value of the id property .
1163	Sets the id property on the given object .
1164	Returns the key value for the given object .
1165	Appends a string to the array .
1166	Sets the index .
1167	Expand the internal array .
1168	Calculates the length of the array
1169	Creates message .
1170	Creates a scoped proxy bean .
1171	Invoke the loop body .
1172	Initialize the map .
1173	Checks whether a file should be accepted .
1174	Sets the watch file .
1175	Start the polling thread .
1176	Dispatch a directory change event .
1177	Adds an enumeration to the list .
1178	Returns the size of the field - table header .
1179	Puts the field_count and attributes of the given byte vector .
1180	Creates a new Target .
1181	Writes the property value to the specified injection point .
1182	Adds decoraes page content .
1183	Parses a page content .
1184	Writes decorated page content .
1185	Write region .
1186	Start the server .
1187	Runs a process .
1188	Create an instance of IMAP SSLStore .
1189	Create the output stream .
1190	Initializes the template .
1191	Append alias .
1192	Append column name .
1193	Adds a rule .
1194	Apply a value to a value .
1195	Processes the value of the include .
1196	Processes the value of the exclude .
1197	Gets the pseudo class name .
1198	Adds all elements in the specified collection to this collection .
1199	Returns the insertion point for the specified element .
1200	Bind an annotation .
1201	Registers a new action configuration .
1202	Lookup action configuration for given action type or annotation type .
1203	Registers action config for given action type .
1204	Set System property .
1205	Validates a field within the target object
1206	Find the last table node .
1207	Moves the fosterElement outside the table .
1208	Register session beans .
1209	Gets session data .
1210	Initializes the proxy .
1211	Adds an advice init method .
1212	Ends the bundle .
1213	Add profiling information .
1214	Extract profiles and add them .
1215	Add key profiles .
1216	Converts a type descriptor into its corresponding class name .
1217	Convert a type ref to its name .
1218	Convert a typed description into a type signature .
1219	Convert a type to a typeref .
1220	Add a list of consumers .
1221	Creates a new collection .
1222	Converts the given value to a single element collection .
1223	Converts a value to a Collection .
1224	Converts a collection to a collection .
1225	Converts a primitive array to a collection of objects .
1226	Add a line number .
1227	Makes the given method visit this line .
1228	Puts the code for forward reference .
1229	Adds the forward reference .
1230	Resolves an ASM for the given instruction .
1231	Marks the basic block as belonging to this basic block .
1232	Add the basic blocks of a subroutine to the data flow .
1233	Compare two digit numbers .
1234	Fixes the accent .
1235	Puts a byte into the buffer .
1236	Puts two integers into the buffer .
1237	Puts a short value into the buffer .
1238	Puts two bytes into the buffer .
1239	Puts two bytes into the byte vector .
1240	Puts an int value into the buffer .
1241	Puts two byte values into the buffer .
1242	Puts a long into the byte vector .
1243	Puts the given byte array into the buffer .
1244	Enlarges the array to grow .
1245	Authenticate user via http session .
1246	Authenticate user via action .
1247	Authenticates user via basic auth .
1248	Returns the message for the given locale and bundle .
1249	Retrieve a resource bundle .
1250	Gets the value at the given index in the array .
1251	Sets the entity id .
1252	Saves an entity .
1253	Update an entity .
1254	Updates a property in the database .
1255	Updates a property in the database .
1256	Find an entity by ID .
1257	Finds an entity by its name and value .
1258	Finds an entity matching the criteria .
1259	Delete an entity from the database .
1260	Deletes an entity .
1261	Counts the number of entities in the database
1262	Increases the specified property by its ID .
1263	Decreases a property by its name .
1264	Find all entities related to target object .
1265	List all entities in the database .
1266	Removes all the attributes from the map .
1267	Returns an immutable set of entries .
1268	Sets the value for the given key .
1269	Removes an attribute .
1270	Gets the current stack trace .
1271	Get the stack trace of a Throwable object .
1272	Returns the stack trace of the given exception .
1273	Returns the chain of the given throwable .
1274	Convert an exception stack trace to a string .
1275	Convert an exception chain to a string .
1276	Builds a message with the given cause and exception .
1277	Unwraps a Throwable .
1278	Registers this class in the given class scanner .
1279	Registers a new component class .
1280	Get the class loader
1281	Get a resource as a stream .
1282	Get a resource as stream .
1283	Gets the resource as stream .
1284	Returns an InputStream of the given class name
1285	Add a new route chunk
1286	Find or create a child chunk with the given value .
1287	Parse the request .
1288	Convert the given value to a collection .
1289	Invokes the setter method .
1290	For internal use only .
1291	Creates a new bean property instance .
1292	Extract the raw type of the property .
1293	Stops the authentication session .
1294	Starts the authentication token .
1295	Converts a LocalDate to a Date
1296	Converts a LocalDateTime to a Calendar .
1297	Define a proxy .
1298	Add a check .
1299	Resolve validation context for target class .
1300	Adds all checks for a class .
1301	Collects annotation checks for given property .
1302	Process annotation checks .
1303	Copy default check properties .
1304	Encodes the given URI source .
1305	Encodes the given string .
1306	Encodes the given URI scheme .
1307	Encodes the given URI host .
1308	Encodes the given URI port .
1309	Encodes a path .
1310	Encodes the given query with the given encoding .
1311	Encodes the given query param with the given encoding .
1312	Encodes the given URI fragment with the given encoding .
1313	Lookup all the properties of a class .
1314	Get all PropertyDescriptors .
1315	Get the set - cookie header
1316	Unzips this response .
1317	Closes the http connection .
1318	Accepts a reference scope .
1319	Prints out all the routes
1320	Encrypt a byte array .
1321	Decrypts an encrypted content .
1322	Converts a map to an object .
1323	Generates a list from the specified component type .
1324	Sets the value of a property .
1325	Generate a map .
1326	Sort by column name
1327	Sets the default header .
1328	Send a request .
1329	Sends a request .
1330	Adds the default headers for the request .
1331	Reads the cookies from the response .
1332	Add all cookies to the http request
1333	Send an email .
1334	Set the subject s subject .
1335	Sets the sent date .
1336	Sets headers in mime message .
1337	Sets the addresses of the email .
1338	Sets the recipients addresses .
1339	Add body data .
1340	Sets the content .
1341	Creates the body part for an attachment .
1342	Extracts the content type from a Content - Type header .
1343	Save result set .
1344	Closes all ResultSets .
1345	Closes the query .
1346	Closes this query .
1347	Sets the fetch size for this statement .
1348	Sets the maximum number of rows for this query .
1349	Executes an update .
1350	Execute count query .
1351	Returns the set of generated columns .
1352	Gets the query string .
1353	Creates a proxy of an object .
1354	Returns a collection of the given iterator .
1355	Convert an iterator to a stream .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Print a message to the console .
1359	Returns the caller class name .
1360	Shorten the class name .
1361	Exclude specific types .
1362	Serializes an object to an Appendable .
1363	Serialize object to string .
1364	Clone object via serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serialize an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve the table names for the given types .
1370	Creates the table names for the given types .
1371	Read column value .
1372	Cache entities .
1373	Resolve provider definitions for a given class .
1374	Applies the given table name to the table name .
1375	Validates a connection .
1376	Renders the given view .
1377	Locate target .
1378	Get output writer .
1379	Get output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Prints a string .
1383	Login .
1384	Gets the token as JSON .
1385	Login via BasicAuth .
1386	Logout user .
1387	To container file .
1388	Creates a directory if it does not exist .
1389	Create a directory if it does not exist .
1390	Copies file .
1391	Copy a directory .
1392	Moves a file to a directory .
1393	Copies directory to dest .
1394	Deletes a directory recursively .
1395	Read the UTF - 8 chars of the given file .
1396	Read chars from a file .
1397	Write char array to file .
1398	Write string .
1399	Append a string to a file .
1400	Read a number of bytes from a file .
1401	Write bytes to a file .
1402	Append bytes to a file .
1403	Copies a file or directory .
1404	Delete a file or directory .
1405	Creates a temporary directory .
1406	Checks if the file is binary .
1407	Checks if directory is copy .
1408	Checks if a file is copied .
1409	Prints usage information for the given command .
1410	Resolve action method name .
1411	Registers an action .
1412	Registers a path alias
1413	Moves to the next iteration .
1414	Creates a CharArraySequenceSequenceSequence from a char array .
1415	Executes the proxy .
1416	Check if the input string matches the uppercase character .
1417	Creates a CharSequence representing a character sequence .
1418	Returns an array of URLs for the specified class .
1419	Add bccs .
1420	Registers a new type for the given class .
1421	Lookup serializer for a type .
1422	Parse the input stream .
1423	Returns the first value of a request parameter .
1424	Returns the values of a request parameter .
1425	Get a file upload parameter .
1426	Get a list of file uploads .
1427	Initializes the filter .
1428	Parse the SQL template .
1429	Find the end of the macro .
1430	Count the number of escapes in the given template .
1431	Build the query string .
1432	Parse the query string into a HttpMultiMap .
1433	Prepare header parameter name .
1434	Extracts the media type from a content type .
1435	Render the given node as HTML .
1436	Returns the inner HTML of the given node .
1437	Configures this servlet with the specified parameters .
1438	Resets this object to its initial state .
1439	Configures this parser to be lazy .
1440	Replace the mappings for a path .
1441	Parses the given string as a list of components .
1442	Parse a string as a map .
1443	Resolve the value .
1444	Skip object .
1445	Parse a quoted string .
1446	Parse string content .
1447	Parse a unicode character .
1448	Parse an unquoted string content .
1449	Parse a number .
1450	Parse an array content .
1451	Creates an empty constructor .
1452	Create a simple method wrapper
1453	Resolve the raw type name .
1454	Resolve a reference from a property name .
1455	Resolve references to a method or constructor .
1456	Read all references from a method or constructor .
1457	Build the default references for a given method or constructor .
1458	Build the default reference for a property .
1459	Remove duplicate names .
1460	Convert references to BeanReferences .
1461	Converts an ann value to an array of BeansReferences .
1462	Runs the Joy Messenger .
1463	Finds a method in a class .
1464	Finds a constructor that matches the given parameter types .
1465	Resolve all interfaces of a type .
1466	Compare two parameters .
1467	Force access .
1468	Creates a new instance of the given parameters .
1469	Get all superclasses of type
1470	Returns the first child class of the given instance .
1471	Returns the JAR file associated with the specified class .
1472	Sleep for the specified number of milliseconds .
1473	Sleeps for the current thread .
1474	Wait for an object .
1475	Creates a thread factory .
1476	Gets the value .
1477	Visits a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits an invoke instruction .
1484	Visits a jump instruction .
1485	Visits a MultiANewarray instruction .
1486	Visits a try catch block .
1487	Visits a local variable annotation .
1488	Converts the properties to a writer .
1489	Processes the input stream .
1490	Moves to the next element in the collection .
1491	Moves to the next element .
1492	Joins the given arrays into a single array .
1493	Join arrays .
1494	Resizes the given buffer to the given new size .
1495	Appends a new element to the end of the buffer .
1496	Removes an array of the specified type from the buffer .
1497	Gets the index of the first occurrence of the specified value in the array .
1498	Gets the index of the specified value in the array .
1499	Returns the index within the array or - 1 if not found .
1500	Enables XHTML mode .
1501	Parse the content of the feed .
1502	Process the given lagart parser .
1503	Compute the maximum stack and local stack trace .
1504	Ends the current basic block with the current basic block .
1505	Collect attribute prototypes .
1506	Inject target object .
1507	Register a pseudo class .
1508	Looks up a pseudo class by its name .
1509	Invokes an action on the configured executor service .
1510	Returns all the bean property names for the given type .
1511	Visits the declared properties .
1512	Checks whether the given property name matches the given rule .
1513	Returns an array of MethodInjectionPoints for the specified type .
1514	Read filter configuration .
1515	Write bundle file .
1516	Looks up the bundle file for the given bundle ID .
1517	Looks up the gzip bundle file .
1518	Register bundle id .
1519	Creates the digest for the given source .
1520	Creates a bundle .
1521	Clears the bundles .
1522	Fixes CSS URLs .
1523	Update column value
1524	Creates the table ref name .
1525	Gets a database transaction .
1526	Converts an object to a single element array .
1527	Parses a signature and returns a map of generics .
1528	Resolve the set of injection points .
1529	Check whether the property type should be included in the exclude map .
1530	Opens a database connection .
1531	Opens a new transaction .
1532	Close the transaction
1533	Commits a transaction .
1534	Rolls back a transaction .
1535	Creates a new Properties object from the given file .
1536	Creates a new Properties object from a string .
1537	Load properties from a string .
1538	Returns a copy of this Properties with a prefix removed .
1539	Creates a new Properties object from the specified paths .
1540	Returns the value of a property .
1541	Resolve all properties
1542	Resolve a property .
1543	Resolve scope name .
1544	Get transaction mode .
1545	Registers the specified annotations .
1546	Read the transaction annotation for the given method .
1547	Applies the selector to the given node .
1548	Checks if this node matches the given node .
1549	Evaluates the selector against the current results .
1550	Unescapes a string .
1551	Builds the list of packages for the specified Java version number .
1552	Clone a node .
1553	Removes the parent node from the parent node .
1554	Adds multiple child nodes to this node .
1555	Insert a child node at the specified index .
1556	Inserts a new child before the given refChild .
1557	Inserts a new child into the reference list .
1558	Inserts a new child into the reference list .
1559	Inserts a new child into the reference list .
1560	Remove all child nodes .
1561	Returns the first child node with the given name .
1562	Returns an array of all child nodes that match the given predicate .
1563	Checks if the node is correct .
1564	Initializes the child element nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Changes the owner document of a node .
1568	Returns the previous sibling name .
1569	Returns the text content of the element .
1570	Get the HTML representation of the lagart document .
1571	Get the inner HTML of this fragment .
1572	Visit each child node .
1573	Returns the CSS path of this node .
1574	Handler for decora tag .
1575	On id attribute .
1576	Define a decora tag .
1577	Add a proxied aspect .
1578	Adds the package .
1579	Adds root package .
1580	Find the root package for a given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Add a properties file name pattern
1584	Iterate over the targets for each target .
1585	Iterate over the targets in the given scope .
1586	Iterate over the target and outbound targets .
1587	Extract the parameter values .
1588	Creates an array of target targets .
1589	Create an argument method argument .
1590	Notify listeners that a new session was created .
1591	Notify listeners that a session was destroyed .
1592	Appends the specified value to the end of the array .
1593	Appends all elements in the given JsonArray to this array .
1594	Removes a position from the list .
1595	Resolve target .
1596	Handle not found target .
1597	Convert an object to a string .
1598	Filter the given action filter .
1599	Gets the pseudo function name .
1600	Resolve property injection points .
1601	Creates SOCK4 proxy socket .
1602	Returns the number of attributes in this descriptor .
1603	Gets all action results .
1604	Checks if the given character equals one of the given character sequence .
1605	Returns the index of the first character in the source string that is equal to the given index .
1606	Find the index of the first character in the source array .
1607	Add command line arguments .
1608	Set environment variable .
1609	Starts the process .
1610	Invokes a listener .
1611	Make this frame .
1612	Gets an abstract type from the given type .
1613	Get the abstract type from the descriptor .
1614	Sets the input frame from the given API frame .
1615	Returns the local type for the given index .
1616	Sets a local variable .
1617	Pushes an abstract type onto the output stack .
1618	Pushes an abstract type into the symbol table .
1619	Pop the given number of elements from the output stack .
1620	Pop the top of the first argument .
1621	Adds the given abstract type to the initial initialization count .
1622	Get the initialized type .
1623	Put abstract type .
1624	Removes expired entries from the cache .
1625	Schedule prune .
1626	Visits a module .
1627	Visit a nested host .
1628	Visits an outer class .
1629	Visits an annotation .
1630	Visit a nested member .
1631	Visits an inner class .
1632	Visits a field .
1633	Get the current thread session .
1634	Closes the current thread session .
1635	Creates the execution array of the action .
1636	Invokes the action method .
1637	Returns the request body .
1638	Calculates the first item index of a page .
1639	Calculates the first item index of the page .
1640	Checks if the given value matches the given value .
1641	Converts a char array to a byte array .
1642	Find the index of the first occurrence of the specified character in the source array .
1643	Resolve the node name .
1644	Resolve an attribute name .
1645	Render an attribute .
1646	Load properties from a file .
1647	Load props from file .
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Load properties from classpath .
1652	Returns the value for a key .
1653	Sets a value for the given key and profile .
1654	Extract props from target map
1655	Extract properties from target map
1656	Extract sub props from target map .
1657	Retrieves an inner map .
1658	Add inner map .
1659	Resolve active profiles .
1660	List of profiles
1661	Get profiles for a given property name
1662	Adds the property injection point .
1663	Add a SetInjectionPoint to the set
1664	Add a method injection point .
1665	Add init method points to the set of init methods .
1666	Add destroy method points .
1667	Resolve proxy class .
1668	Injects the target object into the wrapper object .
1669	Gets the target wrapper type .
1670	Find the field with the given name .
1671	Returns the raw type of the field .
1672	Resolves the key type for the property .
1673	Resolves the component type .
1674	Creates a JsonResult from an object .
1675	Construct a JSONResult from an exception .
1676	Resolves the HttpMethod name from a method name .
1677	Returns true if the given string matches the pattern .
1678	Resolves the loading .
1679	Resolves the resource loading .
1680	Attempts to load the specified class .
1681	Search for the resource with the given name .
1682	Waits for the end .
1683	Detect annotation type .
1684	Build an InjectionPoint .
1685	Visits this class .
1686	Returns an array of URL classes from classpath .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter associated with this property .
1691	Returns the setter for the property .
1692	Connects to the database .
1693	Adds an iterator to the list .
1694	Prints the logo
1695	Stop joyite server .
1696	Create socket .
1697	Creates an SSLSocket .
1698	Get default SSLSocketFactory .
1699	Get socket factory .
1700	Creates a random string of characters .
1701	Generate a random string .
1702	Generate a string with random number of characters .
1703	New array instance .
1704	Inject value into object .
1705	Converts value to specified type .
1706	Visit a provider .
1707	Creates a default type cache .
1708	Put a new value into the map .
1709	Get all methods .
1710	Resolve a hostname to an IP address .
1711	Parse an IP address as an int .
1712	Check if the input string is a valid IPv4 address format
1713	Returns the hostname of the specified IP address .
1714	Download bytes from URL .
1715	Download string .
1716	Download file .
1717	Inject targets .
1718	Performs outject outject .
1719	Create socket connection .
1720	Create socket connection .
1721	Gets the index of the primitive class name .
1722	Loads a class using the given class loader .
1723	Load array class by component type .
1724	Invoke destroy method .
1725	Returns a binary search for the given element .
1726	Returns a binary search for the given element using the given comparator .
1727	Specifies the exclude patterns .
1728	Includes the given strings .
1729	Includes all bean properties of the specified class .
1730	Sets the start tag .
1731	Register a component with the given name
1732	Resolve column s sql type .
1733	Preprocess SQL .
1734	Create a new ResultSetMapper for the given ResultSet .
1735	Find generated key .
1736	Populate generated keys .
1737	Create wrapper object
1738	Sets a bean by its name .
1739	Sets a map of query parameters .
1740	Sets the specified objects .
1741	Inserts a new chunk after this one .
1742	Lookup an entity type .
1743	Get the entity descriptor for the given column reference .
1744	Resolve table name .
1745	Resolve the given object .
1746	Appends the missing space .
1747	Returns an enumeration of the file parameter names .
1748	Includes the given page .
1749	Gets the servlet path .
1750	Gets the request URI .
1751	Resolve parameter names for action class .
1752	Start the Petite container
1753	Stop the Petite Engine .
1754	Applies the subject to the email filter .
1755	Method allow to filter messages by messageId .
1756	Method allow to filter from from address .
1757	Applies to to to to the given address .
1758	Method allow to find cc recipient addresses .
1759	Method allow to find bcc recipient addresses .
1760	Adds a flag to the email filter .
1761	Set a flag on the email .
1762	Method allow to filter received dates .
1763	Method allow to filter sent dates .
1764	Applies a size filter to the email address .
1765	Method allow to combine multiple email filters .
1766	Method to combine an email filters .
1767	Method allow to filter the email filter .
1768	Concatenate a search term .
1769	Encodes a byte array .
1770	Convert value to byte array .
1771	Checks if gzip is eligible for gzip .
1772	Validates the given object .
1773	Returns a list of Violations from the target object .
1774	Sets the given profile .
1775	Sets the enabled profiles .
1776	Check if the specified check profiles are valid
1777	Parse request body .
1778	Returns the millisecond value in milliseconds .
1779	Add another date to this date .
1780	Subtract a Julian date from this date .
1781	Sets the i and fraction of the integer .
1782	Initialize parser .
1783	Emit a comment .
1784	Report an error .
1785	Create a hash for a password .
1786	Generate PBKDF2 key .
1787	Convert hex string to binary .
1788	Resolve provider definitions for given type and name .
1789	Sets the name of the attachment .
1790	Sets the content id from the email .
1791	Resolve mime type .
1792	Parse a type signature .
1793	Compute the size of an attribute file .
1794	Puts the attributes of this module into the given byte vector .
1795	URL - decode a string .
1796	Decode query string .
1797	Starts the database .
1798	Check connection .
1799	Visits a method signature .
1800	Traverses the superclass .
1801	Create a method signature visitor .
1802	Convert an array of elements to a csv string .
1803	Converts a string into a string array .
1804	Resolve CtorInjection Point .
1805	Creates a class reader for advice .
1806	Returns a cached instance of the specified advice class reader .
1807	Encrypt a string .
1808	Decrypt a string .
1809	Get a logger by name .
1810	Sets the cookie name .
1811	Create an action request .
1812	Creates a wrapper for the action filter .
1813	Destroy a bean
1814	Shuts down all beans .
1815	Get all messages from folder
1816	Starts the ClusteredServiceContainer .
1817	Runs the report .
1818	Prints an error message .
1819	Prints usage rate .
1820	Creates a mapped byte buffer .
1821	Closes the archive .
1822	This method returns the number of work necessary to execute .
1823	Returns the position of the buffer .
1824	Offer a buffer to the active partition .
1825	Append the specified length .
1826	Closes the archive .
1827	Poll for error response .
1828	Stops a replay .
1829	Event handler for new image
1830	Event handler for an unavailable image .
1831	Read status indicator .
1832	Read status indicator .
1833	Sets the limit .
1834	Appends the given source buffer to the end of the buffer .
1835	Returns the number of controls .
1836	Maps an aeron directory to a byte buffer .
1837	Creates a snapshot of the contents of the stream .
1838	Creates the default header .
1839	Write the key buffer into the buffer .
1840	Write label buffer with label information .
1841	Connect to Aeron archive .
1842	Connect to Aeron archive .
1843	Closes the session .
1844	Starts recording .
1845	Stops recording .
1846	Replays a record .
1847	Stops the replay .
1848	List recordings .
1849	List recordings for a URI request .
1850	List recording .
1851	Extend a recording .
1852	Get recording position .
1853	Gets the stop position .
1854	List recording subscriptions .
1855	Check whether the given udp channel matches the given endpoint .
1856	Returns the destination address for the given channel .
1857	Description of this instance .
1858	Add a destination to the image .
1859	Finds and tracks the end of a packet .
1860	Find first control toggle .
1861	Add a parameter to the request .
1862	Returns the tag of the channel .
1863	Gets the entity tag .
1864	Add a session id to a channel .
1865	Gets tag from parameter value .
1866	Append padding to the end of the header buffer .
1867	Update the publisher limit .
1868	Allocates a buffer position .
1869	Returns a label for the given type id .
1870	Scans for available space .
1871	Clears the URI builder .
1872	Validates that this channel is valid .
1873	Sets the prefix .
1874	Set the media URI .
1875	Set the control mode .
1876	Set the term length .
1877	Sets the term offset .
1878	Sets the linger flag .
1879	Opens the datagram channel .
1880	Close the poller .
1881	Checks whether the given message is a valid frame .
1882	Receives a buffer from the receive data .
1883	Send a retransmit action .
1884	Process timeouts .
1885	Formats the status of a long .
1886	Allocate a new AtomicCounter .
1887	Resets the vector .
1888	Validates this vector .
1889	Compute the length of all the vectors .
1890	Returns the length of the producer window length .
1891	Checks that the socket buffer length is valid .
1892	Validates the page size .
1893	Validates the session id range .
1894	Validates the unblock timeout configuration .
1895	Write the error code .
1896	Resets the state of the leader .
1897	Encodes cluster members into a string .
1898	Add the publication status of the given members to the given list of members .
1899	Close member publications .
1900	Check if a cluster has an active quorum .
1901	Determines the ranked position of a cluster .
1902	Resets log position .
1903	Check if vote is reached position .
1904	Check if the given members are on the full count .
1905	Checks if the cluster member has the specified candidate term .
1906	Determine a member .
1907	Validate member members .
1908	Compares two cluster members .
1909	Returns true if the specified candidate member is the same .
1910	Check if a cluster member is equal to the given membership threshold .
1911	Check if there are duplicate endpoints .
1912	Returns the index of the member with the given id .
1913	Remove member from old members array .
1914	Get the high id of the cluster members .
1915	Map an existing CNC file .
1916	Check if the driver is active .
1917	Returns true if the driver is active .
1918	Checks if cnc file is active .
1919	Requests that the CNC file to be terminated by the given directory .
1920	Returns the length of the frame in bytes at the given offset .
1921	Ensures that the frame length is in reverse order .
1922	Writes a frame type header to the given buffer .
1923	Writes the flags in the given buffer .
1924	Writes a term offset in the given buffer .
1925	Write term id in the buffer .
1926	Find a counter id by recording id .
1927	Find a session id by its session id .
1928	Get recording id .
1929	Checks if the given counter is active .
1930	Write an Application specific Feedback frame .
1931	Reloads the buffer .
1932	Returns the last term .
1933	Create a recovery plan .
1934	Create a recovery plan from a list of snapshots .
1935	Append a term .
1936	Append a snapshot .
1937	Commit the log position entry .
1938	Add a tombstone entry .
1939	Closes the session
1940	Inserts a vector to the journal .
1941	Unblock the log .
1942	Returns the channel as a string .
1943	Write a channel .
1944	Checks the validity of the given term length .
1945	Validates the given page size .
1946	Compares the active term count .
1947	Computes the position of an active term .
1948	Compute log length .
1949	Stores the default frame header in the metadata buffer .
1950	Applies the default header to the metadata .
1951	Rotate log .
1952	Initialise the tail with term id and term index .
1953	Finds the offset within the raw tail
1954	Returns the raw tail value stored in the metadata buffer .
1955	Compares the raw tail .
1956	Write token buffer .
1957	Allocates a counter .
1958	Finds a counter id .
1959	Returns whether or not the specified counter has been replayed .
1960	Get snapshot recording id .
1961	Converts a short flag to a set of characters .
1962	Writes a channel to the message .
1963	Offers a buffer to the cluster .
1964	Wrap the given buffer .
1965	Commits the buffer .
1966	Aborts the stream .
1967	Launch the MediaDriver .
1968	Close all resources
1969	Returns the position of the terminal .
1970	Allocate a counter .
1971	Finds a counter id in the cache .
1972	Creates a snapshot of the composite counters .
1973	Allocate AtomicCounter .
1974	Closes the connection .
1975	Dispatches a recording descriptor .
1976	Adds a new slab .
1977	Sets byte at index .
1978	Adds statistics .
1979	Calculates a row ranges from a filter .
1980	Convert array element type to array type .
1981	Convert a struct type into a group type .
1982	Annotate a message .
1983	Ends the previous bit packed run .
1984	Read one protocol .
1985	Reads the footer from the given configuration file .
1986	Retrieves the list of footer from the given summary file .
1987	Reads the Parquet footer from the given file .
1988	Reads the next row group from the current row group .
1989	Reads the next row group from the current block .
1990	Reads a Dictionary of a Dictionary chunk .
1991	Adds a new Parquet RecordWriter .
1992	Removes a writer from the list .
1993	Updates total memory allocation .
1994	Registers a scale callbacks .
1995	Starts the stream .
1996	Starts a new block .
1997	Starts a new column .
1998	Write a dictionary page .
1999	Write a data page .
2000	Write a single column chunk .
2001	Ends a block .
2002	Copies data from the given range to the given position .
2003	Finishes writing the data .
2004	Merges the specified files into Parquet metadata files .
2005	Merges the merged metadata files into the specified output path .
2006	Writes the metadata file to the output path .
2007	Merge FileMetaData into one .
2008	Read the value .
2009	Checks if the schema is valid .
2010	Returns the first non - null element that is not null .
2011	Creates a value from the given schema .
2012	Parse extra meta data from extra meta data .
2013	Create ThriftMetaData instance from thrift class .
2014	Returns the extra meta data for this instance .
2015	Writes null values .
2016	Write a new empty page
2017	Initialize this object from a stream .
2018	Allocate values buffer .
2019	check enum value in enum
2020	Calculate bit widths for the delta block buffer
2021	Throws an exception if the given throwable is an exception .
2022	Get statistics based on the type
2023	Get a builder for the given primitive type .
2024	Merges statistics with the same type .
2025	Returns the non - null schema .
2026	Create a new instance of TaskAttemptContext
2027	Invoke a method .
2028	Write out the members list .
2029	Merge the fields of this group into a new one .
2030	Init counter from reporter
2031	Returns a new filter instance
2032	Get all footers from the Parquet file .
2033	Generates a list of ParquetInputSplit for each row group
2034	Write a message .
2035	Validates the parquet mapping .
2036	Serialize a descriptor .
2037	Creates a new DirectCodecFactory that can be used to create a DirectCodecFactory .
2038	Makes sure that all required fields are missing .
2039	Check a set field .
2040	Read file meta data from an input stream .
2041	Closes the record writer .
2042	Set the group schema for the group .
2043	Add a ParquetTypeName to the ParquetType
2044	Assert that the column type is valid .
2045	Check if value is a int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from parquet schema .
2048	Maps an arrow schema to a parquet schema
2049	Write data page header .
2050	Skip to the next record .
2051	Writes object to the configuration .
2052	Removes an entry from the cache .
2053	Put a new value into the cache .
2054	Retrieves the current value for the given key from the cache .
2055	Write value .
2056	write value without conversion
2057	Set the regular expression
2058	Write content to a file .
2059	Opens an InputStream for reading a file .
2060	Returns a new unbound record filter that matches the given column path predicate .
2061	Convert a struct type to a Thrift type
2062	Common wrapper methods
2063	Creates a new list type .
2064	get merged key - value metadata
2065	Get the split for the given split .
2066	Gets fields by name .
2067	Resolve schema for file access .
2068	Get the list of input files .
2069	Check parquet files .
2070	Get input files from a directory
2071	Creates a new unbound record filter that returns a page of the specified page size .
2072	Returns a ListConsumer that delegates to a given consumer .
2073	Initialize the plan
2074	Merge the data in the given tuples
2075	Calculate the sum up of the given tuple summaries
2076	Reads a struct .
2077	Reads a map entry .
2078	Write an integer to the buffer .
2079	Read a little endian int from the given buffer .
2080	Set the Avro schema for the job .
2081	Creates the stream if not already exists
2082	Create a duplicate of PipelineStageBean .
2083	Creates a stage bean .
2084	Creates a list of interceptors .
2085	create interceptor
2086	Parses a schema string .
2087	Returns the number of days in the given time .
2088	Extract Avro schema from a record header .
2089	Upgrade v1 data format .
2090	Returns the length of the message .
2091	Copy blobstore resources
2092	Resets the table .
2093	Report the health check of a thread .
2094	Register a thread health gauge .
2095	Stores the configuration in the disk .
2096	Performs a login .
2097	Determines if the schema needs upgrade .
2098	Upgrade the library if needed .
2099	Upgrade stage if needed .
2100	Upgrade services if needed .
2101	Upgrade stage if needed
2102	Gets the fields to null .
2103	Is the given name a system class?
2104	Appends the specified element at the tail of this list to the end of the list . If the element is at least one element it is added to the list .
2105	Adds the element and returns the evicted if the element is greater than or equal to the maximum size of the queue . If the element is greater than the max size it is returned .
2106	If the value is not present then the default value is invalidated .
2107	Add reported errors if needed .
2108	Get a descriptor for a given proto file .
2109	Gets all file descriptors from the descriptor map .
2110	Iterate through all the file descriptors and add them to the map .
2111	Returns a descriptor for the given message type
2112	Converts a protobuf protobuf message to an sdc field map .
2113	Create a protobuf message .
2114	Compute protobuf field to protobuf message .
2115	Converts a list of configurations to a Jersey config bean .
2116	Check connection .
2117	Convert from kudu type to field type .
2118	Create a field from a result result .
2119	Intercept the records .
2120	Gets the text content .
2121	Adds missing config definitions to a stage .
2122	Parses a HTTP response .
2123	Add the response headers to the record .
2124	Write the response header to a field .
2125	Write response header to record header .
2126	Saves metadata .
2127	Configure the client .
2128	Parses the headers from the request .
2129	Increments the source offset by the given increment .
2130	Parse paginated result .
2131	Add response headers .
2132	Resolve request headers .
2133	Process the response .
2134	Returns true if the given property is defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Gets the credentials file .
2138	Get a preview of a pipeline output for a pipeline
2139	Copies buffer to buffer .
2140	Removes logical duplicate duplicate entries .
2141	Empty batch .
2142	Find the next main line that matches the pattern .
2143	Resolves a chunk from a live file
2144	Closes the connection .
2145	Escape a single string .
2146	Create flow control settings .
2147	Get the channel provider .
2148	Puts a batch of messages into the data channel .
2149	Compile the given expression .
2150	Digest the original expression
2151	Adds a dictionary from an input stream .
2152	Adds dictionary from specified reader .
2153	Stops the aggregator .
2154	Rolls the current data window .
2155	Serialize an object to a String
2156	Deserialize string to object .
2157	Deserialize the content of a file .
2158	Writes the given record to the destination .
2159	Evaluates EL expression
2160	Generate inner field from the HiveMap .
2161	Extracts the table name from the metadata .
2162	Returns the name of the database .
2163	Get the internal field value .
2164	Extracts the location from the metadata record .
2165	Extract the custom location from the metadata record .
2166	Extract the avro schema from the metadata record .
2167	Extracts the data format from the metadata record .
2168	Creates a schema field builder for an Avro schema .
2169	Validates partition information .
2170	Generates a partition path from the given partitions .
2171	Serialize a schema to HDFS
2172	Sets the parameters index .
2173	Get configuration
2174	Parses an rfc3 compliant time string .
2175	Formats the given template with the given arguments .
2176	Starts the pipeline .
2177	Check if record contains Solr fields .
2178	Filters out the given list of field names .
2179	Sends a onRecord error event to the handler .
2180	Parses a jar name and returns a dependency .
2181	Parses a URL from the given URL .
2182	Get instance of Couchbase connector .
2183	Closes the bucket .
2184	Validates a Couchbase configuration .
2185	Convert an operation string to a label .
2186	Verify that a dependency exists .
2187	Reads a string from the secret .
2188	Get the write operation type from a record header .
2189	Write document .
2190	Builds a Subdocutation .
2191	Generates the SQL string for an alter table .
2192	Configures this SASL authentication context .
2193	Take messages from the producer and return the result .
2194	Commits the last committed offset .
2195	Logs an error .
2196	Inject configurations from a stage .
2197	Get Definitions
2198	Get the publisher definition for the given name .
2199	Format the column name .
2200	Format the value .
2201	Get information about a pipeline
2202	Create a pipeline fragment
2203	Get all pipelines for a given filter
2204	Imports a pipeline fragment .
2205	Get the path to the temporary file path .
2206	Gets the operation code from the record .
2207	Get the field path for the given column name
2208	Retrieves an enriched event from the queue .
2209	Gets the runner .
2210	Returns the runner for the specified idle time .
2211	Return a new runner to the pipeline
2212	Destroys this runner .
2213	Validate that the container is not destroyed .
2214	Checks if a stream exists .
2215	Returns the last shard id of a stream .
2216	Process a query queue .
2217	Handle SQL exception .
2218	Get the column hash code for a record .
2219	Compare two files .
2220	Retrieve the PID if possible .
2221	Validate and extract the fields to hash map .
2222	Create a UserGroup from the Hadoop configuration .
2223	Roll the stats bean
2224	Creates a snapshot of the active stats .
2225	Ensures that the directory exists .
2226	Writes the specified batches to the specified batch .
2227	Write a batch of tables to a batch .
2228	Writes the specified records to the database .
2229	Trigger no more data events .
2230	Detect new partition information
2231	Updates record header based on Avro schema .
2232	Process a single group element .
2233	Checks if two stages are the same .
2234	Main entry point .
2235	Configures the OAuth and Build client builder for the given issues .
2236	Resolve headers .
2237	Get the HttpMethod value for the given method .
2238	Set null types .
2239	Returns null if the field does not exist .
2240	Load a schema from a schema registry .
2241	Register a schema
2242	Retrieves the schema from the registry
2243	Retrieves the schema ID for the given subject .
2244	Load schema from registry .
2245	Writes the schema id .
2246	Detects the schema id of the data
2247	Get the default values from a schema
2248	Parses the payload into a list of records .
2249	Log the validation details .
2250	Gets the bad records from the error sink .
2251	Initializes the schema .
2252	Returns the collection of the outgoing edge vertices for the given vertex .
2253	Returns the collection of the direct edge vertices for the given vertex .
2254	Serialize an offset map .
2255	Deserialize an offset map .
2256	Send a report to the queue .
2257	Get a report using the provided ID .
2258	Checks if the checkpoint file exists .
2259	Writes the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handle an error .
2262	Handles an archive
2263	Returns a reader for the current file .
2264	Releases a reader .
2265	Sets the dpm base URL .
2266	Add a default header .
2267	Parses a date .
2268	Escapes the given string .
2269	Get the client .
2270	Init GPU connection
2271	get table metadata
2272	create bulk introser .
2273	Creates a new event builder .
2274	Build Avro schema from a map of fields .
2275	Converts an Oracle operation code to a SQL code .
2276	Add jars to the job configuration .
2277	Add jars to a job .
2278	Check if the field order by name match the fieldName
2279	Checks the condition expression for a given field .
2280	Gets the offset of a file .
2281	Set the premain method .
2282	Get the origin parallelism .
2283	Runs a BigQuery query .
2284	Convert the fields to a map .
2285	Get description of a table
2286	Validates that the table accepts inserts .
2287	Returns the column type for the given field
2288	Checks if the field is nullable
2289	get table schema
2290	get column properties
2291	Returns the appropriate class for the given type name
2292	Initializes the AerospikeClient instance .
2293	Get topic name
2294	Upgrade the configs .
2295	Returns an InputStream for reading the file .
2296	Returns an OutputStream for writing to the file .
2297	Returns true if the file exists .
2298	Parse a string representation of an FsPermission .
2299	Verify that all services are available .
2300	Creates a new SimpleAggregator instance .
2301	Returns the aggregator unit .
2302	Creates the aggregator data .
2303	Create a new aggregator .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls the data window to a new data window .
2307	Acquires a login manager for the specified login type .
2308	Release the LoginManager .
2309	Converts a glob to a regular expression .
2310	Lists the objects in the S3 bucket in the specified bucket .
2311	Stops the snapshot .
2312	Produce empty batches for idle runners .
2313	Creates the failure snapshot on the pipeline .
2314	Converts a Record to a BoundStatement
2315	Sets the configuration .
2316	Generate lookup key .
2317	Handle partitioning mode .
2318	Reads a line from the reader .
2319	Roll the timer .
2320	Enable DPM with given DPM info .
2321	Disable the specified DPM configuration .
2322	Normalizes the DPM base URL .
2323	Retrieve a user token .
2324	Logout the user
2325	Updates the token file .
2326	Updates the dpm . properties file .
2327	Generates a schema for the given field .
2328	Creates the complex schema for a field .
2329	Get the decimal scale or decimal scale or precision .
2330	Get the default value for a given schema
2331	Initialize metrics if needed .
2332	Compares two files .
2333	Returns the index of the group with the specified index
2334	Get the names of the groups
2335	Checks if s is an escaped character .
2336	Determines whether a character at the given position is escaped .
2337	Searches for a character s inside a character class .
2338	Count number of open parens .
2339	Extract group information from a named pattern .
2340	Replaces the given regular expression with a replacement character .
2341	Performs a get request .
2342	Refresh the schema for the given schema and table .
2343	Determines whether a transaction entry is expired .
2344	Returns the offset of the current file .
2345	Fast forward .
2346	Create an empty detached stage .
2347	Converts a string to a number .
2348	Parse a part .
2349	Parse N Values .
2350	Lookup the primary keys for the specified table .
2351	Creates the custom field mapping .
2352	Returns the SQL type name for a field .
2353	Gets the table name .
2354	Set primary keys in a record .
2355	Handle a JDBC exception .
2356	This method does the actual task execution .
2357	Prepare the pipeline context .
2358	Calculates the metrics for a pipeline context .
2359	Flatten the entire record .
2360	Create a detached stage .
2361	Execute the action .
2362	Gets the columns from the record .
2363	Returns the condition for a partition column .
2364	Validates the offset and column names of the given offset .
2365	Returns requested content generator definitions .
2366	Gets non - empty arguments .
2367	Returns the operation .
2368	Convert bytes to display format
2369	Performs a scan .
2370	Find pending files
2371	Checks if the specified name is whitelisted .
2372	Check if the versions match the expected versions
2373	Entry point for the BootstrapCluster .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a JdbcRecordWriter .
2377	Creates a new JdbcRecordWriter .
2378	Upgrade the V1 configuration .
2379	Extract named groups from raw data .
2380	Queues a consumer commit on the queue .
2381	Create an embedded SDC .
2382	Sets the fields in the record .
2383	This method returns a list of all pipelines that have changed in the pipeline .
2384	Creates a new Ack collector result .
2385	Creates a gauge .
2386	Gets the columns for the given record .
2387	Generate header attributes for a file .
2388	Validate a record .
2389	Deletes the tempquet file .
2390	Get avro input stream .
2391	Get a DataFileReader for the given input stream .
2392	Write parquet data
2393	Check the input field for encryption .
2394	Ensures that the field is encrypted .
2395	Checks the input field decrypt data .
2396	Ensures that the field is encrypted .
2397	Prepares the given field to encrypt data .
2398	Replaces the current pattern with the new pattern .
2399	Appends a replacement string to the given string .
2400	Returns the named groups of the first match .
2401	Replace all properties with the given replacement string .
2402	Ensures that the avro schema exists
2403	Retrieves the value of a global variable .
2404	Create the start event record .
2405	Create a stop event record .
2406	Fix offset .
2407	Extract value as runtime type .
2408	Executes the add - partition query .
2409	Executes the set - table s properties .
2410	Describe a database .
2411	Executes the given query .
2412	Executes a query .
2413	Run pipeline execution .
2414	Iterate over pipeline pipes .
2415	Returns the offset commit trigger .
2416	Check to see if a record error pipe is stopped .
2417	Accepts consumer .
2418	Get the row id for a record
2419	Gets value from field .
2420	Sets a fragment in a record .
2421	Sets the specified JsonDocument in a record .
2422	Sets the n1QL row in the record .
2423	Handle partial file data format .
2424	Determine if the given transaction is in the incomplete transactions list .
2425	Internal method used to catch exceptions .
2426	Sets the name of the stage creator .
2427	Logout from Kerberos .
2428	Set the exceptions from the configuration .
2429	Replace variables in the path
2430	Ensure that the classloader can access permissions .
2431	Main entry point .
2432	Get the directory path for a given record .
2433	Renames a temporary file .
2434	Determines if the record should be rolled back .
2435	Check whether the given string matches the given pattern .
2436	Returns a map of the offsets stored for this file .
2437	Returns the remaining wait time .
2438	Get the offsets in the map .
2439	Creates a new instance of StageLibraryDelegate .
2440	Create a delegation definition for the given stage library .
2441	Creates a new instance of StageLibraryDelegate .
2442	Get a metric value from the metrics registry
2443	Find the end of the RFC26 section end of a RFC16 section .
2444	Gets the body size .
2445	Save a byte buffer to a temp file
2446	Instantiates a new SSLServerSocketFactory based on the classpath .
2447	Returns the mime type associated with the given URI .
2448	Handle a session .
2449	Stops the server .
2450	Add routes to the router .
2451	Send response .
2452	Send body .
2453	Creates a new Response instance .
2454	Whether we should use the gzipped content type .
2455	Adds a cookie to the request .
2456	Unload the queue .
2457	Decode cookie value .
2458	Encode cookie value .
2459	Sets the table name .
2460	Extracts the user name from the principal .
2461	Insert session repository filter .
2462	Resolve the principal .
2463	Load a session .
2464	Returns the JNDI name for the mail session .
2465	Returns an array of canonical parameter names of the given view method .
2466	Register an interposed synchronization object .
2467	BeforeCompletion is called before the last Synchronization list is processed .
2468	Get the current transaction
2469	Processes the kernel factories .
2470	Determines whether the cache region name is associated with the cache .
2471	Read server config dependencies .
2472	Decreases the current read lock count .
2473	Increment read lock count .
2474	Adds a service for the given class .
2475	Calculate the next expiration calculation .
2476	Add search dependencies to the deployment .
2477	Adds the top level bdas to the root of the deployment .
2478	Create the JSE archive meta data .
2479	Sets config name and file .
2480	Get JS meta data .
2481	Gets the servlet URL mappings .
2482	Get servlet class mappings .
2483	Resolve the view .
2484	Gets the names of all available Connectors .
2485	Parse core environment element .
2486	Parses the process ID environment element .
2487	Returns the PathAddress for the operation .
2488	Set the path address .
2489	Returns the attribute value .
2490	Returns whether or not the given operation should be included in the given operation .
2491	Creates a composite operation .
2492	Creates an add operation .
2493	Creates an Add operation node .
2494	Creates a read - attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine - attribute operation .
2497	Returns the value associated with this context .
2498	Adds a URL context factory for the given scheme .
2499	Removes a factory for a given scheme .
2500	Loads all validator providers .
2501	Modify the given deployment .
2502	Configure endpoint servlets .
2503	Modify the context root .
2504	Gets the transport class name .
2505	Set the run as identity .
2506	Pop the run as identity
2507	Process the management servlets .
2508	Injects the value of the specified property with the specified value .
2509	Checks if the class type matches the argument type
2510	Finds the method with the given name and property type .
2511	Find field .
2512	Initializes the command line options .
2513	Derives information from the request .
2514	Collect a single JAR report .
2515	Collect a JAR report .
2516	Registers a new resource adapter deployment .
2517	Unregisters a ResourceAdapter deployment
2518	Register the transformers .
2519	Write parameters to output stream .
2520	Read an exception from the stream .
2521	Returns the lock owner .
2522	Release lock .
2523	Add content to SSS .
2524	Add a ContainerMetaData to the deployment meta data .
2525	Get the component view .
2526	Invokes the given endpoint .
2527	Returns the view method which matches the given method .
2528	Checks if method matches view method .
2529	Create resource description resource .
2530	Get the EJB security meta data for an endpoint .
2531	Determines the domain .
2532	Ensure the two security domains are the same .
2533	Sets the IDL name .
2534	Returns the absolute name of this entry .
2535	Creates a new JndiName from the given string .
2536	Process the deployment .
2537	Override handleRequestCompleteListener in order to perform processing .
2538	Returns true if the transaction is in a transaction .
2539	Returns the TransactionSynchronization registry .
2540	Get ConnectionFactory
2541	Get last component of name
2542	Returns true if the name is empty .
2543	Creates an exception from the name and name .
2544	Creates a new naming exception .
2545	Creates an NamingException .
2546	Creates a new InvalidProceedException .
2547	Create a naming enumeration from a collection .
2548	Binding the specified value to the specified value .
2549	Get an activeMQ component control .
2550	Parses the connection attributes .
2551	Create a component instance .
2552	Returns a virtual machine virtual file .
2553	Resolve runtime name .
2554	Creates a listener builder .
2555	Returns a PrimitiveAnalysis object for the given class .
2556	Shuts down the component .
2557	Gets url patterns .
2558	Get the servlets metadata .
2559	Get the servlet mappings from the JBossWebMetaData .
2560	Get the SecurityConstraints metadata .
2561	Get the LoginConfigMetaData object from the JBossWebMetaData . If the JBossWebMetaData is not present in the JBossWebMetaData return it .
2562	Returns the context params meta data .
2563	Get the resource collections metadata from the security constraint metadata .
2564	Get the initParams metadata for the servletMetaData .
2565	New security constraint metadata .
2566	Create a new WebResourceCollectionMetaData object .
2567	Creates a new servlet meta data .
2568	Creates a new ServletMappingMetaData object .
2569	New auth constraint meta data .
2570	New UserDataConstraintMetaData .
2571	New ParamValueMetaData object .
2572	Creates a new param value with the specified key and value .
2573	Register appropriate interceptors for SFSB component .
2574	Process injection targets .
2575	Stop the container
2576	Resolve JNDI name .
2577	Resolves an attribute definition .
2578	Gets the type of the given url pattern .
2579	Check if a connection factory should be created
2580	Check if the resource adapter target is a external pooled connection factory
2581	Get activeMQ server name .
2582	Returns the default persistence unit name .
2583	Starts the activity .
2584	Stop the activity .
2585	Suspend the server .
2586	Resume the activity .
2587	Called when the invocation is complete .
2588	Called when a transaction is created .
2589	Starts the controller .
2590	Stops the controller .
2591	Returns a capability service name for the given dynamic parts .
2592	Create the resource roots .
2593	Recursively find all class loaders .
2594	Determine whether or not the persistence unit transformer should be used .
2595	determines if two - phase bootstraps are enabled .
2596	Returns true if default data source is allowed false otherwise .
2597	Helper method to skip mixed synchronization type checking .
2598	Gets an ORB from the given server and environment .
2599	Initializes an ORB .
2600	Initialize method handle methods .
2601	Set the Active naming store .
2602	Validate default values .
2603	Check the type of a parameter .
2604	Lookup the default value annotation .
2605	Validate base type method .
2606	Gets the array of ExtendedEntityManagerManager objects .
2607	Convert a transaction status to a string representation .
2608	Adds cache dependencies for a given cache type .
2609	Extract database dialects .
2610	Identifies the database dialect .
2611	Identify dialect .
2612	Checks if the database exists .
2613	Convert a string to a scheduler date .
2614	Sets the node name .
2615	Marks the deployment as parent .
2616	Read parameters from an input stream .
2617	Writes the object to the output stream .
2618	Write an exception to an output stream .
2619	Performs a lookup on the specified class .
2620	Begins creation of SFSB
2621	Ends the SFSBranch stack .
2622	Gets the current SFSBatch stack invocation .
2623	Push new entity managers to the current SFS call stack .
2624	Pop the current SFS call stack .
2625	Get the current SFS call .
2626	Add dependencies for beans .
2627	Process the managed beans .
2628	Process phase listeners .
2629	returns the type IDL name of the RMI
2630	Inserts a value into a Any object
2631	Converts a Java name to an IDL identifier .
2632	Returns true if the given string is a reserved IDL keyword .
2633	get a signature for a class
2634	Returns the signature of a method .
2635	Returns the name of a primitive type .
2636	Returns the BatchPermission for the given name .
2637	Get or create the EntityScopedEntityScopedEntityScopedEntityScopedEntity
2638	Associates the specified value with the specified key .
2639	Converts a Camel role definition to a security role .
2640	Returns the most recent entity version of the given timer .
2641	Load timers for a given timed object id .
2642	Get the directory for the timed object id .
2643	Adds a listener to the specified target scope .
2644	Remove a listener for a naming listener .
2645	Fires an event .
2646	Returns a consumer that logs an exception when closed .
2647	Adds a private credential to the Subject .
2648	Get an object instance
2649	This method will add transaction interceptor for viewManagement
2650	Helper method for substring substring .
2651	Create a transport configuration for the InvmConnector .
2652	Adds the name of the app that should be relative to the deployment unit .
2653	Gets the root deployment unit .
2654	Returns the service name for the view .
2655	Create a new view configuration object .
2656	Create an InjectionSource .
2657	Returns the view interceptors for a method .
2658	Adds an interceptor to this proxy .
2659	Add an interceptor to the interceptor .
2660	Returns the client interceptors for a method .
2661	Adds an interceptor to this proxy .
2662	Add a new client interceptor
2663	Put private data .
2664	Gets an exception reporting an unexpected XML element .
2665	Gets the list of EJbEndpoints from a deployment .
2666	Returns a list of POJO endpoint elements from the deployment .
2667	Extracts the endpoint name from the servletMetaData .
2668	Gets the endpoint class name .
2669	Returns the servlet with the given name .
2670	Returns the required attachment value .
2671	Returns an optional attachment from the deployment unit .
2672	Gets the JBossWebMetaData from the deployment unit .
2673	Get the jboss port component meta data component .
2674	Gets the webservice endpoint by class name .
2675	Determine the context root .
2676	Load a class .
2677	Returns the URL of a resource
2678	Returns a collection of Resource URLs .
2679	List the resources under the given path
2680	Closes the current call .
2681	Get entity manager by pu scoped name .
2682	Register cleanup listener for JMS context
2683	Process the war .
2684	Update server config .
2685	Check if all fields are public .
2686	Factory method for creating a new endpoint .
2687	Create a new unified WS deployment model .
2688	Returns true if the deployment is a Jaxrs deployment .
2689	Sets the next timeout .
2690	Set the timer state .
2691	Merges the deployment data .
2692	Process the deployment phase .
2693	Adds a dependency to the EJB view .
2694	Gets all container interceptors .
2695	Checks if the given method is level level .
2696	Check if one element is required .
2697	Returns the type of the given class .
2698	Returns the component type at the specified index .
2699	Creates a service definition for the keystore service .
2700	Returns a resource definition for the key managers .
2701	Creates a resource definition for every trust manager .
2702	Parses a name into a name .
2703	Converts a string into an array of components .
2704	Parse a component component .
2705	Deactivates this IRObject .
2706	Convert an object to a reference .
2707	Authenticate using the given username and password .
2708	Checks if class matches type
2709	Lookup a binding by name
2710	Unbind JNDI name .
2711	instantiate a bean instance
2712	Configure bean metadata .
2713	Creates a new lifecycle join point .
2714	Gets the current context selector .
2715	Convert a bean name to a bean name .
2716	Convert an instance state to instances name .
2717	Returns the EEModule class with the given name .
2718	Process annotations .
2719	Post parse the persistence units to be parsed .
2720	Validates the given descriptor .
2721	Create war metadata .
2722	Create the web app descriptor .
2723	Determine the auth method of the deployment .
2724	Process the deployment xml .
2725	Handles a stateless session bean .
2726	Creates a stub class .
2727	Returns an anonymous object id .
2728	returns a copy of the persistence providers
2729	Clear the cache of deployment specific providers
2730	Adds a persistence provider to the deployment list .
2731	Find the parent of the given classloader
2732	Add dependencies for the deployment .
2733	Add persistence unit metadata .
2734	Sets the annotation indexes for the deployment .
2735	Gets the persistence provider adaptor .
2736	Save the shared persistence provider adaptor
2737	Lookup the specified PersistenceProvider
2738	Returns all annotated classes .
2739	Create an EJB archive meta data .
2740	Builds the enterprise bean meta data .
2741	Attempt to refresh the participant of the participant .
2742	Get an analysis for the given class .
2743	lookup done for a given class
2744	Create a work in progress .
2745	Returns the IDL module name .
2746	Converts an integer into a hexadecimal string .
2747	Converts a long to a hexadecimal string .
2748	Determine whether the given method is an accessor method .
2749	Determine whether the given method is a mutator .
2750	looks for non - app exceptions
2751	Converts an attribute name to an attribute read name .
2752	Change attribute write name .
2753	Updates the name of an overloaded operation .
2754	method to replace the case names with the same name
2755	Escape an IBAN name .
2756	Parse an XTSEnvironment element .
2757	Parse the default context propagation element .
2758	Process attributes .
2759	Load PersistenceProvider module by name
2760	Creates an add operation handler .
2761	Add the module dependencies for the deployment phase .
2762	Write an attribute .
2763	Retrieves the method inff from the interceptor context .
2764	Create a new session ID .
2765	Infers the destination name from the given address .
2766	Register a set of endpoint handlers .
2767	Gets the job names .
2768	Initialize the service .
2769	Returns the URI of the request .
2770	Create a new Resolver using the supplied URL and environment .
2771	Lookup an object by its name .
2772	Bind the specified object to the specified object .
2773	Call the unbind operation .
2774	Returns an enumeration of the bindings for the given name .
2775	Call the destroy method .
2776	Destroy a subcontext
2777	Bind a new context .
2778	Create a subcontext with the given name .
2779	Lookup a link .
2780	Adds a property to the environment .
2781	Remove a property from the environment .
2782	Add the required transformations to the resource .
2783	parse the credential element
2784	Remove a security domain
2785	Lookup JNDI for given context name .
2786	Create a modular reference .
2787	Create a module reference .
2788	Create a modifiable reference .
2789	Returns a LocalIDLType for the given type code .
2790	Wait for a service .
2791	Computes the masked password for the keystore .
2792	Initialize the security vault .
2793	Start the vault session .
2794	Prints a display for the given attribute .
2795	Displays information about the vault configuration .
2796	Return the configuration of the keystore .
2797	Throws an exception if the given value is not null .
2798	Get the service name for a deployment .
2799	Inserts a string value into a Any object .
2800	Checks if the given permission implies this permission .
2801	Returns the string that can be used to perform actions .
2802	Gets the name of the log file .
2803	Send a state change notification
2804	Convert a CORBA object to a CORBA state .
2805	Returns the value of the specified type .
2806	Gets the context service name .
2807	Returns all interceptors .
2808	Add an interceptor for a method .
2809	Adds a dependency .
2810	Returns all component interceptors associated with a method .
2811	Returns an ordered list of interceptors for the given method .
2812	Add an interceptor to the timeout interceptor .
2813	Adds an interceptor to the list of around constructors .
2814	Adds a post construct interceptor to the chain .
2815	Adds a preDestroy interceptor to the chain .
2816	Adds a pre passivate interceptor .
2817	Add an interceptor to the chain .
2818	Set the service create service .
2819	Remove JNDI aliases from the model .
2820	Accepts the EJB transport context .
2821	Get the context service name of a component .
2822	Get the context service name for the given module .
2823	Returns a bindInfo for an environment variable .
2824	Returns a bindInfo for the specified JNDI name .
2825	Get an LRU cache for the user .
2826	returns an array of ValueMemberDefinitions
2827	returns an array of ValueMemberDefinitions for typeCode
2828	Creates the subsystem root node .
2829	Parses a configuration element .
2830	Start the service .
2831	Adds a weld integration .
2832	Returns the service name for the job operator .
2833	Adds a component .
2834	Add a message destination .
2835	Get the views for a given view type and deployment root .
2836	Returns the set of components for a given component .
2837	Returns the view descriptions for a given component .
2838	Resolve a message destination .
2839	Build the transformers .
2840	Adds a default attribute with a default value .
2841	Helper method to rename an attribute .
2842	Pop the identity context
2843	load ids to the ids
2844	Checks that the version is missing .
2845	Compute the slot for the specified JSF version .
2846	Get the TypeCode for a constant .
2847	Add TypeCode for given class
2848	Checks if the package exists in the local container .
2849	Collect all interfaces of a ContainerAnalysis .
2850	Method to add the abstract base valuetype definitions .
2851	Add the given class .
2852	Add an interface definition .
2853	Add a value definition to this module .
2854	Add an exception definition .
2855	Get class level injection type .
2856	Checks if JTS is enabled .
2857	Start the naming store .
2858	Stops the store .
2859	Check if the requested method is allowed .
2860	Check transaction sync .
2861	Retrieves a set of all component classes in the deployment .
2862	Returns a map of timers to wait for transaction completion .
2863	Gets extra parameters .
2864	Get parameters from the model .
2865	Convert a type to a Class .
2866	Converts a value to an object of the given type .
2867	Return the type of the values array
2868	Checks if the given type names are equal .
2869	Returns the next binding .
2870	Gets more more bindings .
2871	Map a binding .
2872	Registers a health check .
2873	Close health check .
2874	Returns a reference for a given locator .
2875	Creates a handle for an EJB home .
2876	Returns value as Enum .
2877	Skips the specified amount of bytes in the input stream .
2878	Throws an exception if not .
2879	Adds a component description to the module .
2880	Add class loaders
2881	Unbind a component .
2882	Lookup a name .
2883	Returns the list of names of the given name .
2884	Returns the list of bindings for the given name .
2885	Adds a context handle .
2886	Save the context object properties .
2887	Creates an IO subsystem .
2888	Create the welcome content handler .
2889	Get or create a new bean instance from the pool .
2890	Calculate the operation analysis map .
2891	Collect metrics for a resource .
2892	Creates a WSE endpoint deployment .
2893	Perform the deployment
2894	Publish the webapp .
2895	Stops the web app .
2896	Start the service .
2897	Register an endpoint configuration .
2898	Retries the timer retry .
2899	Called after timer processing .
2900	Get the declared methods
2901	Get the declared fields
2902	Get the constructor
2903	Get a Method object from a class
2904	Adds an extension to the operation context .
2905	Check to see if the parameter is allowed to be ignored .
2906	Migrate generic transport class for generic transport .
2907	Synchronized .
2908	Run the job if not cancelled .
2909	Change the type of this property .
2910	Checks if an indexed function without index without index .
2911	Estimates the number of indexes of an object .
2912	Find all the classes in the directory .
2913	Gets the classes that implement the given interface .
2914	Get the generic type of a field .
2915	Evaluates the string .
2916	Derives a field type from the record .
2917	Updates the record with the given record .
2918	Find record by ID .
2919	Returns the minimal set of nodes for sharded query
2920	Moves all equalities from the given WHERE clause into the original list .
2921	Add orderBy to the orderBy projection
2922	Extract sub - queries from the query plan .
2923	Checks if the given ID is from the cluster .
2924	Handle class with index .
2925	Recursively find the diamond hierarchy of the given class .
2926	Determine the order direction of the query
2927	Returns true if the given key condition requires multiple indexes .
2928	Finds the best index descriptor for the given set of indexes .
2929	Build index search descriptor for fulltext .
2930	Compute common factor for common factors .
2931	Creates an ODocumentHandling strategy instance based on a strategy .
2932	Allow an operation to perform a specific role .
2933	Checks if a rule is defined .
2934	Compose server status .
2935	Initialize the system database .
2936	Load local databases .
2937	Remove a member from the cluster .
2938	Return a new lock manager
2939	Assigns lock manager from cluster .
2940	On commit .
2941	Rolls back the micro - transaction .
2942	Updates the identity record for a record .
2943	Updates the record cache after rollback .
2944	Prepare file creation .
2945	Perform atomic move on target .
2946	Gets disjoint patterns .
2947	This method should only be executed once .
2948	Adds a character to the builder .
2949	Returns true if the connection is connected .
2950	merge two buffers
2951	Split a short into two buffers .
2952	Execute the command .
2953	Add a single word to the index .
2954	Removes all words that match the given key .
2955	Executes the OQuery command .
2956	Run the first element of the first query .
2957	Create new file
2958	Check to see if we re accessing the region .
2959	Replace the content with a new file .
2960	Execute a command .
2961	Method to end the request .
2962	Add host to localhost
2963	Begin a request to a remote node .
2964	Gets the database .
2965	Get a connection by ID and protocol id
2966	Kill the client .
2967	Interrupt the channel .
2968	Disconnects a channel
2969	Push drib configuration2 to clients
2970	Swaps the entry at the specified index .
2971	Closes all locks .
2972	Synchronize the schema
2973	Update the metadata .
2974	Returns the last record in the iterator .
2975	Returns the next character .
2976	Execute the query .
2977	OnAsyncReplicationError .
2978	Registers an algorithm .
2979	Get number of open files .
2980	Returns true if the given clause can be executed on the given target .
2981	Move this buffer s position .
2982	Fills the buffer with the specified length .
2983	Execute the steps until a return value is found .
2984	Execute full step .
2985	Evaluate the record .
2986	Execute the DROP algorithm .
2987	Loads the configuration .
2988	Parse an executor .
2989	Execute the request .
2990	Updates the schedule starting at the given startNode .
2991	Adds a new index definition to this composite .
2992	Splits an aggregation into an aggregate .
2993	Determine object to object .
2994	Gets the collate .
2995	Get string value .
2996	Updates the probe .
2997	Execute the command .
2998	Build an ODocument from a file
2999	Checks if the password matches the hash .
3000	Creates a hash of the input string .
3001	Checks if PBKDF2 algorithm is supported by PBK2 .
3002	Creates an OIndex .
3003	Return an iterable of all vertices in the graph
3004	Return an Iterable over the edges in the graph
3005	Returns the partition key for the partition .
3006	Gets the timeout in milliseconds .
3007	Gets the supported features .
3008	Checks if the changes container is filled up .
3009	Parse timeout .
3010	Parses the lock .
3011	Creates a cluster .
3012	Frees a cluster
3013	Start the cache .
3014	Shut down the Orientiler
3015	Returns a singleton result set for the given entity .
3016	Grant a role to a specific resource .
3017	Revokes a role on a resource .
3018	Evaluates the record .
3019	Bind parameters .
3020	Resets the hash table .
3021	Returns the index of the item in the table .
3022	Applies a hash function to a random number .
3023	Create an index .
3024	Drops indexed indexes .
3025	Gets the index .
3026	Returns the linked class .
3027	Converts the document to a document .
3028	Removes a listener .
3029	Register a database .
3030	timeout a request
3031	Creates a copy of the database .
3032	Attempts to merge the values of this object into this object .
3033	Replace the BTree object with the given object pointer .
3034	Transform result .
3035	Execute the command .
3036	Closes all pooled databases .
3037	Invoked when a storage is unregistered .
3038	Returns a set of the names of the functions defined in the system .
3039	Replies the names of the collate types .
3040	Return all command types
3041	Gets the field size and type from the stream .
3042	Write status code .
3043	Writes the headers to the response .
3044	Write the records to the response .
3045	Write a record to the response .
3046	Send a response .
3047	Send a stream .
3048	Opens database transaction
3049	Commits this database .
3050	Listen for changes in collection .
3051	Completes the operation .
3052	Push all registered components to the snapshot .
3053	Push the WritCacheCounters to the snapshot .
3054	Push storage counters onto the snapshot .
3055	Push the WALCounters onto the snapshot .
3056	Push all counters for a component
3057	Stops the flush timer .
3058	Stops the fuzzy checkpoint timer .
3059	Stops the full checkpoint timer .
3060	Stops commit timer .
3061	Stops the log record timer .
3062	Stops the flush timer .
3063	Parse a SQL statement
3064	Initialize receive messages .
3065	Initialize reconnect timer .
3066	Removes the record .
3067	Sets a property on this graph element .
3068	Removes a property from the vertex .
3069	check if a class in the schema exists
3070	Wrap index changes .
3071	Defines an instance of a vertex attribute .
3072	Define an edge attribute strategy .
3073	Filters records by class name .
3074	Return a list of new record entries based on cluster IDs .
3075	Add an index entry .
3076	Merges two sets into one
3077	Update the record .
3078	Can execute function without index .
3079	Prepares the given keys .
3080	Write a single page .
3081	Reads a page from the disk .
3082	Truncate the buffer to the given page index .
3083	Opens the file .
3084	Check if replication is active .
3085	Replies the strategy for the new node .
3086	Is the cluster s sync mode?
3087	Determines whether this cluster is READ or not .
3088	Return a map of server cluster names to cluster names
3089	Get all the servers in the cluster .
3090	Check if the server contains all servers .
3091	Check if a server contains a specific cluster
3092	Get the master servers .
3093	Get the set of configured servers .
3094	Get the clusters on a particular node .
3095	Gets the clusters owned by the specified node .
3096	Replies the owner of the cluster .
3097	Replies the owner of a cluster .
3098	Get the servers in the cluster .
3099	Get the set of registered servers .
3100	Returns the set of data centers for the project .
3101	Gets write quorum .
3102	Check if the cluster is sharded .
3103	Gets server names .
3104	Gets the data center of a server .
3105	Gets the global read quorum .
3106	Gets the write quorum .
3107	Gets the cluster configuration .
3108	Gets the data center for a distributed database configuration .
3109	Clears initialization stack .
3110	Retrieves an index by its name .
3111	Drops an index .
3112	Add a new vertex with an id .
3113	Add an edge to the graph
3114	Returns a vertex given its id
3115	Get an iterable of vertices of the specified class .
3116	Returns an iterable over edges of the specified class .
3117	Returns an edge based on its id
3118	Reuse the current database .
3119	Shuts down the database .
3120	Returns the base type of vertices
3121	Gets a vertex type .
3122	Create a new vertex type .
3123	Drop a vertex type .
3124	Gets an edge type .
3125	Create an edge type .
3126	Return the element matching the specified id
3127	Drop an element index by its class name .
3128	Create a key index .
3129	Remove a specific exception listener
3130	Fire a background data flush event .
3131	Stop monitoring .
3132	Registers the mbean with the given storageId .
3133	Unregister a MBean
3134	Fetch all cached WritCacheCounters
3135	Fetch all system statistics
3136	Fetch component counters data .
3137	Compress the response string
3138	Get a property by name .
3139	Detach this instance from the persistence model .
3140	Returns the version of the object .
3141	Append command .
3142	Sets the object dirty .
3143	Unset the dirty object .
3144	Get the set of index types .
3145	Returns the set of engine names .
3146	Returns a list of missing nodes .
3147	Retrieves a list of duplicated responses
3148	Returns the best response group .
3149	Compute the quorum response .
3150	Get the received responses .
3151	Returns an execution plan from the database .
3152	Allows the execution of an indexed function .
3153	Returns the library code for the given database .
3154	Release database engine .
3155	Returns the position of the next page .
3156	Update the size of this RidBag .
3157	Returns the value at the given index .
3158	Checks if the index can be used by an index by an order by chain .
3159	Find the index of outside of the text .
3160	Jump to the specified text .
3161	Jump to the current position .
3162	Sets the fetch plan .
3163	Add a repair record to the chain .
3164	Cancel a record .
3165	Enqueue a repair cluster .
3166	Gets the dependencies of a pattern .
3167	Creates a pojo instance
3168	Register entity classes .
3169	Register an entity class for the passed class
3170	Sets the handler .
3171	Acquires a database .
3172	Returns the number of connections available to the database .
3173	Acquires a database .
3174	Update the cluster .
3175	Lookup an iterator of the given class loader using the default class loader .
3176	Check the cache memory configuration .
3177	Creates a vertex from a JSON object .
3178	Creates an edge from a JSON object .
3179	Creates a GraphSON representation of the given element .
3180	Create an object node from the given element s properties .
3181	Execute an import .
3182	Returns the status of the job .
3183	Get the active data center map .
3184	Extracts the algorithm from a cipherTransform .
3185	Create an object from an OSymmetricKeyConfig .
3186	Creates a new SSymmetricKey from a file .
3187	Creates a new SSymmetricKey from an input stream .
3188	Encrypt a string .
3189	Save the key to an output stream .
3190	Saves the keystore to a keystore .
3191	Set child context .
3192	Adds an object to the unique result .
3193	Gets the value as object .
3194	Authenticate a database .
3195	Get the value of this map entry .
3196	Get the record .
3197	Read current record .
3198	Get transaction graph
3199	Gets no tx .
3200	Setup database pool .
3201	Get a property by name .
3202	Stops the transaction .
3203	Parses the token .
3204	Returns the next token .
3205	Returns the token at the specified index .
3206	Generate ParseException .
3207	Returns an iterator of the vertices in the graph .
3208	Removes the vertex .
3209	Adds an edge to the graph
3210	Add an edge to the graph
3211	Get the connection class name .
3212	Get the connection class .
3213	Processes a set of rids of records .
3214	Returns the declared console methods .
3215	Executes the given task on local node .
3216	Get the number of nodes that match the given status .
3217	Perform backup operation .
3218	Sleep for next retry .
3219	Returns the value of an argument .
3220	Check if there are any parameters in the request .
3221	Connect to the OConnect server .
3222	List all databases .
3223	Return server information
3224	Check if a database exists .
3225	Drop a database .
3226	Free a database .
3227	Releases a database .
3228	Get the cluster status
3229	Execute an index .
3230	Gets the active graph .
3231	Parses the retry option .
3232	Save record .
3233	Delete record .
3234	Gets the authentication header for the database .
3235	Authenticate user .
3236	Check if user is authorized
3237	Main loop of the server
3238	Adjusts the beginning of the line and column of the token .
3239	Sets the page pointer .
3240	Get a bucket pointer .
3241	End an atomic operation .
3242	Acquires exclusive lock on an operation .
3243	Change the maximum amount of memory used by the disk cache .
3244	Start listening for connections .
3245	Read server parameters .
3246	Shuts down the log manager .
3247	add item to list
3248	Removes the entry from the map .
3249	Acquires an entry from the cache .
3250	Returns the value associated with the given key .
3251	Clears all data .
3252	Closes the map .
3253	Empty read buffers .
3254	After write operation completes .
3255	Called after an entry has been read .
3256	Puts an entry into the read buffer at the given index .
3257	Returns the closest power of two to the given value .
3258	Handles a push request .
3259	Convert this key to a number .
3260	Convert all the values from the map to the underlying map .
3261	Return the serializer for the given OType
3262	Add shutdown handler .
3263	Returns an engine by name
3264	Perform optimization .
3265	Executes the query .
3266	Add a new reader state .
3267	Authenticates an OUser based on the token
3268	Create OAuth metadata metadata .
3269	Attempts to acquire a read lock .
3270	Returns the vertex at the given direction
3271	Returns the id of the element
3272	Sets a property .
3273	Removes a property from the graph .
3274	Deletes all pages from the root subtree .
3275	Deletes the contents of the file .
3276	End the batch import .
3277	Create a vertex in the graph .
3278	Parse a strategy word .
3279	get position positions from embedded collection
3280	Execute an index .
3281	Check if a field is valid .
3282	Creates a record from the record .
3283	Sets the version of the record .
3284	Returns the record type of a record .
3285	Initialize database instance .
3286	Print the stack trace of an exception .
3287	Execute an index query .
3288	Convert the item to record .
3289	Registers an instance of the command .
3290	Create a user configuration object from a user document .
3291	Analyze the search condition .
3292	Create indexed property .
3293	Attaches the given object to the given object .
3294	Get index class .
3295	This method is responsible for executing the next value in sequence .
3296	Truncates the document index .
3297	Adds a base class to this cluster .
3298	Adds the polymorphic cluster ids to the index of the cluster .
3299	Serialize a link to a document .
3300	Release a pointer .
3301	Check for unreleased direct memory leaks .
3302	Clears all allocated resources .
3303	Convert a byte array to an int .
3304	On open database .
3305	Installs the cluster owned by this class
3306	Dump server status .
3307	Returns the index of the specified object in the array .
3308	Finds the index of an object in the array .
3309	Gets the clusters .
3310	Handle the search result .
3311	Get the temporary rid counter .
3312	Reports a tip to the profile .
3313	Parses a fetchplan .
3314	Parse the keyword keyword .
3315	Optimized sort .
3316	Returns the status of the job .
3317	Executes the command .
3318	Handle error .
3319	Associates the specified value with the specified index .
3320	Rolls back the given micro - transaction .
3321	Execute the command .
3322	Register the cluster .
3323	Set the value of a property .
3324	Execute the database .
3325	Executes the DATABASE command .
3326	Delete the record from the database
3327	Callback for each record
3328	Deletes the specified record from the database .
3329	Counts the number of views in the schema .
3330	Counts the number of classes of the specified class .
3331	Activate this document .
3332	Register encryption algorithm .
3333	Returns the relative position of the byte at the given position .
3334	Parses the next word .
3335	Parses the last word .
3336	Parses the next chars .
3337	Parses the next keyword .
3338	Check if the given character is a separator .
3339	Execute the command .
3340	Clears the configuration files .
3341	Gets the offset of this buffer .
3342	Extract token string .
3343	Obtains an OAuth2 access token .
3344	Copy access token .
3345	Checks if there are more characters .
3346	Read a line from the byte array .
3347	Read a line from the buffer .
3348	Skip n bytes .
3349	Skips specified number of bytes .
3350	Ensures that the offset of the array is valid .
3351	Auxiliary method that performs a merge sort .
3352	Swaps the elements of the specified swapper .
3353	Simple quick sort .
3354	Constant - time MurmurHash3 MurmurHash3 128 - bit hashing algorithm .
3355	Constant - time MurmurHash3 hash function .
3356	Writes a byte buffer to the file .
3357	Truncates the file to the given size .
3358	Sets the current position .
3359	For consumer refresh metrics reporting .
3360	Waits for all tasks to complete .
3361	Find matches .
3362	Returns a set of types that can be used for compaction targets .
3363	Cleans up snapshots .
3364	Returns a hash code for a field
3365	Checks if two fields are equal
3366	Traverses the referenced schemas and traverses them down .
3367	Called when the announcement is complete .
3368	Called when the read state is complete .
3369	Reads header tags .
3370	Extracts the primary key of an object .
3371	Clear all entries
3372	Reads the ordinal from the data input stream
3373	Returns the number of bits used in this bit set .
3374	Returns a string representation of a field .
3375	Copies the contents of the given ByteData at the given position .
3376	Copies data from srcPos to destPosition
3377	Compares two byte arrays for equality .
3378	Copies elements from srcPos to dest .
3379	Orders data from source to dest .
3380	Reads data from an input stream .
3381	Writes len bytes to output stream
3382	Ensures that the segment is not empty .
3383	Returns the position of the given field .
3384	Calculate the total number of select buckets that match the hash table .
3385	Returns true if the given dataset contains collections .
3386	Generate the files .
3387	Generate the files for all the hollow schema
3388	Checks if the key matches the specified ordinal .
3389	Returns the record key for the specified ordinal .
3390	Create a FieldPath for a primary key .
3391	Create a field path for a hash index .
3392	Creates a new field path for a given prefix .
3393	Put an object into the cache .
3394	Calculate average word length .
3395	Returns true if the dictionary contains the specified key .
3396	Returns the percentage of the given cardinality between two cardinalities .
3397	Add a field to the filter .
3398	Determines a list of schemas in a collection of schemas .
3399	Initialize with default version defaults .
3400	Get the bit at a given index
3401	Find records that match the given field name and value .
3402	Find records that match the given field name and value .
3403	Set element match paths .
3404	Set the element match paths .
3405	Calculates the index .
3406	Restore the state from the last state .
3407	Runs the cycle .
3408	Excludes the specified key from the hash table .
3409	Exclude objects that are referenced by this instance .
3410	Writes the given blob header to the data output stream .
3411	Calculate type metrics .
3412	Write the message data to a buffer
3413	Writes a fixed - length integer in the buffer .
3414	Writes a fixed - length long to the buffer .
3415	Return an ordinal to the pool .
3416	Sorts this set .
3417	Hashes a key - value pair .
3418	Hashes a given key .
3419	Resize storage .
3420	Find a free ordinal for a given ordinal .
3421	prepare for write
3422	Compares the given key with the given key .
3423	Increases the size of the key array .
3424	Rehashes a key with the same key .
3425	Return an empty key array .
3426	Compares the fields of a match .
3427	Finds a matching object for the given key .
3428	Swap the current state of the current state .
3429	Calculates the size of a hash table .
3430	Run the compaction cycle .
3431	Writes a snapshot of the current state .
3432	Writes the delta .
3433	Adds the schema names to the set if not .
3434	Normalize field path to param .
3435	Reindex hash index .
3436	Finds a set of matching objects .
3437	Triggers an asynchronous refresh with a random delay .
3438	Triggers an async refresh after a delay .
3439	Creates a new type diff object
3440	Calculates the diff of type differences .
3441	Writes a long to the output stream .
3442	Writes a vInt to the output stream .
3443	Write a VInt to the byte array at the given position .
3444	Read a VInt from an input stream .
3445	Read a long as a long .
3446	Add view internal .
3447	Refresh the loading views size .
3448	Update the UI .
3449	Pull the pull event .
3450	Overrides the super scroll based on the given view .
3451	Adds a given rule to the given value .
3452	Adds a given facts to this rule .
3453	Creates a new rule builder .
3454	Creates a new rule builder .
3455	Returns a new rule builder .
3456	Returns a builder with the given result type .
3457	Start building rule with given name and value .
3458	Create a new builder with the given name and values .
3459	Adds a new Rule .
3460	Create an instance of the given rule .
3461	Returns the first annotated field of the given class .
3462	Returns the first annotated method of the given class .
3463	Gets the annotation .
3464	Register an auditable audit rule .
3465	Updates the status for the specified rule .
3466	Returns a map of status updates to their status .
3467	Define the RuleBook with the given result type .
3468	Adds an action .
3469	Adds an action to the rule .
3470	Resets the default value .
3471	Creates a new rule with the specified type .
3472	Gets the POJO rules .
3473	Reads an empty line from the table content .
3474	Converts a list of services to an array of Service objects .
3475	Get the port list from the build configuration
3476	Extract port ports from configuration
3477	Parse a port mapping configuration .
3478	Add port if not null .
3479	Get the first available port from the list .
3480	Adds missing parts to the service builder .
3481	Appends an image stream resource to a target file .
3482	Determines if the specified service port is compatible .
3483	Maps the given service name to an environment variable .
3484	Returns the host and port for the given service name
3485	Put a value into the map if it does not already exist .
3486	Merges the given map with the given map .
3487	Merge two maps .
3488	Put all values in map if not null .
3489	Waits until a pod is ready .
3490	Validates the Kubernetes id .
3491	To item list .
3492	Gets the resource version .
3493	Check if the pod is ready
3494	Returns the current context .
3495	Checks if the given name has a route with the given name .
3496	Checks if a resource exists in the given project .
3497	Parse and enrich fragment .
3498	Converts a map of environment variables to a list of EnvVar objects .
3499	Merge one resource .
3500	Merge empty maps and remove empty strings
3501	Check if podSpec is local or not
3502	Reads the configuration map .
3503	Adds the port if it is valid .
3504	Returns the JSON configuration string for the specified server .
3505	Returns the configuration of a plugin .
3506	Returns the secret configuration for the given id .
3507	Downloads a file .
3508	Compare two versions .
3509	Returns a combined processor configuration with the specified profile .
3510	Lookup a profile by name
3511	Loads profiles from classpath .
3512	Reads all profiles from the classpath with the specified extension .
3513	Finds the profile yaml file in the specified directory .
3514	Returns the list of profiles .
3515	Creates a list of profiles from a YAML file .
3516	Returns the image pull policy
3517	Checks if is openShift mode .
3518	Get replica count .
3519	Returns the first child element with the given tag name .
3520	Installs the template for the given entity
3521	Removes the tag with the given name .
3522	Apply a namespace .
3523	Applies the specified project to the specified project .
3524	Apply a project request to a project .
3525	Gets the namespace .
3526	On apply error .
3527	Create the Kubernetes list .
3528	Specifies the Kubernetes resource metadata .
3529	Returns environment variables .
3530	Convert duration string to seconds .
3531	Parses a duration string .
3532	Returns the list of files that match the given patterns .
3533	Helper method to disable OpenShift features .
3534	Checks if the service has an Ingress rule .
3535	Parses the given mapping from the given input stream .
3536	Returns a generator context .
3537	Extracts the generator config .
3538	Returns an enricher context .
3539	Extract enricher configuration from enricher
3540	Returns the default icon .
3541	Recursively copy the app config files .
3542	Loads properties from a URL .
3543	Gets the spring boot version .
3544	Create a list of service objects .
3545	Enqueue enricher .
3546	Gets the raw configuration map .
3547	Helper method to build a flattened map .
3548	Extracts the processor configuration from the config
3549	Extracts a single template from the Kubernetes list .
3550	Determine the build date .
3551	Returns the value for the given key .
3552	Returns an unmodifiable view of the configuration .
3553	Prepares a list of named processors .
3554	Adds the from builder to the builder .
3555	Returns the default from the given runtime mode
3556	Returns the image name .
3557	Gets the registry .
3558	Returns whether we should online on the device .
3559	Gets the external service URL .
3560	Returns the value of the given property as a boolean .
3561	Creates a new Jersey client .
3562	Create internal node .
3563	Scans through all plugins .
3564	Creates a new AmericanExpressionsBalance from a JSON string .
3565	Creates and fetches the rewards balance .
3566	Creates a PayPal payment resource from a JSON string .
3567	A GET request .
3568	Performs HTTP POST .
3569	Create a VenmoConfiguration from a JSON object
3570	Collect all device data .
3571	Collect device data .
3572	Collect data for PayPal device data .
3573	Retrieves the metadata ID for PayPal client
3574	Check if a signature is valid
3575	Returns an optional string property as a string .
3576	Parses the JSON of payment method nonce .
3577	Gets the browser checkout configuration .
3578	Gets the billing agreement configuration .
3579	Perform an HTTP GET request .
3580	Submits a POST request .
3581	Perform a POST request .
3582	Starts a new local payment .
3583	Applies a local payment to the fragment .
3584	Adds a listener .
3585	Removes a listener .
3586	Requests a billing agreement .
3587	Called when an activity result has been received .
3588	Parses the paypal account information from the result .
3589	Converts a list of words to a dictionary .
3590	remove word from KoreanPos
3591	translate a sequence of Korean tokens to Java string list
3592	Extract phrases from a sentence .
3593	Detokenize a list of tokens .
3594	Fetches a byte buffer from a channel .
3595	Joins a list of NAL units into a byte buffer .
3596	Joins a list of NAL units into a buffer .
3597	Returns the profile for the int
3598	Calculate fixed precision for a list of taps .
3599	Reads the next marker to the given byte buffer .
3600	Reads the next marker from the stream .
3601	Find the maximum available frame .
3602	Performs the modification .
3603	Copies a file to a file .
3604	Returns the duration of the edited edits .
3605	Converts a frame number to a time value .
3606	Converts a time value into a frame .
3607	Translates media time to edited by time series .
3608	Calculates the edited duration of the MovieBox based on the time of the MovieBox .
3609	Get the QT frame number of a media frame
3610	Converts a movie to a time value in the time series
3611	Convert a timecode value to a timecode frame
3612	Converts a timecode track into a formatted string .
3613	Color 7 .
3614	set a value to a list
3615	Checks if this color space matches the given color .
3616	Returns a new size that contains the specified component .
3617	Creates a raw audio demuxer from the given input channel .
3618	Read an index from the buffer .
3619	Creates a WAV header .
3620	Creates a WAVHeader from a header array .
3621	Parses data for AAC4Decoder specific information .
3622	Encode a range
3623	Read decoder picar .
3624	Split a track into two edit lists
3625	Decode a frame .
3626	Sets whether data is big endian .
3627	db - 64 - bit encryption
3628	Encodes a native video frame .
3629	Encodes the given long value into an array of bytes .
3630	Determine the length of a given long .
3631	Adds a new packet .
3632	Reads data from the file .
3633	Decodes a single bin .
3634	Decodes a binary pass .
3635	find the next marker in the buffer
3636	Returns the sample frequency for an integer .
3637	Make a plane plane on the plane .
3638	Stores a block in a block .
3639	Compute the coefficients for a given level
3640	Finalize the block .
3641	Concatenate bits from the input bits buffer .
3642	Rewind a value in reverse order
3643	Rewind in reverse order
3644	Seeks to the next frame in the frame
3645	Create a pixel buffer from the first image in the buffer
3646	Gets the gain id of the specified gain .
3647	Converts a byte array to an int array .
3648	Converts an int array into a byte array .
3649	Converts a buffer into a float buffer .
3650	Deserializes a float buffer .
3651	Interleave the contents of the AudioFormat into the output buffer .
3652	Interleave the input buffer .
3653	Get the encoded size of a video .
3654	Build box out map map .
3655	Builds the map to use for a pipe .
3656	Read a batch ofULs from a byte buffer .
3657	Read a 32 - bit int array .
3658	Calculates the MVP prediction
3659	Encode a single frame .
3660	Encode an IDR frame .
3661	Encodes a single frame .
3662	Returns a set of supported codec IDs .
3663	Get the set of supported tags .
3664	Adds a reference to the list .
3665	Deletes all references from the reference queue .
3666	Flushes all references to disk .
3667	Load a library
3668	Attempt to unpack a library on the classpath
3669	Delete the temporary files .
3670	Gets the default layout for the audio channel .
3671	Get the AudioChannel from a layout
3672	Make a media packet .
3673	Get version information .
3674	Returns the default time base .
3675	Make a new Demuxer object .
3676	Play a video stream .
3677	Display a video frame at a time .
3678	Make a codec descriptor .
3679	Prints a value of an option .
3680	Registers a factory for the given protocol prefix .
3681	Generates a unique name .
3682	Make a media audio resampler .
3683	Get a list of supported video frame rates .
3684	Gets the supported video pixel formats .
3685	Gets the supported audio sample rates .
3686	Gets the supported audio formats .
3687	Returns a list of supported AudioChannelLayout objects .
3688	Sets a flag on the coder .
3689	Sets a flag on the Coder .
3690	Get a decoder .
3691	Get the Demuxer
3692	Returns the set of muxer formats .
3693	Make a filter graph .
3694	Returns the type of filter type
3695	Retrieve a ByteBuffer from a ByteBuffer
3696	Create a new audio frame .
3697	Resample picture .
3698	Validates the given image .
3699	Validates the given media picture .
3700	Gets the filter graph .
3701	Get the meta data for this video .
3702	Gets the CPU architecture .
3703	Returns the CPU architecture for the given gnu string
3704	Gets the OS family for the given name .
3705	Returns the OS family for the given gnu string .
3706	Play the audio stream .
3707	Attempts to load a library .
3708	Sets a loaded library .
3709	Attempt to load a library .
3710	Initialize search paths .
3711	Checks if a library is already loaded .
3712	Record a screenshot of the screen .
3713	Deletes a reference .
3714	Gets a stream at the specified position .
3715	Get the muxer
3716	Make a set script transaction .
3717	Decodes a base58 string into a byte array .
3718	Generate seed string .
3719	Get information about a specific transaction
3720	get a list of address transactions
3721	Returns a list of all transactions associated with an address .
3722	Retrieves the complete block header sequence .
3723	Get block by signature
3724	Send request .
3725	Set a script in the chain .
3726	Compile a script .
3727	Write primitive array
3728	Flush buffer .
3729	Writes an object to memory .
3730	Read a class .
3731	Writes an object to the output stream .
3732	Set MMF data
3733	Get specificity for a class .
3734	Resizes the underlying store to required size .
3735	Removes a binary value .
3736	Writes an Ascii String as an ASCII String .
3737	Set the output stream .
3738	Creates an instance of FSTConfiguration
3739	Creates a new struct configuration .
3740	Calculates the number of bytes that can be used for an object .
3741	Clear cached objects .
3742	Gets an object input from an input stream .
3743	Returns an object input from the input array
3744	Get an object input from a byte array
3745	Get an object output .
3746	Register cross - platform class mapping .
3747	Returns the CPName for a class
3748	Write int .
3749	Write a raw int .
3750	Write a positive integer .
3751	Write primitive array .
3752	Write raw bytes to the buffer .
3753	Get cached field info .
3754	Called when an object has been written to the stream .
3755	Called when an object has been written to the stream .
3756	return FSTClazzInfo for given class
3757	Write an array
3758	Set the string of this buffer .
3759	Writes a primitive array .
3760	Closes the change tracking
3761	Snap snapshot of changes .
3762	Registers an object for write .
3763	Writes an object to the output stream .
3764	Converts a byte array to an object .
3765	Read a byte array .
3766	Reads a four byte int from the buffer .
3767	Back the tail of the queue .
3768	Enable or disable thread pool .
3769	Starts the embedded cassandra data .
3770	Clean data embedded in Cassandra .
3771	Copy a resource to a directory .
3772	Print information about all active threads .
3773	Tests if a remote port is currently taken .
3774	An empty subscriber state .
3775	Retrieves all the op descriptors from the classpath .
3776	Calculate the output shape
3777	Returns true if the ndarray evaluates to true .
3778	AND condition
3779	Perform a logical AND operation
3780	OR condition
3781	apply where condition
3782	Return first index matching condition
3783	Serialize this vector into a FlatBuffer
3784	Creates a FunctionProperties object from a FlatProperties object .
3785	Convert a collection of properties into a FlatBuffer .
3786	Set the exception .
3787	Set the Throwable to the first exception
3788	Merge coordinates .
3789	Partitions a dataset by chunk size .
3790	Convert an onnx type to an nd4j type
3791	Shutdown the transport .
3792	Get the architecture of the device
3793	Convert a column vector to an image
3794	Pooling 2D image
3795	Creates a CompressionDescriptor from the given byte buffer .
3796	Split a list into multiple batches .
3797	Validate that the arrays have the same dimension
3798	Sets the op type
3799	Returns lins from the given range
3800	Flatten a collection of matrices
3801	Calculates the bilinear products of the input tensor
3802	Creates a complex ndarray from a double array .
3803	Creates a complex array with the given value
3804	Creates a complex array of the given shape
3805	Returns true if the server should be replicated .
3806	Subtraction .
3807	Atomically relative to the complex number
3808	 ceiling .
3809	Returns the negation of the given complex number .
3810	Calculates the absolute value of the complex number .
3811	Calculate power of a complex number .
3812	Gets context .
3813	Binary binarization function .
3814	Sample a dataset
3815	Returns the memory footprint of this matrix
3816	Convert an exception to a string .
3817	Simplify a full hostname .
3818	Convert an array of strings to a string .
3819	Converts a byte array into a hex string .
3820	Extract strings from a delimited string
3821	Splits the given string using the given escape character .
3822	Splits the given string into an array of strings ignoring empty strings .
3823	Find the next character in the given string .
3824	Escapes the given string for use in HTML .
3825	Joins the given strings using the given separator .
3826	Capitalize a string .
3827	Replaces all the tokens in the given pattern with their matching values .
3828	Gets stack trace .
3829	Invert an inverse matrix .
3830	Access a big integer .
3831	Check if access is on host side
3832	Is actual on device access
3833	Create shape information
3834	Create shape information
3835	Check if shape is vector
3836	Get the order of the array
3837	Get the offset for the given array
3838	Convert an array of ints to an index
3839	Gets a short at the specified index .
3840	Allocate data buffer .
3841	Copies data from a buffer to a stride
3842	Returns a constant buffer for a float array
3843	Returns the URI of the Kafka topic .
3844	Element - wise power function
3845	log x
3846	Maximum function with a scalar
3847	Max function .
3848	Minimum function with a scalar
3849	Minimum function .
3850	Stabilize kdarray
3851	expression of ndarray
3852	log 1 operation
3853	Compute bounds
3854	Adjust the scheme to match a given number of steps
3855	Returns next dataset .
3856	Solve Q - F - QR decomposition
3857	Build allocation shape
3858	Checks if the given name exists in the path .
3859	Custom deserialization .
3860	Removes all queued commands
3861	Create an ndarray from a pointer
3862	Create an ndarray from a file
3863	Allocates a dummy workspace .
3864	Attaches an object to the registry .
3865	Indicates whether the server is started .
3866	Execute the given op
3867	Flush the queue
3868	Returns an InputStream for the resource .
3869	assign deviceId for thread
3870	Attaches a thread to the deviceId map
3871	Get next device .
3872	Returns the name of the operating system .
3873	Calculates the ARCH type
3874	Publish an ndarray
3875	Starts the server .
3876	Create data buffer .
3877	Intercept an int data operation .
3878	Add this complex number to the result .
3879	Process payload .
3880	Avg pooling 3d operation
3881	Depth convolution operation
3882	Reset all fields .
3883	Return the string representation of the given Op
3884	Allocate and allocate new ndarray
3885	Get the shape of this variable
3886	Evaluate the output .
3887	Compress a double array
3888	Returns the expi of the vector
3889	Center the given array
3890	Truncate the given ndarray
3891	Pads the specified ndarray with the specified shape to the target shape
3892	Find the index of the element .
3893	copy array to current device
3894	Send row data .
3895	Returns the gamma value .
3896	Compute the square root of a number .
3897	Cbrt .
3898	Compute root of a number .
3899	Computes the absolute value of a number .
3900	Internal function .
3901	Raises x to y .
3902	Raises an integer to a power of x .
3903	Sine sin .
3904	Tangent function .
3905	Compute the cosh .
3906	Computes the sinh operation .
3907	Append a tanh operation .
3908	Compute the arcsine of a number .
3909	Calculates the acosh of a number .
3910	Implementation of gamma function .
3911	Returns a BigDecimal approximation of the magnitude of the result .
3912	Multiplies x by d .
3913	Scale BigDecimal with precision .
3914	Preciliation function .
3915	Put function for id
3916	Get input parameters for a different function
3917	Update an INDArray for a given variable
3918	Put a shape for a variable
3919	Associate an array with the specified shape
3920	Gets the property for the given function instance .
3921	Add a property for a function
3922	Define the outgoing functions for this function
3923	Add a new function arguments
3924	Checks if the incoming function has any arguments .
3925	Evaluate the input and return the results
3926	Create a new variable with the specified shape
3927	Applies an arbitrary array to each dimension
3928	Creates a zeros shape
3929	Remove an argument from a function .
3930	Set the gradient for a SDVariable
3931	Avg pooling function .
3932	Output a gruell
3933	Execute a list of differential functions
3934	Create a while statement
3935	Execute the specified function .
3936	Execute the given function with the given name .
3937	Execute backward and end result
3938	Add a variable as a place holder .
3939	Allocates a device memory .
3940	Returns the length for the given data buffer type
3941	Returns a name for a double allocation mode .
3942	Get the data buffer .
3943	Get the operation number by name
3944	Destroy all workspaces
3945	Print allocation stats for current thread
3946	Performs a triangular matrix operation on a triangular matrix .
3947	Receive an incoming INDArray
3948	Compute the z - dimensional accumulation
3949	Perform threshold decode .
3950	Removes the node name from the input name
3951	Performs a scalar operation
3952	Assert that no workspaces are open
3953	Calculates the negative log likelihood of the given labels
3954	Requests to be sent to the client .
3955	Try to create a TOE .
3956	Releases to the toe state
3957	Returns the current access state
3958	Builds an environment .
3959	Sends the message to the clipboard .
3960	Initialize the curr from a list of examples
3961	Initialize HostCollectors
3962	Returns device pointer .
3963	For internal use only .
3964	Applies an updater to the history
3965	Wait for a point to be processed .
3966	Create an INDArrayIndex from an ndarray
3967	Returns the properties for this function .
3968	Checks if there are placeholder variables .
3969	Perform a diff operation
3970	Format an ndarray
3971	Imports the given graph .
3972	convert a complex ndarray to a blob
3973	Load a complex ndarray from a blob
3974	Saves the complex ndarray .
3975	Copies the real array to the given array
3976	Copies the imaginary array to the given array
3977	Calculate the difference between two numbers
3978	Assigns this matrix to another matrix .
3979	Get the rows in a matrix .
3980	Put a row into the matrix .
3981	Creates a vector from a column
3982	Subtraction of two complex ndarray
3983	Add another ndarray to this one
3984	Subroutine of subdarray
3985	Add this vector to another array .
3986	Assigns a value to a complex number .
3987	Raise the matrix
3988	Computes eigenvalues of A
3989	Computes generalized eigenvalues of A and B
3990	Returns the index of the maximum element .
3991	Copies the contents of another complex ndarray .
3992	Computes the product of a complex vector .
3993	This method generates a SkipGramRequest message
3994	Returns the number of non - zero values for the given weights
3995	Performs a reduction .
3996	Gets the no - arg constructor .
3997	Returns a MethodHandle for a constructor .
3998	Invoke a method handle with parameters .
3999	Gets the annotation of the given type .
4000	Gets the annotation of the specified class .
4001	Returns true if the specified annotation is present on the class .
4002	Creates a proxy instance .
4003	Load the entity .
4004	Save entity .
4005	Create a proxy for a MemcacheService
4006	Gets the metadata for the given kind .
4007	Executes a Key - Only query .
4008	Executes a hybridized KeyQuery .
4009	Performs a normal query .
4010	Executes a projection query
4011	Runs a query .
4012	Partitions the input iterator by chunkSize .
4013	Loads the values from the cache .
4014	Format a message with a specific message .
4015	Gets the Key object .
4016	Compare objects with identity hash code .
4017	Constructs a Key from Google Cloud Datastore .
4018	Convert a Key to a Key .
4019	Gets the kind of the given class .
4020	Returns true if the type is missing .
4021	Determine whether the super type is a supertype of another type .
4022	Get the exact direct super types of the given type .
4023	Captures the given type .
4024	Get a translator for the given type key and path .
4025	Gets the appropriate populator for the given class and path .
4026	Gets the index instruction .
4027	Is this method of interest?
4028	Returns a list containing all the properties of the given class
4029	Gets key metadata .
4030	Gets a value from the cache .
4031	Executes the next round .
4032	Fetch pending entities .
4033	Add discriminators for a class .
4034	Registers a class translator .
4035	Returns the type of a collection component .
4036	Get map key type .
4037	Creates a new ForwardPath from a Path
4038	Returns the final path .
4039	Return the path string represented by this node .
4040	Returns the depth of this path .
4041	Put all given updates into the cache .
4042	Empty the cache .
4043	Cache the given buckets in cache .
4044	Get all values from the cache .
4045	Gets the keys of a collection of buckets .
4046	Finds all key fields .
4047	Sets the entity key .
4048	Sets the id of a pojo .
4049	Returns raw value of parent meta .
4050	Registers a subclass of the given superclass .
4051	Determines whether two types are common .
4052	Transform the owner type of the given type .
4053	Gets annotation .
4054	Adds all values from another session to this session .
4055	Loads the specified key .
4056	Execute the next round .
4057	Translates raw results into a Result .
4058	Fetch the specified keys from the Cloud Datastore .
4059	Load the given entity .
4060	Convenience method to create a generic Key object .
4061	Returns the raw key .
4062	Returns the ID value associated with the given IncompleteKey .
4063	Parses an url - safe key from a string .
4064	Wraps the transaction without transaction .
4065	Actual transactional methods
4066	Perform commit .
4067	Checks if a value matches one of the conditions
4068	Returns an ObjectifyService for the current thread
4069	Get async datastore .
4070	Get the metadata for an entity
4071	Allocate a key range .
4072	Opens a new objectify .
4073	Closes the objectify context .
4074	Homogenize indexes .
4075	Creates a new Ref object .
4076	Retrieves the object from the cache .
4077	Add a new value to the map
4078	Determines if the task is done .
4079	Generates an array of IF conditions for the given field .
4080	Execute the engine .
4081	Returns the container matching the specified type and path .
4082	Get the Stat for a particular kind .
4083	Unwraps the given Throwable and throws UndeclaredThrowableException
4084	Returns a translator for the given type key .
4085	Gets the root path .
4086	Create a translator for a type key .
4087	Loads a value from a container .
4088	Gets the value of a property .
4089	Set the value of a property .
4090	Saves property value .
4091	Gets the value of a property .
4092	Write extended extensions .
4093	Write the category .
4094	Write categories .
4095	Process the given snippet .
4096	Returns an iterable of bids for a given response .
4097	Get bid by ID
4098	Updates all bids from the response .
4099	Removes bids from the response .
4100	Returns an iterable of imps that match the given predicate .
4101	Read extensions .
4102	Returns true if the next token is null .
4103	Register a new parser .
4104	Register a new OpenRt JSON parser .
4105	Process the snippets .
4106	Process the relevant fields for the snippet .
4107	Updates the given objects according to the given updater .
4108	Filters the list of objects that satisfy the supplied predicate .
4109	Return the current name .
4110	Starts an object .
4111	Starts an array .
4112	Returns the next token .
4113	Write an integer field to the JSON generator .
4114	Write a list of strings to the JSON stream .
4115	Write a list of ints .
4116	Write a list of longs .
4117	Write the given list of enums .
4118	Resolve a URL to a URL .
4119	Fixes pure query targets .
4120	get host segments from URL
4121	Returns the host of the URL .
4122	Gets the page from the url .
4123	Load parameter list from storm conf
4124	Extract a single configuration element .
4125	Returns the protocol for the given URL .
4126	Generates a WAR information from the given fields .
4127	Extract refresh URL .
4128	returns the metadata for the outlink
4129	Filters the metadata .
4130	Add a URL to the queue .
4131	Clean field name
4132	Gets the charset name from the BOM .
4133	Gets the charset from the text content .
4134	Gets the charset from the input buffer .
4135	Checks if a byte array is found in the text array .
4136	Sets the value for the given key .
4137	Returns the first value found in metadata .
4138	Extracts a list of cookies from an array of strings
4139	Checks whether the domain domain matches the domain domain
4140	Returns the cache key for the given URL .
4141	Gets the robot rules from the given URL .
4142	Extract meta tags .
4143	Called when a tuple is acknowledged .
4144	Filters the URL based on the metadata .
4145	Filter the rule string .
4146	Reads the rules from the specified rules file .
4147	Process the query string part of the URL
4148	Load the navigation filters from storm configuration .
4149	Add a record format .
4150	Tries to throttle the time between queries .
4151	Triggers the maximum time between queries .
4152	Load parse filters from storm configuration .
4153	Append a new node to the document .
4154	Ignorable whitespace .
4155	Add a processing instruction .
4156	Parses a comment .
4157	Called when a character is escaped .
4158	Generate XML declaration .
4159	Start namespace mapping .
4160	Returns the canonical value for the given tuple
4161	Trims the given text .
4162	Checks if a custom interval is valid .
4163	Load URL filters from storm configuration .
4164	Set the number of items in the wheel
4165	Resolve size and state according to given measureSpec .
4166	Set a drawable that will be used to draw an empty item .
4167	Set the angle of the wheel .
4168	Updates the selected position .
4169	Invalidates the drawer item with the given position .
4170	Converts a position to a wheel position .
4171	Updates the velocity based on a given delta time .
4172	Get the contrast color
4173	Clamp a value to the specified upper limit .
4174	Writes the Coverage data to a JSON writer .
4175	Gets the data as a ByteBuffer .
4176	Sets the string value of a char
4177	Make a single string array
4178	Make an ArrayChar from a String .
4179	Make an ArrayChar from a StringObject
4180	Creates a char array from an ArrayObject
4181	Returns the offset of the forecast time interval
4182	Display the window .
4183	Shows the window if not already set .
4184	Calculate size estimate for a given grid .
4185	Reads Grib1 records from the specified file .
4186	Creates a new unit name with the given name and plural .
4187	Creates a new unit name .
4188	Make plural .
4189	Return true if this date is included .
4190	Returns the intersection of this range with the specified interval .
4191	Extends the given DateRange to this one .
4192	Extend this interval with another date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculate the duration .
4197	Add a new MapBean
4198	Prints yyer error .
4199	Gets the name of the NCD component .
4200	Returns a string representation of the parameters .
4201	Opens the DSP file .
4202	Compute the bounds for a given LatLonRect
4203	Synchronize the slider values .
4204	Perform a chunking on the specified dimensions .
4205	Register a watcher .
4206	process all events
4207	Sets a reference date .
4208	Opens a feature dataset
4209	Wrap a Dataset
4210	Checks if the wanted feature type is OK with the given criteria .
4211	Determines the FeatureType attribute of the NetcDF file .
4212	Write catalog .
4213	Render the catalog to HTML .
4214	Get the CSS for the page CSS .
4215	get HTML table header
4216	Create a dynamic catalog for a given path
4217	Add global services to the catalog
4218	Initializes the global CredentialsProvider
4219	Get the content of the specified URL as a string .
4220	write content to url
4221	Returns the front page for this request .
4222	Creates a catalog for the given match path .
4223	Extracts the geospatial coverage data from a group .
4224	Gets a single dataset or by typeName .
4225	Returns true if the two vertices are deeply equal .
4226	Create a new unit ID .
4227	Parses an attribute definition .
4228	Reads the top - level header from the file .
4229	Convert two shorts to an int .
4230	Convert an array of bytes to an int .
4231	Creates a date from the given julian days .
4232	Make sure that the given name is a valid NetcdfdfdfObject name .
4233	Returns true if the given name is a valid Netcdf3 object name .
4234	This method opens the file for writing .
4235	Read record data from a Structure object .
4236	Reads the data subset from the structure .
4237	fill variables in the ncfile
4238	Constructs a time struct from the given time index .
4239	Create a time struct from a calendar .
4240	Checks if a given string has a time template .
4241	Adds a server side function .
4242	Get the BoolFunction by name
4243	Get BtfFunction by name
4244	Add new function .
4245	Returns the level name for the given grid record .
4246	Returns the description of the level .
4247	Returns the level unit .
4248	Determine the projection type from the grid definition .
4249	Is the specified grid coordinate as a vertical coordinate .
4250	Checks if the specified grid is a layer .
4251	Create a coordinate transform from the variable container .
4252	Create a dummy variable for a coordinate transformation .
4253	Create a projection .
4254	main method for testing
4255	Saves the data table .
4256	Returns a copy of this Chronology with the specified time zone .
4257	Write count .
4258	Write an atomic array .
4259	Writes bytes to the output stream .
4260	Writes a number of bytes to the output stream .
4261	Finish initialization .
4262	Creates a CalendarDateRange from a DateRange .
4263	Creates a new Gds instance using the specified template
4264	Parses the given text and returns the number of elements in the specified DDS .
4265	parse text into DASparse text .
4266	Swap grid header .
4267	Read data in a rectangular grid .
4268	Main method to read grids .
4269	Write a constraint .
4270	Writes the headers and attributes to the file .
4271	Write operations
4272	Scans all files in a directory and writes them to file .
4273	Scans a log file and passes it to the given closure .
4274	Get the grid packing type
4275	Find grid record .
4276	Performs rfcK format .
4277	Unpack data .
4278	Performs a QR decomposition .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Print the grid grids .
4282	Get the next byte from the stream .
4283	Creates a calendar date from the specified calendar .
4284	Creates a CalendarDate from the given date .
4285	Creates a CalendarDate from the given number of milliseconds .
4286	Creates a calendar date from the given Calendar .
4287	Parse an udunits string into a calendar date .
4288	Get the difference between this calendar and the specified field .
4289	Create a CDMArrayAtomic object .
4290	Setup the request .
4291	Escape a string .
4292	Creates a list of Slice objects from a list of ranges .
4293	Unwrap a NetcdfFile .
4294	Returns true if the given dimension set contains variable length .
4295	Compute the effective shape .
4296	Add a date to this date
4297	return a new instance of this unit by the given unit
4298	Create a new instance of this scale by the given unit .
4299	This method is used to create a new instance of this scale .
4300	Evaluate this unit to a scaled unit .
4301	Converts this unit into a derived unit .
4302	Convert this object to a derived unit .
4303	Convert this unit to another unit .
4304	Returns a canonical string representation of this unit .
4305	Reads the data from the given section iterable .
4306	Reads the data from the second range in the second partition .
4307	Flattens a list of stations and a list of stations .
4308	returns null if not found
4309	Get the size of the DIFF data type .
4310	Get the start of the first index .
4311	Returns the number of points to a datatype .
4312	Write an XML document to an output stream .
4313	Computes the preferred layout size for this component .
4314	Verify that the descendant dataset is a descendant dataset .
4315	Generate a proxy datasource catalog
4316	Create a CalendarDateUnit with the given name and unit string .
4317	Creates a new CalendarDateUnit with the given udunit string .
4318	Creates a CalendarDateUnit with the specified base date .
4319	Returns the offset from a reference date .
4320	Makes a calendar date with the specified value .
4321	Returns the quantity dimension .
4322	Test to see if the file is a valid UICata file .
4323	Reads the map of stations names from a file .
4324	Read data .
4325	Read an array of int data .
4326	Reads data from the given section and writes them to a byte channel .
4327	Calculates the elevation of an angle .
4328	Calculates a step for a range .
4329	Calculates the z - axis of rotation .
4330	Calculates the data for the camera .
4331	Calculates the nyquist value
4332	Make a vertical transform for this dataset .
4333	Sets debug flags .
4334	Sets whether index mode should be extended .
4335	Reads a coordinate vector .
4336	Determine if a coordinate is missing .
4337	Get the LatLon bounding box
4338	finalize the structure
4339	Write tabs to string buffer .
4340	Pad a string with a given width .
4341	Returns an integer value padded to the specified width .
4342	Returns a long padded with the specified width .
4343	Format a byte size in bytes .
4344	Print a double
4345	Print 2 d .
4346	Get the shape string representation of the shape
4347	Prepares the current state of this Slice .
4348	Creates a string representation of this constraint .
4349	Compose two slices
4350	Maps a range of interest to a value of the target slice
4351	dump bytes in a byte buffer
4352	utility method to dump a byte buffer
4353	Returns the type of the given name .
4354	Returns the ellipso id for the given epsgId .
4355	Decode vlen data .
4356	decodes vlen arrays
4357	Extract a list from the URL .
4358	Get the text content of a URL .
4359	Filter out some tags .
4360	Reads data from a variable and writes it to a byte channel .
4361	Adds all attributes .
4362	Removes the specified attribute .
4363	Removes the first attribute with the given name ignoring case .
4364	Gets the offsets in time units .
4365	Add an action source listener .
4366	get a standard Date from a text
4367	getStandard or ISO 8601 date
4368	Returns the date origin of this time zone .
4369	Returns the date as a Date object .
4370	Creates a date with the specified value .
4371	Returns the value represented by the given date .
4372	Converts a double value into a standard date string .
4373	Gets the grid spacing in meters .
4374	Add the required dimensions to the NetcdfFile .
4375	Add a coordinate axis to the network .
4376	Compute the projection .
4377	Adds all the gds parameters to the given Variable .
4378	Add a coordinate system variable .
4379	Create a grid coordinate .
4380	Create a stereographic projection .
4381	Construct a Mercator for the projection .
4382	Creates the sub - geometries for the MSG data .
4383	This method calculates the x y - coordinate of the x y and y coordinates .
4384	Read a dataset .
4385	Read a Dataset scan .
4386	Read metadata from a dataset .
4387	Gets level type 1 .
4388	Check if the file is a valid magic file
4389	Write bytes .
4390	Set the clearName attribute .
4391	Returns the coordinate name of a coordinate .
4392	Returns the coordinate name of a coordinate .
4393	Builds the error response .
4394	Build DapException object from XML .
4395	Lookup levels for a given level .
4396	Given a list of coordinate values and a set of coordinate values return a Z coordinate .
4397	Creates new variables for a given variable .
4398	Create a time coordinate axis from a coordinate variable .
4399	Removes a bit from a float mask .
4400	Main entry point for the GVRF .
4401	Enhances the given netcdfFile and enhance it if needed .
4402	Opens a dataset .
4403	Clear all coordinate systems
4404	Finds a coordinate by type
4405	Find a coordinate axis by full name
4406	Returns the coordinate system with the given name .
4407	Returns the coordinate transform with the given name .
4408	Returns true if enhance is needed
4409	Sets the values of a variable
4410	Sets the values of a variable
4411	Create an Array from a list of strings .
4412	Returns the index of this dimension .
4413	return an existing MFileOS if it exists
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize a vector
4416	Adds information about a new ThreddsMetadata .
4417	Adds the documentation for the specified type .
4418	Removes the inv documentation of the specified type .
4419	Compute the number of bytes required to write a file .
4420	Checks to see if a NetcdfFile is valid .
4421	Remove the latest file from the dataset
4422	returns a list of convention names
4423	Build a list of attribute names to be used as part of the converter .
4424	Builds the CoordinateSystems for a given NetcDF dataset
4425	Recursively find the coordinate axes .
4426	Find all coordinate systems referenced by a NetcDF dataset .
4427	Make a coordinate system for each variable .
4428	Make sure all coordinate systems need to be optimized
4429	Checks if a coordinate axis is part of a coordinate .
4430	Add a coordinate variable for a given dimension .
4431	Sets this dataset to be local .
4432	Apply a filter to the dataset
4433	return true if the dataset is deleted
4434	recursively deletes the data
4435	Initialize the request
4436	returns count for given name
4437	Add a name and a double value .
4438	Compares two TableRow s column
4439	Compares two boolean values .
4440	Returns the DapGroup object .
4441	Pass all reserved attributes to the DapNode .
4442	check validity of date start and end_end
4443	Returns true if the slice has at least one segment .
4444	Registers a class with the specified name .
4445	Register a DSP class .
4446	Check if a dsp is registered in the registry .
4447	Unregister a dsp .
4448	Creates a new Trib2Tables .
4449	Calculate the time interval size in hours
4450	Get the offset of the forecast time interval
4451	Gets the vertex type .
4452	Finalize the RAP .
4453	Sorts the list of nodes in ascending order .
4454	Gets the data associated with the given partition .
4455	Find a variable attribute in a dataset .
4456	Recursive method to find a variable in a dataset .
4457	Returns the name of the variable with the given attribute value .
4458	Find a variable with the given attribute name and attribute value .
4459	Find a nested structure in a given structure .
4460	Determines whether the dataset contains a structured record .
4461	Get a literal value from the dataset .
4462	Get the feature type
4463	Gets the variable name from a dataset .
4464	Returns the value of a coordinate .
4465	Calculates the long value of a long
4466	Returns a copy of the coordinates of the axis .
4467	Creates a coordinate axis with the specified range .
4468	Finds the index that is the closest to target
4469	Get the short name
4470	Add an action to the menu .
4471	Returns a match for a given path .
4472	Main entry point for the Projection .
4473	Returns the index of the first occurrence of the specified data .
4474	Adds a picture to the cache .
4475	Reports the contents of the cache .
4476	Stop background loading .
4477	method to stop background loading
4478	Create a GET method
4479	Make an HTTP method .
4480	Returns the next float .
4481	Get the next number in the range .
4482	Reads data for a given section .
4483	Get a file system provider for the given URI .
4484	Reads the stations table and stores them in a Hashtable .
4485	Returns the index of a group or 0 if there is none .
4486	Removes the data variable with the given name .
4487	Convert the hgt2 height into a string .
4488	Reads all data from the given section .
4489	Sets the number of colors .
4490	Calculate transform for screen coordinates
4491	Converts a URI into an AuthScope object .
4492	Finish the last record
4493	Check if this factor is a reciprocal of another .
4494	Get the catalog for a directory matching the given filter
4495	returns the index of the needle
4496	Read metadata from a dataset .
4497	Read metadata content .
4498	Adds the metadata content .
4499	Validate the CatalogConfig
4500	Read the catalog config element .
4501	Read a DatasetSource element .
4502	Read dataset namer element .
4503	Reads a dataset filter element .
4504	Read a ResultService element .
4505	Create the XML element for a CatalogGenConfig element .
4506	Create a DatasetSource element .
4507	Creates an element that represents a DatasetNamer .
4508	Create a DatasetFilter element .
4509	Create the result service element .
4510	return true if flag exists
4511	Initialize the menu .
4512	Add all children to the given menu .
4513	Adds the parameters to the specified file .
4514	Creates a parameter from the given parameters .
4515	get parameter by name
4516	Reads the contents of the stream .
4517	Reads bytes from an input stream .
4518	Replace the file template in the filespec with the same name .
4519	Set the station information .
4520	Accepts the input and updates the store value .
4521	Show information about the field format .
4522	Reads the bitmap section and returns it as a byte array .
4523	Set the Netcdf file .
4524	Sets debug flags .
4525	package private for testing
4526	returns true if the dstruct is a group
4527	Get the netc length dimension for a variable
4528	Add a shared dimension to a group
4529	Constructs a list of dimensions from a group .
4530	Checks if is unsigned .
4531	Read a DataDDS from the DBS file .
4532	get an icon from the classpath
4533	Get an image from a resource
4534	Creates a custom cursor with the specified name .
4535	Read data from a layout .
4536	Read data .
4537	Read data .
4538	Creates a primitive array of primitives .
4539	Convert a byte array to a char array .
4540	Convert a char array to a byte array .
4541	Convert a byte array to a char array
4542	Extracts a section from a ParsedSectionSpec object .
4543	Creates an ArrayStructure from a SectionSpec object
4544	Get a scalar value .
4545	Retrieve a structured structure from a member member .
4546	Return the array at the specified record .
4547	Recompute the members of a variable .
4548	Adds the dimensions of the specified group to the network .
4549	Creates a CrawlableDataset .
4550	Normalizes a path .
4551	Adds an explicit dataset .
4552	Add a dataset scan .
4553	Finish the scan .
4554	Creates the datasets .
4555	Retrieves the typical dataset for this aggregation
4556	Create a Dataset
4557	Put a ResourceControl
4558	Add a point
4559	Gets the bb upper position .
4560	Gets bb lower lower lower bounds .
4561	Validates this dataset filter .
4562	Checks if this dataset applies to the given dataset .
4563	Adds all stations from the specified file .
4564	Parses a constraint .
4565	Evaluate the clause .
4566	Prints the constraint .
4567	Given a Netcfile and an OOS file return true if it was found .
4568	set shared dimensions
4569	Checks if there are enough dimensions sets to the old dimensions and adds new dimensions to the list of missing dimensions if needed .
4570	Searches for a group with the given name
4571	Reads the content of the Xlink .
4572	Returns the standard URI for this dataset .
4573	Sets the projection .
4574	Add a layout component
4575	Invalidates the layout associated with the specified target container .
4576	Removes a layout component from the layout map .
4577	Get the minimum layout size for the given parent container .
4578	Lays out all components in the given container .
4579	Determines if the coordinate system is valid .
4580	Get the maximum angle in meters .
4581	Opens a connection
4582	Convert geographic coordinates to Earth coordinate .
4583	Convert a point from x y to earth coordinate .
4584	Convert a Lambda function to a point .
4585	Convert the scan geometry to sweep coordinates axis .
4586	Convert sweep angle to scan coordinates .
4587	Set the runtime coordinates .
4588	Writes a PointObset to a file
4589	Rewrite a point dataset to a file .
4590	Gets the ArraySequence corresponding to the specified member .
4591	Returns the full name of this node .
4592	Returns a unique ID for the request .
4593	Returns the access to the specified service type .
4594	returns null if not found
4595	Gets the parent catalog .
4596	Get the InvMetadata objects for the given catalog
4597	Find a service by its name .
4598	Gets all variables in the given vocabulary .
4599	find all catalog refs in the given list of datasets .
4600	Escapes a string for use in URL .
4601	Add a single dimension to the end of the array
4602	extracts the interpolation from an array
4603	Compute the Rho distance of a point .
4604	Gets detail info .
4605	Create a structure for the specified parameters .
4606	Create a missing variable .
4607	Create a parameter .
4608	Add all the attributes to the NetCDF file .
4609	Returns the size of the stnVar with the given name .
4610	Creates an Array
4611	Gets the state of the current state .
4612	Determines a simple syntax error .
4613	Reduces the output of a YYULE .
4614	Read the DMR data .
4615	Read an error message .
4616	Read the specified number of bytes from the input buffer .
4617	Reads the header .
4618	Converts an ISO 8601 formatted string to a Date object .
4619	Read a table from a URL string .
4620	Transfers a group to a target group .
4621	returns null if not found
4622	Creates and initializes the station .
4623	Get the beginning of a given index .
4624	Returns the index of the end of the given index .
4625	Creates a collection of files with a single runtime group .
4626	Sets the edit value .
4627	Returns the data type corresponding to the specified format .
4628	Calculates ECF - F - F - F - F - F - F - F - A - F - F .
4629	Clean unit string .
4630	Clean the name of the input .
4631	Checks if is unitless .
4632	Factory method .
4633	Returns the variable id of a given VarNotes .
4634	Parse a DAS file .
4635	Find a DodsV for a given name
4636	Recursively find the dataDDSV for the given dataDDS .
4637	Find by index
4638	Find the parent group .
4639	Returns the dimension of the dimension
4640	Returns the index of the dimension with the given name .
4641	Gets the string representation of the units attribute .
4642	Get the shape as a Section .
4643	Create a new slice of this variable
4644	Sets the enum typed definition .
4645	Reads a section from the input stream .
4646	Read string .
4647	Reads the data from the input .
4648	Reads the contents of a given section in a given section .
4649	Writes a CDL definition as a String .
4650	Returns a string representation of this variable .
4651	Sets the data type for this variable .
4652	Sets the dimensions of this shape
4653	Reset the shape
4654	Set the dimensions of this variable .
4655	Resets the dimensions of this group .
4656	Sets the dimension of the specified dimension .
4657	Sets the cached data .
4658	Get all dimensions in this project .
4659	Calculate the bounding box
4660	Finalize the grid .
4661	Returns all datasets in this dataset .
4662	Return true if the given path matches the dsp extension .
4663	Creates a CDMSP using the provided NetCDF dataset .
4664	Build the DMR dataset .
4665	Recursive method to build the seqtype from a dataset
4666	Recursively build the dimension definitions for the specified cdm .
4667	Finds a matching enum .
4668	Returns the core dimension list for the specified dimension .
4669	Scans a Buf file .
4670	Converts a BufRDF message into a dataset .
4671	Handles a post request .
4672	Get the transform to the coordinate system
4673	Determines if the map should rotate or not .
4674	Get the area covered by this area .
4675	Convert a point in world space to screen coordinates .
4676	Pan the map .
4677	Zoom to the specified location
4678	Recalculate the orientation from the bounding box
4679	Add a Listener
4680	Remove a Listener
4681	Sends an event object to all listeners .
4682	send event to all listeners
4683	Print a command to a writer .
4684	Prints a command line to the given writer .
4685	Prints the data of a variable .
4686	Print data in a variable .
4687	Prints a structure data structure .
4688	Print an Array to a PrintWriter
4689	Print array .
4690	Writes the ncML file to the given writer .
4691	Read double attribute .
4692	Add a parameter to the coordinate transformation .
4693	Prints the log .
4694	This method is used to read an object from the given atom type .
4695	Returns true if the given level is positive .
4696	Compares this unit with another .
4697	Creates a label with the given quantity ID .
4698	Set bit offset .
4699	Read bits from the input stream into an unsigned integer .
4700	Turn bits into an unsigned integer .
4701	Opens a connection
4702	Get DAS from file
4703	Get the DDS for the CE
4704	Gets the complete CE .
4705	Convert the projection to a LatLonPoint .
4706	Get the idv dataset catalog from the XML file
4707	convert a DateRange to a DateRange
4708	This method is used to read data from a UIC file .
4709	Creates and sets the attribute of the sky data .
4710	Read sensor information .
4711	Read root element .
4712	Clean character data .
4713	Convert a string to a xunescape string
4714	Escapes a URL query string .
4715	Unescapes a URL query string .
4716	Decode backslash characters .
4717	Encode a string .
4718	Add global global attributes .
4719	Swap two bytes at the given offset
4720	Swap four bytes at the given offset
4721	Swap a double at a given offset
4722	Swap two float values
4723	Swap a double .
4724	Convert a short to a byte array .
4725	Convert an int to a byte array .
4726	Convert a long to a byte array .
4727	Creates a new vertical transformation with the specified range .
4728	Writes the date to the XML .
4729	Create a c .
4730	Start XML stream .
4731	Write features .
4732	Add levels to the levels .
4733	Add dimensions to the netcdfFile .
4734	Add the levels to the NetcdfFile .
4735	Add a coordinate transformation to the coordinate system .
4736	Returns the index of the given record .
4737	Stops the timer .
4738	Get file object .
4739	Returns existing file or null if not found .
4740	Show the cache files .
4741	delete all expired files
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Main method for testing purposes .
4745	Returns a LatLonPoint which is closest to a point in the given Earth .
4746	Returns a LatLonPoint object which is closest to the specified point in the given latitude distance .
4747	Returns a LatLonPoint with distance from the specified point in the default distance .
4748	Loads a single picture from the background thread .
4749	Loads the picture .
4750	Loads a picture from the image URL
4751	Stops the background loading
4752	Called to stop loading of the source picture
4753	Get the size of the image
4754	Set source image
4755	Returns the standard URI for this dataset .
4756	Make association data descriptor .
4757	transf info from list to proto
4758	Count bits .
4759	Compares two DataDescriptors
4760	Load the dbase header
4761	Loads the data .
4762	Returns the DbaseData object with the given name .
4763	Gets a double by its name .
4764	Get the string representation of a field .
4765	Access a boolean field .
4766	Returns the name of the field at the specified index .
4767	Returns an array of the field names as a string .
4768	Dump information about Dbase .
4769	Get the attributes map .
4770	Set an attribute .
4771	Removes an attribute .
4772	Get the DapGroup .
4773	Returns the parent container .
4774	Gets the escaped short name .
4775	Returns the path of this DapNode .
4776	Returns the path of this DapGroup .
4777	Compute the FQN .
4778	Determines if this is a top - level query .
4779	This method is used to build the DMR data .
4780	Associates a BeanCollection with the given key
4781	Get a List .
4782	Retrieve an object from the preferences .
4783	Read data from a file .
4784	Prints the variable information .
4785	Print a compound instance .
4786	Writes the element to a string .
4787	Write the element to a file .
4788	Write the element to an output stream .
4789	Write an XML element to a writer .
4790	Create a dimension element .
4791	Create a projection matrix for an attribute container .
4792	Get an integer array from the attribute container .
4793	Create a base unit .
4794	Creates a unit .
4795	Base unit .
4796	Generate unit db .
4797	Returns a singleton instance .
4798	Returns the index of a coordinate element
4799	Returns index of target coordinate
4800	Subtracts the coverage coordinates .
4801	Open a Dataset
4802	Open a dataset
4803	Add attributes to a Netcdf dataset
4804	Read data from a grib1 file .
4805	Assembly the given parts into a URI .
4806	Convert a string to its canonical form .
4807	Normalizes the string representation of the given string .
4808	Compile the DAP dataset .
4809	Close the catalog
4810	Returns the element with the specified key .
4811	Associates the specified key with the specified key in this map .
4812	Get the current date
4813	Prints an XML attribute .
4814	Print an XML - attribute .
4815	Determines if the attribute is a special attribute .
4816	Prints the dimensions of a variable .
4817	return true if the file is a valid file
4818	Set the directory attributes .
4819	Add the navigation block attributes to the given variable .
4820	Convert a calendar name to an integer type .
4821	Sets the attributes of the Calibrator .
4822	Finds coordinates in the table .
4823	Returns the full name of a coordinate .
4824	Finds a coordinate by its type in the dataset .
4825	Finds a coordinate by its type that matches the given predicate .
4826	Returns the dimension of the specified type
4827	Returns the best coordinate system for the given dataset .
4828	Finds the coverage coord .
4829	Gets a variable .
4830	Old serialize deserialize .
4831	Reads a marker .
4832	Writes a marker .
4833	Emit a fatal error .
4834	Create a dataset .
4835	Example of testing
4836	create a String from a member
4837	Returns a copy of the parameter list .
4838	Set the list of stations .
4839	Set the currently selected station .
4840	Redraw the panel
4841	Deserialize this rectangle from a stream .
4842	Writes the object to the specified stream .
4843	Merge the given unit .
4844	Add a unit
4845	Adds a symbol to the symbol table .
4846	Returns a unit by its id .
4847	Add a unit by name .
4848	Add a unit by symbol .
4849	Helper method to add unique unit .
4850	Add this menu to the given menu .
4851	Find the record with the given drs position .
4852	Reads the data for a scalar .
4853	method to serialize a dataset
4854	Returns the parameter values of the RADDER
4855	Creates a copy of this projection .
4856	Open a feature dataset
4857	Open a feature dataset
4858	Opens a dataset
4859	Add attributes to a Netcdf dataset
4860	Removes duplicates .
4861	Adds a part to the collection .
4862	Make a mutable GC from the index .
4863	Returns an instance of RegExpancer with the given substitution pattern .
4864	Get instance of RegExpancer based on a dataset path
4865	Write query capabilities to a file .
4866	Read the structure data from a Section .
4867	Load a picture from the URL .
4868	Sets the source image of a buffered image .
4869	Zoom the picture to fit .
4870	Paint the component .
4871	Decodes and returns TTF data .
4872	Decode a date and time series into a string .
4873	Converts an array of ints to a date .
4874	Get the number of days for the given month .
4875	Convert the LV coordinate to a vertical coordinate .
4876	Reverse a range of numbers in an array
4877	Get grid packing type name
4878	Returns the data type for the specified type .
4879	Read data from an input stream
4880	Externalize the output stream .
4881	Gets the tag enum .
4882	Get the next image
4883	Size of DapType .
4884	Returns the sum of all values in the array .
4885	Sets the grid s grid .
4886	Sets the overlap value
4887	Clears the grid .
4888	return true if the point is cleared
4889	Finds the intersection with the specified rectangle .
4890	Find the intersection with the specified point .
4891	Find the closest point in the grid .
4892	Returns the squared Euclidean distance between the specified point and the point .
4893	Retrieves or creates a base unit .
4894	Returns the ServiceType for the fragment .
4895	Returns the path for the given url
4896	Decodes the given path extension from the given path .
4897	Checks if the given location contains any dasap data .
4898	Checks if the provided location is in DAP4 format .
4899	Send data for a variable .
4900	Returns the suffix of a fqn .
4901	Returns the prefix of the given qualified name .
4902	Locates a file in the specified directory and returns the full path of the file .
4903	Locates a file or directory in the specified absolute path .
4904	Extract a byte array from the buffer .
4905	Returns the structure path of the given variable .
4906	Returns null if the path is null or empty .
4907	Joins an array of strings using the specified separator .
4908	Checks if a path contains drive letter .
4909	Extracts the list of protocols from a path .
4910	Converts a template index into a list of slices .
4911	Converts a given offset to a list of slices of the specified template .
4912	Checks if a list of slices is contiguous
4913	Checks if a list of slices is single point .
4914	Converts a list of slices to an index .
4915	Read data from an input stream .
4916	Set the station information .
4917	Set the short names of the coordinates .
4918	Read a feature collection from a catalog .
4919	Adds a declaration to the DapGroup .
4920	Updates the groups in the list .
4921	Returns the DapVariable with the given name .
4922	Gets the axis type .
4923	Returns the type of the given indicator .
4924	Extracts and returns the coverage coordinates .
4925	Returns a list of the ranges in the line .
4926	Sets the default properties .
4927	Returns the current sessionid
4928	Set the maximum number of redirected redirects in this session .
4929	Sets whether sessions should use sessions .
4930	Closes this instance .
4931	Sets authentication and proxy credentials .
4932	Track a HTTPS session .
4933	Set the global credentials provider
4934	Validate the catalog
4935	Create a new index .
4936	Compute a stride for each dimension
4937	creates new section
4938	Reduce this index
4939	Returns a new index with the specified rank
4940	Transposes a sub - index to a sub - index .
4941	Returns a permutation of this index .
4942	Get an index iterator
4943	Get the current element .
4944	Set an index .
4945	Set a dimension
4946	Set the coordinates of this index .
4947	Returns the name of the time interval .
4948	Create a calendar date range .
4949	Returns a list of file dates .
4950	create a list of parameters from DMPart
4951	returns the list of stations in the file
4952	Creates a station object from the header data .
4953	Get the names of all station keys .
4954	Returns a list of dates .
4955	Returns the index of the station with the given ID .
4956	Returns the name of the file type .
4957	Accumulate the current depth .
4958	Set indent level .
4959	Read or create an index from a single file
4960	Add a directory scan .
4961	Returns true if there is a scan needed .
4962	Scans through the collection and checks if there is a new one .
4963	Sets debug flags .
4964	Adds a new variable .
4965	Create the output file
4966	Validate an XML document .
4967	Returns a string representation of this slice .
4968	Set the original variable
4969	This method is used to read the data from the stored object .
4970	Reads the contents of this variable into a Array .
4971	return true if this is needed
4972	Convert an Array to an ArrayStructure
4973	Converts the members of a structure to a member info object
4974	Find a variable based on the original name
4975	Returns true if the variable has data .
4976	Enhanced function .
4977	Checks if the resource control is allowed .
4978	Create an empty sequence .
4979	Create an array sequence from parameters .
4980	Create a Sequence from the specified parameters .
4981	Add the vertical coordinate attribute
4982	Asynchronously reads the catalog XML from the URL .
4983	Parses an InvCatalog object from the given XML .
4984	Parses the inv catalog and returns an inv catalog object .
4985	Write the catalog to an output stream .
4986	Gets a metadata converter .
4987	Generate IDless ID .
4988	This is a helper function that returns the result of the multipliedUnit .
4989	Compares this unit by the specified unit .
4990	Copies the input array into a derived unit .
4991	Check if this is compatible with another .
4992	Write a single feature
4993	Write point .
4994	Write the line as XML
4995	Write Polygon
4996	Return the value of the named attribute from the given node .
4997	Get all subnodes of a parent node
4998	Parse a response node .
4999	Pass all reserved attributes to the DAP node .
5000	Get the subset string for a given variable .
5001	Factory method for creating ArrayStructure objects .
5002	Set a member array
5003	Create a structure from a structure
5004	Gets the geometry type .
5005	Make a station from the given station data .
5006	Compile an AST .
5007	Compile a filter .
5008	Redefine a dimension .
5009	Create an ArrayObject for the given index
5010	Returns true if this rectangle is contained within the specified region .
5011	Extend the specified LatLonPoint with the specified point .
5012	Extend this LatLonRect with the specified LatLonRect .
5013	Intersects the specified LatLonRect and returns the result .
5014	Adds elements from two arrays .
5015	Check if the arrays are conformable .
5016	Returns true if the shapeA is identical to each dimension
5017	Convert an Array to an Array .
5018	Copies the elements of the given array to the given array .
5019	Copies all boolean values from the given array to the result .
5020	Copies all objects from the given array to the result .
5021	Get min max .
5022	Set double value .
5023	Make a catalog builder from the current dataset .
5024	Factory method for creating a Projection .
5025	Unescape identifier .
5026	URL - decode a string .
5027	Unescape a URL .
5028	Escape a string .
5029	escape backslash .
5030	Tokenize an escaped name .
5031	Returns the index of the first occurrence of the specified character in the escaped name .
5032	Converts backslash characters to HTML escape .
5033	Read an atomic scalar value .
5034	Returns the path of the given cursor
5035	Get the UIDefaults of a class
5036	Gets the JClass of the specified component .
5037	Compile the LDAP variables .
5038	Compile a DAP structure .
5039	Compile a DAP structure .
5040	Compile a DAP - Array .
5041	Compile a DAP sequence .
5042	Read a Little Endian integer from the stream .
5043	Returns the Field matching the specified name .
5044	Returns the value of the specified field .
5045	Sets the specified field to the specified value .
5046	Add a field .
5047	Add a checkbox field .
5048	Add a date field .
5049	Add a double field .
5050	Add an int field .
5051	Add a password field .
5052	Add a Text Field .
5053	Add a TextComboField .
5054	Add a TextAreaField .
5055	Adds a heading to the layout .
5056	Add a component to the layout .
5057	Adds an empty row to the layout component .
5058	Finds the first active frame .
5059	Returns the cell spacing in the predicted cell space .
5060	Gets the factors .
5061	Multiply two dimensions .
5062	Returns an array of factors of the given power .
5063	Checks to see if this dimension is a reciprocal of another dimension .
5064	Returns true if all factors are in dimensionless .
5065	Create a new instance of ParametricParamTables for lookup tables .
5066	Factory method for creating paramTable instances .
5067	Adds a lookup table to the lookup table .
5068	Adds a parameter table to the query .
5069	If this unit is not a DIMITIVE throw an exception .
5070	Convert the input vector into a derived unit of the output unit .
5071	Initialize the unit table .
5072	Create a vertical variable .
5073	Peek the name of the file .
5074	Reads a short from the byte array .
5075	Reads a signed integer from the byte array .
5076	Read a float from the byte array .
5077	Read a double from the byte array .
5078	Awaits a AA
5079	Add a symbol .
5080	Creates a new converter for the given objects .
5081	Set the structure data .
5082	Set point feature data .
5083	Draw the shapes in the specified graphics context .
5084	Get all the shapes in the map
5085	Processes the input stream .
5086	Read a buffer from the input stream
5087	Read more bytes from the input stream
5088	Reads a number of bytes from a byte array into a byte array .
5089	Skip n bytes .
5090	Add the dimensions to the network .
5091	Returns the coordinate index of the record .
5092	Test if a file is a valid file .
5093	Convenience method to set the state of this instance .
5094	This method extracts data from a variable .
5095	Read one row data .
5096	Creates a dataset from a NetcdfDataset .
5097	Creates a parameter for a given variable .
5098	Fire the map area event
5099	Set the map area .
5100	Sets the map area of the survey to use .
5101	Set the map area covered by the given lat long and longitude .
5102	Sets the projection .
5103	Add all actions to the menu .
5104	start redraw timer
5105	Changes the size of the navigator .
5106	Set the selected variable .
5107	Retrieves a double value from the designated attribute .
5108	Access the double value at the given index .
5109	Access an object at the given index .
5110	Returns the name of the sector of the specified entity .
5111	Reads a scaled integer .
5112	Find parameter by name ignoring case .
5113	Check if there is an odometer in the current element .
5114	Swap the byte order .
5115	Gets the number of time steps for a file .
5116	Returns the path to the file name .
5117	Returns a list of file names .
5118	Gets the path to the ddf file .
5119	Returns the full path for the given filename .
5120	Add a ChSubs to the list .
5121	Convert a reference date to a TimeCoordvValue
5122	Reads the NEX product data from the file
5123	Returns the uncompressed data
5124	Generates code for a special graphic symbol .
5125	Processes the curve .
5126	Read the NEXRAD header from the file .
5127	code 4 .
5128	Process a Unicode string .
5129	code for unlinked vectors
5130	Converts an array of levels into an array of levels .
5131	Returns the dualpol levels .
5132	Add a variable .
5133	Adds a parameter .
5134	Uncompress compressed data
5135	Read an unsigned integer from a byte array .
5136	Reads a number of bytes from a byte array .
5137	Converts a byte array into an object
5138	Process the DMR request .
5139	Returns a new DapRequest instance .
5140	Sends an error response .
5141	Add anchor point .
5142	Stretch the current rectangle .
5143	Gets the bounds of the ripple .
5144	Get the bounds of the anchor .
5145	Format a date only .
5146	replace the data variables in this structure
5147	Ensure that the memory array size is ok .
5148	Reads two integers from a file .
5149	Reads an unsigned integer from a file .
5150	Reads three - dimensional int values from a file .
5151	Reads a 32 - bit unsigned integer from a file .
5152	Reads a 32 - bit integer from a file .
5153	Reads a 4 - bit float from a file .
5154	Convert four bytes to a 4 - byte float .
5155	Reads a 32 bit integer from the file .
5156	Count the number of bits in the given bitmap .
5157	Creates a copy of this projection .
5158	Return a String representation of the Well - Known Text Structure .
5159	Escape a string .
5160	Unescape backslash .
5161	Splits a string into a list of backslash characters .
5162	create a FMRInvocation
5163	get the service special name
5164	Number of projected components .
5165	Gets the reference time .
5166	Factory method to create an ArrayStructure object .
5167	Main method of the index .
5168	Reads a Grib1 record .
5169	Determine if the given Netcfile contains all the global attributes .
5170	Construct a UTM projection transform from the given dataset .
5171	Acquire area file .
5172	Returns true if the specified date is before the specified date .
5173	Returns true if this is before the specified date .
5174	Returns true if the specified date is after the specified date .
5175	Set the value at index .
5176	Add a CoordinateSystem to this variable .
5177	Set the string representation of the unit .
5178	Returns the units value .
5179	Initializes the reader .
5180	Read a catalog from a catalog
5181	processes a set of datasets
5182	Read catalogs in the specified directory .
5183	Determine if a given long is between the two longitudes .
5184	Convert a latitude to a string .
5185	Convert a long to a string representation .
5186	Compares this quantity to another .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Make a tree path for the given node .
5190	Open all the catalog trees
5191	Set the catalog location .
5192	Sets the catalog
5193	Find the alias for a variable
5194	Write a vInt .
5195	Writes a sequence of characters .
5196	Reads a char array into the specified buffer .
5197	Sets the debug flags .
5198	Adds a member .
5199	Hide the given member .
5200	Get the names of the members
5201	Returns the member with the given name .
5202	Reads a bitmap from the given file .
5203	Restore the state of the popup .
5204	Get the selected rows .
5205	Returns the index of all model columns
5206	Returns an Array object of a member .
5207	Returns the double value of a member .
5208	Retrieve a double array .
5209	Get a float value .
5210	Retrieve a float array .
5211	Returns the scalar byte of a member .
5212	Returns the byte representation of a member .
5213	Get a scalar value .
5214	Retrieve an integer array from a member .
5215	Get a short value .
5216	Returns the value of a member .
5217	Returns the value of a scalar member .
5218	Returns the value of a member .
5219	Get a character as a char .
5220	Returns the character array as a char array .
5221	write a dataset
5222	Checks if a dataset is use .
5223	Creates a copy of a dataset .
5224	Transfers metadata from a Dataset to another Dataset
5225	Gets the inherited metadata .
5226	Adds a record to the record .
5227	Prints out all missing values .
5228	Show the summary of missing values .
5229	Find a grid record .
5230	Debug dump .
5231	Creates a long name for the first record .
5232	Subtract coverage coordinates by interval .
5233	equals with byte arrays
5234	Parse the DMR data into a DMR dataset .
5235	Process attributes .
5236	Adds a list of coordinates to this partition .
5237	Sets the latitudes of latitudes .
5238	parse a variable selector
5239	Create a string representation of a section .
5240	See if there is a box 9 in the rectangle
5241	Closes the underlying connection .
5242	Execute HTTP method .
5243	Identifies the encoding station for the given information .
5244	Checks if the coordinate axis is valid .
5245	Set the stream to be read .
5246	Reads the next character from the stream .
5247	Starts a progress monitor .
5248	Parses a string into a URI .
5249	Exclude the given URs .
5250	Nullify a string .
5251	Joins the given prefix and returns the canonical path .
5252	Filter a Crawlable dataset .
5253	Copy info from another GribCollectionMutableMutableMutableMutableCollection .
5254	Return a sorted list of file names
5255	Set the index file .
5256	Gets the index file path in cache .
5257	Closes the index .
5258	Returns the number of non - null counters .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Removes the global attribute .
5262	Renames a global attribute .
5263	Adds an attribute to a variable .
5264	Add an attribute .
5265	Deletes a variable .
5266	Renames a variable .
5267	Determine the file type based on the file name .
5268	Writes the headers to the file .
5269	Write the members .
5270	Writes the station obs as XML .
5271	Writes the XML of this station collection as XML .
5272	Write a DRS .
5273	Send DRS data to the output .
5274	Writes an error response .
5275	Closes the output stream .
5276	Send DMR data to the output stream .
5277	Creates a copy of this projection .
5278	Check if the edge is contained in the desired stride
5279	Get element i .
5280	Shifts the range at the specified origin .
5281	Reads data into an object .
5282	Reads data from the file .
5283	Returns a subset of this vector with the specified stride .
5284	returns an ordered list of catalog extensions
5285	delete the old database file before the given tracker number
5286	Set the values .
5287	Get a DataChunkIterator without the segments
5288	Convert an array of ints into a double array .
5289	Get the dataset boundaries
5290	Check the requested variables .
5291	Returns the dataset source structure for the given name .
5292	Return the resource path of a given location .
5293	Makes sure that all vertices in the list of vertices and adds them to the network .
5294	Reads the PIX file .
5295	Finishes the execution .
5296	Transfers inherited metadata from parent .
5297	Transfer metadata from another dataset .
5298	Transfers all inherited metadata from another
5299	Sets the contributors .
5300	add a dataset to this dataset
5301	Removes a dataset from the catalog .
5302	method to replace a dataset
5303	Add a service
5304	Remove an inv service
5305	Sets the services .
5306	Remove the given metadata from the dataset .
5307	Get user property .
5308	Check that this dataset is valid .
5309	Returns a list of descriptor descriptors .
5310	Construct the server path from the HttpServletRequest
5311	Get the capabilities .
5312	Get a feature by its name .
5313	Check the parameters for error .
5314	Handle request .
5315	Get the capabilities for a given URL .
5316	Returns the size of the object in S3 .
5317	Returns the last modified date of the snapshot
5318	Set the data from the dap .
5319	Sends a file .
5320	Utility method to send a string .
5321	Set the content length of the response .
5322	Returns the URI of the given request .
5323	Get request path .
5324	Gets the request base .
5325	Returns the value of the specified parameter ignoring case .
5326	Saves the preferences .
5327	Write a directory .
5328	Set bit offset .
5329	Create a new counter for a given subKey
5330	Computes the number of bits starting at the specified start position .
5331	Append a line .
5332	Create a document that represents a station feature .
5333	Get the capabilities document
5334	Get the record at the specified parameters .
5335	Get the coordinate at the given index .
5336	Adds the specified item to the list . If the list is not already in the list it is removed from the list .
5337	Handle exception .
5338	Returns the specified slice .
5339	Iterates over the specified indices .
5340	Gets the NCEP generation map for the NCEP file .
5341	Check if the given endpoint is a Cdmrf endpoint
5342	Sets the status of this field .
5343	Create a new Grib1 Gds .
5344	Copies the data from the input stream to the output stream .
5345	Read the contents of the stream and return it as a String .
5346	Reads the contents of the stream into a byte array .
5347	Writes the contents of the given string to the output stream .
5348	copy file to output stream
5349	Copies data from a file to an output stream .
5350	Copies all files from one directory to another .
5351	Reads the contents of a file into a byte array .
5352	Read a file into a String .
5353	Write the contents of a string to a file .
5354	Write a string to a file
5355	Write the contents of an InputStream to a file .
5356	Handle a parse exception .
5357	Handle a DAP2Exception
5358	Sends bad url error page .
5359	Get the catalog information .
5360	Print the catalog for this server .
5361	Print the status
5362	Print error page .
5363	Gets the reference date .
5364	Read variable data .
5365	Parse a NcML document from a String
5366	Opens a dataset reader .
5367	allow characters in string
5368	clean up UTF8 charset
5369	Removes all letters from the string
5370	Filter 7 bits .
5371	Make a valid CdmObject name
5372	Match s .
5373	Pads the string to the end of the string with the desired length . If the string is longer than the desired length it is returned .
5374	Pad a string to a desired length .
5375	Removes a string from a string .
5376	Removes the specified character from the string .
5377	Removes the given character from the end of the string .
5378	Collapses all whitespace characters in a string .
5379	Replaces all occurrences of a character with a given character .
5380	Replaces all occurrences of a string with a replacement character .
5381	Replaces all occurrences of the specified pattern with the specified value .
5382	Replaces all occurrences of a string with a given substring .
5383	Replaces all occurrences of matches with the given string .
5384	Removes all characters inside the stringBuilder
5385	Replaces an out character in a StringBuilder with a given character .
5386	Replaces all occurrences of a String in the given StringBuilder with the same character
5387	Replaces all occurrences of substring in the given string with the given substring .
5388	Removes bad characters from string
5389	Process a collection update event .
5390	Checks if there s a new state .
5391	Updates the collection .
5392	Show the unique templates .
5393	Retrieve the datasets .
5394	Release resources .
5395	Create a deep copy of the structure data .
5396	copy to ArrayStructure
5397	copy to ArrayStructure
5398	Creates a new ArrayStructure object .
5399	Copy to ArrayStructure
5400	Returns the size of the forecast interval in milliseconds .
5401	Create a coordinate axis with the specified range .
5402	Factory method to create a TableAnalyzer .
5403	Gets the first feature type .
5404	Generate the tables for the specified feature type
5405	Sync the grid reader .
5406	Generates a list of latitudes based on the specified type .
5407	Swap long at offset
5408	Swap a float at a given offset
5409	Swap a char at a specific offset
5410	Add coordinate axes to the dataset .
5411	Add a parameter to a coordinate transform .
5412	Returns the common parent of this group and the other .
5413	Test if this group is a parent group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Add a dimension if not already present .
5417	Adds a group to this group .
5418	Adds an enum type to this group .
5419	Adds a variable to this group .
5420	Removes the specified dimension .
5421	Create a new group relative to the given path .
5422	Convert an attribute name to a DAS alias
5423	Print the DAS object to the specified PrintWriter .
5424	Returns the variable with the given name .
5425	Writes a grid to a data set
5426	Replace the missing values in the array .
5427	Replace missing values .
5428	Get the xstart of a longitude
5429	Write the coverage data to a grid .
5430	Writes the exception .
5431	Returns the lib version of the library .
5432	Create the top index file for a feature collection .
5433	Gets the type of the collection .
5434	update the collection
5435	update the leaf collection
5436	Opens a GRICollection from an existing file .
5437	Open a GribCollection from a data file .
5438	Open a new GribCollection using the given data file .
5439	Checks if the pattern matches the pattern .
5440	Adds a key - value pair to the RC server .
5441	Find a key in the dictionary .
5442	Sets up any resources that have no URL .
5443	Load CDM file
5444	Insert a triple into the trie
5445	Returns the list of datasets .
5446	Find a dataset by name
5447	Set the projection .
5448	Returns an iterator over the shapes in the given graphics context .
5449	Creates a list of shapes for each feature .
5450	Compares this object with the specified ID .
5451	Start a progress monitor task
5452	Determines if the collection index file has been deleted .
5453	Normalizes the difference between two geometries .
5454	Set an object at the given index .
5455	Gets the structure data at the specified index .
5456	Copy data from an array member .
5457	Get a scalar object .
5458	Convert a scalar value to a double .
5459	Convert a scalar value to a scalar int .
5460	Get a scalar value .
5461	Get a scalar value as a byte .
5462	Get a short from this member .
5463	Get a single character from this member .
5464	Get a scalar string value .
5465	Get an ArrayStructure object containing the elements in this sequence .
5466	return ArraySequence object
5467	Get an ArrayObject at a particular record .
5468	Returns the minimum value of the given value .
5469	Evaluate a variable .
5470	Returns a string representation of this constraint .
5471	Determines whether the specified DapNode refers to a reference .
5472	Emit a boolean value .
5473	Returns the number of variables in the given struct .
5474	Compute the set of dap enums .
5475	Compute groups .
5476	Compile a constraint .
5477	checks if a file is a valid file
5478	Sets the actions .
5479	Gets byte order .
5480	Set byte order .
5481	Find a key by name
5482	Returns the header with the specified name .
5483	Returns the header of the DMF file .
5484	Prints the parts to the console .
5485	gets the data point at a specific location
5486	Computes DMF for a given word .
5487	Reads a DMF string from the input stream .
5488	Extract data from DMPart .
5489	Convert bits to string representation
5490	Write a NetcdfFile to a WritableByteChannel
5491	Parse a base element .
5492	Parse a DGrid element .
5493	Parse aliases .
5494	Decode a list of key descriptors
5495	replicate keys .
5496	Get the dataset filename
5497	Gets CFField type .
5498	Returns true if the two float values are within the maximum difference .
5499	Determines whether a DAP node represents references .
5500	Parses a string .
5501	Debug out an object .
5502	Checks if a variable is compiled .
5503	Make a best guess for a coordinate array .
5504	Convert a LatLonRect to a projection matrix .
5505	Show TimeSeriesAll
5506	Returns a map of attributes .
5507	Retrieve the value of this DataType .
5508	Returns the numeric value at the given index .
5509	Write a CDF definition .
5510	Sets the attribute value .
5511	Sets the values of the attribute .
5512	Sets the values from an array
5513	Perform the scan .
5514	Get the actual invocation catalog .
5515	Schedules write .
5516	Opens the target datatype
5517	Open the catalog .
5518	Jredds a dataset .
5519	Sets up the dataset .
5520	Prepare the UI .
5521	Creates a frame that displays the Tools UI .
5522	Creates a full name of a list of coordinates
5523	Returns the first coordinate of a coordinate .
5524	Finds a coordinate with the given type .
5525	Get the projection for this coordinate .
5526	Indicates if the projection is XY or not .
5527	Return true if this coordinate is regular .
5528	Determines if the subset is contained in the specified collection .
5529	Determines if the list contains any of the requested names .
5530	Indicates whether the given axis contains the named axis .
5531	Returns true if the list contains the given dimension
5532	Contains the list of Axis types .
5533	Contains the given axis type?
5534	Clones this DAG .
5535	Returns the currently selected bean .
5536	Returns the currently selected beans .
5537	Get the selected cells
5538	Set the selected bean .
5539	Restore column state .
5540	create an unknown unit with the given name
5541	Close the stream .
5542	Determines whether a variable is an extra variable .
5543	Determine if a variable is a coordinate .
5544	Searches for a coordinate axis for a coordinate
5545	Add data variables from a Table .
5546	Add the parent join .
5547	Create a station feature from the given structure data .
5548	Creates a NodeMap for a DatmFile .
5549	Create a SimpleUnit with given name
5550	Factory method to create a SimpleUnit with the given name
5551	Create a unit from the given name .
5552	Check if the string is compatible with the exception
5553	Checks if a given DateReference is compatible with the DateReferenceUnit .
5554	Determine if the given string represents a time unit .
5555	Get the conversion factor for the given input unit string .
5556	Convert the value to the given unit
5557	returns true if this item is an unknown unit
5558	Gets the scale value .
5559	Create a new top - level clause .
5560	Create a new BoolFunctionClause .
5561	Create a new sub - clause .
5562	Creates a BufferedImage from an Array
5563	Crawl the catalog .
5564	Crawl dataset .
5565	Crawl datasets .
5566	Get file from disk cache if exists otherwise return null
5567	Checks if the given file location is already in the disk cache otherwise returns the existing one .
5568	Sets whether or not debug warnings should be reported .
5569	Gets a sorted list of files .
5570	Close the file .
5571	Seek to the given position .
5572	Writes the data to the file .
5573	Reads a byte from the buffer .
5574	Read a short array .
5575	Read an int from the input stream .
5576	Read n .
5577	Read n long .
5578	Read n float .
5579	Read n .
5580	Read a string .
5581	Read a string from the stream .
5582	Write boolean array .
5583	Write short array .
5584	Writes a character array .
5585	Writes an array of integers .
5586	Write a long array .
5587	Write a float array .
5588	Write a double array .
5589	Writes a string to the output .
5590	Writes len bytes to the output stream .
5591	Search forward .
5592	Append query from template .
5593	Create a new collection
5594	Finds the index .
5595	Check if the partition is a leaf
5596	Constructs a list of children .
5597	Scans the directory for children .
5598	Read mFiles from index reader .
5599	Gets the grids .
5600	Acquires a FileCacheable .
5601	remove the cache element
5602	Removes a file from the cache .
5603	releases a FileCacheable
5604	Calculate 4 bytes for 4 bytes .
5605	returns a new element in the cache
5606	Clears the cache .
5607	Determines the vertical transformation .
5608	Returns true if this is a global long .
5609	Check if the vert axis is positive .
5610	Get the XY index for a coordinate .
5611	Retrieves the XY index of a coordinate bounding box .
5612	Returns the XY index of the given latitude and longitude
5613	This function calculates the coordinate of a given latitude and longitude .
5614	calculate the position of the current item
5615	calculate the item index
5616	Iterate over all the files in the collection .
5617	Get the logs from the server
5618	Returns the name of the sub center .
5619	Construct a CalendarPeriod from an ISO8601 unit string .
5620	Returns a CalendarPeriod with the specified value and field .
5621	Constructs a CalendarPeriod from a string representation .
5622	Returns the number of days between two dates .
5623	Convert from CalendarPeriod to Calendar .
5624	Returns the value of this period in milliseconds .
5625	Gets the offset between two dates .
5626	Synchronizes the configuration file .
5627	load the tables from the configuration
5628	Put the data root path .
5629	Finds the longest path match for the given path .
5630	Finds a data root from the map .
5631	convert the data root to the data root
5632	Returns a calendar date range for the specified calendar .
5633	Reindex a list of coords .
5634	Creates a new NetcdfFileWriter .
5635	Create a new group and add it to the parent group
5636	Add an enum typed definition
5637	Removes an attribute from the group .
5638	Renames a group attribute .
5639	Adds a record to the NFVO file .
5640	Abort the stream .
5641	Write properties .
5642	Extract the Thredds from a Dataset
5643	This method returns the subtraction of this instance with the given instance .
5644	Converts this unit into a derived unit .
5645	Converts this unit into another unit .
5646	Convert a nested variable into an array
5647	Converts a top level variable to a array .
5648	Convert DRSV to an array .
5649	Closes all open databases .
5650	Opens the database .
5651	Converts an integer value into a Period .
5652	Ensures that the internal array has at least the given capacity .
5653	Returns the value at the specified index .
5654	Create an catalog object for a directory .
5655	Create an InvocationCatalog for a proxy .
5656	Gets the coordinate type .
5657	Factory method for creating Pds .
5658	Calculates the time in a Calendar .
5659	Applies a scale factor to the specified value .
5660	Parses a local concept .
5661	Adds a local concept from an input stream .
5662	Clean out the given string .
5663	stores a key - value pair
5664	Writes the grib1 tables to the output file .
5665	Writes the lookup tables .
5666	Show local concepts
5667	Main method to write Grib1 tables .
5668	Get DatasetType by name
5669	Expand the skeleton catalog .
5670	Performs full expansion of this dataset .
5671	Name all datasets in a dataset container
5672	Create a named dataset list .
5673	Try to find a dataset root .
5674	Loads a picture from the specified URL .
5675	Stop loading of this picture
5676	documentation inherited from SourcePicture
5677	Get notification of source load progress notification
5678	Creates scaled picture in thread pool .
5679	Gets scaled size .
5680	Get the scaled size of a scaled picture .
5681	Get the merged parts .
5682	Create the header of the RPM station .
5683	Get the CK types
5684	Check for a valid group
5685	Set the root directory .
5686	Create the root directory .
5687	Gets the cache file .
5688	recursively delete cache files
5689	Calls the diskCache on disk .
5690	Determine if the table is a byte table
5691	Factory method to create a new coordinate axis .
5692	Creates a copy of this coordinate axis .
5693	Checks if the data type is numeric .
5694	Get information about this axis .
5695	Gets the calendar from the CFML attribute .
5696	Sets the list .
5697	Get the currently selected row .
5698	Increment the selected row .
5699	Returns the model index of the model .
5700	Set the slider index of the slider
5701	Sort an array .
5702	Swaps two strings .
5703	return an existing MFileOS if the file exists otherwise return null
5704	Rotate a longitude .
5705	Create an XMLStore from a file .
5706	Create an XMLStore from an input stream
5707	Create an XMLStore from a resource
5708	Generate the standard filename for an XMLStore .
5709	Saves the XML store to the prefs file .
5710	Save this XMLStore to an output stream .
5711	Write an atomic variable .
5712	This method writes the data in a DAP structure .
5713	Writes a DAP structure .
5714	Write a DapSequence .
5715	Write a DapCursor to the given SerialWriter .
5716	Checks to see if a file is valid i . e . if it is valid i . e . if it is valid i . e . if it s not valid .
5717	get the wmo ID
5718	Read row n .
5719	gets the data at the i th index
5720	Get data points in the data format
5721	Gets data points .
5722	This method retrieves instances of this template .
5723	Create a file containing a grid file .
5724	Computes the size of a grid file .
5725	Create a network file with the specified parameters .
5726	Set the stations .
5727	Sets the currently selected station .
5728	Selects the station with the specified point .
5729	Pick the closest station in the world model
5730	Gets the currently selected station .
5731	Returns the name of the project .
5732	Returns the list of stations in the specified location .
5733	Returns the station with the given name .
5734	Returns a DataIterator for a station .
5735	Returns a DataIterator for a station .
5736	Reads the data for the gate .
5737	Calculates the dot product of this vector .
5738	Returns the norm of this vector .
5739	Normalizes this vector .
5740	Set all the services in the dataset .
5741	Returns the parameter with the given id .
5742	Returns a parameter by its id .
5743	Add a prefix .
5744	Add a symbol .
5745	Returns the prefix for a given string .
5746	return true if email is OK
5747	Get a parameter value .
5748	Calculates the CRC of the raw data
5749	Determine if the next byte is a thin byte .
5750	Returns the index of the field .
5751	Get time type name .
5752	Gets the current time coordinates .
5753	Set the next polygon
5754	Set the previous polygon
5755	Returns the value of the property with the given name .
5756	Sets the current projection .
5757	Extract the coverage offsets from the given time range .
5758	Registers the IOProvider with the given class name .
5759	Registers an IOProvider for the given class .
5760	Dynamically registers an Iospice provider with the specified target class .
5761	Check if Iospice registered for the given class is registered .
5762	De - registers an Iospice provider .
5763	Check if a file can be opened
5764	Creates a NetcdfFile from byte array .
5765	Creates a NetcdfFile with given byte array .
5766	Open a NetcdfFile .
5767	Open a NetcdfFile .
5768	Returns the global attribute with the given name ignoring case .
5769	Converts the given URL to NDCML element .
5770	Writes the CDL object to the given stream .
5771	Write the CDL content to a PrintWriter .
5772	write CDL
5773	Add an attribute to the group .
5774	Adds an attribute to the specified group .
5775	Adds a group to this group .
5776	Adds a dimension to this group .
5777	Removes the specified dimension from the specified group .
5778	Adds a variable to the group .
5779	Adds a new variable to this group .
5780	Adds a string variable to this group .
5781	Removes a variable from the group .
5782	Sends a Iospike message .
5783	Make record structure .
5784	Finishes the group .
5785	Reads a variable section .
5786	Copy a variable to a byte channel .
5787	Reads a list of variables .
5788	Read variable section .
5789	Returns the full name for a CDM node .
5790	Creates a fully qualified name for the group .
5791	Check if the given MFile should be included
5792	Check if the given MFile should be excluded
5793	return true if and only if the mFile is accepted
5794	Append a string value to this attribute .
5795	Dispatch a check value .
5796	Force value checking .
5797	Checks whether a String is a Byte .
5798	Check a short .
5799	Check an integer value .
5800	Check an unsigned integer value .
5801	Check if a string is a float .
5802	check a double value
5803	Returns the data type for an attribute .
5804	Check if a dataset is viewable
5805	Verify if the string is a valid boolean .
5806	Determines if the given string is a valid alphanumeric string
5807	Checks if the given alphanumeric string is in the constrained set .
5808	return true if the file path contains only files .
5809	Converts a Unicode code point into a percentage string .
5810	Get the value of a parameter
5811	Compares two local grids .
5812	Processes the input stream .
5813	process a BUFR message
5814	Removes double quotes from string .
5815	Makes a stack of all the variables in the given stack .
5816	Writes a dataset to the ncML file .
5817	Get config value from Thredds config .
5818	Writes a CDL file .
5819	This method is used to create a station helper object .
5820	Validates the result service .
5821	Returns the value of the azimuth in degrees .
5822	Returns the elevation of the elevation
5823	Returns an array of all of the latitude values in this sound .
5824	Returns the longitudes of this alarm .
5825	Returns the altitudes of all the positions in this sound as a double array .
5826	Returns the azimuth s azimuths .
5827	Returns an array of the elevations for this polygon .
5828	Returns a copy of this structure with the specified member names .
5829	Selects all members with the given variable .
5830	Adds a member variable to this member .
5831	Sets the list of variable variables .
5832	Sets the parent group .
5833	Calculates the total size of this variable
5834	Reads a structured structure data
5835	Read a vector from a vector .
5836	Get a structure data iterator .
5837	Returns the name of a data category
5838	Gets the class name .
5839	Add a parameter .
5840	Get the header string
5841	Convert a LatLonLong to a projection matrix .
5842	Returns the preferred version number for a given name
5843	Returns the value of the zis axis .
5844	Delete the next file
5845	Set the color scale parameters
5846	Renders plan view
5847	Check if the group is a child of another group
5848	Get type by name
5849	Install the cell renderers in all columns in the given table .
5850	Sets the account key and secret key .
5851	Creates a label with no label .
5852	Creates a label .
5853	Creates a label .
5854	Connect to the CloudSQL server .
5855	Returns a list of ip sql types .
5856	Connects to a database .
5857	Removes a logger
5858	Compiles all source code files .
5859	Compiles a class .
5860	Add a source code
5861	Read graphic control extension .
5862	Get the next GIF frame .
5863	Replies the selectable string property for the repository .
5864	Initializes the list change listener .
5865	Gets the person with the specified id .
5866	Adds a message to the validator .
5867	set personId
5868	Create and inject a ViewModel .
5869	Creates a new view model instance .
5870	Loads the list of countries .
5871	Loads the list of subdivisions .
5872	Adds a StringPropertyField for the given StringProperty
5873	Adds an immutable string representation of an immutable property .
5874	Start a new view step .
5875	Step for FxmlViewStep .
5876	Clears the given map .
5877	Creates the index events .
5878	Accessor method .
5879	Load a view of the given view in the given context .
5880	Create fxml path .
5881	Query for style mapping row
5882	Reads a pixel value from the image bytes
5883	Get pixel values from image bytes
5884	Validate the coverage data
5885	Create an image containing the tile width and height
5886	Set the tile data
5887	Runs a query on the database
5888	Wraps a query returning a CursorResult .
5889	Perform a query and return the result .
5890	Execute a user query
5891	Converts cursor query into TResult
5892	Get the feature row for the index
5893	Register a new table
5894	Retrieves the tile row for the given coordinates and zoom level
5895	Get the coverage data
5896	Get the coverage data for the tile DAO
5897	Get the coverage data for the tile
5898	Get the coverage data tile results
5899	Get the coverage data tile results zoom
5900	Get the coverage data tile results from the tile matrix
5901	Get the coverage data tile results
5902	Get the tile matrix for the coverage data request
5903	Get the value of the tile at the given location
5904	Set the icon row
5905	Get the icon for the geometry type
5906	Opens the bindings database .
5907	Decode a byte array to a Bitmap .
5908	Compress the bitmap to a byte array .
5909	Create the table
5910	Delete the geometry metadata
5911	Get the table metadata
5912	Get the GeoPackage ID
5913	Create table metadata .
5914	Create and return the extension
5915	Get the feature row
5916	Runs a raw query on the database using the provided query arguments .
5917	Query by bounding box
5918	Query for rows within a geometry envelope
5919	Returns the number of cells in the given envelope .
5920	Query for rows within the bounds
5921	builds where clause
5922	Query for features within the bounding box
5923	Count the feature count within the bounding box
5924	Query for features within the envelope
5925	Query for features within the bounds
5926	Query for rows within the bounds
5927	Set compressed bitmap data
5928	Set bitmap data
5929	Set bitmap compression configuration
5930	Get the tile count
5931	Adjust the bounding box based on the GeoPackage zoom and zoom level
5932	Adjust the bounding box of the Google Maps API .
5933	Adjust the WGS84 bounding box for the GeoPackage
5934	Adjust the GeoPackage bounds for the GeoPackage and zoom level
5935	Get the bounding box for the tile at the zoom level
5936	Get the tile grid for the given zoom level
5937	Query for a tile row
5938	query - by method for descending level
5939	Get the zoom level closest to the specified length
5940	Get the approximate zoom level for the tile .
5941	Query for tile grid by zoom level
5942	Delete the tile at the zoom level
5943	Query for zoom level by zoom level
5944	Check if the tile matrix is Google tiles .
5945	Get the pixel value
5946	Get the pixel values of the image bytes
5947	Validate the coverage data
5948	Create a coverage data image .
5949	Set the pixel value in the image
5950	Get or create a GeoPackage
5951	Returns the current row
5952	Move the cursor to the next invalid position
5953	Query for style mappings by base id
5954	Delete by base id
5955	Get the rectangle from the bounding box section and the bounding box section
5956	Get a rounded rectangle using the bounding box section and the bounding box section .
5957	Delete missing databases .
5958	Create the GeoPackage for the database
5959	Check if the database is valid
5960	Validate database .
5961	Validate database .
5962	Validate database .
5963	Validate the database header
5964	Check if the database header is valid
5965	Add internal databases
5966	Add external GeoPackages
5967	Imports the GeoPackage as a database
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata
5970	Create a new GeoPackage ID
5971	Populate a geometry metadata object .
5972	Delete the GeoPackage metadata
5973	Create or update the geometry metadata
5974	Update the geometry metadata
5975	Count the number of rows in the table and bounding box
5976	Create a GeometryMetadata object from the cursor
5977	Update rows matching the where clause
5978	Draw a tile
5979	Gets the simple attributes .
5980	Makes sure the cursor is ok .
5981	Get the user mapping DAO
5982	Get the SimpleAttributes DAO
5983	Retrieves the mappings for a base id
5984	Retrieves the mappings for the given extended relation
5985	Determine if the base id and related id has a mapping
5986	Get the count for the cursor
5987	Register a cursor wrapper for the GeoPackage
5988	Read a table from a GeoPackage
5989	Get the tile from the request bounding box
5990	Draws a tile from the tile results
5991	Reproject a tile to the requested projection
5992	Get the tile results from the bounding box
5993	Calculate width and height of the feature table
5994	Set the density of the polygon
5995	Sets the line Paint .
5996	Set the Polygon Paint
5997	Draw the tile at x y and zoom level
5998	Draw a tile at the x y and zoom level
5999	Draw a bitmap from the x y and zoom level
6000	Query for feature count in the x y and zoom
6001	Query for feature index in the bounding box
6002	Query for feature results in the bounding box
6003	Query for features within the bounding box
6004	Draw a tile from the feature dao
6005	Simplify the points .
6006	Returns the paint for the specified feature style .
6007	Determine the paint for a feature style
6008	Determine the paint to use for the feature style
6009	Determine the paint for the feature style
6010	Determines the paint for the feature style
6011	Get the style paint
6012	Get the paint for a style row
6013	Get the paint for a style id
6014	Put a bitmap into the icon row .
6015	Creates a bitmap from an icon row
6016	Wrap values
6017	Creates a bitmap for all layers in the layers .
6018	Recycle the bitmap
6019	Get the bitmap for a specific layer .
6020	Get the canvas for a specific layer .
6021	Creates and canvas bitmap .
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature style for the feature table
6026	Get the style for the feature table
6027	Get the style for the feature table and geometry type
6028	Get the icons for the feature table
6029	Get the icon for the feature table and geometry type
6030	Get the FeatureStyles for a FeatureRow
6031	Get the feature styles for a feature table
6032	Get the styles for a feature row
6033	Get the icons for a feature row
6034	Get the styles for the feature id
6035	Get icons for the feature id
6036	Set the feature table style for the feature table
6037	Set the style for a feature table
6038	Sets the icons for the feature table
6039	Set the style for a FeatureRow
6040	Updates the feature style for the feature table
6041	Set the style for a feature row
6042	Update the style for a feature table
6043	Set the style for a feature row
6044	Set the style for a feature row
6045	Set a style for a feature table
6046	Sets the icons for a feature row .
6047	Set the icons for a feature table
6048	Set the icon for a feature row
6049	Sets the icon for a feature row
6050	Set the default icon for the feature table
6051	Get or insert a style or create a new one .
6052	Retrieves or inserts an icon .
6053	Insert a style mapping
6054	Delete the style mapping for the feature table and geometry type
6055	Delete the table icon mapping for the feature table and geometry type
6056	Delete the table mapping
6057	Delete the feature table mapping
6058	Delete the style mapping
6059	Get all style ids for the feature table
6060	Get all icon ids for the feature table
6061	Get all style ids for the feature table
6062	Get all icon ids for the feature table
6063	Get the image bytes .
6064	Flush the image .
6065	Get the pixel value
6066	Read pixel values .
6067	Draw the feature
6068	Draw a line path
6069	Draw a polygon path
6070	Add a LineString to the bounding box
6071	Add the polygon
6072	Get the cache for a table
6073	Remove a feature row from the table
6074	Clear all caches and resize them
6075	Get the style for the table feature style .
6076	Get the icons for the table style .
6077	Get the RTree Index Table DAO
6078	Set the width of the column
6079	Set the height
6080	Gets the derived width and height of this Bitmap .
6081	Calculate the density of a tile in pixels
6082	Read blob value .
6083	Read the custom table
6084	Returns the color or the default if no color is defined .
6085	Validate the color
6086	Creates a color from hex color and opacity
6087	Get the GeoPackage manager
6088	Set the progress in the feature table
6089	Returns the index of the specified types
6090	Index the given feature row
6091	Delete the index of the given types .
6092	Delete the index for the given row
6093	Delete the index of a geometry .
6094	Delete the feature index for the feature table
6095	Returns true if this feature index is indexed .
6096	Gets the indexed types .
6097	Query for feature index results
6098	Query for feature index
6099	Get the bounding box for the feature index
6100	Query for feature index results in the bounding box
6101	Gets the indexed type .
6102	Get file from file path
6103	Get file path .
6104	Returns the geometry type .
6105	Set the geometry type
6106	Check if the URL contains a bounding box
6107	Replace x y coordinates in the url
6108	Check if URL has XYZ
6109	Replace the bounding box in the URL
6110	Replace the bounding box in the URL
6111	Get the geometry data
6112	Index the feature row
6113	Update the last indexed time
6114	Delete the index
6115	Delete the feature index
6116	Check if the feature has been indexed
6117	Query the feature table
6118	Query for the feature table
6119	Query for feature count within the bounding box
6120	Query for geometry envelope
6121	Query for Geometry Envelope
6122	Query for features within the bounding box
6123	Get the count of features in the bounding box
6124	Transform the feature bounding box in the feature projection
6125	Get the Geometry metadata for the cursor
6126	Get the feature row from the cursor .
6127	Get the feature row for the given geometry metadata .
6128	Get the TileDao for the feature table
6129	Get the FeatureDao for the tile table
6130	Get the bounding box
6131	Query by base id and related id
6132	Query for unique base IDs
6133	Get the unique IDs for the user mapping table
6134	Delete by base id
6135	Delete by related id
6136	Delete by related id and related id
6137	Builds where clause for base id and related id
6138	Create a new metadata entry
6139	Delete the Metadata metadata
6140	Renames the metadata
6141	Renames the name
6142	Get all the available GeoPackage metadata
6143	Get the GeoPackage metadata
6144	Get the GeoPackage metadata
6145	Get the GeoPackage metadata
6146	Check if the extension or external path is external
6147	Get the metadata at the path
6148	Get metadata by column name like
6149	Get metadata with not LIKE column
6150	Get Metadata Metadata
6151	Create the GeoPackage metadata
6152	Called when view is created .
6153	Add parallax view to the Parallax .
6154	Inflates the LayoutInflater .
6155	Create a custom view .
6156	Appends an event to the log .
6157	Try to find the logback config file from system properties .
6158	Get the URL for a resource
6159	Auto config
6160	Sets status on a resource search .
6161	Converts an address to a string .
6162	Create new thread pool executor service .
6163	Start all the converters starting with the specified converter .
6164	Override this method to perform a rollover .
6165	Add a substitution property .
6166	Returns the value for the given key
6167	Compile the given node .
6168	Evaluates EOpt
6169	Reads a sequence of tokens .
6170	Escape the string .
6171	Create a regular expression for a fixed date .
6172	Initialize the Evaluator .
6173	End Evaluator .
6174	Initializes this logger .
6175	Creates a dynamical context selector .
6176	Sets up logging properties .
6177	Gets the external storage directory .
6178	Returns the database directory path .
6179	Returns the absolute path for the application .
6180	Returns true if logging level is greater than error .
6181	Retrieves the value of the matching property .
6182	Update mask if it has changed .
6183	Returns the decision of the given event .
6184	create key managers
6185	create trust managers .
6186	Creates a KeyStoreFactory from system properties
6187	Extracts the location from a system property .
6188	Returns the URL for the given location .
6189	Returns true if the converter has a Throwable that handles ThrowableConverter .
6190	Stops the Logback .
6191	Prints a status message to the console .
6192	Prints the status of a context .
6193	Print a warning message to the console .
6194	Handle the first line of a throwable .
6195	Gets an entry from the cache .
6196	To end of life cycle
6197	Creates a FormatInfo object from the given string .
6198	Renames a file .
6199	Checks if srcFile is on different volumes .
6200	Get environment variable value
6201	Get an Android system property by key
6202	Sets the property map for this event .
6203	Output a MDC for all key - value pairs
6204	Extract the stack trace of the specified class .
6205	Checks if the current class is in the framework space list
6206	Add a status message .
6207	Adds a status listener .
6208	Lookup the implicit action for the given element .
6209	Get the applicable actions .
6210	Set the class loader
6211	Gets a property from the system properties .
6212	Read a boolean .
6213	Decapitalizes a name .
6214	Returns an array of MethodDescriptors of the given class .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Initializes the internal appenders .
6217	Helper method to add onConsoleStatusListener instance
6218	This method will put a property in the stack .
6219	Retrieves the value of a logging event .
6220	Check if logging can be discarded .
6221	Defines the shutdown hook .
6222	Add shutdown hook .
6223	Helper method to determine the enabled protocols .
6224	Returns an array with the enabled cipher suites .
6225	Returns the included strings .
6226	Convert string to scope object .
6227	Sets properties .
6228	Add a new appender
6229	Removes the appender from the appender .
6230	Removes the appender with the given name .
6231	Called when the parent logger is not null .
6232	Calls the appenders on the logger .
6233	Detaches an appender from an appender .
6234	Create a child log logger .
6235	Calls the Turb filters for the given marker .
6236	This method is used to log an event
6237	Creates and returns a socket .
6238	Creates the missing parent directories if necessary .
6239	Returns the integer representation of this log message .
6240	Convert an integer to a level .
6241	Count the number of URLs in the given resource .
6242	Returns the URL of the given resource
6243	Returns the ClassLoader for the specified object .
6244	Get the ClassLoader of a given class .
6245	Gets the class loader of the given class .
6246	Start the tag encoder .
6247	Returns the tag for logging .
6248	Begin processing instructions .
6249	Gets the index of the first separator in the specified string .
6250	Evaluates whether or not the given logging event should be found .
6251	Constructs the thread name for the client .
6252	Checks if two files are on the same file store .
6253	Starts the session .
6254	Appends the given event object to the output .
6255	Sends a message to the appender .
6256	Adds a MDC value pair .
6257	Create a DynamicConverter for the given keyword .
6258	Create a composite converter .
6259	Determines the compression mode .
6260	Configure a configuration file .
6261	Configure the configuration file
6262	Configures the given input stream with the given input stream .
6263	Builds the interpreter .
6264	configured configuration
6265	Configures the interpreter .
6266	Returns the property value .
6267	Sets the name of this context .
6268	Returns true if the context has status listener
6269	Date of reset .
6270	Start parsing .
6271	Returns the effective converter map .
6272	Returns the HTML file header .
6273	Get file footer
6274	Begin processing the appender .
6275	Called when an object is ended .
6276	Create a copy of the clients list .
6277	Add a client
6278	Remove a client
6279	Return a copy of the context map
6280	Gets value of method parameter .
6281	Calls the filter chain .
6282	Checks if the current OS is operating system .
6283	Initializes the default logger context .
6284	Returns an array of files that match the given stem regular expression .
6285	collect all status messages that have elapsed time less than threshold
6286	Get the integer value corresponding to the named syslog facility string .
6287	Gets the database file .
6288	Clears expired logs .
6289	Check if the last check has expired .
6290	Inserting a new logging event .
6291	Add properties to secondary sub - appending event .
6292	Binding event .
6293	Return string truncated to 255 .
6294	Compute the mask for an event .
6295	Merges the properties of an event .
6296	Insert exception .
6297	Returns the length of this path equal to the given path .
6298	Returns the effective level .
6299	Set a property on this object .
6300	Indicates whether the given class is instantiable .
6301	Returns the child map .
6302	Parses an include .
6303	Opens an URL .
6304	Removes the head and tail element from the list .
6305	Method to start the server .
6306	Checks if is transient .
6307	Sets the default hosts .
6308	Get the local index .
6309	Sync the data selection .
6310	Sync sync if needed .
6311	Wait a task to be executed
6312	Lists all the indexes in the root directory synchronously .
6313	read char array from stream
6314	Reads all bytes from input stream
6315	Consumes the data and closes the connection .
6316	Returns a list of hosts that should be up .
6317	Sets the type of the Places .
6318	Starts the browse .
6319	Associates the specified value with the specified key in the LRU cache .
6320	Retrieves a value from the cache .
6321	Waits for all threads to complete .
6322	Compare two version strings
6323	Reports an exception to the agent .
6324	Copies all files from one directory to another .
6325	Initializes the simulation properties from the given file .
6326	Get the value of a static field .
6327	Get a method by name
6328	Format a percentage value .
6329	Format double .
6330	Format long .
6331	Reads a JSON syntax character .
6332	Parses a hex value .
6333	Writes a JSON string
6334	Write a number .
6335	Write a double .
6336	Reads a JSON string .
6337	Reads a JSON numeric char .
6338	Reads a JSON integer .
6339	Read a double value .
6340	Read json string .
6341	Execute a method call .
6342	Invokes a method call .
6343	Enqueue a method call .
6344	Get the file associated to a given location .
6345	Updates the decoration .
6346	Refresh repository view .
6347	Returns the resource history view
6348	Opens a string editor .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Create the default page for the book .
6352	Start the thread .
6353	Set the keepalive flag .
6354	Sets whether this node should be excluded .
6355	Set the owner .
6356	Adds a new condition factor .
6357	Create a condition term from the given stream tokenizer .
6358	Returns true if this condition matches the given condition .
6359	Returns the content of the DDL file .
6360	Load the DSL configuration file .
6361	Parses the configuration file .
6362	Create the menu .
6363	Add a response element .
6364	Add an encoded href .
6365	Inserts a new href before a new href .
6366	Removes the href from the element .
6367	Add a prop .
6368	Get the href of the element .
6369	Returns the status element of the node .
6370	Returns the top stack frame associated with the specified value .
6371	Determine if the given class1 is a subtype of the specified class .
6372	Checks if a collection of proposals contains the given proposal .
6373	Clone a DOM node .
6374	Reset the stream .
6375	Create the actions for the breakpoint .
6376	Adds a connection to this connection .
6377	Gets the value of a property .
6378	Removes a connection from this connection .
6379	Sets the location of the property .
6380	Set the value of a property .
6381	Sets the size of the dialog .
6382	Dumps a list of constraints .
6383	Create a new lock entry .
6384	Adds a child vertex to this vertex .
6385	Removes a child vertex from this vertex .
6386	Start the bundle .
6387	Stop the bundle .
6388	Get the string from the resource bundle .
6389	Returns the resource bundle
6390	Get the form colors .
6391	Set a date - time string
6392	Sets the date .
6393	Create an error with the specified message and throwable .
6394	Logs an error .
6395	Adds a field editor .
6396	Adjust the grid layout .
6397	Apply the specified font to all fields .
6398	Calculate the number of columns .
6399	Initialize the fieldEditor .
6400	Fire a property change event to all registered listeners .
6401	Set the active editor .
6402	Adds to the tool bar .
6403	Determines the dialect to use .
6404	Create a new context .
6405	Save the current state of the file .
6406	create table listeners
6407	Create the language table .
6408	Adds the given value to the given url .
6409	Put an entry into the table .
6410	Adds a new node to the tree .
6411	Add a child node to this node
6412	Set the file information .
6413	Adds a new condition to the precondition list .
6414	Adds a condition to the state token .
6415	Returns true if the condition matches this condition .
6416	Returns the first property .
6417	Returns the status of the element .
6418	Set the value of a property .
6419	Get the last line of the back text
6420	Find the last non - dash line in the backText
6421	Helper method for binding .
6422	Concatenates two strings
6423	Returns the message with the given id and bindings .
6424	Create the process .
6425	Creates the sample JUnit .
6426	Returns the value of the runtimeId .
6427	Visit a Rete .
6428	Visits a node .
6429	Returns a dot ID for an object .
6430	Adds a remove property .
6431	Adds a set property .
6432	Create a new locator for the given resource URL and label .
6433	Get PresentationReconciler .
6434	Checks if two Status objects have the same status .
6435	Checks if this factor contains the given term .
6436	Parses a state tokenizer .
6437	Add pages .
6438	HTTP DELETE request
6439	Send a POST request .
6440	Waits for a job .
6441	Execute the pull operation .
6442	Handles pull results .
6443	Sets the value at the given index .
6444	Create a new active lock element .
6445	Filters completion proposals by prefix .
6446	Read backwards from the given offset .
6447	Calculates the row list .
6448	Paint the area .
6449	Get the edit part for a model element
6450	Returns an image descriptor for the given path .
6451	Declares an image registry .
6452	Adds a new vertex at the specified depth .
6453	Replies the row index of the given vertex .
6454	Get the total width of all rows in the row .
6455	Dumps the vertices .
6456	Optimize the optimization
6457	Load the RTree graph from the given contents .
6458	Initialize the graphical view viewer .
6459	Draws a new graph
6460	returns null if no breakpoint exists
6461	Set the href for this node .
6462	Returns whether this device can talk to .
6463	Copies the specified properties to the specified destination .
6464	Examine the response as a multistatus .
6465	Extract properties from a multi status table .
6466	Get the content of the request .
6467	Retrieves the list of active locks .
6468	Gets the property by its name .
6469	Perform a head request .
6470	Sends a lock request .
6471	Move the specified destinations to the specified destination .
6472	Performs a check in the DFU .
6473	Refresh the lock for the specified lock token .
6474	Removes the specified properties .
6475	Removes the specified property .
6476	Set the content of the input stream .
6477	Sets the properties .
6478	Sets the property value .
6479	Unlocks a lock .
6480	Update the version of the document .
6481	Perform the version control .
6482	Deletes the request .
6483	Examines the status code of a redirection .
6484	Returns true if the specified property has the specified child .
6485	Write the request body to the output stream .
6486	Convert a byte array to a hexadecimal string .
6487	Convert an array of ints to a hexadecimal
6488	Sets whether or not all the properties in the DOM tree are allproped .
6489	Sets whether or not the node is a propname .
6490	Set the property .
6491	Strips the last word from a prefix
6492	Update the tree .
6493	Writes the content to the output stream .
6494	Step over the current thread .
6495	marks parser errors
6496	Skip whitespace .
6497	Adds a resource to the target location .
6498	Commit changes on the remote file .
6499	Get the age of the entry
6500	Get the content length .
6501	Returns the maximum number of forwards .
6502	Gets the value of the overwrite flag .
6503	Gets the value of the Passthrough property .
6504	Returns the timeout value .
6505	Associates the specified value with the specified key .
6506	Sets the timeout value .
6507	Open DDL file .
6508	Parse a file .
6509	Gets object metadata .
6510	Strip object metadata .
6511	Adds tokens .
6512	Return the children of the given text
6513	Get the children nodes that match the given object .
6514	Adds the child to the list of children of the given node .
6515	Prints the tree to stdout .
6516	Recursively print a node .
6517	Prints the specified number of tabs .
6518	Converts the given text into a JsonValue .
6519	Get an image descriptor
6520	Executes the resource .
6521	Sets a request header field .
6522	Create the project sample file .
6523	Create rule file .
6524	Create the project flow file .
6525	Create the Java flow launcher .
6526	Returns a list of IUsableUnit objects .
6527	Writes an image to an output stream .
6528	Returns the field name .
6529	Returns the evaluator for this field .
6530	Returns the value of this alpha node .
6531	Adds the properties from the specified resource to the properties file .
6532	Control the baseline control .
6533	Binds the given member to the given locator .
6534	Return the locator for the given member .
6535	Optimize the vertices .
6536	Initializes the dialog s controls .
6537	Validate the page .
6538	Generate an entity tag .
6539	Returns the opposite of the given vertex .
6540	validates OAuth checks
6541	Check if user is right user
6542	get username from publicId file
6543	Addyy to a file .
6544	Verify the OATHO OATH
6545	Clears the password .
6546	Returns the public key of the given OID .
6547	Validate the input otp format .
6548	Creates an Evaluation instance with the given source and source .
6549	Creates an Evaluation instance .
6550	Clears the cache .
6551	Check if the Java 15 . 5 . 1 . 0 .
6552	Returns the package name of the specified object .
6553	Gets the package name .
6554	Returns a string representation of an object .
6555	Gets the type of the argument .
6556	Checks if two classes are more specific than one of them .
6557	Finds the best method for the given parameters .
6558	Gets the value of a property .
6559	Returns all the property descriptors of the specified class .
6560	returns the PropertyDescriptor from the target class
6561	Returns the read method of the specified class
6562	Reads a character from the input stream .
6563	start a projection
6564	The SELECT operator .
6565	Convert value to long .
6566	Returns the value of the specified value .
6567	Convert an Object to a BigInteger
6568	Returns a BigDecimal value of the specified value .
6569	Converts a value to a string
6570	Get the numeric type for a value
6571	Convert the value to the specified type .
6572	Converts a value to an integer .
6573	Returns the smallest numeric type between two types .
6574	Gets the numeric type .
6575	Creates a new Integer from the specified value .
6576	Removes the current evaluation from the tree .
6577	Generates the OGNL getter method .
6578	Generates the OGNL setter method .
6579	Flattens the tree .
6580	Initializes the result .
6581	Returns the next octal character .
6582	Sets the root context .
6583	Evaluates the expression
6584	Sets the value of an expression .
6585	Set the value of an OGNL node .
6586	Checks if the expression is a constant .
6587	Returns the default watch service id .
6588	Waits for the running server to start .
6589	Reads the content of the source file as a string .
6590	Reloads the classloader .
6591	Get an archiver by name .
6592	Checks the resources of the given archiver .
6593	Reads the contents of a file into a string .
6594	Creates the project .
6595	Add a system property .
6596	Add a system property .
6597	Open a new folder dialog .
6598	Change the contents of a folder .
6599	Refresh the button state .
6600	Creates file observer .
6601	Returns the selected directory as result .
6602	Create a new folder .
6603	Checks whether the given file can be read - only .
6604	Start a job .
6605	Start a new list .
6606	Ends the end of the list .
6607	Handle motion .
6608	Gets the cropped rectangle .
6609	Computes the tile layout .
6610	Register an edit text listener .
6611	Adds a span to the span .
6612	This method is used to update the spinner view .
6613	Gets the drop down view for the specified position .
6614	Converts a SpannedText into an RTHtml .
6615	Calculates the spacing between two paragraphs .
6616	Create a unique file in the target folder
6617	Determines the original file name of the image .
6618	Generates the namespace for a given qualified name .
6619	Returns the local name of the given name .
6620	Set the value of an attribute .
6621	Set the value of an attribute .
6622	Read the font name from the specified file .
6623	Returns the font name of the specified file .
6624	Need to be called when a new buffer is filled .
6625	Writes an array of bytes into the buffer .
6626	Writes a byte to the stream .
6627	Reads data from an InputStream .
6628	Writes data to the specified output stream .
6629	Converts this buffer to a byte array .
6630	Sets the font size .
6631	Converts a path to a unix - separator
6632	Recompute the focus event .
6633	Ensure the panning view is visible .
6634	Center the view based on the highlight view .
6635	Resets the document locator .
6636	Validates the value .
6637	Adds an element type .
6638	Set the value of an attribute .
6639	Set the parent .
6640	Get the element type by name
6641	Returns the integer value for the given entity name .
6642	Recursively deletes all paragraphs in the given editor .
6643	Apply a new value to the selection
6644	Checks if the given domain is a valid domain .
6645	Called when an operation is executed .
6646	Redo an editor
6647	Replaces all occurrences of a search string with a replacement string .
6648	Get or create a thread status .
6649	Sets the bitmap options .
6650	Determines whether a thread can decode on this thread .
6651	Decodes a file descriptor .
6652	Returns a sorted set of font fonts .
6653	Gets the map of asset fonts indexed by name .
6654	Get system font names
6655	Initialize the stack
6656	Returns a reader for the given source .
6657	Gets an InputStream for the given basis URI .
6658	Adup an attribute .
6659	Expand entities in the given source string .
6660	Looks up the entity in the buffer .
6661	Restart an element .
6662	Pop the stack .
6663	Restore the popped element .
6664	Returns the prefix of the given name .
6665	Test whether a prefix is foreign .
6666	Removes all quotes from the string
6667	Splits a string into an array of strings .
6668	Rect the given element .
6669	Make the name from the buffer .
6670	Updates the widget state .
6671	Called when the view is destroyed .
6672	Event handler methods
6673	Handles a link event .
6674	Returns the correct base matrix for the bitmap .
6675	Returns the maximum zoom level of the bitmap .
6676	Returns true if the selected text exists in the selection .
6677	Helper method to remove spans from a paragraph
6678	Encodes the given URL .
6679	Decode query string .
6680	Picks the directory from the given startPath .
6681	Rotate image .
6682	Sets the output .
6683	Writes a single character .
6684	Writes a string to the output .
6685	Determine whether the given attribute is a boolean attribute .
6686	Writes a UTF16 escape sequence .
6687	Write namespace declarations .
6688	Write name .
6689	Creates the stream if it does not already exists .
6690	Wait for the stream activation .
6691	Complete the store snapshot with missing snapshots .
6692	Wait for the next provisioning request to finish .
6693	Get records .
6694	Executes an Amazon S3 action using a custom retry limit .
6695	Tries to wait for an action between two requests .
6696	Checks if the given bucket is accessible .
6697	Retrieves a serializable snapshot from the snapshot store .
6698	Trigger a wildcard expansion handler .
6699	Replaces a string in a string with a new pattern .
6700	Deletes any characters that are contained in the string .
6701	Adds a new resource lint report .
6702	Update the properties with the specified key from the configuration file .
6703	Returns the configuration properties
6704	Create an input stream to read the auto - detect wro file .
6705	Creates a map of processor descriptors .
6706	Compiles the given content .
6707	Reloads the cache with a new value .
6708	Reloads model with new value
6709	Returns a servlet request for the given location .
6710	Create a transformer that transforms a file name into a base name .
6711	On error .
6712	Sends redirect to specified location .
6713	Process a resource .
6714	Creates a handler for expanders .
6715	Locates a resource .
6716	Create the WroConfiguration .
6717	Register change listeners .
6718	Process the request .
6719	Set the WroConfiguration
6720	Identify group names .
6721	Merges the imported model into this instance .
6722	Locates the resource with the given URI .
6723	Apply the content processors to the resource .
6724	Decorate a resource post processor
6725	Performs the processing of the specified resource .
6726	Splits a string into an array of options .
6727	Loads properties from an input stream .
6728	Read properties from a string .
6729	Creates custom manager factory .
6730	Persists the resource fingerprints .
6731	Check if the group is the target group .
6732	Extend the classpath .
6733	Access the model resource as a stream .
6734	Initialize the WroManagerFactory
6735	Sets the model transformers .
6736	Compiles the template content .
6737	Process the list of resources and merge them into a single string .
6738	Process and merge resources .
6739	This method runs the preProcessors in parallel .
6740	Apply resource content to string content .
6741	Decorates the resource preProcessor .
6742	Persists the current fallback .
6743	Returns all declared fields .
6744	Rewrite css .
6745	Compute a new image location .
6746	Add a model transform .
6747	Handle the processed bundle .
6748	Initializes the aggregated folder path .
6749	Extract variables from variables body .
6750	Parses the CSS content and returns a map of variables .
6751	Replace variables in CSS .
6752	To process a resource post processor
6753	Check if the search is eligible for the requested type .
6754	Applies gzip to the response .
6755	Create a path pattern processor decorator .
6756	Create a path pattern processor decorator .
6757	Creates a resource change handler .
6758	Save a CSS resource .
6759	Iterate over CSSImportApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyApplyHandler to each CSSImport .
6760	Helper method to filter null objects .
6761	Determines if the request should be minimized or not .
6762	Find imported resources .
6763	Compute absolute URL for a resource .
6764	Converts a list of items to a string .
6765	Gets the alias list .
6766	Creates the context .
6767	Evaluates the given Reader and returns the result .
6768	Evaluates a script .
6769	Process the bundle .
6770	Checks if the request is a handler request .
6771	Create handler request path .
6772	Rename a group .
6773	Compute the destination folder .
6774	Process a group .
6775	Check if a change is required for a group
6776	Locates a resource in a standalone context .
6777	Creates a new object pool .
6778	Locates an input stream from a jar file .
6779	Open a JAR file .
6780	Extract path from URI
6781	Check if the request is minimized .
6782	Add the given locators to the factory .
6783	Decorates a WroModelFactory to a WroModelFactory .
6784	Add a require .
6785	Process the given string content .
6786	Log the summary of the resources .
6787	On processing a resource .
6788	Gets the read write lock for the given key .
6789	Create a process .
6790	Parses a comma separated list of properties .
6791	Get the task info .
6792	Gets the compilation command .
6793	Parse the header .
6794	Add no cache headers .
6795	Gets the path info from a location .
6796	Gets the servlet path from the given location .
6797	Check if path matches path .
6798	Retrieves the pattern with the specified key from the classpath .
6799	Copies content from a reader to a writer .
6800	Creates a temporary file with the given extension .
6801	Clean an image URL .
6802	Sets an attribute on an object .
6803	Generate the data URI from an input stream .
6804	Generate the data URI .
6805	Sets the given WroConfiguration .
6806	Unset the context
6807	Detect changes in the cache .
6808	Called when an exception occurs .
6809	Checks whether a resource is changed .
6810	Update the hash of a group .
6811	Check if there are any resources of the given type .
6812	Create a process .
6813	Encodes a Java object into a string .
6814	Process group element .
6815	Parse a group element .
6816	Create a group object .
6817	Parses a resource element into a collection of resources .
6818	Replies the resources for a group .
6819	Log the timer information .
6820	Stops a named timer .
6821	Get a timer of the given name in the current thread .
6822	Returns a timer with the given name or null if no such timer exists .
6823	Prints the saturation statistics .
6824	wake up workers
6825	Updates the processed counters .
6826	Updates the finished counters .
6827	Atomically updates counter if value is smaller than value
6828	Default visit .
6829	Instantiates the equivalent content of the given property .
6830	Resume the axiom loading .
6831	Restore the saturation stage .
6832	Returns true if the class is consistent .
6833	Restores the taxonomy of the class .
6834	Restore instance taxonomy .
6835	Generate evidence for the ontology .
6836	Pre - execute method .
6837	Recursively invalidates this context .
6838	Get the collection of IDs to add to .
6839	Get the list of removed individuals .
6840	Creates an UnsupportedOperationException .
6841	Removes the element at the given position .
6842	Removes entries from the specified array at the specified position .
6843	Returns the position of the last element in the array that was removed .
6844	checks if the element in the array contains the specified element .
6845	Adds the specified element to the darray if it is not already present .
6846	Checks that the occurrence numbers are valid .
6847	Adds a timer to this class .
6848	Add timer to the system
6849	Put a key in the list and return the old value .
6850	Removes the entry from the specified keys and values array .
6851	Increases the size of this map by the given size .
6852	shrink the keys
6853	Saves the configuration to disk .
6854	Writes the declarations of a class to a writer .
6855	Retrieves all instance nodes from a given node .
6856	Removes all elements from this set .
6857	Combine multiple hashes into a single hash .
6858	Combine a list of hashes into a single hash .
6859	Copy the data from the input stream to the output stream .
6860	Returns an InCompletenessMonitor that delegates to the supplied InCompleteness monitor .
6861	Print the contents of a taxonomy .
6862	Submit an input to the buffer .
6863	Append the specified element to the appendable .
6864	Marks the query as computed .
6865	Add a new direct type node .
6866	Verify that the given start position matches the given start position .
6867	Returns a new set consisting of elements that satisfy the given condition .
6868	Maps the given functor to a set .
6869	Adds the specified element at the end of the array .
6870	Removes an object from the set .
6871	Adds the given counter to this counter .
6872	Log the memory usage .
6873	Sets the reasoner configuration options .
6874	Shuts down the reasoner .
6875	Prints the header .
6876	Log values .
6877	Creates a String from the given character sequence
6878	Counts the number of times in the given counter .
6879	Writes a resource .
6880	Get an ActionInputParameter by name .
6881	Retrieves the property descriptor for the given property path .
6882	Returns a map with all required parameters .
6883	Checks if is single value type .
6884	Adds a relation to this link .
6885	Sets the type of the link .
6886	Add HREFLang .
6887	Adds a revision .
6888	Adds a link parameter to the request .
6889	Expand the template
6890	Get the relation list .
6891	Gets the list of revisions .
6892	Returns true if this action has no required variables .
6893	Get the value .
6894	Returns true if the parameter is hidden .
6895	Returns true if the specified property include the include value .
6896	Determines whether or not the input annotation include value .
6897	Returns true if the request is required .
6898	Returns the default value .
6899	Returns parameter name
6900	Get exposed property or parameter name .
6901	Determine the vocab for the given mixin source .
6902	Get the query string .
6903	Append the form for the action .
6904	Write an input button .
6905	Append the input or select list .
6906	Adds this builder to this builder .
6907	Returns the partial URI template components as an empty form .
6908	Returns a copy of this template component without optional parameters .
6909	Returns the first node with the given name
6910	return first node by rel
6911	Returns an iterator over the data in this node .
6912	Creates a new PersistentHashMap .
6913	Creates a new PersistentTreeMap from the given Iterable .
6914	Returns an empty tree map .
6915	Returns a sorted set of entries in this TreeSet .
6916	Returns the last key in this map .
6917	Creates an Xform representation from the given list .
6918	Perform a folding operation
6919	Drop a portion of this sequence until the given predicate evaluates to true .
6920	Performs a single operation using the given reducer .
6921	Construct a tuple from a Map .
6922	Perform a match .
6923	Registers an array of class types .
6924	Returns the node at the given index .
6925	Appends an element to the tail .
6926	Creates a new PersistentVector .
6927	Creates an immutable set that contains the given items .
6928	Creates an immutable list of the given items .
6929	Creates a new ImSet .
6930	Creates an immutable view of the specified items .
6931	Create an unmodifiable copy of an array .
6932	Create a string builder for a given length .
6933	String representation of an array
6934	Creates a lazy LazyRef instance .
6935	Applies the work to the producer .
6936	Inserts an item at the specified position in the specified array .
6937	Returns an array containing the contents of the specified array .
6938	Suspend the current thread if it is associated with this thread .
6939	Before executing the async operation .
6940	builds components from the specified service descriptor file
6941	Validates a directory .
6942	Create an inheritance link between two classes .
6943	Copies all methods from one class to another .
6944	Copies methods from the given array of methods .
6945	Creates a log tree .
6946	remove the sbb entity with current class loader
6947	Determine whether or not the given parameter name is enabled .
6948	Gets the names of all raEntity links that are referenced by the component .
6949	Install the service .
6950	Uninstalls the given service .
6951	Checks if the specified RA link name is referenced by the resource adapter .
6952	Returns the usage parameters for the given SbbId
6953	reset all usage parameters
6954	Get a collection of profiles from the profile table .
6955	Returns the profile table activity
6956	Get a profile by its indexed attribute .
6957	Displays the result .
6958	 unfoldable array into string
6959	Fire event .
6960	Binds a name .
6961	Unbind a name .
6962	Look up attribute by name .
6963	Returns the name bindings for the cache .
6964	Next event handler .
6965	Returns true if this level is higher than another level .
6966	Extracts the jar contents to a destination directory .
6967	Copies data from input stream to output stream .
6968	Associates the specified value with the specified key in this node .
6969	Attach a new SbbEntity to this node .
6970	Detaches the given SbbEntity with the given ID .
6971	Returns true if the entity has no children .
6972	Replies the names of the Sbb entities that are attached to this node .
6973	Attaches a timer to the tracker .
6974	Removes the timer with the given ID from this node .
6975	Returns true if this node has no listeners .
6976	Get the names of all attached timers .
6977	Add a namespace .
6978	Removes the named namespace .
6979	Returns true if this node has no namespace bound .
6980	Get the set of names bound to this node .
6981	Sets the cmp attribute .
6982	Get the value of a cmp attribute .
6983	Return a copy of the map of the CMP attributes .
6984	Init notification info .
6985	Sends the usage notification .
6986	Download the remote DU from the deployment URL .
6987	Update the deployed components
6988	Installs the specified DeployableUnit .
6989	Uninstalls the specified DeployableUnit .
6990	Processes the deployment and updates the uninstalled components .
6991	Returns a description of the currently deployed components .
6992	Returns true if the log record is logable .
6993	Returns the logger for the given record .
6994	Returns a set of components that refer to the specified component .
6995	Returns the set of SbbEntityIDs contained in this node .
6996	Apply permissions to the current policy .
6997	Gets the code sources .
6998	Determine if a profile with the given name exists in the database .
6999	remove profile from SLEE
7000	Update the configuration properties
7001	Call this method when the RA is active .
7002	Notification that the RA is stopping
7003	Activate the entity adaptor
7004	Deactivates the entity
7005	Schedules the end of the RA entity .
7006	remove this entity
7007	Returns the resource adaptor interface
7008	Call this method when a receivable service is active
7009	Derive an ActivityHandle from a handle .
7010	Called when an activity is ended .
7011	Update the RCConfiguration properties
7012	Verify that the configuration properties have the same value
7013	Notification that the resource adapter is stopping .
7014	Clears the resource adaptor object .
7015	Unconfigured resource .
7016	Declarative Services method for unsetting the resource adaptor context
7017	Declarative Services method for unsetting the faulttor context
7018	Build the profile attribute map .
7019	Resume the event context
7020	Gets the activity context handles .
7021	Removes the bean from the container .
7022	Get the usage MBean for the given parameter set name .
7023	Determine if an abstract class should be created .
7024	Fires an event on all registered listeners .
7025	Fire an event .
7026	Invokes getCMP method on the SbbEntity
7027	Gets the service usage parameter set .
7028	Return all abstract methods of a class .
7029	Returns all abstract methods from an interface .
7030	Create object pool .
7031	Remove the object pool for the profile table .
7032	Returns true if the given notification source is the owner of the given notification source .
7033	Called when an alarm occurs .
7034	Returns the usage parameter set for the profile object .
7035	Gets the spec type descriptor .
7036	Determine if a DeployableUnit is accepted .
7037	Initialize a DeployableComponent .
7038	Starts the deployment .
7039	Stop a deployment
7040	Show the status of the deployment manager
7041	Executes after commit actions .
7042	Executes after commit priority actions .
7043	Call after rollback actions .
7044	Execute before commit actions
7045	Execute before commit priority
7046	Returns all defined tracer names .
7047	Creates a tracer .
7048	Remove replicated data .
7049	Registers the property editors .
7050	Process the given SleeComponent with usage parameters .
7051	Returns the object pool for the given service ID .
7052	Create the object pool for the given service ID .
7053	Executes the activity .
7054	Starts an activity .
7055	End an activity
7056	Checks the validity of the fire event .
7057	Fire an event .
7058	Create the concrete class for the sbbLocal object .
7059	Make the getter method .
7060	Convert a string value to a field .
7061	Sets the profile ID .
7062	Extracts the message from the result .
7063	Returns true if the specified object contains the specified object .
7064	Checks if this collection contains all elements in the given collection .
7065	Removes all elements from this collection
7066	Returns true if this level is higher than another level .
7067	Resolve the internal state .
7068	Remove all classes from the class pool .
7069	Add a profile call record to the profile .
7070	Returns a profile object from the profile .
7071	Pass the profile object on tx end .
7072	Sets the value of the component ID property .
7073	Generate the concrete class for the activity context .
7074	Generate the concrete methods .
7075	Set cmp attribute .
7076	Adds a name binding .
7077	Removes all naming bindings
7078	Remove the specified aciName from the cache .
7079	Attach a timer to the cache .
7080	Cancels all registered timers .
7081	Attach the given SbbEntity to the activity context .
7082	Detach a sbb entity from the cache .
7083	Gets a sorted set of SbbAttachment IDs .
7084	End the activity context
7085	Adds a component to this deployment .
7086	Get a collection of all external dependencies of this unit .
7087	Check if all the dependencies have been satisfied .
7088	Check if the unit has already been deployed .
7089	Gets the install actions .
7090	Returns the management actions related to this deployment .
7091	Checks to see if there is a referring DU .
7092	Close the specified profile and profile
7093	Get the object name for the profile table
7094	Change write state to read - write mode .
7095	Before setting the profile field in the profile table .
7096	Invoked after a profile field is set .
7097	Invoke before getCmpField is set .
7098	Call after getCmpField has been set .
7099	Binding before the management method is invoked .
7100	Invoked after profile method invocation .
7101	Recursively deletes a directory .
7102	Create the default constructor .
7103	Create the default usage parameter setter .
7104	Create the SbbEntity and setter method .
7105	Create the fire event methods .
7106	Add get method to get the getter method .
7107	Adds an expression to the list of expressions .
7108	Associates the specified target object with the specified key .
7109	Binding the specified object to the specified target object .
7110	Decorate an AbstractSbb .
7111	Invoke a method on the given proxy .
7112	Gets the real field name .
7113	Set the value of the given field .
7114	Returns the value of the specified field .
7115	Sets the profile context .
7116	Initialize the profile object state
7117	Unset the profile context .
7118	Returns the profile local object .
7119	Fires a profile added event if needed .
7120	Returns the profileCmpSleeWrapper .
7121	Creates a new class with the specified name and interfaces .
7122	Create inheritance link .
7123	Adds an annotation .
7124	Adds the member values to an annotation .
7125	Returns the activity context interface for the given activity .
7126	get the class pool
7127	Sets the deployment unit .
7128	Clears the class loader .
7129	Executes the activity .
7130	Checks if a class or interface can be found .
7131	returns all abstract methods of an interface
7132	Resolve entity by resource URL .
7133	check if tracerName is valid
7134	Returns a collection of profiles matching the query name .
7135	Checks the dependencies of a SleeComponent .
7136	Creates the temporary directory for the deployment .
7137	Get the EntityManager
7138	Start the running request .
7139	Switch a ClassLoader to a ClassLoader
7140	Make a proxy call .
7141	Checks that the transaction has the same transaction .
7142	Converts the last access time to a TTL string .
7143	Is the profile class visible?
7144	Get profile object from current transaction context .
7145	Return the list of logger names that match the given regular expression .
7146	Reset the logger level
7147	Clear the loggers for the specified Slee .
7148	Add a logger .
7149	Add socket handler .
7150	Remove a handler .
7151	Convert tracer name to log4j logger name .
7152	Sets the level of the log4j log4j to the log4j log4j level .
7153	Assigns log4j level to trace log4j level .
7154	Reset cache flags .
7155	Send a trace notification
7156	check if tracerName is valid
7157	Writes the given vendor data to the given output stream .
7158	Deserializes an object from the given input stream .
7159	Adds a domain to the list of direct dependencies
7160	Returns all the dependencies of this URLClassLoader .
7161	Find a class by name .
7162	Look for a resource in the classpath .
7163	Look for resources matching the given name .
7164	Create and register the profile mbean for the profile table .
7165	Resume a transaction .
7166	Returns a set of SbbIDs for this component .
7167	Gets all the resource adaptor entity links .
7168	initialize the slee
7169	Shutdown the Slee .
7170	validate a state transition
7171	Generate named usage parameter setter .
7172	Update the field with the given value
7173	Build new PolyJDBC instance
7174	Add value to the insert query .
7175	Executes the given transaction .
7176	Creates a new RegionRequest object from the given string .
7177	Get the region bounding box .
7178	Resolve image dimensions .
7179	Extracts the onType object from the JSON stream .
7180	Sets the viewing hint .
7181	Adds views to the resource .
7182	Sets the renderings for this element .
7183	Adds multiple renderingings to the resource .
7184	Merge an image profile .
7185	Merges the specified image into this one .
7186	Creates a new RotationRequest object from the given string .
7187	Creates a SizeRequest object from a string .
7188	Initializes the AndroidDebugBridge instance .
7189	Get the dump of the dump
7190	Populate the PopBox from a device
7191	Push a handle to a temp folder
7192	Delete temp file .
7193	Pull out the dump file to PC .
7194	Get the crash log .
7195	Remove tabs from text editor .
7196	Prints indentation .
7197	Tokenize the given text .
7198	Converts the given text to Markdown .
7199	Escape special chars inside a tag .
7200	Adds an exception to the stack .
7201	Close all statements .
7202	Find the fully qualified class name of a type .
7203	Write the class .
7204	Write bit vector 1 divider .
7205	Appends a bit strings to a BitVector .
7206	Custom deserialization method .
7207	Gets a json object .
7208	Gets a list of objects based on the provided path and optional parameters .
7209	Attaches the klov reporter object to the device .
7210	Adds a screen capture to the current step .
7211	Set system info .
7212	Selects a property .
7213	Selects a property as selectors .
7214	Extract validation annotation data .
7215	Retrieves an array of AnnotationAnnotations for a given property on the class
7216	Find the annotations on the given property on the given class .
7217	Gets the property descriptor .
7218	Lookup an object expression .
7219	Creates an object from a map .
7220	Creates an object from a map of properties .
7221	Creates an instance from a value map .
7222	Converts an object into a Map
7223	Convert an object to a Map
7224	Determine the values of an annotation .
7225	Creates a new Validator instance .
7226	Lookup the list of validators and initialize them .
7227	Lookup a Validator in the registry .
7228	Apply meta data properties to a validator .
7229	Remove the property from the map
7230	Sets time .
7231	Returns the number of entries in this cache .
7232	Hashes a object .
7233	Create default options .
7234	Opens database .
7235	Writes a map of values to the database .
7236	Removes all keys from the database .
7237	Searches the database starting at the given key .
7238	Load all by keys .
7239	Closes the database .
7240	Performs reduce by object .
7241	Performs reduce by object .
7242	Returns the variance of a double array .
7243	Returns the mean value of the long array .
7244	Invoke a method from an object argument .
7245	Reduces the values of an array .
7246	Gets the internationalized UTC date string .
7247	Check if object matches the criteria
7248	Binary criterion that is not in the given list of values .
7249	Creates a criteria from a list .
7250	Creates a new criteria object from JSON .
7251	Adds an integer array to the end of the list .
7252	Returns the maximum element in an array .
7253	Returns the first of the specified list of elements in the specified list .
7254	Returns the last element of a list
7255	Returns the last of the last element of a list
7256	Returns the least element of the given list
7257	Returns the minimum element in a list
7258	Returns the minimum element of an array .
7259	Processes a collection of maps .
7260	Handles a collection of maps .
7261	Extract an object from a map .
7262	Get the value associated with the given key .
7263	Create toolTip with given field name and fieldName .
7264	Generates the label value .
7265	Appends a hexadecimal value to the char sequence .
7266	Process read operations .
7267	Poll the queue for write operations .
7268	Starts the data store process .
7269	Replies the character at the specified index .
7270	Split a string at the specified index .
7271	Replies if the specified characters are in the specified string .
7272	Add a character to a string
7273	Add objects to string .
7274	Compacts a string .
7275	Splits a string into an array .
7276	Split a string by space .
7277	Split string by pipe .
7278	Convert char array to string array .
7279	Converts a string to upper case .
7280	Checks if a given string is inside the given string
7281	Get the under bar case .
7282	Converts a number into a string representation .
7283	Creates a sort for the given sorts
7284	Sort the list according to the specified fields .
7285	Gets the comparator for this field .
7286	Creates a list of comparators for the given fields .
7287	Determines whether the specified value is in the given map .
7288	Checks if two int values are equal .
7289	Checks if two arrays are equal
7290	Sums the values in an array .
7291	Round up to the nearest power of 2 .
7292	Sort a list using the sort algorithm .
7293	Sorts the specified list using the specified sort string .
7294	Set field value from map .
7295	To list .
7296	SQL for loading all versions of a table .
7297	Returns a deep copy of the given list .
7298	Checks if object has a field with given name .
7299	Checks if class has a string field .
7300	Checks if class has field with given name .
7301	Gets the first primitive or primitive .
7302	Determine the sortable field name based on value1 or class
7303	Compares the specified CacheEntry with this CacheEntry .
7304	Compares this cache entry to another .
7305	Sort the list according to the specified sorts .
7306	Sorts the given list according to the specified sortBy .
7307	Sorts the specified map .
7308	Sort the values of a map .
7309	Sort the keys of a map .
7310	Sorts the given array .
7311	Returns a comparator for sorting fields .
7312	Returns a comparator for sorting values .
7313	Get the value for the given key
7314	Returns the value for the given key in the cache .
7315	Returns the order increment .
7316	Evict the list if needed .
7317	Initialize this class if needed .
7318	Allocates a new buffer with the specified size .
7319	Determines if the processing loop should exit .
7320	Tries to consume the input writer from the input channel .
7321	Check if the writer has no flushes to disk
7322	Start the monitor .
7323	Start the monitor .
7324	Retrieves an object from the map .
7325	Create a query plan .
7326	Filter a group .
7327	Update file timer .
7328	Flushes the output stream to disk .
7329	Closes the output stream .
7330	Write to the output stream .
7331	Writes the given buffer to disk .
7332	Initialize the output stream .
7333	Puts all the given values into the cache .
7334	Convert key to byte array .
7335	Reads the validation meta data for a given property .
7336	Extract validator meta data from a string .
7337	Reads the validator meta data .
7338	Extracts the validatorMetaData .
7339	Extract validator meta data from annotations
7340	Convert AnnotationData to ValidatorMetaData .
7341	Split a string into an array of strings .
7342	Split a string by white space .
7343	Split string by delimiter .
7344	Remove characters from a string .
7345	Split a string into an array of strings ignoring the delimiters .
7346	Parse a double from the buffer .
7347	Parse an int from the buffer .
7348	Parse a long from the buffer .
7349	Get a property from an object .
7350	Gets all fields from an object .
7351	Gets the type of the property .
7352	Injects an object into a property value .
7353	Set an idx value on a property .
7354	Gets the value of a collection property .
7355	Gets the value of a property .
7356	Gets int .
7357	Initialize this message .
7358	Create a new message for the given key .
7359	Create a message .
7360	Converts a list of keys to an array of values .
7361	Gets the subject .
7362	Parses the given text .
7363	Send http request .
7364	Deletes a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	List resources .
7368	Triggers a replication .
7369	Queries a single value .
7370	Updates the view .
7371	Synchronize all design documents in the database .
7372	Gets a design document from the database .
7373	Retrieves all design documents .
7374	Gets a design document by id .
7375	Save replicator .
7376	Find replicator document .
7377	Find all the replicator documents .
7378	Remove replicator .
7379	Find an object based on its id .
7380	Finds documents that match a JSON query .
7381	Checks if a document exists in the database .
7382	Bulk insert .
7383	Performs an HTTP PUT request .
7384	Performs a PUT request .
7385	Perform a POST request .
7386	Execute a DELETE request .
7387	Validates the given HTTP response .
7388	Sets the entity into the HttpRequest
7389	Adds an attachment .
7390	Returns all changes in the feed .
7391	Reads the next row .
7392	Convert a double to the format
7393	Shuts down the lock .
7394	Writes the given byte array to the given output stream .
7395	Add tags to a metric .
7396	Verify that all known tables exist and create temporary tables .
7397	Get the namespace ID for a given namespace .
7398	Check if the request is a query
7399	Sends an authentication request .
7400	Returns the verb for the given request .
7401	Generates an object access review .
7402	Called when the exchange is allowed .
7403	Handles a request failure .
7404	Initializes the configuration .
7405	Find all scheduled jobs .
7406	Creates a list of bucket points .
7407	Ends the exchange .
7408	Find all data from the bucket .
7409	Create a new buckets from the given start and end time .
7410	send message to producer
7411	send one - way message
7412	send a message to the producer
7413	Perform a scan on the cursor .
7414	Set a value for a given property
7415	Adds a zip file to the zip archive .
7416	Replaces the text for the given file .
7417	Build the zip file .
7418	Generate metrics for a given component and product .
7419	Fetch content .
7420	Get content of order item
7421	Uploads the export transformation
7422	Generates the metrics for the given iterator .
7423	Creates a new directory .
7424	Ends the object .
7425	Register a adaptor for the given type in the given group .
7426	Register a renderer for the given type .
7427	Prepares the template .
7428	Add a new domain object to the sip .
7429	Sets a custom property .
7430	Adds a child object to the collection .
7431	Creates a file from a directory .
7432	Copies the input stream to the output stream using the given hashAssembler .
7433	Parse the given file .
7434	Parse an XML document from a Reader .
7435	Returns all the elements of the given parent element .
7436	Returns the child nodes of the given parent element .
7437	Returns the first child element in the given parent element .
7438	Finds all named elements in the given parent element .
7439	Validate XML .
7440	Main entry point .
7441	Builds builder from input stream .
7442	Loads builder from resource .
7443	Process the contents of a ZIP file .
7444	Encodes characters in the given string .
7445	Set the signature .
7446	Removes all whitespace from the input string .
7447	Sign request .
7448	Sets the data for the object key .
7449	Completes multipart upload .
7450	Update the target notification .
7451	Adds the given entry to the notification state .
7452	Returns true if the buffer has expired .
7453	Get notification by id .
7454	Returns all addressees for a notification
7455	Get addressee DTO .
7456	Gets events by notification id
7457	Gets the event .
7458	Returns the URL for a single notification endpoint .
7459	Returns the JPAEntry with the given entryId .
7460	Gets an SSP token .
7461	Size of all notifications .
7462	Adds new categories to the list .
7463	Fetches the notifications for an SSP .
7464	create a notification response
7465	Map the response to a NotificationResponse object .
7466	Maps a NotificationEntry to a NotificationEntry .
7467	Attaches the list of actions to the notification .
7468	Normalizes an SSP link .
7469	Gets the notification category .
7470	Returns the notification source .
7471	Called when the target notification is read .
7472	Read notification response .
7473	Returns the year of the task .
7474	Extract the user ID from the response .
7475	Hide this notification .
7476	Get attributes map .
7477	Normalizes the coordinates of the point .
7478	Returns true if box A is contained inside boxB
7479	Finds the closest point in the P and P .
7480	Calculates the sign of a point .
7481	Set the values from a Se3 .
7482	Sets the component of a rotation matrix .
7483	Converts a polygon in order to its coordinates .
7484	Converts a Polyrilateral polygon into a 4 - bit quadrilateral .
7485	Bound the rectangle to be bounding box .
7486	Calculate the bounds of the polygon .
7487	Computes the center of a quadrilateral .
7488	Computes the average vertexes of a polygon
7489	Computes the convex hull for a list of points
7490	Remove almost parallel polygons from the polygon
7491	Returns the average of the closest point on the target polygon
7492	Computes the area of two polygons
7493	Returns true if the quadrilateral contains a point .
7494	Returns true if the triangle contains a triangle .
7495	Calculate the intersection of two lines .
7496	Calculate the intersection of two lines .
7497	Computes the intersection of two lines
7498	Calculate the intersection of two line segments .
7499	Calculates the intersection of two polygons .
7500	Returns true if the ellipse contains an ellipse .
7501	Calculates the intersection area of two rectangles .
7502	Returns the value of the matrix at the given index .
7503	Convert a matrix to a quaternion .
7504	Calculates and rotates a rotation matrix .
7505	Sets the rotation matrix for an axis .
7506	Computes and rotates the rotation matrix .
7507	Computes and rotates a rotation matrix .
7508	Sets the rotation matrix to rotates .
7509	Convert an Euler to a matrix .
7510	Calculate the rotation for an axis .
7511	Sets the angle of the slope
7512	Helper method to compute a twist coordinate
7513	Sets the transform s transform .
7514	Performs a 3D rotation
7515	Solve a point .
7516	Solve a point on the plane .
7517	Returns the length of the side of a side .
7518	Returns true if the point is inside the intersection .
7519	Converts a ConicGeneral image into a ConicGeneral image .
7520	Convert a ConicGeneral to a ConicGeneral .
7521	Converts a ConcolaGeneralGeneralGeneralFeature into a ConbreGeneral image .
7522	Converts a ConicGeneralGeneralFeature into a ConicGeneral image .
7523	Divide a point by v
7524	Convert a GeoTuple into a matrix .
7525	Converts a matrix to a GeoTuple3D
7526	Set the vector rotation .
7527	Distance between two angles
7528	Returns true if the line intersects the line .
7529	Returns true if the plane contains a plane
7530	Returns true if the line intersects the line .
7531	Performs interpolation between two vectors .
7532	Extract quaternion from Q
7533	Processes the input array and computes the hull
7534	Sets the motion to no motion
7535	Converts a Segment into a homography matrix .
7536	Converts a Segment into a homogeneous matrix .
7537	Calculates and rotates an axis .
7538	Checks to see if two Se3s are identical .
7539	Convert a GeoTuple to a unit vector .
7540	Returns true if circle touches a line .
7541	Returns the squared radius of a line
7542	Returns the closest point on the line .
7543	Returns the closest point to the specified line .
7544	Returns the closest point on a plane .
7545	Returns the closest point on the line .
7546	Returns the closest point to the given pointB .
7547	Transform a point in plane .
7548	Transforms an array of points .
7549	Returns true if this Quadrilateral is equal to the given tolerance .
7550	Computes the acute angle between two lines .
7551	Convert a line parameter from src to another .
7552	Convert a line in a polar form .
7553	Convert a line segment to a image .
7554	Convert a line general .
7555	Convert a line and b .
7556	Convert a point from two points .
7557	Convert a line in polar form .
7558	Convert a line general .
7559	Compute the line parametric .
7560	Converts a PlaneNormalOperation into a PlaneOperation .
7561	Converts a plane normal to a plane normal .
7562	Converts a plane normal to a plane normal .
7563	Converts a point in a 2D coordinate into a 3D coordinate .
7564	Converts a plane into a 2D plane .
7565	Check if T is identical to tolerance
7566	Creates a copy of this matrix .
7567	Returns the square of the vector .
7568	Computes the t - value of t .
7569	Returns true if there are any number of elements .
7570	Returns true if the parabola is equivalent to the given parabola .
7571	Calculate the center of a point
7572	Computes the acute angle between two lines .
7573	Returns true if p is infinity .
7574	Generate random point coordinates with respect to the specified center .
7575	Converts a H_H coordinate to a point e .
7576	Subtracts a point from two points
7577	Checks to see if two signs are identical .
7578	Copies the coordinates from the specified rectangle .
7579	Converts an ellipse into an angle .
7580	Computes the point in the ellipse
7581	Computes the angle of a point in an ellipse
7582	Computes the tangent of a point in the ellipse
7583	Selects the tangent of the ellipse .
7584	Gets the corner at the specified index .
7585	Computes the distance between two lines .
7586	Calculates the Euclidean distance between two points .
7587	Calculates the distance between two line segments .
7588	Computes the distance between a point and a plane .
7589	Calculates the distance between the line and point .
7590	Returns the Euclidean distance between two lines .
7591	Computes the squared Euclidean distance between two lines .
7592	Calculates the Euclidean distance between a point and a point p .
7593	Returns the squared Euclidean distance between a quadrilateral and a quad segment .
7594	Returns the Euclidean distance between the polygon and p .
7595	Computes the squared distance between a polygon and a point .
7596	Calculates the distance from the line .
7597	Calculates the Euclidean distance between an ellipse and p .
7598	Calculates the 2 - dimensional Euclidean distance of a point .
7599	Adds a new path to the path .
7600	Returns the closest point on the line .
7601	Returns the closest point in the ellipse
7602	Computes polynomial coefficients .
7603	Creates a random vector in the specified range .
7604	Convert a vector to a perpendicular vector .
7605	Checks to see if the two vectors are identical .
7606	Normalizes the vector .
7607	Creates a matrix from a vector .
7608	Converts a matrix into a 3D coordinate matrix .
7609	Calculates the Euclidean distance between the specified point and y coordinates .
7610	Sets the ellipse .
7611	Normalizes the rotation .
7612	Calculates the triangle s triangle .
7613	Returns the quadrilateral of the quadrilateral
7614	Calculates the simple polygon
7615	Computes the point from a list of points .
7616	Returns a list of points in linear clockwise order .
7617	Computes the normal for a set of points .
7618	Check if polygon is convex .
7619	Multiply this matrix by a scalar .
7620	Returns the maximum value of this vector .
7621	Calculates the distance between two points .
7622	Returns the squared Euclidean distance between the specified two points .
7623	Generate random point points from a plane .
7624	Generates a point from the mean and z values .
7625	Generate random n points from the mean and standard deviation
7626	Computes the mean of the points in a list of points .
7627	Computes the mean of points in a list of points .
7628	Discards any cached credentials .
7629	Discards any cached cache entries .
7630	Combine multiple collections into a set .
7631	Retrieves the feature names from the server . xml file .
7632	Retrieves the server - side configins feature files .
7633	Gets the server . xml file .
7634	Parses the include node from the server file .
7635	Parse a feature manager node .
7636	Downloads the Json artifact
7637	Gets the Liberty feature names from a set of files .
7638	Utility method to check if the list of Open Liberty features is currently open .
7639	Determines whether the specified collection contains the target collection .
7640	Returns the next product version .
7641	Extracts the symbolic name from the jar file .
7642	Find a jar based on the installation map .
7643	Returns true if one of the files is a replacement jar
7644	Extracts the version map from the file name .
7645	Compare two version numbers
7646	Returns the product info .
7647	Determine whether the given artifact is a spring boot - boot - boot - jar file .
7648	Gets the property for the given key .
7649	Check if the file is a working directory .
7650	Move the back to the center .
7651	Check if two objects are equal .
7652	Load an integer from a string .
7653	Throw a poison party exception .
7654	Verify the approvals .
7655	Swaps another puzzle with the specified target index .
7656	Calculates the distance between all cells in the current goal
7657	Print a formatted message .
7658	Prints a formatted message .
7659	Shows a fancy decision for a given number of fishics
7660	Prints a variable .
7661	Returns a random integer
7662	Returns a uniform value
7663	Calculate the poisson distribution
7664	Computes the number of discrete values in the given array .
7665	Main method for testing .
7666	Capitalizes the first character of a word .
7667	UnCapitalize the first character of a word .
7668	Add a slash if it doesn t already exist .
7669	Join to string .
7670	Gets the token sentence .
7671	Handle authentication token .
7672	Extracts the auth token from cookieList
7673	Registers the Guice bounding box as a Guice binding .
7674	Gets all role permissions .
7675	Adds an alias to the projection list
7676	Convert JobInfo to JobDetail
7677	Convert a trigger to a Trigger
7678	Sets the repeat interval values .
7679	Sets start time .
7680	Send an item to the queue .
7681	Writes the buffered data to the output stream .
7682	Initialize Stduler
7683	Gets all the fields of a class .
7684	Returns a map of field names to field names .
7685	Create a response object for the given exception .
7686	Configures the encryptor with the given configuration .
7687	Generate attributes hash from the request .
7688	Generate a new token string
7689	Sends a message .
7690	Generate strong password .
7691	Changes the password of a user .
7692	Get user by account name .
7693	Hashes a password .
7694	Verifies that the given string is a valid account name .
7695	Validates the password against the specified new password .
7696	Provides a search model .
7697	Handles a successful response .
7698	Handles an error .
7699	Starts the transaction .
7700	Configure field by name .
7701	Determines if the resource is authorized to the given method .
7702	Tries to parse a date .
7703	Gets the response .
7704	Creates a equals expression
7705	Creates a NOT - equals expression
7706	Creates a less than than expression
7707	Creates a less than or equals expression
7708	Submits a greater than or equal to the given value
7709	Binary accessor
7710	Creates an ilike expression
7711	The IN operator
7712	Define a namespace .
7713	Creates a new resource representation with the given content .
7714	Creates a new resource representation with the given rel .
7715	Returns a new resource representation with a new value .
7716	Returns a new resource representation with the given namespace and href .
7717	Determines whether a byte array can be decoded .
7718	Encodes a string into a byte array .
7719	Compares two Reader objects for equality .
7720	Move a file or directory .
7721	Takes a list of files and creates a new one .
7722	Gets the base name of a file .
7723	Adds the padding .
7724	Gets the short name of a class .
7725	Gets all super types of a class .
7726	Verifies a given password .
7727	Reads a string from System in System . in .
7728	Appends a single byte to the buffer .
7729	Appends a range of bytes to the end of the buffer .
7730	Creates a copy of the given array .
7731	Returns a new fraction of this fraction .
7732	Returns the subtraction of this fraction .
7733	Returns a new fraction multiplied by this fraction .
7734	Divides this fraction by another fraction .
7735	Find the maximum value in the array .
7736	Find the minimum value in a long array .
7737	Throws IllegalArgumentException if the condition is true .
7738	Fetches metadata information from the specified location and altitude .
7739	Fetches metadata information from a given location and returns it .
7740	Fetches metadata information from a given latitude and longitude values .
7741	Find hourly data forecast for the current hours .
7742	Finds the nearest forecast for the given date .
7743	Fetches the content of a forecast query .
7744	Creates a simple long term forecast for the current day .
7745	Create a metric forecast forecast for the series of features that have been created .
7746	Parses a string into a Location object .
7747	Fetches metadata .
7748	Create the weather symbol name for the given point .
7749	Find the Beaufort level for a given point .
7750	Creates a URI from a string .
7751	is the current date
7752	Returns the point forecast for the given dateTime .
7753	Returns the best fit forecast for the specified date range .
7754	Fetches the content of a geo location and returns it .
7755	Fetches information about a content location .
7756	Updates the database .
7757	Invoke a string method .
7758	Acquires an object from the data source .
7759	Gets the referenced object .
7760	Gets wrapped object .
7761	Get a configuration object from the service path .
7762	Returns whether Substitutor is enabled or not .
7763	Creates an iterator that iterates over all instances of the given service .
7764	Returns the decoder to use .
7765	Get the services for the given interface .
7766	Get the module implementation for the given interface type .
7767	Acquires an input stream .
7768	Size of the data source .
7769	Gets wrapped data .
7770	Returns the component at the specified index .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute a hsre regex pattern .
7774	Calls find loop find loop .
7775	Sets the subset of the matched subexpression .
7776	intersect a subexpression t
7777	Dissect a compound expression .
7778	Clones all the outs in the given state .
7779	Recursively traverse a subre .
7780	Marks the recre of a subre .
7781	duplicate a subtree
7782	Parse a subre expression .
7783	Delivers an arc traversal .
7784	Generates a new color .
7785	Clone out the output .
7786	Read scannum .
7787	Parses a bracket .
7788	Read plain text .
7789	Add a new lacon into the array .
7790	Process one character .
7791	Handles a single color set .
7792	Gets the color for a codepoint .
7793	Returns a pseudo color .
7794	Process a range of colors .
7795	Updates the color chain with the parent color chain .
7796	Set a color chain for an arc
7797	Un - colorchain of an arc .
7798	Dump color information .
7799	Marks the start of the lexer .
7800	Parses the prefixes
7801	Iterate over the nested patterns .
7802	Returns the color for the given codepoint .
7803	Initialize stateSet .
7804	Gets the last selected state set .
7805	Returns the Unicode set for the given character .
7806	Returns the Unicode set for the given character name .
7807	Sorts the arcs according to the first position .
7808	Debug method for debugging .
7809	Create a new state with the given flag set .
7810	Move the outs from old to new state
7811	Moves all ins from old to new .
7812	Copies all ins from old to new state
7813	Copies all the outs from old to new state
7814	drop a state
7815	Releases a state .
7816	Adds a new arc to this arc .
7817	Duplicate a state .
7818	Sets the special colors for the BOS component .
7819	Debug dump .
7820	Debug function for debugging .
7821	Dumps the arcs of a state .
7822	Dumps an arcs for a given state .
7823	Debugging method for debugging .
7824	Execute the optimizer .
7825	Returns the flags for all the arcs in the chain .
7826	Compute the intersection of two arcs .
7827	Removes all unreachable states .
7828	Mark the arcs reachable as reachable .
7829	Verifies that all of the arcs reachable can reach the given state .
7830	Iterate through the states and eliminate empty arcs until there are no empty arcs .
7831	Removes an arcs from an arc .
7832	Get rule parameters .
7833	Gets the rule interpreter plugins .
7834	Returns a map of report plugins .
7835	Get the rule selection .
7836	Main entry point .
7837	Gets the error message .
7838	Generate standard options .
7839	Gathers all tasks from a task factory .
7840	Gather task names from the given factory .
7841	Interprets a command line .
7842	Get the command line .
7843	Executes a task .
7844	Read properties .
7845	Prints usage .
7846	Gets the home directory .
7847	Creates the class loader .
7848	Get set of ids that contain the ids of each cell .
7849	Get all ids of all cells intersect .
7850	Get the uri for the given target method and parameters .
7851	Add a path pattern to the routing table
7852	Returns the number of routes .
7853	Add route to route .
7854	Add route .
7855	Add route .
7856	Returns true if any of the first match of the request path .
7857	returns a Criterion that is equal to the given value
7858	Returns the file name for the BMS file .
7859	Compare two folders .
7860	Compares two entries .
7861	Compares two Bookmarks .
7862	Set the servlet class last modified time .
7863	Returns the names of the dependencies .
7864	Finds a class by name .
7865	Parse the Authorization header .
7866	Get instance of ProtectedFunctionMapper .
7867	Map a function mapping to a function name .
7868	Get a ProtectedFunctionMapper for a given function and method name .
7869	Resolve a method .
7870	Set the values .
7871	Resolve a variable .
7872	Parses the given XML file .
7873	Parses the given JAR file into nodes .
7874	Parse the jar file contents .
7875	Do the actual parsing .
7876	Create a Compiler instance .
7877	Get resource as stream .
7878	Calculates the last modification time of all channels .
7879	Find class loaders .
7880	Returns true if the specified classloader is a parent of this classloader
7881	Start loading .
7882	Read stream header .
7883	Paginates with a specific page size and page size .
7884	Creates a MetaKey object from a string .
7885	Fills the requirements .
7886	Returns the TagFileInfo for a given tag name .
7887	Parse the implicit TLD .
7888	Return the checksum of a file .
7889	Gets the size of a file .
7890	Validates the channel name .
7891	Seek to the specified position .
7892	Locate a block by its position in the stream .
7893	Extracts the artifacts from the given channel .
7894	Updates the state of the opts .
7895	Calculate 1 for 1 byte .
7896	Calculates the available long representations .
7897	Calculates the optimal match price for a match .
7898	Throws an expected byte .
7899	Throws an invalid byte .
7900	Scan all the tLDs in the system .
7901	Scans the tag library descriptor .
7902	Add a jsp servlet wrapper .
7903	Returns the parent class loader .
7904	Put a bytecode .
7905	Get bytecode birth time of bytecode .
7906	Save the bytecode to a file .
7907	Check the compile .
7908	Initializes the classpath .
7909	Starts the background thread .
7910	Stops the background thread .
7911	Runs the compilation .
7912	Finds channel instance by name .
7913	Finds a channel instance .
7914	Update the cache for the deploy keys .
7915	List Deploy groups .
7916	Copy data from the input stream to the output stream .
7917	Parse the content of the jsp reader into nodes .
7918	Parses attributes from the reader .
7919	Parse a quoted value
7920	Add an include directive .
7921	Parse an attribute and its body .
7922	Add an attribute .
7923	Add a child node .
7924	Find attributes .
7925	Returns the children of this node .
7926	Returns all children with the given name .
7927	Converts this object to base coordinates .
7928	Find the alias for a given variable name
7929	Set the thread to use .
7930	Unset the thread s data .
7931	Find the wrapped stream .
7932	Write an optional field .
7933	Writes a field to a StringWriter .
7934	Adds an element to the parent element .
7935	Add the first child element with the specified name .
7936	Write out this BodyContent to a Writer .
7937	Set the writer .
7938	Allocates the internal buffer .
7939	Map the expressions in the page .
7940	Gets the current state for the given key .
7941	Register a model provider .
7942	Stream data asynchronously .
7943	Monitor the status of a job .
7944	Checks if the channel is authenticated .
7945	Finishes writing the output stream .
7946	Creates a new Gson instance .
7947	Encodes the uncompressed symbol .
7948	Calculate the union of the provided metadata .
7949	Get the throwable attribute .
7950	Checks if a given coordinate is a checkum extension .
7951	Finishes writing to the stream .
7952	Returns the exception .
7953	Evaluates an EL expression .
7954	Creates a prefix from OSGI properties .
7955	Check if the path is XML .
7956	Parses a tag file directive .
7957	Load a class file .
7958	Remove proto type files .
7959	Main method .
7960	Set the uri root .
7961	Scans all files in the given directory .
7962	Locates and locates the URI root .
7963	Initializes the system class loader .
7964	Moves the position to the next position in the chain .
7965	Checks if matches the given string .
7966	Tests if the specified string matches the specified string .
7967	Skips until the next character is found .
7968	Skips until the next escape character is found .
7969	Skip until the end of a tag is found .
7970	Parse a quoted value .
7971	Pop the current file at the current position .
7972	Returns an unclassified coordinates .
7973	Filters the list of aspectInformation from the supplied List .
7974	Gets the missing identifiers for all the required aspect information .
7975	Sets the schema resource prefix .
7976	Sets the resource prefix .
7977	Encode a prefix .
7978	Converts this node to a tree node .
7979	Merge errors from binding result .
7980	Initializes the binder .
7981	Scans the aspect information attached to the ChannelFactory .
7982	Unqualify the path .
7983	Invokes a tag plugin .
7984	Gets a byte array from the given size . If the size is zero then the byte array is filled with zero .
7985	Returns an array of ints that are initialized with the given size .
7986	Create an AetherResult from the given configuration .
7987	Get the resource as stream .
7988	Validates the given page using the TagLibraryValidator .
7989	Push input stream .
7990	Get the encoding of the XML file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Return the real path of a file .
7994	Gets the URL for a resource .
7995	Opens a resource as a stream .
7996	Returns all the paths of the given path
7997	Log a message and exception .
7998	Add a filter
7999	calculate buffer size
8000	Get the memory usage .
8001	Sets the preset dictionary .
8002	Moves the window to the next position .
8003	Fills the underlying sliding window .
8004	Process pending bytes .
8005	Returns the number of matches in the buffer .
8006	Return the number of matches in the buffer .
8007	Verify that the length of matches match .
8008	Moves the read position .
8009	Recycle the stream .
8010	Flush the buffer .
8011	Clear the output buffer .
8012	Flush the output stream .
8013	Closes the output stream .
8014	Writes a string to the output stream .
8015	Allocate char buffer .
8016	Throws a JavacErrorException .
8017	Returns a list of unique key from the specified meta data .
8018	Generate the java class .
8019	Compile the java file .
8020	Removes generated files .
8021	Initialize the JavaCompiler
8022	Determine if the system jar contains a system jar .
8023	Quote a character .
8024	Processes a CSS declaration .
8025	Compile a tag handler pool .
8026	Generates an XML log file .
8027	Generate the common postamble .
8028	Generate the postamble for the error .
8029	Generate the HTML page .
8030	Generate the attribute handler attributes .
8031	Reads properties from an input stream .
8032	Export a channel .
8033	Validate an xml view .
8034	Returns a tag handler for the current thread .
8035	Parse an EL expression into a Nodes Node .
8036	Given two property groups return the first one that has the same extension .
8037	Checks if the given URI is a JSP page .
8038	Print a comment .
8039	Prints a string .
8040	Prints a string .
8041	Print a single string .
8042	Gets the expression in XML .
8043	Checks a scope .
8044	Escapes a string so that it is valid XML .
8045	Validate an expression
8046	Returns the class name of the tag handler .
8047	Generates a Java package name from the given path .
8048	Splits a path using the given path .
8049	Makes a valid Java identifier .
8050	Mangles a Unicode character to a 4 - byte string .
8051	Test whether the specified key is a Java keyword .
8052	Adds the given property to the given map .
8053	Convert a modifier to a string .
8054	Returns a sorted set of metadata keys .
8055	Runs the users .
8056	Extract basename from given path .
8057	Put value in cache .
8058	Loads a value from the database .
8059	Build metrics collection .
8060	Resolve a number .
8061	Write object to output stream .
8062	Retrieves the TTL for the given tenant .
8063	Creates the prepare statements for the metrics_locator .
8064	Track delayed metrics .
8065	Track delayed aggregated metrics .
8066	Reads an unversioned double or varint .
8067	Put an unversioned double or long .
8068	Returns an unmodifiable map of properties
8069	Create the container
8070	Schedules slots eligible for rollup .
8071	Removes the state from the running slot .
8072	Registers a listener for the specified event .
8073	Register a listener to emit events .
8074	Remove the given event .
8075	Emit a string event with parameters .
8076	Returns all listeners for the given event .
8077	Get remote name .
8078	Append a rollup event .
8079	Extract timestamp from file name .
8080	Starts the server .
8081	Computes the appropriate type for a given granularity type and granularity .
8082	Creates IOContainer from configuration .
8083	Puts the TTL config into the given granularity map .
8084	Computes the maximum of the results of a header .
8085	Formats the headers into a string .
8086	Formats output based on the specified maximum number of outputs .
8087	Register metrics .
8088	Set the thread pool name .
8089	Add a metric to the index .
8090	Get the complete metric names from metric index map
8091	Get token list .
8092	Asynchronously execute the result set asynchronously
8093	Calculates a granularity from a list of points .
8094	Returns a granularity that is less than or equal to the requested duration .
8095	Set the current server time .
8096	Returns a set of unique host names .
8097	Get max connection per host .
8098	Get an iterable of the metric column families .
8099	add a collection of metrics to the database
8100	insert metrics into Cassandra
8101	Returns a set of locators to be used for the Rollup execution .
8102	Fetch metric names from ES search .
8103	Get the regular expression to capture the current level and next level .
8104	Start the StorageManager
8105	Stops the stream .
8106	Check if locator is currently in batch layer .
8107	Check if a locator is currently in the discovery layer .
8108	Check if locator is currently in token discovery layer .
8109	Check to see if a delayed locator for a particular slot exists for a given slot .
8110	Set the locator for a particular slot
8111	Map a granularity range to a map of granularity ranges .
8112	Returns an iterator that iterates over the specified granularity .
8113	Inserts a collection of metrics into the cluster .
8114	Insert metrics .
8115	Check if metric is delayed .
8116	Get the bound statement for a given metric if it is delayed .
8117	Returns the metadata value for the given locator .
8118	Get a serializer for the given type .
8119	Check if the content - type is valid .
8120	Check if the Accept header is valid
8121	Indexes the given list of objects .
8122	Checks if the aggregated metrics are present .
8123	Checks if the downloadDir has been downloaded and updates the downloadDir .
8124	Returns a new instance of Extractor
8125	Helper function to determine if the operating system name matches the operating system .
8126	Starts the download process .
8127	Stops the RabbitMQ process .
8128	Returns a new instance of PNSignalingParameters .
8129	Add a list of ice servers .
8130	Add ICE servers .
8131	Transmits a message to a user
8132	Transmits a message to all peers .
8133	Gets the value of theweeAddress property .
8134	Gets the value of the userDefine property .
8135	Gets the value of the userDefine property .
8136	Sets the value of the ApiProlder property .
8137	Gets the value of the multimediaAnach property .
8138	Gets the value of the status property .
8139	Gets the status of the status code .
8140	Gets the value of the status property .
8141	Gets the value of the importmodus property .
8142	Gets the value of the adressditch property .
8143	Gets the value of the waehrung .
8144	Gets the value of the bodenabag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollection period property .
8150	Sets the value of the FurnishedAd .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the einerEpart property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the GebaeudeRestart attribute .
8162	Sets the value of the bueroTyp property .
8163	Check if a string is numeric .
8164	Sets the value of the Gebiete property .
8165	Sets the Gruppe property .
8166	Sets the value of the JAXB property .
8167	Gets the value of the property property .
8168	Sets the value of the stand property .
8169	Gets the value of the userDefine property .
8170	Sets the value of the zeiteininheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haaus property .
8173	Gets the value of the bueroParcen property .
8174	Gets the value of the gastgewerBE property .
8175	Gets the value of the landUndefires property .
8176	Gets the value of the sonstige property .
8177	Gets the value of the zinshaus property .
8178	Gets the value of the terrainType property .
8179	Sets the value of the ueangage property .
8180	Sets the value of the wohnSetting property .
8181	Returns the country name of a country
8182	Returns the Country 2 - 3 country code for the given iso3 code .
8183	Returns the country code of a country .
8184	Extracts the country code from a ISO 22 string .
8185	Gets the country name .
8186	Translates country name into country name
8187	Gets the value of the annotation property .
8188	Sets the value of the businessElement property .
8189	Gets the value of the pdf property .
8190	Sets the value of the AktionArtifact property .
8191	Sets the value of the realestateitems property .
8192	Sets the pewt value .
8193	Downgrades the document to the previous version .
8194	Upgrade the document .
8195	Gets the value of the content property .
8196	Get the field names .
8197	Sets the value of the blick property .
8198	Sets the pausmiete value .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplan property .
8201	Sets the value of the lastenaufzagf property .
8202	Sets the value of the zustandArt property .
8203	Gets the value of the feldung .
8204	Handle validation event .
8205	Dumps the contents of this table to a writer .
8206	Returns the value at the given position .
8207	Prints the contents of the table .
8208	Set the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the haustyp value .
8211	Gets the value of the einergiepass property .
8212	Sets the value of the keeller property .
8213	Sets the value of the GrundType property .
8214	Sets the value of the GeschlAttribute property .
8215	Sets the value of the HallenTyp property .
8216	Gets the value of the wiedholerSchedule property .
8217	Gets the value of the teilungsVerstraint property .
8218	Downgrade XML documents from previous version .
8219	Gets the value of the forevorztugt .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the modus value .
8223	Gets the value of the emailSonst property .
8224	Gets the value of the telstige property .
8225	Sets the value of the handel typed property .
8226	Downgrades XML document version to previous version .
8227	Sets the value of thepi1 property .
8228	Sets the value of the api property .
8229	Sets the value of thepi3 property .
8230	Gets the value of the row property .
8231	Sets the value of the DnamZuPoint property .
8232	Gets the value of theAN property .
8233	Gets the value of the object property .
8234	Gets the value of the objekt .
8235	Gets the value of the haaus category property .
8236	Gets the Ausstattings property .
8237	Gets the value of the vermarktarts property .
8238	Gets the value of the interess property .
8239	Sets the wert .
8240	Sets the value of theckerland property .
8241	Sets the value of the bauer station .
8242	Sets the value of the bootstaende property .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the value of the delegating property .
8246	Sets the value of the einfamilias property .
8247	Sets the value of the EinzelHandle property .
8248	Sets the einzelhandel property .
8249	Sets the value of the caragen property .
8250	Sets the value of the gewart property .
8251	Sets the value of the expression property .
8252	Sets the value of the GewerBean property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of the keineBau .
8256	Sets the value of the KleingewerE .
8257	Sets the value of the lager property .
8258	Sets the value of the MehrFamily property .
8259	Sets the value of the Obstflflflation property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the producible property .
8262	Sets the value of the Reihenhaus property .
8263	Sets the value of the stllplaet property .
8264	Sets the value of the vote property .
8265	Sets the value of the wald property .
8266	Sets the value of the Anbieter .
8267	Gets the value of the wohnung property .
8268	Gets the value of the Grundstueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the HallLager property .
8271	Gets the value of the parkenen property .
8272	Gets the value of the freizeimmnam property .
8273	Gets the value of the objIdentifier property .
8274	Gets the value of the stellatzartart property .
8275	Sets the maximumDauer value .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmer type .
8278	Upgrade the document version .
8279	Sets the value of the keineAngabe attribute .
8280	Sets the value of the erwaer property .
8281	Sets the value of the solarheizung property .
8282	Sets the value of the pellestab property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernaryme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Returns a random string of the given length .
8289	Returns a random string of letters .
8290	Returns a random string of the given length .
8291	Gets the value of the wPickahead property .
8292	Sets the value of the benutzer property .
8293	Sets the value of the object property .
8294	Gets the value of the feed property .
8295	Sets the moeb value .
8296	Gets the value of the serviceleist list property .
8297	Sets the value of the sub - administrative area .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrades document version to previous version .
8301	Upgrade XML document version .
8302	Sets the value of the LandTyp property .
8303	Gets the value of the field property .
8304	Upgrade the document version .
8305	Gets the value of the adType property .
8306	Sets the value of the gastgew typed property .
8307	Sets the Platzart attribute .
8308	Gets the value of the datenabeling property .
8309	Gets the value of the klimbage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopment availability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energyRating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the Beaubar attribute .
8320	Upgrade XML document version .
8321	Sets the parken typed property .
8322	Sets the value of the alter attribute .
8323	Sets the value of the FreizeitType property .
8324	Sets the value of the telefonartart attribute .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSalesSales property .
8327	Sets the value of the overseasRental property .
8328	Create a user defined simple field .
8329	Gets the value of the fehler property .
8330	Sets the ErbpPrivacy value .
8331	Gets the value of the stpiler property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the zinsType value .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the feed properties .
8339	Downgrades the document to the previous version .
8340	Upgrade from previous version .
8341	Gets the value of theimmel property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerListe .
8344	Gets the value of the status property .
8345	Sets the value of the Sonstige property .
8346	Sets the value of the DistanzZu property .
8347	Gets the value of the danzen property .
8348	Gets the value of the distance equipment property .
8349	Check if the given exception is compatible with the throw clause .
8350	Adds bindings .
8351	Bind a prefix to a namespace URI .
8352	Remove a binding for a prefix .
8353	Checks if an open tag has an opening tag .
8354	Consumes a comment token .
8355	Consumes the next comment .
8356	Finds the index of a given token .
8357	Initialize logging .
8358	Start a namespace mapping .
8359	Adds an iterator to the composite .
8360	Add an option .
8361	Add string option .
8362	Add an integer option .
8363	Add long option .
8364	Add double option .
8365	Add boolean option .
8366	Parses the arguments .
8367	Creates a new instance of the given class .
8368	Invoked after an access limit .
8369	Sets the target object .
8370	Prepares the target class .
8371	Finds a method matching this definition .
8372	Convert an integer to an unsigned string .
8373	Serializes an object to a byte array .
8374	Deserializes the given byte array .
8375	Get the first child element by tag name .
8376	Return the value of the first child element with the given tag name .
8377	Get all child elements .
8378	Determines if the node s name matches the desired name .
8379	Checks if the node name matches the supplied node .
8380	Sets the size of a string .
8381	Monitors calls to a specific handle .
8382	Add entry .
8383	Ensures that the monitoring thread is still alive .
8384	Calculates the city of a mobile phone number
8385	Triggers a start prefix mapping .
8386	Fires an end prefix mapping event .
8387	Adds a callback .
8388	Parses the jar .
8389	get text of item
8390	Sets the values of the label .
8391	helper method to calculate the color of the item
8392	Set the text size of the textfield
8393	Calculates the x value of the x coordinate .
8394	Retrieves the intro text from the classpath .
8395	Returns the names of the reserved keywords .
8396	Returns the command arguments for the specified keyword .
8397	Returns the documentation for the given keyword .
8398	Start the remote server .
8399	Stop remote server
8400	Starts the remote server .
8401	Convert properties file to JSON .
8402	Convert properties file to JSON format .
8403	Converts the input stream to JSON string .
8404	Converts properties to JSON string .
8405	Converts the provided properties to a JSON string .
8406	Convert a map of properties to a JSON object .
8407	Takes a map of property keys and converts them to an object map .
8408	Converts properties to JSON string .
8409	Determine the radius of a shadow .
8410	Creates a new OcspFetcher .
8411	Find an immediate intermediate certificate .
8412	Parses the command .
8413	Preprocess the MarkdownDirection
8414	Substitute variables in a pattern string .
8415	Gets the title header .
8416	Adds the title to the HTML file if present .
8417	Substitute the variables in the given string .
8418	Updates the relative paths .
8419	Copies files from one directory to another .
8420	Check if the path is part of the host .
8421	Wrap a child view at a specific index .
8422	Fade the animation for the view
8423	Fade a sliding down duration .
8424	Calculates the percentage of the specified width .
8425	updates the small views with the specified width
8426	Generates an intent to launch a new task .
8427	Launch an activity .
8428	Get Todo list
8429	Get Fact Sheet list
8430	Download file from response .
8431	Build HTTP client .
8432	Create an AccessControlEntity
8433	Update a DataModel
8434	Create a full export request
8435	Get export list
8436	Sets the token provider host for the given token provider .
8437	Sets the client credentials .
8438	Process GraphQL Request for Upload
8439	Get bookmark list
8440	Adds the given permissions to the graph .
8441	Writes a graph permissions to the graph .
8442	Sets the rulesets used by this dataset .
8443	Release resources .
8444	Execute a SELECT SELECT statement .
8445	Create a dataset graph
8446	Limit the number of threads to process .
8447	Resize the geometry
8448	Rotate the job with an annotation .
8449	Set the gravity value
8450	Strip profiles .
8451	Draw the text with the given style
8452	Add image to given file
8453	Add image .
8454	Parse a command line arguments
8455	Prints usage information about a target object
8456	Extracts a TimeUnit from a string
8457	Parses the target object .
8458	Execute a slide .
8459	Execute a slide .
8460	Reads all actions from a PPTX file .
8461	Sort the list of rectangles by size
8462	Render the given text .
8463	Returns the XML file for a slide .
8464	Check if the given mouse event is within the screen .
8465	Specifies that multiple SlideElement overlaps with the specified element .
8466	Executes an operation on SQS .
8467	Executes an outbound operation .
8468	Require a file with the given name .
8469	Gets or creates a temporary directory .
8470	Returns a new log value map .
8471	Log a message at TRACE level .
8472	Logs a event with specific message and message .
8473	Log a message at debug level .
8474	Logs a debug event with debug level .
8475	Log a message at the INFO level .
8476	Logs an info event with message and message .
8477	Send information about a specific event .
8478	Log a message with WARN level .
8479	Logs an event with message and stack trace .
8480	Log a message at ERROR level .
8481	Logs an event with message and message .
8482	Add the source line and method information to the log .
8483	Start the Steno wrapper .
8484	Write a list of key - value pairs .
8485	Serialize a throwable .
8486	Returns a serialized log value .
8487	Extract the caller data from the logging event .
8488	Encodes the given value using the given encoder .
8489	Create a new database
8490	Check mappings for a given position
8491	Parses the save attributes of cell .
8492	Save data to object in context .
8493	Refresh sheet row from context
8494	Parse save attribute string .
8495	Gets save attribute list from row .
8496	Get save attr from cell index
8497	Sets the save object in the hidden column .
8498	Sets the save attributes for the given sheet .
8499	Sets save attributes for a row .
8500	Prepare data context and save data context for a cell .
8501	Format a number .
8502	Put shift attributes .
8503	Set the Workbook to use .
8504	Gets the wrapper to use for this document .
8505	Returns the formula evaluator .
8506	Recalculate the maximum cols of the sheet .
8507	Load a WebSheet from an input stream .
8508	Load a web sheet .
8509	Load a sheet by tab name .
8510	Do export .
8511	Performs the actual save .
8512	Do submit .
8513	Populate the component .
8514	Gets the current sheet configuration .
8515	Custom readObject method .
8516	Returns the locale for the given component .
8517	Returns the picture of the rendered picture view .
8518	Gets the cell helper .
8519	Get picture helper .
8520	Gets the validation handler .
8521	Gets the chart helper .
8522	Convert a set of shift formulas to a list of formal formulas .
8523	Try to convert a Ptg to a list of Ptgs .
8524	Convert a PtgList to a PtgArray
8525	Extracts a single PtgPtg .
8526	Returns the row list for the given row mapping list .
8527	Assembles the rows from the row mapping
8528	Fixup a ref relative row relative to another row .
8529	Creates a dynamic row for a refptg .
8530	Creates the dynamic row for an area Ptg .
8531	Get the color for a solid color
8532	Get the x color from a shapePrinter
8533	Find the automatic fill color based on the theme
8534	Get the X color from the scheme color table
8535	Creates an XColor from the RGB color
8536	Get the automatic color with an automatic color .
8537	Convert an XSSF color to a Clrome object .
8538	Convert an XSSF color to a short tuple .
8539	get bk color from cell style
8540	Finds the component name from the class .
8541	Populate the attributes of the given component .
8542	match method of object
8543	Sets a property on an object .
8544	Gets the value of an object property .
8545	Set control attributes .
8546	Find cell validate attributes .
8547	Sets up the picture charts .
8548	Sets the chart styles .
8549	Set picture style .
8550	Initialize the charts map
8551	Gets the title of the chart .
8552	Sets the style of a series .
8553	Creates a chart with 3D data
8554	Sets the default bar style .
8555	Initialize the charts map .
8556	Gets the chart id from the parent .
8557	Initialize the anchors map
8558	Generates a single XSSF chart .
8559	Transforms a collection object into a collection object .
8560	Gets full name from row .
8561	Rebuild the upper level formula
8562	Setup the upper level formula .
8563	Build the cell formula for shifted rows .
8564	Gather rows mapping by full name
8565	Change index number in the shift map .
8566	Changes the final length of an upper level .
8567	Change index number in hidden column .
8568	Sets the full name in the hidden column .
8569	Gets the original row number in the hidden column .
8570	Sets the original row number in the hidden column .
8571	find parent rows mapping from shift map
8572	find child row mapping from full name
8573	Returns the first item in a collection
8574	Builds the current configuration range .
8575	Checks if is static row .
8576	Is a static row reference .
8577	Replace expression with cell value .
8578	Returns the index of merged region .
8579	Returns the list of skipped cells in the specified region .
8580	Adds the skip cell to the list of cells in the region .
8581	Builds the comment from a sheet
8582	Builds the comment from a tie command alias .
8583	Builds the configuration map .
8584	Gets the sheet configuration .
8585	Build the form command from the sheet configuration .
8586	Verify the last cell .
8587	Builds the sheet configuration .
8588	Check the last row to repair the last row .
8589	Builds a list of comments from a sheet .
8590	Set the parent command .
8591	Checks if the list has at least one command in the list .
8592	Match command to sheet config .
8593	Copy template for tie command .
8594	Build the config list .
8595	Process a method line line .
8596	Processes the command line .
8597	Move comment to map .
8598	Creates a config command .
8599	Build attribute map .
8600	Gets the sheet configuration from configuration .
8601	Sets the footer of the sheet configuration .
8602	Sets the body of a sheet configuration .
8603	Set header of sheet configuration .
8604	Delete row .
8605	Remove the list of ranges from the map .
8606	Find list full name list .
8607	Extract each command from the multi parts map .
8608	Insert an empty object in the data context
8609	Delete the object in the context
8610	Prepare collection data in context .
8611	Index command range .
8612	Checks if a row is allowed .
8613	Inserts each template before index .
8614	Evaluates a normal cell .
8615	Evaluates the cell formula .
8616	Checks if the string is a user formula
8617	Create a comment on a cell
8618	Evaluates a script expression
8619	Removes all rows in the specified sheet .
8620	Removes a single row in the sheet .
8621	Removes the cached cell for the given row .
8622	Remove rows in the body .
8623	Loads the picture from the current page cell .
8624	Loads the chart for the specified row and column
8625	Assembles the new value .
8626	Gets the cell value with the specified format .
8627	Returns the cell value without the format
8628	get cell string value
8629	Gets cell string value .
8630	Set a cell value
8631	Sets the string value of a cell .
8632	Sets the cell value .
8633	Sets the value of a cell value .
8634	Sets the cell value .
8635	Copy rows from source sheet to dest sheet .
8636	Copies a single sheet .
8637	Copy a cell to another row
8638	Copies the value of the given cell to the new cell .
8639	Copy the style from source cell to dest sheet .
8640	Clone the comment box .
8641	Creates a comment anchor .
8642	Create or insert a comment in a cell
8643	Match the comment settings
8644	Get VMLDrawing from cell .
8645	Get the CT shape from a cell .
8646	Gets the style from source cell .
8647	Convert a poi cell to a cell .
8648	Gets the row column indices from the target component .
8649	Gets the initial rows from the configuration .
8650	Get a FacesRow from a body row
8651	Get the faces from a body row and column
8652	Gets the poi cell from a sheet .
8653	Gets the skey from a poi cell .
8654	Get or add a tie cell in the map if it does not exist .
8655	Get the current data context name .
8656	Evaluates the expression
8657	Evaluates the expression with the given context
8658	Custom serialization .
8659	Remove a row from the map .
8660	Merge rows from the given Rows mapping .
8661	Recover the serial rows from the sheet .
8662	Get the type of the chart .
8663	Converts a string to a stroke .
8664	Initialize the chart data from a XSSF chart
8665	Sets up chart data
8666	Initialize the XSSF document map .
8667	Initializes the map of anchor anchors for a sheet .
8668	Gets the chart id of a CT2CellAnchor object .
8669	Gets the chart id from child node attributes .
8670	Processes each object in the collection .
8671	Save data in context .
8672	Re - eval the formula .
8673	Gets the POI cell with the specified row and column .
8674	Gets the faces cell with the specified row and col .
8675	Restore data context data .
8676	Get last collection object .
8677	Checks if is needed .
8678	Start restore data context .
8679	Shift row ref .
8680	Set the first row reference .
8681	Sets the last row of this attribute .
8682	Build cells for a row .
8683	Build single cell .
8684	Custom deserialization .
8685	Build categories list .
8686	Builds the series list .
8687	Build a chart series in a list
8688	Creates a list of colors from a Chart object .
8689	Get dpt from list
8690	Set the command index map .
8691	Get picture map .
8692	Index picture into map .
8693	Index photo in map .
8694	Generate a style for a picture .
8695	Generate the style for charts .
8696	Determines the size of an anchor .
8697	Returns the pattern .
8698	Get the chart view
8699	Recover the cell .
8700	Get row style .
8701	Get a cell style for a poi cell .
8702	Gets the cell font color .
8703	Get cell font decoration .
8704	Get cell style .
8705	Get the style for the cell .
8706	Get the alignment style from a cell style
8707	Get vertical alignment from cell style
8708	Calculates the total height of the first sheet
8709	Sets the cell style .
8710	Gets the input type from the cell style
8711	Gets the paths of a resource .
8712	Gets resource as stream .
8713	Removes the prefix from a resource .
8714	Eval the input type
8715	Finds a bean by name
8716	Joins a short array using the specified separator .
8717	Round a double value
8718	Gets the tab type .
8719	helper method to set the tab style
8720	Gets the default date pattern .
8721	Gets decimal separator by default locale .
8722	Gets the thousand separator by default .
8723	Set the tie command alias list
8724	Builds the list of watches for a formula .
8725	Build watch list for a cell .
8726	Adds the given row to the watch list if it doesn t already exist .
8727	Check if string is a valid command string
8728	Parse widget attributes from cell attributes .
8729	Gets attribute key in map by cell .
8730	Parse validate attributes .
8731	Returns the position of the bracket within the specified start position .
8732	Parses a string and returns a map of attributes .
8733	parse input attributes .
8734	Parses validation attributes .
8735	Splits an attribute value .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process the select item attributes .
8739	Gathers special attributes .
8740	parse comment to map
8741	Find the index of the first non - cell name of a string
8742	Removes chars from input string .
8743	Creates the Excel column name for the given number .
8744	Convert a column name to int .
8745	Get a cell by cell reference .
8746	Convert a height to a pixel value .
8747	Checks if a string is a valid date .
8748	Parse a date .
8749	Check if string is numeric .
8750	Determines if the given character is continue to continue .
8751	Sets a property on an object .
8752	Compare two cell index
8753	Checks if a configuration range is inside a range .
8754	Clears the hidden columns .
8755	Deletes hidden columns in a row .
8756	Deletes a cell from a row .
8757	Process event .
8758	Refresh the cell after status changed .
8759	Validate the cell with the specified row and column
8760	Validate the POI - WebSheet validation bean
8761	Check error message from context .
8762	Validate all rules for single cell .
8763	Validate the input value .
8764	Validates the target cell against the target component .
8765	Validate all rows in the current page .
8766	Validate row in current tab .
8767	Validate a row at a specific row
8768	Refresh all cells in the current page .
8769	Refreshes the cached cells in a row .
8770	Sets the true submit mode in the view .
8771	Perform validation .
8772	Clear this object .
8773	Load the header rows .
8774	Load the header row without configuration tab .
8775	Fills the header cells with the maximum number of columns .
8776	Gets the header column style .
8777	Gets the width style .
8778	Loads header row with configuration tab .
8779	Get column width .
8780	Clears the parent workbook .
8781	Initializes the tabs .
8782	Load the data objects .
8783	Refresh the internal data .
8784	Refresh the data for a row .
8785	Refresh data for a cell .
8786	Returns the index of the tab with the given tabname .
8787	Load a work sheet .
8788	Prepare work sheet .
8789	Sets the first page to the first page .
8790	Saves the object map in the current view map
8791	Setup the row info .
8792	Load body row .
8793	Assemble the body row .
8794	Refresh the cell .
8795	Process refresh cell .
8796	Create the dynamic columns for a tab .
8797	Add a repeat row .
8798	Refresh the body rows in the parent panel .
8799	Set the unaved state
8800	Returns the boolean value for the status of the view .
8801	Finds the common constructor for the given class .
8802	Write input stream to output stream .
8803	Write long .
8804	Writes a line .
8805	Sets the traffic stats tag .
8806	Adds a bitmap to the result .
8807	Adds file descriptor .
8808	Remove the parameter with the given name .
8809	Add a header to the request .
8810	Clears all the parameters .
8811	Calls the streaming service .
8812	Call stop .
8813	Bind to the streaming service .
8814	Unbind the radio .
8815	Drops listener .
8816	Store image to disk .
8817	Transforms an input stream into a string .
8818	Converts an InputStream to a UTF - 8 string .
8819	Sends the message to the given OutputStream .
8820	Returns the number of bytes available .
8821	Closes the input stream .
8822	Reads a number of bytes from the input stream .
8823	Resets the mark .
8824	Send start .
8825	Sends the content disposition header .
8826	Sends the content type header .
8827	Sends the transfer encoding header .
8828	Helper method to send the end of the header .
8829	Send end .
8830	Sends the parts of the given parts to the given output stream .
8831	Calculates the length of an array of parts .
8832	Returns true if the request should be redirected .
8833	Sends a 304 response .
8834	Sets the date header .
8835	Set the date and cache headers .
8836	Sets the content type header for the given file .
8837	Closes the connection .
8838	Sets the file disposition header .
8839	Sends the data to the output stream .
8840	Installs the cache .
8841	Create a new working directory
8842	Gets the cache response .
8843	Creates an input stream for the body of the snapshot .
8844	Reset bitmap .
8845	Get a websocket ssl context .
8846	Validates a keystore .
8847	Replace the requested scale type .
8848	Stop listening for location updates .
8849	Get PendingIntent .
8850	Disconnect the given connection .
8851	Bind the Goro service to the service .
8852	Unbind the service .
8853	Notify listeners that view has changed
8854	Invoked when the channel is open .
8855	On accept response data .
8856	Reset the data .
8857	Waits for the loader to complete .
8858	helper method to set text or hide the view
8859	Hide soft input .
8860	Shows soft input .
8861	Toggles the soft input from textView .
8862	Calculate pixels width .
8863	Called when an exception occurs .
8864	Clears cache response .
8865	Adds an image tag to a view
8866	Cancel image loading .
8867	Create image consumer .
8868	Sets an image result as an image consumer .
8869	Sets the loading image .
8870	Start an image loader .
8871	Adds an image to the cache .
8872	Release a buffer .
8873	Callback method to set the request properties .
8874	Add a parameter to the request .
8875	Obtain connection attempt .
8876	Returns the MD5 hash of the given text .
8877	Returns the String identifying the given CUblas
8878	Returns the String identifying the given CUblas .
8879	If the given result is different to CUBLAS and exceptions have been enabled this method will throw a CudaException with an error message that corresponds to the given result code .
8880	If CUBLAS has been enabled this method will throw a CudaException with a CudaException .
8881	Adds a lexeme id to the lexemeId
8882	Add an ending item to the end of the list
8883	Gets the estimate of an estimate of the estimated estimate for the ending id .
8884	Print description .
8885	verify and setStrong attribute .
8886	translate attribute values to KAML syntax
8887	check and set an attribute in the feature structure
8888	Removes the KAM - Markup formatting .
8889	Returns information about the app .
8890	Add query string to query string
8891	Process a list of metric data .
8892	Parses a json string .
8893	Gets the connection config .
8894	Performs metrics request .
8895	Create a reader for GC4 code list document .
8896	Create a reader for GC4 code list document .
8897	Create a reader for GC04 column set document .
8898	Create a reader for GC10 code list .
8899	Create a reader for GC10 code list document .
8900	Create a reader for GC10 column set document .
8901	Get the ID of the passed column element .
8902	Get the row value for the passed row ID .
8903	Get the column with the specified ID .
8904	Get all key IDs in the passed column set .
8905	Get the unique key of the column set .
8906	Check if the passed column ID is a key column .
8907	Create a column .
8908	Create a new Key object .
8909	Sets the number of lines to skip .
8910	Add a column at the specified index .
8911	Create a GC4 code writer .
8912	Create a GC4 code writer .
8913	Create a GC4 column set .
8914	Create a GC10 code writer .
8915	Create a GC10 code writer .
8916	Create a GC10 column .
8917	Create a GC4 code validator .
8918	Create an Invalid CodeListValidator .
8919	Create an iterator for GC04 column set .
8920	Factory method for GC10 code list .
8921	Create an Invalid CodeListValidator for GC10 .
8922	Create a GC10 column validator for GC10 .
8923	Send logs to server
8924	Sets the context .
8925	Get the log level .
8926	Get capture .
8927	Set the maximum number of bytes that can be written to disk .
8928	Prepend the given metadata to the given message .
8929	Add the stack metadata to the current request .
8930	Helper method to create a JSONObject with the given information .
8931	Log location
8932	Sets the user identity .
8933	Gets the byte array from the given file .
8934	Starts the location updates .
8935	Size the specified region .
8936	Size of a given region .
8937	Size of a region .
8938	Read a snapshot record .
8939	Dumps the contents of the table to a PrintWriter .
8940	Gets the time stamp from the given index .
8941	Convert a file into a chart
8942	return pool for given server
8943	Get a pool for locators
8944	Checks if a region is already in a JMX
8945	Get member object from JMX
8946	List host names .
8947	Looks up a network host name in the configuration file .
8948	Check if data is an exception and send an exception .
8949	Calls the function with the given function and returns the result .
8950	Flatten a collection into a collection
8951	Execute a query using the specified region function .
8952	Creates a cache listener for the entry .
8953	Creates a cache listener for deletion after deletion .
8954	Handle exception .
8955	Gets the OnRegionFilterKeyFacts object .
8956	region Export OutputStream Implementation
8957	List host names .
8958	Execute a function on a region
8959	Gets the application name .
8960	Constructs the security properties
8961	Get region by name .
8962	Get region .
8963	Constructs the comparison .
8964	Determines if the value is at the given index .
8965	Close the stream .
8966	To cvs files .
8967	Main entry point for testing .
8968	Retrenect a new JMX object .
8969	Stop members on a given host
8970	Shutdown member .
8971	Shuts down the distributed system .
8972	Shuts down a redundancy zone .
8973	Store pagination map .
8974	Reads the results by the specified page criteria and region .
8975	Imports a region .
8976	check if the remote locators match the locators
8977	Builds the checkSumMap for a region .
8978	Builds the checkSumMap for a given region .
8979	Return value of given column
8980	Tests whether the given TypeMirror is a type of integer .
8981	Serializes an object to a byte array .
8982	Deserializes an object from a byte array .
8983	Create an instance of the given class .
8984	Check for a table id attribute .
8985	Check for fields .
8986	Checks for a super type .
8987	Returns the schema of the table
8988	brew .
8989	Emits the getId method .
8990	return an Observable as an Observable
8991	Checks if the given column name is equal to the given column name .
8992	Returns the value or the defaultString if the string is blank .
8993	Returns the first character of the given string .
8994	Tests if a TypeMirror is of a type .
8995	Get a descending query
8996	Read the temperature from the device .
8997	Returns the name of the given type .
8998	Log a message .
8999	Sends an error message to the logger .
9000	Returns a list of supported icon fonts .
9001	Gets the icons .
9002	Creates the SLD editor layout .
9003	Gets the background decoration .
9004	Raises x .
9005	Set this row vector .
9006	Compute an integer power of a value x .
9007	Compute the root root root of a number .
9008	Compute the exponent .
9009	Compute the ln distance from a decimal point .
9010	Helper method to compute a newlnton number .
9011	Compares two BigDecimal .
9012	Performs an ARRAY linear equation .
9013	Compute the square of a double .
9014	Print the pi value .
9015	Convert a time to a timestamp .
9016	Set limits .
9017	Add a value to the histogram .
9018	Prints the longest bar .
9019	Adds another complex to this complex .
9020	Subtract this complex from another .
9021	Multiply this complex number with another .
9022	Divide another complex number .
9023	Sets this matrix to the given matrix .
9024	Get a row of this matrix .
9025	Get a column from this matrix .
9026	Set the values from the given array .
9027	Returns the transpose of this matrix .
9028	Add another matrix to this matrix .
9029	Subtract this matrix from another matrix .
9030	Multiply a matrix by a k .
9031	Multiply this matrix by another matrix .
9032	Prints the matrix to the passed output stream .
9033	Set the image resource .
9034	Validate the coefficients .
9035	Compute the next position .
9036	Clears all fields .
9037	Parse a sld descriptor .
9038	Create a sld descriptor .
9039	Validates the sld .
9040	Validate the XML .
9041	Calculates the area of a region .
9042	Set this matrix from another matrix .
9043	Sets the values from the given array .
9044	Compute the inverse matrix .
9045	Calculates the determinant .
9046	Returns the norm of this matrix .
9047	Solve Ax = b
9048	Print the matrix to the specified output stream .
9049	Do forward elimination .
9050	Performs a forward substitution .
9051	Performs a back substitution .
9052	Advance x to x .
9053	Convert the square matrix into a square matrix .
9054	Determines next VNONE value .
9055	Perform a single iteration .
9056	Compute the next position .
9057	Checks that the position of this element matches the previous position .
9058	Compute the next position .
9059	Checks that the interval is valid .
9060	Compute the given addend value .
9061	Computes the multiplication of two integers .
9062	Raises an exponent .
9063	Perform a single iteration on the best estimate
9064	Get sldManager .
9065	Convert a long value to a char array .
9066	Decompose the bits of a sign .
9067	Print this object to the passed output stream .
9068	Validates the biased exponent value .
9069	Validates the unbiased exponent value .
9070	Validate that the double bi -ased exponent value is valid .
9071	Validates the unbiased exponent value .
9072	Creates a SldGwt service async .
9073	Compute the next random value .
9074	Get the next random value .
9075	Compute the next random ratio .
9076	Create a set of primites .
9077	Returns the set of prime factors for a given number .
9078	Perform a single iteration step
9079	Compute the next position .
9080	Checks that the position of this node is equal to the previous node .
9081	Sets the JavaFX application .
9082	Sets the configuration .
9083	Sets the default configuration .
9084	Initialize FXML loader .
9085	Specify the location of a LatLng request .
9086	Get host port pair from service instance .
9087	Returns the attribute definition for the given attribute definition .
9088	Evaluates whether an attribute definition matches the given filter .
9089	Sanitize a string .
9090	Sets the address of the Geocode request .
9091	Sets the Geoocode Components .
9092	Query the names of the ServiceTracker .
9093	Query the ServiceInstance by name
9094	This method is used to get all collaborators that are to be included in the user
9095	Constructs the meta data for a decimal as a string .
9096	Change the password for a logged in user .
9097	Get all users .
9098	Get the gravatar for the specified email address
9099	Get the gravatar for a specific user
9100	Populate form data from Elasticsearch json .
9101	Returns the ElasticSearch field type .
9102	Create a flow step .
9103	Update a flow step .
9104	Get a flow step by id
9105	Get a FlowStep by step
9106	Get all steps by flow .
9107	Delete a flow step .
9108	Force a flow step to be deleted
9109	Populate the list of all Table Fields .
9110	Close the ABASE server .
9111	Process a message .
9112	Called by the client when the connection is closed .
9113	Get the ECHO messages from the return value
9114	Returns a list of all personal inventory items .
9115	Create a new TableRecord .
9116	Delete a form container
9117	Get form flow history
9118	Get the form and field values
9119	Gets most recent form and field history .
9120	Locks the form container .
9121	Unlock the form .
9122	Unlock a form container
9123	Map the form container to the form container
9124	Convert a list of roles to roles .
9125	Create a form definition .
9126	Update form definition .
9127	Get a form definition by id
9128	Get a form definition by name
9129	Gets all by logged in user .
9130	Delete a form definition
9131	Get the storage key from the form .
9132	Initialize XMemcachedClient .
9133	Shutdown the pool
9134	Converts a string to a long .
9135	Convert a document to a PDF file
9136	Get the field values for a form field
9137	Create a flow step rule entry .
9138	Create a flow step exit rule .
9139	Create a flow step rule .
9140	Update flow step rule rule .
9141	Update flow step exit rule .
9142	Update flow step rule .
9143	Moves the flow step entry up .
9144	Moves the flow step rule entry down .
9145	Delete a flow step rule entry .
9146	Delete a flow step exit rule .
9147	Delete a flow step rule .
9148	Initialize the decrypted data .
9149	Get all user queries .
9150	Get all roles .
9151	Get the service ticket as hexadecimal .
9152	Create a field text masking
9153	Create a text barcode field .
9154	Create a decimal spinner .
9155	Create a decimal slider slider
9156	Create a table .
9157	Update field text masked value
9158	Update a field textcode
9159	Update a field decimal spinner .
9160	Update a slider slider slider .
9161	Updates a table definition .
9162	Gets a field by name .
9163	Gets the form fields based on the form definition and logged in .
9164	Gets a form definition for the specified form type ID and logged in .
9165	Deletes a field from a specified field .
9166	Force a field to delete .
9167	Get the meta data for a table field
9168	Update a field value .
9169	Gets or creates an index .
9170	Create a flow .
9171	Update a flow
9172	Get a flow by ID
9173	Get a flow by name
9174	Delete a flow
9175	Force a flow to delete .
9176	Updates a global field value .
9177	Get all the global field values
9178	Returns a map of the form definition ids for this form definition .
9179	Decrypt an encrypted init packet .
9180	Close and clean up the connection .
9181	Initialize a new request handler
9182	Get exception message verbose .
9183	Creates an admin user .
9184	Gets an access token .
9185	Get user profile info .
9186	Execute a JSON API request .
9187	Execute a POST request .
9188	Create a custom response handler .
9189	Tests if the connection is valid .
9190	Get the closeable HTTP client .
9191	Determines the path to a fluid trust store .
9192	Closes the connection .
9193	Returns a list of Fluid items for a given job .
9194	Send a form to a flow .
9195	On close .
9196	On message handler .
9197	Sends a message to the client .
9198	Sends a text message .
9199	Closes the user session .
9200	Executes the native SQL query synchronously .
9201	Perform a POST request .
9202	Apply License to License
9203	Create a field text plain text .
9204	Create a ParagraphText plain text .
9205	Create a ParagraphText field .
9206	Create a field multiChoice select value .
9207	Create a DateTime field .
9208	Update field text plain text field .
9209	Update Paragraph Text Text .
9210	Update field date time and time zone .
9211	Update field decimal .
9212	Update the value of a field .
9213	Create a field value .
9214	Get Configuration by key
9215	Get all configurations
9216	Create a new attachment
9217	Get an Attachment by its id .
9218	Delete an Attachment
9219	Force an attachment to be deleted
9220	Parse a jar file .
9221	Set the class loader using the given jar path .
9222	Throw an exception if the element is not a valid element .
9223	Throws an exception if the element is not null .
9224	Throws an exception if the element isn t present .
9225	Get the schema node from the given filePath
9226	Checks that the element is present in the parent element .
9227	Throws an exception if the element is not present .
9228	Converts the value to the target type .
9229	Create a new instance of CLI interface .
9230	Create a new instance using options .
9231	Parse CLI arguments .
9232	Parses CLI arguments using the given string .
9233	Gets the url builder .
9234	Remove a footer view .
9235	Returns the value of a projection
9236	Returns a 3D gradient of a coordinate vector .
9237	Compute an integer value noise for a given integer values .
9238	Calculate 1 - D noise value for a vector .
9239	Gets the cubic interpolation function .
9240	Gets the scurve .
9241	Sets the bounds of the bounds .
9242	Process the event .
9243	Process the event .
9244	Extract account id from a CloudTrailEvent .
9245	Checks to see if the rule entity is valid .
9246	Get event serializer
9247	Create a file in the root folder
9248	Creates a new directory .
9249	Restores the original properties .
9250	Creates a new instance of the delegate .
9251	Add an object to the collection .
9252	Set a property
9253	Retrieve an array of String values .
9254	Returns the next state for the given action .
9255	Remove garbage collected soft references from the GC queue .
9256	Gets the value for the given type .
9257	Gets the parameterized type .
9258	Returns the value of the given type variable .
9259	Print the stack trace .
9260	Print the stack trace .
9261	Replace the object .
9262	Run the task .
9263	Sets the current task .
9264	Determines whether the task is accepted .
9265	Called when a task is rejected .
9266	Called when the task is started .
9267	Records the task completed .
9268	Stop the task .
9269	Get the next job .
9270	Add a job to the queue .
9271	Converts a name to blocking mode .
9272	Resolve the serialized mode .
9273	Sets up the reader readers .
9274	Adds a reader to the catalog .
9275	Copy the readers to the catalog
9276	Creates a new catalog .
9277	Load the catalogs from the system .
9278	Parses the catalog .
9279	Parses the list of catalog files to process .
9280	Parse the catalog file .
9281	Logs an unknown entry .
9282	Parses all the supplemental catalog entries .
9283	Resolve a entity name .
9284	Resolves a document .
9285	Resolve a system identifier .
9286	Resolve a URI .
9287	Resolve the catalogs
9288	Converts the given system identifier into an absolute URL .
9289	Normalize URI .
9290	Encodes a byte into its hexadecimal representation .
9291	Adds a partial entry to the catalog .
9292	Create a SoftValueRef .
9293	Fires a Throwable to all registered listeners .
9294	Adds a throwable to the event list .
9295	Creates new list implementation
9296	Compares this timer to another .
9297	Returns the value as an object .
9298	Gets the object at the given index .
9299	Set the object at the given index .
9300	Removes garbage collected objects from the queue .
9301	Adds a new entry type .
9302	Returns an integer type by name
9303	Returns the number of arguments of the entry in the Catalog .
9304	Returns the value of an entry .
9305	Set the context class loader
9306	Swap a queue .
9307	Remove a node at a given index .
9308	cleanup timeout object
9309	Attempts to load a class from the parent ClassLoader .
9310	Preload all known protocols .
9311	Creates a URL stream handler .
9312	Checks if there s any handlerpkg packages in the system property file .
9313	Returns the current value .
9314	Creates a HashSet implementation
9315	Makes a synchronized counter .
9316	Make a directional .
9317	Determine if the extension namespace is in an extension namespace .
9318	Check notification .
9319	Binding a name to the target object .
9320	Get the wrapper object for the given object
9321	Helper method to substring a string from a map .
9322	Splits the string using the specified delimiter .
9323	Join byte array .
9324	Default implementation of the given object .
9325	Return the current value as a Object
9326	Creates new entry map
9327	Returns the value for the specified key .
9328	Returns the value associated with the specified key if any .
9329	Removes a key from the map .
9330	Flushes the timer .
9331	Returns a list of the keys that are valid for the specified time .
9332	Set the resolution
9333	Returns the timestamp associated with the specified key .
9334	Return an iterator of the elements that have the given tag name .
9335	returns a unique child matching the given tag name
9336	Get an optional child element by tag name .
9337	Get the content of an element .
9338	Returns the unique child content of the element with the specified tag name .
9339	Get the content of an optional child element .
9340	Set the maximum number of threads in the pool .
9341	Sets the blocking mode .
9342	Set the blocking mode .
9343	Executes the given task .
9344	Resolve a system URI .
9345	Resolve the public catalog for the given public id .
9346	Resolve an external system ID .
9347	Resolve an external public identifier .
9348	query the catalog resolver
9349	Append vector .
9350	Resolves all coordinate entries in the system with the given ID .
9351	Resolve a system URI
9352	Resolves all resolutions for a given system ID .
9353	Find all local system entries in the system
9354	Resolve all sub - catalogs .
9355	Read a catalog from a URL
9356	Reads a catalog from an input stream .
9357	Connects to the file .
9358	Opens an OutputStream for writing to the file .
9359	compareNext .
9360	This method is used only for testing .
9361	Returns the value of this header .
9362	Creates a snapshot entry .
9363	compare right .
9364	Creates a log logger .
9365	Generate a string representation of a collection of objects
9366	Gets the short name of the class .
9367	Returns a string representation of this class .
9368	Returns an enumeration of system properties .
9369	Returns the property group for the specified basename .
9370	Returns a constructor that matches the supplied argument types .
9371	Creates a copy of the given object .
9372	Deref the object .
9373	Initialize the context .
9374	Update JNDI cache .
9375	Returns a copy of the keys contained in this map .
9376	Returns a set of the entries in this map .
9377	Removes a bound property listener .
9378	Fire property added to list
9379	Fire a property removed event
9380	Fire a property change event
9381	Fire a property change event to all registered listeners .
9382	Computes the property name .
9383	Loads the properties from the specified reader .
9384	Loads the properties from the given class name .
9385	Get the property group for the specified basename and index
9386	Returns whether the entity is resolved .
9387	Resolve the given system ID .
9388	Resolve a system ID as a URL
9389	Resolves a classpath resource .
9390	Set the value as a Document
9391	Normalize public ids for public identifiers .
9392	Encode an ASN .
9393	Decodes an unqualified URIs .
9394	Replaces all occurrences of oldStr with newStr
9395	Start the timer .
9396	Stop the timer .
9397	Makes a synchronized StopWatch .
9398	Compares this object to another object .
9399	Generates a hashcode for a byte array .
9400	Generates a hash code for an array of objects .
9401	Creates the data structures .
9402	Sets the value of the field .
9403	Returns the next token from the file .
9404	Initialize the property editor .
9405	Adds a vertex to the graph .
9406	Set the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth first search on a vertex .
9409	Performs a depth - first traversal .
9410	Finds a vertex with the given data
9411	Finds cycles .
9412	Normalizes the given string so that it can be used in HTML .
9413	Parse an XML string into a Element .
9414	Parse the given input stream and return the root Element .
9415	Parse the given input source into a DOM tree .
9416	Create an Element based on the local part .
9417	Resolve a qualified name .
9418	Copy attributes from src element to destination element .
9419	Check if the node has any child elements
9420	Get all child elements .
9421	Get the text content of a node
9422	Retrieves an iterator of all child elements with the given name .
9423	Returns the parent Element of the given Node .
9424	Adds a resource to wait list .
9425	Reads catalog from an input stream .
9426	Reads a catalog from a URL .
9427	Get the local host address .
9428	Resolve the entity
9429	Sets the value of a system property .
9430	Prints out codebase information for the given class .
9431	Provide a String representation of a given class
9432	Strip package name from given classname .
9433	Get package name .
9434	Try to load the given class .
9435	Get the primitive wrapper class for a primitive type .
9436	Get all interfaces of a class
9437	Get all interfaces of a class
9438	Replies if the given type is a primitive wrapper .
9439	Attempts to instantiate the specified class using the default class loader .
9440	Returns the getter method .
9441	Returns an attribute setter .
9442	Converts a Java class name into a Java Class .
9443	Get a system property .
9444	returns an array of filenames for a given property name
9445	Consume the weak reference queue .
9446	Returns an iterator over the elements in this set .
9447	Create a URLLister instance .
9448	Returns an unmodifiable set containing all of the entries in this map .
9449	Adds a bound property listener .
9450	Removes a bound property listener .
9451	Determines whether the string is null or not .
9452	Finds the property editor for the given type name .
9453	Register an editor for the given type name and editor type name .
9454	Converts the specified string value to the specified type name .
9455	Get the context class loader for the specified Thread .
9456	If the Throwable is an ApplicationDeadlockException . Otherwise return null .
9457	Schedule a timeout
9458	Do work out .
9459	Creates a new context with the given name .
9460	Lookup an object in the context .
9461	Checks if the given object is an instance of the given context .
9462	Append the information for a class
9463	Get a transition by name
9464	Reads the properties file .
9465	Gets the verbosity .
9466	Query whether the catalog is relative catalogs
9467	Gets the catalog files .
9468	Get the catalog files .
9469	Queries the preference s prefer public properties .
9470	Determine if the static catalog property is used
9471	Resolve an entity .
9472	Resolve a href .
9473	Converts a URI into an absolute path .
9474	Resolve a class .
9475	Invokes the setter method .
9476	Gets the local name of an element .
9477	Returns the namespace URI of the given node .
9478	Gets the namespace URI of an element .
9479	Creates a list from an enumeration .
9480	Returns an InputStream for the given filename .
9481	Loads properties from a file .
9482	Read properties .
9483	Adds an edge to this graph
9484	Adds an outgoing edge .
9485	Adds an outgoing edge .
9486	Returns true if this edge has the given edge .
9487	Removes the edge from this graph .
9488	Find an edge in the graph
9489	Finds the first edge in the graph
9490	Returns the cost of this vertex .
9491	Recursively parse a jar file .
9492	Returns true if there are more elements in the iteration .
9493	Fire an event .
9494	Install JVM type provider .
9495	Deletes a folder and all its sub - folders recursively .
9496	Dispatch an action to the FX thread .
9497	Gets an event stream of the given type .
9498	Creates the file path for the given view type .
9499	Perform a stream operation for one or more records .
9500	Retrieves a stream from one resource to one of the other .
9501	Returns a stream consisting of only one of the given resources .
9502	Returns a stream consisting of one of the given resources .
9503	Query the allowed robots for this page .
9504	Checks the generated instruction .
9505	main method for testing
9506	Main method for testing .
9507	Gets the sum of degree .
9508	Helper method to populate the superclass arguments .
9509	Add this reader to the JdbcResourceLoader .
9510	Check datasource parameters .
9511	Returns an iterable of objects of the given type .
9512	Create array of given type .
9513	Create a list of objects .
9514	Create a collection of objects .
9515	Creates a list of objects of the specified type .
9516	Create an instance of left type
9517	Create an instance of right type .
9518	Asserts that a given object is not a valid value .
9519	Checks that a given value is successful .
9520	Creates a Try with success .
9521	Connect jdbc - config with url and username and password
9522	Run in the SQL .
9523	Retrieves a query from a database .
9524	As boolean array .
9525	Builds a query using example .
9526	On upgrade .
9527	Backup the table .
9528	Restore this table .
9529	Set empty text .
9530	Dumps the contents of a database to a CSV file .
9531	Unescapes quoted string
9532	Extract the values from a CSV row .
9533	Convert string to map
9534	Convert map to string
9535	Joins a list of strings into a single string .
9536	Joins a list of strings into a single string .
9537	Reads from index .
9538	Write to index .
9539	Expect the id field of an entity .
9540	Get base DAO model .
9541	Gets the bind type .
9542	Imports data from a CSV file .
9543	Backup all tables in a CSV .
9544	Restore all tables from a CSV .
9545	Write the index file .
9546	Creates a query from the given entity manager .
9547	Creates a typed query .
9548	Renders the query .
9549	Delete an item from the table
9550	Save an object .
9551	Update the specified object in the table .
9552	Add a constraint to the WHERE clause .
9553	Add a WHERE clause that matches the given predicate .
9554	Returns next active stack .
9555	Returns an empty IntentionStack
9556	Adds the given plan to the graph .
9557	Get a plan that matches the given policy selection policy
9558	Select a plan at a random position
9559	Sets the plan variables for a given result .
9560	Gets the belief at the given index .
9561	Gets the parents .
9562	Gets the children .
9563	Grows the given byte array by the given increment .
9564	Creates a new logger .
9565	Advances the loop .
9566	Set the goals .
9567	Pause for user input .
9568	Initialize the default pooling pools
9569	initialize IntentionSelectors
9570	Starts the intention selection .
9571	Shutdown the thread pool .
9572	Registers an extension .
9573	Resets the state of the agent .
9574	Loads an agent .
9575	Finds the plan for a given goal type and adds it to the catalog .
9576	Creates the number of agents in the given class .
9577	Loads a class from the className and returns it .
9578	Loads an extension from the class name .
9579	Check if two objects are equal
9580	Returns usage message .
9581	Parses the command line arguments .
9582	Parses a command - line argument .
9583	Evaluate an agent .
9584	Returns the object at the specified index .
9585	Find an AObject with the given name
9586	Push an object onto the stack .
9587	Gets the object at the specified index .
9588	Adds an object to the queue .
9589	Removes the element from the queue .
9590	Gets the type of the given object .
9591	Matches a belief against a query .
9592	Main method .
9593	Converts a string to a byte array .
9594	Post a goal .
9595	Send a goal message to the agent .
9596	Send a goal message to the agent .
9597	Returns a byte array containing all goals .
9598	Creates a new belief set .
9599	Adds a new belief to the beliefbase .
9600	Evaluate a query .
9601	Suspend the agent .
9602	Gets a field by its name .
9603	Registers a number of Neighbours .
9604	Builds a random name .
9605	Runs the agents .
9606	Check if the stack is valid .
9607	Remove finished agents .
9608	Attempt to evaluate a goal .
9609	Shutdown the pool .
9610	Sets whether or not the given agent is idle .
9611	Move a pin to a given boardA
9612	Initializes the agent .
9613	Wait until all pools are idle .
9614	Terminates the program .
9615	Check if all pools are idle .
9616	Get the pool id for an agent .
9617	Picks the currently selected element .
9618	Sets the expression .
9619	Creates an expression for a join .
9620	Recursively join a join .
9621	Find or create a join for a given property
9622	Returns true if the response should be reached .
9623	Get the upload stream .
9624	Override handleRequest method .
9625	Check if parameter has the given value .
9626	Get parameter value by name .
9627	Parse the parameters .
9628	Configure the transaction manager .
9629	Returns the target file for the given artifact name and filename .
9630	Writes the given artifact to the temporary file .
9631	Sets the instance fields on a managed class .
9632	Gets the constructor of the given implementation class .
9633	Builds a string representation of the configuration .
9634	Returns the method for the given method .
9635	Returns the type of the given field .
9636	Get a dependency value .
9637	Persists the temporary file .
9638	Sets a default link for the given rels
9639	Sets the default link template for the given rel and rel .
9640	Handle links .
9641	Adds links to the response .
9642	Adds links to the response .
9643	Parses a link object .
9644	Get or create a new empty map .
9645	Handles capabilities from the response .
9646	Check if the given method is allowed
9647	Registers the instance processor .
9648	Register an instance factory .
9649	Registers an instance processor .
9650	Registers a class processor .
9651	Get an instance of the given interface .
9652	Adds an argument to the list .
9653	Create target files list .
9654	Serializes this object to XML .
9655	Initialize the template .
9656	Determines if a file has a reference to another file .
9657	Creates a template model from a Reader .
9658	Creates a template model from the given file .
9659	Sets the request path .
9660	Get an observable starting from the given startIndex .
9661	Create an instance scope using its string representation .
9662	Sets a field value .
9663	Add capture to a logger .
9664	Remove the given appender from the given logger .
9665	Clears the given appender from the given logger .
9666	Reads the formal parameters .
9667	Parse the EMF model file .
9668	Resolve proxies .
9669	Get the files from a directory .
9670	Parses a directory .
9671	Check if the model is fully resolved .
9672	Find all EObjects in the given resource set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Advances to the next record .
9677	Set a parameter array to a String array .
9678	Set a parameter as a boolean .
9679	Executes an SQL INSERT UPDATE or DELETE statement .
9680	Create an instance of the given string representation of the given instance .
9681	Merges the template content .
9682	Get model directory .
9683	Returns the directory of templates .
9684	Writes the value to the output .
9685	Starts the web ui .
9686	Configures the web window .
9687	Print print .
9688	Writes the data from the input stream to the output stream .
9689	Invokes the method with the given arguments .
9690	Attaches this handler to the HttpServletRequest .
9691	Detaches this request .
9692	Returns the cookies associated with this request .
9693	Dumps the request context information .
9694	Get the invocation meters .
9695	Populates the event stream .
9696	Set the remote host .
9697	Get parameter value from event stream .
9698	Removes the given prefix from the given path .
9699	Find the common directory between two directories .
9700	Convert absolute path to relative path .
9701	Convert relative path to absolute path .
9702	Get the depth of a file .
9703	Dumps an error on the request context .
9704	Send an object to the response .
9705	Adds a param template to the list .
9706	Adds a list of parameterized templates .
9707	Initializes the template .
9708	Find references to a template file .
9709	Enables or disables the save button .
9710	Displays the delete dialog .
9711	Handles a delete request .
9712	Create a new instance of a managed class .
9713	Returns a sorted array of files .
9714	Get a summary of the results .
9715	Get summary row .
9716	Get sub - summary row .
9717	Create an instance of the given managed class .
9718	Gets the setup class .
9719	Replies the model directories .
9720	Replies the model resources .
9721	Sets the collection of candidates to use .
9722	Loads configuration from an input stream .
9723	Called when an error occurs .
9724	Check if the type is object .
9725	Reads the formal parameters from the request .
9726	Reads a JSON object from the given input stream .
9727	Extracts the value of a cell parameter .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request .
9730	Determines whether the request is an Android request .
9731	Handle refresh .
9732	Gets properties with the specified annotation .
9733	Retrieves an annotation on the given field on the given property .
9734	Log message .
9735	Looks up the whois information for a given domain .
9736	Determine whether or not the given node has the given server .
9737	Gets the managed class .
9738	Gets the managed method .
9739	Add an exception to the cell .
9740	Process the not contained message .
9741	ResultSet object as a boolean .
9742	Returns true if this ResultSet is a wrapper for the specified parameter .
9743	Serialize the HttpServletResponse .
9744	Get cookie value by name
9745	Add cookie .
9746	Removes the cookie with the given name .
9747	Returns an iterator over the cookies .
9748	Get the target file list producer .
9749	Adds a static field .
9750	Compile the Java class .
9751	Returns true if the response file matches the given token .
9752	Returns the value of the file extension .
9753	Ensures that the given URI is a trailing slash .
9754	login with the given username and password
9755	Returns the http servlet request .
9756	Execute managed method .
9757	Execute a mutable method .
9758	Execute an immutable transaction .
9759	Get a list of files in this directory .
9760	Get the last file in the directory
9761	Get the concrete config type
9762	Checks if path starts with path component .
9763	Returns a list of factory instances of the specified model type .
9764	Gets the managed session .
9765	Serializes the HttpServletResponse to the output stream .
9766	Reads meta data from the server .
9767	Handle request resource .
9768	Closes the connection .
9769	Force close .
9770	Handle allowed methods .
9771	Handles the upload .
9772	Deletes the data from the server .
9773	Extract column parameters from the fit row
9774	Returns the name of the argument list .
9775	Schedule a periodic task .
9776	Schedules a timeout .
9777	Parse the repository configuration .
9778	Returns the next file .
9779	Try to load the application configuration file .
9780	Prints the welcome banner .
9781	Prints the stopped banner .
9782	Create a chameleon .
9783	Register a shutdown hook
9784	Triggers a success notification .
9785	Triggers a trigger .
9786	Inserts and replaces the given row .
9787	Returns the counts of the results .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInSection - gets
9830	setter for offsetInSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspect - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triples - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter forIsObjUri - gets
9846	setter forIsObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Find the index of the next clear bit .
9878	Sets the bit at the specified index .
9879	Frees a buffer .
9880	Returns a new instance of this cache value with the specified file name and file name .
9881	Rehash the array with a new size .
9882	method to format the HELM2Notation
9883	Checks if the brackets in the annotation section .
9884	Adds details from a string .
9885	Converts the HELM2 to a HELM2 format .
9886	Adds an element to the Notation
9887	The main method of the program .
9888	Checks if the given String is a valid polymer ID
9889	Checks the validity of the PolymerID in the connection section
9890	Check connection details .
9891	Checks if a string is a valid group ID
9892	Checks whether a string is repeating .
9893	method to check if a Polymer or rna Polymer is a peptide Polymer
9894	to json string
9895	Gets the simple polymer with the given ID
9896	Gets the current grouping .
9897	Output the HELM2 2 .
9898	method to convert all polymer to HELM2
9899	method to generate HELM2 notation
9900	Converts the groupings to HELM2 notation
9901	Convert annotation section to HELM2
9902	method to get a list of all polymer ids
9903	Gets the PolymerNotation with the given id
9904	method to set the polymer elements
9905	convert helm2 to helm2
9906	Sets an annotation .
9907	Sets number .
9908	get MonomerNotation
9909	method to decide if there is a MonomerNotation in the group
9910	Decide the HELM entity based on the string
9911	Gets the value of this interval
9912	Parse the HELM input from the input string .
9913	Sets the nucleotide containing all amino acids .
9914	Define the ambiguity .
9915	Returns the statistics for this worker thread .
9916	Creates an ADiGraph from a collection of edges .
9917	Creates an ADI graph from a collection of nodes and edges .
9918	Initializes internal paths internal structures .
9919	Returns a list of the nodes in the graph .
9920	Subscribe a pattern to a method .
9921	Get the subscribe_count of the given pattern .
9922	Remove a pattern from the receiver .
9923	Do a return operation .
9924	Write a return sync .
9925	Block until a message is received or the timeout expires .
9926	Shutdown the system .
9927	If the given throwable is non - local handling then throw an exception .
9928	Releases the run state
9929	Creates a new worker .
9930	Tries to add a worker .
9931	Registers a worker .
9932	Releases a worker from the pool .
9933	Tries to activate a work .
9934	Run a worker .
9935	Await work if possible .
9936	Returns the number of queued tasks .
9937	Returns common submitter queue .
9938	Performs a help completion .
9939	Submits a ForkJoinTask .
9940	Make a common pool .
9941	Atomically blocks and waits for the result to complete .
9942	Build a string from a statement .
9943	Returns the thread pool statistics .
9944	Creates a list from an array .
9945	Reverses a list .
9946	Applies a predicate to the given iterable .
9947	Folds the left value from the given iterable using the left value provided .
9948	Folds a left value from a list using a left value .
9949	Adds a task to the queue .
9950	Construct an option from a nullable .
9951	Create a new hash map from keys and values .
9952	Returns an empty list map .
9953	Static factory method to create an AListMap .
9954	Create an empty list map .
9955	Returns a copy of the map .
9956	Normalize resource name .
9957	Marshals the bound value .
9958	Returns a new CharSequence that is a substring of this string .
9959	Returns a binary search for the given element .
9960	Returns a binary search for the given element using the given comparator .
9961	Sends an email .
9962	Method to send an email .
9963	Bind a handler to a route .
9964	Bind a filter binding .
9965	Returns true if the tag has the specified role .
9966	Get int value .
9967	Remove duplicate Strings from an array .
9968	Returns a string that can be used as a percent encoded string
9969	Executes the task .
9970	Login user
9971	get login with user
9972	Retrieves the login user from the request .
9973	Checks if the given password matches the given salt .
9974	Saves the member in the cookie
9975	Generate a login key
9976	Retrieves a user - agent from a cookie .
9977	Forward to the handler .
9978	Append file separator if needed .
9979	Read a request parameter from a request .
9980	Send a debug message .
9981	Returns the caller information for the specified level .
9982	Converts a char array to a byte array .
9983	Converts a CharSequence to a byte array .
9984	Converts a byte array to a simple char array .
9985	Converts a CharSequence to an array of bytes .
9986	Lookup the locale data for the given code .
9987	Executes promise with given timeout
9988	Crops an image and returns the cropped image .
9989	Schedules an invocation .
9990	Invokes the given DirectInvocation .
9991	Gets the rest operations .
9992	Render the error .
9993	Render ajax forbidden message .
9994	Processes the given view and returns the template content .
9995	Parses the current action path and returns the path .
9996	Render the data tables .
9997	Render empty data tables .
9998	Sets the list of items .
9999	Sends the response to the browser .
10000	Returns all the bindings of the given type
10001	Returns the name of the current method .
10002	Compact memory .
10003	Propagate metrics to the global metrics collection .
10004	Encode a string .
10005	Gets the charset .
10006	Copies the data from the input stream to the output stream .
10007	Copy bytes from the input stream to the output stream .
10008	Copies the input stream to the output using default encoding .
10009	Copy the contents of a Reader to the given Writer .
10010	Copy characters from Reader to Writer .
10011	Copies the content of the given reader to the given output stream using default encoding .
10012	Copies the given reader to the given output stream using the specified encoding .
10013	Compare two input streams
10014	Compare two Reader objects
10015	Applies an IO to the output .
10016	Returns the SQL string for the given groupName and SQLId .
10017	Convert a string to an object of the given class .
10018	Unzip a zip file .
10019	Construct a PermissionDialogFragment object from the given bean .
10020	Enables or disables the dialog .
10021	Registers a core value type .
10022	Check if a value matches a regular expression
10023	Checks if a string is a mobile device .
10024	Check if the value is a phone number .
10025	Check if the string is a birth day .
10026	Checks if a string is a valid URL .
10027	Checks if the given string is a date time .
10028	Apply filters .
10029	Base64 encoded string .
10030	Decode base64 string to byte array .
10031	Converts a hex string to a byte array .
10032	Read properties from an input stream .
10033	Reads the content of an input stream and returns it as a String .
10034	Reads the content of the file into a String .
10035	Write binary data to a file .
10036	Copy directory .
10037	Serialize a XML document
10038	Get a Document from the given XML file .
10039	Get a Document from the given xml string .
10040	Get a Document from an input stream .
10041	Validate a digital signature .
10042	Sign a DOM document .
10043	Returns true if the given class is cache - safe .
10044	Check if the given class is an array of primitives .
10045	Check if the given class is an array of primitive wrappers .
10046	Resolve the given class if it is a primitive type .
10047	Checks if the left - hand side type is assignable to the right type .
10048	Checks if the given value is assignable to the given type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces implemented by the given instance .
10051	Write properties to temp file .
10052	Extract the variables from the URI .
10053	Add a permission .
10054	Creates a DruidPlugin
10055	Binds an extension to the specified extension point .
10056	Gets the builtin object for the given type .
10057	Returns the primitive value for the given primitive type .
10058	Convert an object to a type .
10059	Converts a user defined value to a user defined value type .
10060	Returns a query parameter from the request .
10061	Retrieves a cookie parameter .
10062	Create a session parameter .
10063	Initialize the data source .
10064	Sets shared variable .
10065	Sets a parameter to a specific condition .
10066	Sets the specified field to the given value .
10067	Display the permission dialog .
10068	Checks if all values are granted .
10069	Determine whether any value is denied .
10070	Find by SQL SELECT
10071	Find the first record matching the query
10072	Check if model is new .
10073	Returns true if the method declares a specific exception type .
10074	Remove garbage collected keys from the queue .
10075	Put a value into the cache .
10076	Matches a string with the given pattern .
10077	Read arguments .
10078	Gets protobuf entity .
10079	Returns true if the given class is a protobuf entity .
10080	Retrieves all protobuf attributes of a class .
10081	Returns a protobuf getter for the given field .
10082	Returns the pojo setter name for a field .
10083	Returns the object mapper .
10084	Gets the JsonFactory .
10085	Convert object to json string
10086	Set the borders .
10087	Retrieve a UserRecord from the database .
10088	Copy all the attributes from the target object to the target object .
10089	Copies all the attributes from the target object into the target object .
10090	Get a property .
10091	Set a property .
10092	Add this app to the frame
10093	Saves an access token .
10094	Gets access token .
10095	Returns the default ClassLoader .
10096	Returns the URL of a resource .
10097	Returns an InputStream for the named resource .
10098	Gets a stream of the specified class .
10099	Initialize all the fields from the given URI .
10100	Initialize the scheme from a URI string .
10101	Initialize the path from a string .
10102	Set the scheme name of the scheme .
10103	Set the userinfo value .
10104	Sets the host info .
10105	Sets the port .
10106	Append the path .
10107	Set the query string .
10108	Set the fragment .
10109	Get the URI part of this URI .
10110	Creates a prepared statement using the given iterator .
10111	Initialization method .
10112	Get the muffin from the file .
10113	Set the value of a Muffin .
10114	Returns the contents of the clipboard
10115	Set the clipboard contents .
10116	Open a file stream to the user .
10117	Load services by type .
10118	Sets the service parameters .
10119	Get service parameters from an operation .
10120	Find parametrized service by id .
10121	Find by service class
10122	Parse query response .
10123	Returns an iterator over the elements in this buffer .
10124	get encoding value from xml string
10125	Returns the parent logger .
10126	Creates a new connection instance .
10127	Retrieves the authorization code for the given URL
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit an ExecutableDeclaration .
10131	Get configuration option value .
10132	Returns a filter that accepts all the specified modifiers .
10133	Returns a filter that matches the specified declaration .
10134	Returns a combined filter that matches the two arguments .
10135	Returns a new DeclarationFilter that accepts the two arguments .
10136	Returns the map as a Map .
10137	Make the given constructor accessible .
10138	Prepare an object query for the given object .
10139	Replaces a slash with a single slash .
10140	Convert a byte array to a hex string .
10141	Gets the indexes .
10142	Parse a SQL statement .
10143	Convert collection to protobuf
10144	Set the field value .
10145	Sets the field value .
10146	Is this file?
10147	Creates a new ResultSet instance .
10148	Map a list of state labels to a map of expected state labels .
10149	Extract the values from the Values
10150	Returns the generic supertype of the given type .
10151	Poll for connections .
10152	Poll all the polled objects .
10153	Gets the declared field .
10154	Get the declared methods of a class .
10155	Returns the method with the specified name recursively .
10156	Returns all declared methods of the specified class .
10157	Gets all constructors with the specified annotation .
10158	Dumps a byte to stdout .
10159	Returns the index of the first occurrence of the specified substring within the specified string .
10160	Removes all chars from a String
10161	Cleans up the state .
10162	Initialize audit object .
10163	Initialize the message queue .
10164	Initialize the password validator class .
10165	Initialize the password authenticator class .
10166	Resolves the locale code for the given locale .
10167	Lookup a locale by code .
10168	Creates a new Statement .
10169	Removes all elements from the array .
10170	Add an element to the stack .
10171	Removes the first element from the stack .
10172	Make an input stream .
10173	Parse arguments .
10174	Checks if tokens match the given patterns .
10175	Move the coordinates by xof .
10176	Returns whether this rectangle encloses this rectangle .
10177	Check if a point is contained in the given region
10178	Returns the intersection between this rectangle and the other rectangle .
10179	Returns the union of two rectangles
10180	Replaces the x component of this rectangle with the x - axis .
10181	Returns a copy of this rectangle with the y - axis .
10182	Gets the column of a given column
10183	Gets the total number of rows in a row
10184	Get the cell bounds relative to the given coordinates .
10185	Calculates the columns of the area .
10186	Calculates the number of rows .
10187	Unwraps a Throwable .
10188	Main entry point .
10189	Called when a byte buffer is updated .
10190	Copies the code buffer to the given byte buffer .
10191	Render the given list of WAM instructions .
10192	Initializes the application context .
10193	Returns a copy of this query parameter .
10194	Adds a child to this node .
10195	Clears all children and sets them to null .
10196	Returns the next solution .
10197	Add instructions .
10198	Adds the list of instructions to the parent .
10199	Called when a property changes .
10200	Registers a work panel .
10201	Update the component flags .
10202	Creates a new instance of BigDecimalType .
10203	Evaluates the given term .
10204	Optimize instructions .
10205	Compares two collections .
10206	Process the request .
10207	Render the start tag .
10208	Renders a button .
10209	Resets the initial state .
10210	Initialize the training data set .
10211	Returns the value associated with the given key .
10212	Returns the index of the given key in the map .
10213	Sets the value at the given index .
10214	Removes a value from the map .
10215	Removes the value at the given index .
10216	Returns true if the property exists for the given property .
10217	Sets a property on the specified callee .
10218	Fetches the value of the specified property .
10219	Checks if a primitive type is assignable from a primitive type .
10220	Initialize the property setters .
10221	Returns the decision tree for the given state .
10222	Initialize all matching decision trees for this node .
10223	unify all non - anonymous variables in the query .
10224	Unify left and right .
10225	Unify a variable .
10226	Compile a query .
10227	Find the maximum arguments in a clause .
10228	Allocate local variable registers .
10229	Gather position and occurrence information .
10230	Pretty prints the given predicate .
10231	Pretty print the given query .
10232	Puts a 32 - bit integer into the given buffer at the end of the given length .
10233	Convert a buffer to a string .
10234	Returns the string value for this attribute .
10235	Sets the string value of the attribute .
10236	Reads a term .
10237	Determines if the specified class exists .
10238	Checks if a class is a subtype of a given parent class .
10239	Checks if parent is a subtype of given parent class .
10240	Checks if the given class is a subtype of the given parent class .
10241	Returns the class object for the given name .
10242	Create a new instance of the given class .
10243	Create a new instance of the given constructor with the given arguments .
10244	Calls the given method on the given object with the given parameters .
10245	Calls a method on the given object with the given parameters .
10246	Call a static method .
10247	Returns a constructor for the given arguments .
10248	Finds a setter method which implements the given property .
10249	Create a new transactional queue
10250	Create a new transactional requeue
10251	Gets the type of an object .
10252	Reset the iterator .
10253	Returns the current algorithm state .
10254	Creates a new type instance .
10255	Add a supported time zone name .
10256	Add a time zone alternate name .
10257	Adds a dimension table to the database .
10258	Finds free variables in a query .
10259	Finds free variables in a query .
10260	Compares two search nodes .
10261	Writes the given object to the given file .
10262	Reads the contents of a stream as a String .
10263	Creates a new search node .
10264	Generates the trace indentation of a line .
10265	Allocate argument registers for the functor .
10266	Returns true if the last body in the argument is the last argument .
10267	Computes the highest classification for a given property .
10268	Determines whether all examples in the given list of examples have the same attribute .
10269	Determines the best value of the output property which can be determined by the output property .
10270	Creates a functor with the specified name and arguments .
10271	Returns a new variable .
10272	Executes the action with an error handling .
10273	Gets the list at the specified index .
10274	Set the texture .
10275	Paint a double buffered image .
10276	Create a buffered image
10277	Creates a Graphics2D
10278	Creates a buffered image for the image
10279	Creates a GISurface image .
10280	Sets the queue search algorithm .
10281	Performs a depth - first search .
10282	Performs a search on the given queue starting at the given start state .
10283	Test program .
10284	Gets the clause .
10285	Reads a list of terms from the current token .
10286	Reads a Functor .
10287	Parses a list of arguments .
10288	Returns the argument list as an array of arguments
10289	Reads a variable .
10290	Reads an integer literal .
10291	Parses a floating point literal .
10292	Reads a string literal .
10293	Peek and consume a directive .
10294	Interns an operator .
10295	Initializes the accessor operator table .
10296	Consumes the next token from the token source .
10297	peek ahead and consume the next token
10298	Binds this transaction to the current thread .
10299	Rollback all resources .
10300	Collect the elements from an iterator into the target collection .
10301	Reserves a call point .
10302	Converts the given time to milliseconds .
10303	Converts a number of ticks to a number of years .
10304	Convert ticks to hours
10305	Convert ticks to ticks
10306	Convert ticks to seconds
10307	Returns the number of ticks with the given year set to the given year .
10308	Returns the number of ticks in the given month in the given month .
10309	Add ticks to a given date
10310	Returns the number of milliseconds since the given year .
10311	Returns month of year .
10312	Read bytes from the source stream .
10313	Applies the given entry to the entry and returns the sequence number .
10314	Returns the entry for the given key .
10315	Places an entry into the hash table .
10316	Rehashes the table .
10317	Handle an action .
10318	Sets the next available state .
10319	Sets the preference s value .
10320	Sets the finished state of this property .
10321	Returns an instance of the native library .
10322	Returns an iterator over all variables in this set .
10323	Calculate the i - th value of the expected value .
10324	Returns an array of probability for the given counts .
10325	Sets the clock ticks .
10326	Performs the actual action .
10327	Constructs a URL from a string .
10328	Returns information about the current request .
10329	Returns all the headers in the page context .
10330	Retrieves the current cookies
10331	Returns a list of request parameters .
10332	Returns information about the request scope .
10333	Retrieves information about a page scope .
10334	Returns information about the session scope
10335	Returns information about application scope .
10336	Returns the user principal .
10337	Writes the debug tag .
10338	To HTML table
10339	Performs a search on the given queue starting at the given start state .
10340	Set the current screen state .
10341	Walk the given term .
10342	Compares two search nodes .
10343	Updates the registered registers .
10344	Notifies all registered listeners of a property change event .
10345	Removes the contents of a clause .
10346	Returns true if the context is inside a top level function .
10347	Copies the specified array into an array .
10348	Sets the arguments for this operator .
10349	Returns the fixity for this axis .
10350	Checks if is infix .
10351	Compares two Op symbols .
10352	Handle a property change event
10353	Register a work flow controller .
10354	Gets an enum attribute factory for the specified class .
10355	Create a component factory using the given class name .
10356	Returns the storage cell for this variable .
10357	Returns true if this variable is currently bound .
10358	Sets the attribute of the specified column .
10359	Set the row attribute of a row .
10360	Returns the attribute set for a given column
10361	Gets the row attribute of a given row .
10362	Internal insert method .
10363	Creates a named type .
10364	Creates a new type .
10365	Determine whether the value is an instance of the given value .
10366	Creates the initial context .
10367	Updates all registered registers .
10368	Returns the name of this expression group
10369	Search for the next goal node .
10370	Joins the given search nodes using the given forward path and reverse path .
10371	Cache a single block .
10372	Get the properties for a named resource .
10373	Sets the rate for this rate .
10374	Reads data from the source .
10375	Skips the specified number of bytes .
10376	Gather the expressions in the given disjunction .
10377	Read an int from the byte array at the given offset
10378	Writes an int to the byte array at the given offset .
10379	Write a 24 - bit integer to a byte array .
10380	Reads a 24 bit integer from the byte array at the given offset .
10381	Parses a short from the given byte array at the given offset .
10382	Writes a short to the given byte array at the given offset .
10383	Returns a new TreeSearchState instance for the given operator .
10384	Returns an iterator over all operators in the tree .
10385	Returns the id of the attribute .
10386	Returns the value of this attribute .
10387	Sets the value of the attribute .
10388	Converts a list of strings to an array of strings .
10389	Converts an array of strings to a list of strings .
10390	Converts a name into a camel - case name .
10391	Convert a string representation of a case .
10392	Return the current configuration
10393	List the handlers .
10394	Resolve a named call point .
10395	Sets the code point at the given address .
10396	Returns true if this attribute is a sub category of this one .
10397	Returns the id of this category attribute .
10398	Returns the value at the specified level .
10399	Get last value .
10400	Serialize an object .
10401	Deserialize an object from an input stream .
10402	Computes the manhattan distance from the current board .
10403	Performs a modulo operation .
10404	adds an error message
10405	Process the given exception .
10406	Writes the given string to the output .
10407	Classify the given state .
10408	Compares two comparable objects .
10409	Returns an iterator over the elements in this ArrayList .
10410	Returns the log base256 of an integer value .
10411	Calculate the log base 32 for a given value .
10412	Calculate the log10 version of a given value .
10413	Calculate the log10 version of the given value
10414	Calculate the log base10 value for a long value .
10415	Calculate the log10 value for the given value
10416	Returns the number of characters required to represent an int .
10417	Returns the number of characters required to encode a long value .
10418	Returns the character count for a given integer value and scale .
10419	Set the head of the WAM .
10420	Emits the code to the given byte buffer .
10421	Sets the current work flow state .
10422	Evaluates whether or not the given candidate is valid .
10423	Get the value of a property .
10424	Returns a list of properties for the specified key .
10425	Returns an iterator over the elements in the given base and modifier .
10426	Create array properties .
10427	Sets the throttle rate .
10428	Evaluates the given numeric type .
10429	Load properties .
10430	Gets the properties using the system property .
10431	Gets the properties using the classpath .
10432	Gets the properties using the CWD .
10433	Leave a functor .
10434	Returns the value of this term .
10435	Sets the substitution .
10436	Create a priority queue .
10437	Clean up the connector .
10438	Appends an event to the socket .
10439	Fire a connector thread .
10440	Initialize the printers .
10441	Commits the transaction .
10442	Rolls changes to the current transaction .
10443	Requests a write operation to this transaction .
10444	Adds a cached write operation .
10445	Acquires the global write lock .
10446	Releases the global write lock .
10447	Enlist this resource with the current session .
10448	Enter a rule set into the rule set .
10449	Inserts the specified element at the tail of this queue waiting if necessary to become available .
10450	Retrieves and removes the element from the queue waiting for the specified time up to the specified wait time for it to arrive .
10451	Put an element into the queue waiting if necessary .
10452	Inserts an element into the buffer .
10453	Returns the next element in the stream .
10454	Get the value of a property as a boolean .
10455	Get a property as Integer .
10456	Get the value of a property as a Long .
10457	Calls a mixin .
10458	AdditionVisitorVisitorVisitor .
10459	Backtracking the given check node .
10460	Retrieve the byte code from the given WAM call point .
10461	Execute the given query and extract bindings .
10462	Decodes an argument from the heap .
10463	Capture the memento for the current class .
10464	Restore all values from the cache .
10465	Retrieves the value of a field .
10466	Put an attribute into the map .
10467	Returns all the field names for a given class .
10468	Execute the mojo .
10469	Offer an element to the queue .
10470	Retrieves and removes an element from the list .
10471	Create a search node .
10472	Create a queue of search nodes .
10473	Creates a simple walker .
10474	Creates a new goalWalker for a unary predicate .
10475	Creates a new term walker .
10476	Iterates through a unary predicate .
10477	Creates a new PostfixWalker for the given position visitor .
10478	Loads properties from an input stream .
10479	Loads properties from a file .
10480	Loads a properties file from a URL .
10481	Loads properties from a file path .
10482	Computes the size of the grid .
10483	Initialize font metrics .
10484	Add a PropertyChangeListener
10485	Adds a PropertyChangeListener to the Listener .
10486	Removes a property change listener .
10487	Fires a PropertyChangeEvent to all registered listeners .
10488	Creates a named type .
10489	Performs a fade on the specified group .
10490	Shows horizontal vertical bar .
10491	Shows the left vertical vertical bar .
10492	Shows right vertical vertical bar .
10493	Sanitize radio controls .
10494	Waits for the specified thread to become available .
10495	Waits for the specified amount of time to become available .
10496	Execute the mojo .
10497	Appends the classpath to the command line .
10498	Creates a new type instance .
10499	Prints the introduction information .
10500	Initialize command line reader .
10501	Evaluates the query .
10502	Evaluates the query .
10503	Converts a boolean value to a MultiTypeData object .
10504	Converts a byte value to a MultiTypeData object .
10505	Converts a character to a MultiTypeData object .
10506	Converts a short String into a MultiTypeData object .
10507	Converts an integer value to a numeric type data .
10508	Converts a long value to a MultiTypeData object .
10509	Converts a float value to a MultiTypeData object .
10510	Converts a double value to a MultiTypeData object .
10511	Creates a MultiTypeData object from a string representation .
10512	Converts an object to a MultiTypeData object .
10513	Convert the value to the requested type
10514	Put an attribute in the page context .
10515	Clears all entries up to the specified key .
10516	Expands the key with the given key .
10517	Internal insert .
10518	Compares two search nodes .
10519	Parses the given terms .
10520	Returns the operators with the given prefix .
10521	Checks if the candidate operator with the given fixities exists .
10522	Make a new search node .
10523	Right pad a string to a given size
10524	Get the string representation of the parsing errors .
10525	Gets the options in force .
10526	Prints the usage for the command line .
10527	Adds trailing properties to a Properties object .
10528	Adds options to a Properties object .
10529	Adds an option to the map .
10530	Takes a list of free arguments and converts them to a property .
10531	Checks the format of an argument .
10532	Compares two iterators using the provided mapping function .
10533	List options .
10534	Returns the command line options .
10535	Set the stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of a word .
10538	Test program .
10539	Creates a named float range type .
10540	Resets the internal state of this class .
10541	Trace environment frame .
10542	Trace the choice frame
10543	Call a function .
10544	Compute the next stack frame
10545	Backtrack the program
10546	Add a trail .
10547	Uninds a trail .
10548	Tidy up the next choice point .
10549	unify two instructions
10550	unify constant .
10551	Prints a single slot .
10552	Generate a new random start state object .
10553	Checks if the current puzzle state is solvable .
10554	Gets the child state for the given operator using the given operator .
10555	Returns an iterator over all of the operators in the reverse order .
10556	Pretty print the board .
10557	Swaps the tile at the specified location in the correct location .
10558	Swaps two tiles at the same location
10559	Convert a string to a character list .
10560	Creates an empty state from the given character list .
10561	Converts a log record into a log message .
10562	Convert a Log4j Level to a log4j .
10563	Add an element to the queue .
10564	Queues an element to be queued .
10565	Increments the size of a record .
10566	Decreases the size of a record .
10567	If oldSize threshold equals newSize threshold .
10568	Returns a list of all keys in the context .
10569	Returns a list of all bindings for the given name .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Run the garbage collection .
10573	minimal
10574	Resolves a mixin reference .
10575	Push a variable reference .
10576	Sets the maximum row height for a given row .
10577	Update the maximum width of a column
10578	Executes the action with an error handling .
10579	Make a new heuristic node for the given successor .
10580	Executes the given ActionForward and returns the corresponding ActionForward .
10581	Substitutes the built - in expression for a builtin transformation .
10582	Initialise the symbol table .
10583	Perform top level check .
10584	Returns a string representation of the list of arguments .
10585	Evaluates whether two numbers evaluate to true .
10586	Changes the state machine .
10587	Invoked when the server is terminating .
10588	Signal that the cluster is shutdown .
10589	Inserts a new data element into the heap .
10590	Cancels a power of n .
10591	Update the minimum node .
10592	Compares two nodes .
10593	Inserts a new node into the root list .
10594	Restart the cache .
10595	Find all elements matching the search method .
10596	Returns all elements of the search method .
10597	Find all solutions .
10598	Returns the next element in the sequence .
10599	Restores the values from an object .
10600	Retrieves a property value .
10601	Put a multi typed data value .
10602	Associates the specified value with the specified property .
10603	Capture the memento for a property .
10604	Removes the element from the queue .
10605	Convert the modifiers to a string .
10606	Parses a string to an integer .
10607	Parses a string to a date .
10608	Determines whether a string represents a date .
10609	Determines if a string represents a time .
10610	Determines if a string is a valid date time .
10611	Creates a TokenSource for the given string .
10612	Returns a token source for the given file .
10613	Get a token source for the given input stream .
10614	Determine whether or not the given instruction is constant .
10615	Determine whether an instruction is void .
10616	Returns true if the given instruction is a non - argument .
10617	Returns the children of this statement .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children of this function .
10620	Returns a string representation of the arguments
10621	Retrieve a summary .
10622	Retrieves the records for a given query parameter .
10623	Executes a query .
10624	Emits code to the given buffer .
10625	Set the basic types for a class
10626	Called by the reader .
10627	Prints a variable binding
10628	Expand a set of solutions to a map of variables .
10629	Process the stream .
10630	Process the incoming stream .
10631	Returns the current time .
10632	Calculates the current time for the current timestamp .
10633	Update the track info .
10634	Updates the status of the playlist .
10635	Handles the final output .
10636	Handles a resource request .
10637	Handles an event request .
10638	Fire start music request .
10639	Initialize the parser .
10640	Start the reader thread .
10641	Shuts down the connection .
10642	Resets the parser .
10643	Parses packet packets .
10644	Process a packet .
10645	Sets the option .
10646	Creates a new chat with the specified user .
10647	Internal initialize method .
10648	Resets this object to a new state .
10649	Sets a property for the given key .
10650	Adds a filter to the filters array .
10651	Process the request .
10652	Resets all stored properties .
10653	Initialize the SMack PacketWriter .
10654	Send a packet to the queue .
10655	Returns the next packet .
10656	Open stream .
10657	Returns a list of all information in the descriptor .
10658	Returns true if the descriptor contains the given descriptor .
10659	Registers an event lifecycle callback .
10660	Shuts down the background thread .
10661	Compares two files content for equality .
10662	Removes the ByteBuffer from the ByteBuffer .
10663	Returns true if the entry is valid .
10664	Mask null .
10665	Compares two objects .
10666	Returns the entry associated with the specified key .
10667	Resizes the map to a new capacity .
10668	Inserts all of the mappings in the specified map into this map .
10669	Removes the value associated with the specified key .
10670	Removes an entry for the specified key .
10671	remove a mapping from the map
10672	Adds an entry to the hash table .
10673	Creates delegate map .
10674	Encode special characters in XML format .
10675	Convert a byte array to a hex string .
10676	Encodes the given string using ISO - 8859 - 1 .
10677	Base64 encoding .
10678	Iterate over the collection .
10679	Sets the controller to select the track selector .
10680	Set the controller to use when jumping to the jump progress .
10681	Set playback controller .
10682	Set a controller to change volume .
10683	Broadcast the availability of a playlist .
10684	Handles command resources .
10685	Handle a volume .
10686	Handle a jump .
10687	Handles a select track .
10688	Get thread cache by name .
10689	Get request cache .
10690	Returns the alternative field name for the given field .
10691	Returns a new Map based on the include and exclude properties .
10692	Returns the shard path for a given id .
10693	Adapts an object to a SessionAdaptable .
10694	Invoke a method on a target object .
10695	Deletes the contents of a path .
10696	Update a Persisted Entity .
10697	Sets the ping interval .
10698	Schedules the ping task .
10699	Add multiple options .
10700	Checks if the given option is in use .
10701	Parse the command line arguments .
10702	Prints usage information for the given application .
10703	Parse the command line arguments .
10704	Initializes the connection to the server .
10705	Start the handshake .
10706	Returns the compression handler for the given compression method .
10707	Request stream compression .
10708	Start the stream compression .
10709	Notifies the connection that an error occurs .
10710	Notifies all connection listeners that the connection has been successful .
10711	Register a SASLMechanism .
10712	Returns the list of supported SASLMechanism .
10713	Gets the outputPlugin behavior .
10714	Logs an info message and exception with an exception .
10715	Error logging with exception .
10716	Logs a message and stack trace .
10717	Create a start event .
10718	Create a start event .
10719	Notify the listeners of a string .
10720	Determines whether the resource provides a resource with the given ID .
10721	Returns true if the given source ID contains all resources of the given source ID .
10722	Determines whether or not the given resources have one of the given IDs .
10723	Provides a list of ResourceModel objects with the given IDs .
10724	Get the cached Map .
10725	Returns the cache key .
10726	Removes a key from the cache .
10727	Put item in cache .
10728	Returns a copy of the CF locations map
10729	Includes the given file .
10730	Adds a jar file to the location map .
10731	Adds a SASL mech .
10732	Adds a set of SASL mechs to the server .
10733	Creates and sets up debugging threads .
10734	Activate the safe post processor .
10735	Register standard events .
10736	Registers an event listener with its descriptor and descriptor .
10737	Registers an event ID .
10738	Do a write with lock .
10739	Unregisters an event ID .
10740	Check whether we can run a wishlist
10741	Connect to a DSE .
10742	Create a player error message .
10743	Start playing music .
10744	Stop playing music
10745	Adds a player command to the player .
10746	Create a playlist .
10747	Create a broadcast playlist .
10748	Appends parts to the URL .
10749	Add a query parameter to the URL .
10750	Add a query parameter to the URL .
10751	Adds a query parameter to the URL .
10752	Adds a query parameter to this URL .
10753	Gets a playlist from an event model .
10754	Launch the Nakamura action .
10755	Waits for the startup to finish .
10756	check if url exists
10757	Handle a browser button action .
10758	Creates an ImageIcon for the given path and description .
10759	Main entry point
10760	Returns a copy of this IntArray with the specified values .
10761	Exports information about this object .
10762	Get the value at the given index .
10763	Get a property as a JSON object
10764	Get an integer value .
10765	Get a double value .
10766	Get a string representation of the value
10767	Create a command resource .
10768	Verifies that the given command is valid .
10769	Verifies that the capabilities are supported .
10770	Verify a command .
10771	Execute a batch of statements asynchronously .
10772	Get all subclasses of a class
10773	Get all subclasses of a class .
10774	Search for classes in the given location .
10775	Searches the directory for classes within the given directory and returns the results .
10776	Searches all classes in the given location .
10777	Creates a list of Resource objects that represent this resource .
10778	Returns the number of keys in all maps .
10779	Processes a packet .
10780	Gets a volume .
10781	Error response .
10782	Create an error response .
10783	Checks if an event is a target .
10784	Sets whether or not the login period is enabled .
10785	Decorates a Set .
10786	Sets the name of this friend .
10787	Updates the state .
10788	Returns the groups that this entry belongs to .
10789	Appends RSM element to a query element .
10790	Parse RSM element .
10791	Filters an RSM response .
10792	Create a leave event .
10793	Reload roster .
10794	Creates a roster entry .
10795	Returns a collection of all entries in the roster .
10796	Get the presence information for a resource .
10797	Sets the unavailable presence notifications .
10798	Fire roster changed event .
10799	Set the digest value .
10800	Use this method to create a resource .
10801	Helper method to create a player request for a player .
10802	Gets time step .
10803	Register a listener for updates .
10804	Initialize the Properties File
10805	Reload the properties
10806	Parse stream error element .
10807	Parse the mechanism s list of mechanisms .
10808	Parse the list of compression methods of a compression element .
10809	Parses a PacketExtension object .
10810	Decodes a string value .
10811	Verifies whether the event is valid
10812	Extracts the playback state from a resource .
10813	Find the secret key to connect to the given subdomain .
10814	Check if a subdomain is allowed .
10815	Sets the value to write .
10816	Returns a copy of the key set .
10817	Returns a collection of values for this map .
10818	Removes all entries from the map .
10819	Returns a HashEntry for the specified key .
10820	Compute the hashCode for the given key and value pair .
10821	Create a new hash entry .
10822	Control events .
10823	Sets if present .
10824	Updates the mostague resource .
10825	Delivers a message to all registered listeners .
10826	Generate a script .
10827	Initializes the output directory
10828	Load properties file .
10829	write a file to a file
10830	Gets the progress .
10831	Decorates a Collection .
10832	Creates a collection of service resolver .
10833	Gets the config .
10834	Gets the thread pool .
10835	Create stop music .
10836	Checks if the event model contains the target player
10837	Retrieves a specific cluster identifier .
10838	Adds a connection listener .
10839	Adds a packet listener .
10840	Adds a packet sent listener .
10841	Notifies all registered listeners of a packet .
10842	Adds a new packet interceptor .
10843	Fire the interceptors for a Packet .
10844	Converts a property name to an object instance .
10845	Called when a connection is lost .
10846	Returns the current thread id .
10847	returns true if the node is valid
10848	Returns the key associated with the given value .
10849	Returns the value associated with the specified index .
10850	Returns the nearest node in the data at index .
10851	Finds a node for the given data and index .
10852	Compares two objects according to their status .
10853	Returns the least node at the given index
10854	Returns the node at the given index
10855	Returns the next node after the given index .
10856	Returns the most valid node for the given node .
10857	Returns the least valid node for the given node
10858	Copies a value from one to another .
10859	Determines if a value is red .
10860	Determines if the specified index is blacklisted .
10861	Returns the grand parent of the given node .
10862	Returns the parent of the given node .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate the left node at the specified index .
10866	Rotate the right .
10867	Insert a node at a specific index .
10868	Performs a red - delete .
10869	Ensures that the object is not null .
10870	Inserts a new value into the tree .
10871	Returns true if the specified key exists in the current thread .
10872	Checks if a value contains a value .
10873	Returns the value associated with the given key .
10874	Removes the value associated with the specified key .
10875	Removes all keys from the map
10876	Returns the set of keys contained in this tree .
10877	Returns a collection of all the values in this TreeMap .
10878	returns a filtered set of entries
10879	Copies all entries in the given map to the new map .
10880	Removes expired entries from the cache .
10881	Removes all entries from the cache .
10882	Activate the instance .
10883	Returns a player request for a specific playlist .
10884	Creates a new roster store .
10885	Opens a roster store .
10886	Scans a range of IP addresses for a given address .
10887	Returns an InetAddress for the given subnet address .
10888	Export the information to a HashMap .
10889	Import the track information from the hash map .
10890	Add all application applications .
10891	execute an application
10892	Prints out the list .
10893	Prints usage information .
10894	Main entry point .
10895	Create a MuteEvent
10896	Create a MuteEvent
10897	Get a Goodlist schema by name
10898	Write to a file
10899	Returns true if the script is in the manifest .
10900	Add an application option .
10901	Return all the fields of the thrift .
10902	Gets a field by its name .
10903	Returns the package name of a jar entry .
10904	Map content to values .
10905	create an event listener
10906	Set the current state of this iterator
10907	Perform an iterator operation .
10908	Perform an iteration on the iterator .
10909	Gets the track info from an event model .
10910	Exports the data .
10911	Imports a resource .
10912	Create a buffered image that contains an error
10913	Get image from url
10914	Issues HTTP GET request .
10915	Reverses the source map in reverse order .
10916	Replies the multiplication of this cartesian product .
10917	Start the container .
10918	Return object to pool .
10919	Create ended event .
10920	Get the current track information .
10921	Updates a new track .
10922	Shuffles a shuffle .
10923	Verifies whether the given capabilities are supported .
10924	Exports the queue .
10925	Escape a string for use in XML .
10926	Send a challenge to the server .
10927	Converts this object to JSON .
10928	Runs the process .
10929	Handles event .
10930	Join all queues .
10931	Sets a custom property .
10932	Removes a property .
10933	Adds a principal .
10934	Removes a principal .
10935	Called when the root window is closing .
10936	Called when the user has received a response .
10937	Invoked when presence is present .
10938	Checks if the resource is permanent .
10939	Sets the group name .
10940	Returns true if the map contains the specified key .
10941	Returns true if the map contains the given value .
10942	Associates the specified value with the specified key in this map .
10943	Clears all entries in this hash table .
10944	Calculate a hash for a key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Ensures that there is at least the specified capacity .
10948	Calculate new capacity .
10949	Creates an iterator over the entries in this map .
10950	Load a row from a JSON stream
10951	Register the ModuleModels
10952	Initialize the AddOn
10953	Notifies all connection listeners that a connection failed .
10954	Notifies the listeners that a connection has failed .
