0	helper method to perform a fast path
1	Wrap an observable source .
2	Returns an Observable of the elements in the list sorted by the given function .
3	Observes a ConnectableObservableObserver with the given scheduler .
4	Create a new unicast processor with the given capacity .
5	Create a new UnicastProcessor .
6	Try to try to subscribe to supplier
7	Creates a flowable that results in a scalar value .
8	Resets all variables to their default values .
9	Creates a Maybe from a CompletableSource .
10	Construct a Maybe from Single .
11	Retries the Maybe and returns the result .
12	Validates object .
13	Returns the identity function .
14	Convenience wrapper for primitive types .
15	Returns a function
16	Returns a function that casts to the target type .
17	Creates a new unicast subject .
18	Create a new uncast subject with the given capacity .
19	Create a new unicast subject with the given capacity .
20	Create a new unicast subject with the given delay and delay .
21	Waits for an error and returns the error .
22	Waits for the current call to complete and returns the result .
23	Waits for the queue to be waiting for the given amount of time .
24	Iterates over a queue and waits until a maximum value is reached .
25	Sends a request to the given subscription and prefetch the given amount .
26	Post a post complete event .
27	Completes the current value and returns the result .
28	get the value
29	Get the value of the notification .
30	Validates that the Disposable object is disposed .
31	Atomically updates the upstream with the next reference .
32	Validates the next subscription .
33	Atomically sets the upstream subscription to the upstream .
34	Add to long .
35	Multiply a value by b
36	Atomically adds the requested value to the current AtomicLong if necessary .
37	Converts a Throwable to a NullPointerException exception .
38	Adds an object to the end of the list .
39	Shutdown the program .
40	Creates a scheduled executor service .
41	Sets the subscription .
42	Loops through the queue
43	Wraps the given Throwable if it is a RuntimeException .
44	Flatten a Throwable into a list of exceptions
45	Throws an exception if the given exception is a throwable .
46	Clears all resources
47	Returns the number of resources in this group .
48	Try to try to subscribe to an observable source
49	Creates an Observable that results in a scalar value using the provided mapping function .
50	Accepts a subscriber .
51	Accept observer .
52	Start the queue .
53	Start unbounded queue
54	Offers an item to the queue .
55	Returns the disposed resource .
56	Completes the future .
57	Handles an error .
58	Completes the task .
59	Concatenates a map with the given mapping function .
60	Concatenates the given map using the given mapping function .
61	Return a stream of the elements in the list sorted by the given function .
62	Waits for the consumer to arrive .
63	Convenience method to handle n events .
64	Add the subscriber to the list of subscribers
65	Removes a publishDisposable from the PubDispatcher .
66	Observes a Connectable flowable with the given scheduler and scheduler
67	Parses annotations on the method .
68	Sets the delay in milliseconds .
69	Creates the error response .
70	Calculate delay delay
71	Create sample data .
72	Returns the HttpMethod object for the given method string .
73	Searches for the given username .
74	Helper method to encode a password .
75	Returns true if the given password matches the given password .
76	Checks to see if the Spring Security Core is installed on the system .
77	Returns the disabled checks .
78	Returns the Spring security version from the jar .
79	Register an attribute exchange configurer .
80	Returns an OAuth2 client configurer .
81	Get an OAuth2 resource server .
82	Creates a channel request that requires authentication .
83	Compare the specified LDAP attribute with the specified value .
84	Retrieve an entry by its attributes .
85	Search for single attribute values .
86	Searches the LDAP filter for multiple attributes .
87	Searches for a single entry in the context .
88	Builds the search controls .
89	Performs the lookup of the primary keys .
90	Build the web authentication details object .
91	Creates the embedded server definition .
92	Create servlet api filter .
93	Creates the Jaas API filter .
94	Whitelisted type resolution
95	Insert a spring security filter chain into the web application context .
96	Returns the token for the given series id .
97	Gets the granted authorities for the specified attributes .
98	Creates a new cipher with the given algorithm name .
99	Invoked after the authentication manager has been set .
100	Handle authentication .
101	Check if the current authentication has changed .
102	Performs the actual authentication .
103	Check the content length .
104	Converts a collection of authorities to a set of authorities .
105	Sets the URL to use for login processing .
106	Update authentication defaults .
107	Update access defaults .
108	Map a password value to a string .
109	Extract remember - me cookie from request .
110	Encodes the given array of Cookie tokens .
111	Sets the cookie .
112	Resolve an argument .
113	Returns the original query string from the given artifact pattern
114	Returns the CAS service port .
115	Gets the principal .
116	Log out the session .
117	Authenticates the given Authentication .
118	Helper method to build the provider URL .
119	Sets the context environment properties .
120	Returns the full URL .
121	Render the end of the tag .
122	Creates the users .
123	Gets the UserDetailsService .
124	Adds the required parameters to the request .
125	Returns true if the service needs authentication .
126	Requires authentication .
127	Returns true if the service ticket was authenticated .
128	Returns whether the current authentication is authenticated .
129	Helper method to determine whether the request should be proxied .
130	Creates a method security expression root .
131	Retrieve JWK set .
132	Url encode a string .
133	Returns a collection of granted authorities .
134	Load user by assertion .
135	Returns the pre - authenticated principal .
136	Concatenate two arrays .
137	Returns a portion of a byte array .
138	Get the list of granted authorities for the specified attributes .
139	Pre - processes the map for granted authorities .
140	Gets the granted authority .
141	Adds the specified value to the specified collection .
142	Retrieves the J2EE principal from the servlet request .
143	Returns a shared object .
144	Build the redirect URL for the given request .
145	Intercept method invocation .
146	Helper method to validate the given string .
147	Helper method to convert a list of roles to a String array
148	Processes the auto - login token from the token store .
149	Called when the login is successful .
150	Attempts to switch to the given user .
151	Attempt to switch to the source user
152	Sets the exit user URL .
153	Display the public index .
154	Apply spring security filter chain
155	Decode the given token .
156	Check to authorize this request
157	Check if authorization is allowed to access the url .
158	Converts the given JWT into a collection of granted authorities .
159	Generate a CsrF token .
160	Display admin page for a contact .
161	Display the add permission for a contact .
162	Handles addPermission
163	Deletes a permission .
164	Returns the role based on the default role prefix .
165	Creates a new UserDetailsResourceFactory bean from a string .
166	Returns the values of the specified attribute .
167	Returns the first attribute value for the given name .
168	Encodes a string .
169	Decode a byte array .
170	Look up the parameter names of the given object .
171	Handles adding new contact
172	Returns the attributes specified in the target class .
173	Adds a security method to the registry .
174	Get all config attributes
175	Checks if the mapped method is a match .
176	Configures any any existing request in the chain .
177	Handle the bind exception .
178	Returns a random contact
179	Clears authentication exceptions .
180	Gets a field by its name .
181	Construct service URL .
182	Creates the redirect URL .
183	Extracts the SHA prefix from the input string .
184	Handles an access denied request .
185	Checks the stack for pending filters .
186	Return the registered types .
187	Returns the cause of the given throwable .
188	Register access manager
189	Convert a collection of user authorities to a set .
190	Compares two byte arrays .
191	Sets the default failure URL .
192	Sets the map s hidden inputs .
193	Builds the request URL .
194	Check if the given URL is an absolute URL .
195	Given an identifier return an empty list .
196	Converts a result set into an identifier .
197	Creates entries in the given ACL .
198	Inserts the object identity into the database .
199	Updates an existing ACL .
200	Saves the request in the session .
201	Creates a new server web exchange matcher .
202	Returns a MatchMatcher that matches the exchange
203	Returns a decryptor for the given password and salt .
204	Creates a text encryptor .
205	Creates a text encryptor that encodes a password .
206	Writes the headers to the response .
207	Determines the target URL for the given authentication .
208	Determines the target URL .
209	Sets the target URL parameter .
210	Get the Directory with the given id .
211	Build the DistinguishedName with the given username and password .
212	Creates the shared objects .
213	Configure jaas using login configuration
214	Get current date
215	Internal parse .
216	Update the cache with the specified key .
217	Sets authentication details from the request .
218	Determines the security name of a subject .
219	Returns the groups for the specified securityName .
220	Changes the password of the specified user .
221	Build the DN for the group .
222	Ensures that the list of sessions is exceeded .
223	copy details from source to destination
224	Returns a list of filters for the given request .
225	Returns a list of filtered filters .
226	Retrieves the web application context for the given page context .
227	Returns the full Dn representation of the given distinguished name .
228	Update session attributes .
229	Creates a preemption scheme for basic authentication .
230	Adds filters to the list .
231	Adds a filter to the REST service .
232	Creates a basic authentication scheme .
233	Creates a new authentication scheme .
234	Creates a new authentication scheme .
235	Proxy a single proxy
236	Print the response options to the output stream .
237	Return the restured configuration for the given redirect .
238	Sets the default encoding charset .
239	Sets the default object mapper .
240	Sets the object mapper factory .
241	Set the mock config for the log
242	Set the mock config for the session .
243	Set object mapper config .
244	Sets the mock config for the given json config .
245	Configure the mock xml configuration for the xml .
246	Set the encoder config .
247	Configure the mock header .
248	Set async config .
249	Creates a mock config for the mock service .
250	Create mock config for multi part .
251	Create the mock config for the MockServerConfig
252	Configures the Matcher config with the given matcher configuration .
253	Allow all hostnames in the trust store .
254	Declares a new XmlPathConfig to be used .
255	Creates an XmlPathConfig with the given prefix and namespace URI .
256	Sends a request to the server and returns the response .
257	Set the request headers
258	Sets the proxy to use .
259	Sets the control name .
260	Adds a header to the request .
261	Set basic authentication credentials .
262	Sets ntl mn mime credentials .
263	Create headers with additional headers
264	Reset the configuration .
265	Sets the header .
266	Builds the rest assured response .
267	Returns a Matcher that matches the value of the given cookie .
268	Returns a Matcher that matches comments .
269	Returns a DetailMatcher that matches the expiry date .
270	Returns a Matcher that matches the domain of the domain .
271	Returns a Matcher that matches the path .
272	Returns a Matcher that matches the secured cookie .
273	Builds a Detached cookie matcher that matches httpOnly .
274	Returns a Matcher that matches the version of this cookie .
275	Returns a Matcher that matches the max age of the cookie .
276	Expect a header to be read .
277	Expect that the given header has the expected header .
278	Expect that the given cookie name has the expected value .
279	Creates a new proxy configuration for this host .
280	Sets the number return type .
281	Sets the default parser to use .
282	Sets the default log stream .
283	Enable logging of the request and response validation if validation fails .
284	Creates a HttpRequestBase object based on the given HTTP method .
285	Returns a default boundary with the given configuration .
286	Adds an attribute to the MockRequest .
287	Adds a header to the request .
288	Adds a multi part to the request .
289	Add additional result handlers
290	Sets a parameter with the given name and value .
291	Add http client parameters to this HttpClient .
292	Configures the HttpClient instance with the given HttpClientFactory
293	Sets the http client config .
294	Execute a request .
295	Returns the integer value as an integer .
296	Returns the value as a byte .
297	Returns a short value .
298	Returns a float value .
299	Returns the double value .
300	Returns a long value .
301	Returns an unmodifiable list with the given path .
302	Gets a map .
303	Gets an object from a path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Create a new form params config
309	Applies a filter to the output stream for the given matcher .
310	Creates a cookies instance with additional cookies .
311	Clean up data from the backing map .
312	Indexes the binding in the given context .
313	Gets a binding from the given key .
314	Attempts to convert a constant string to a type binding .
315	Cleans up JIT bindings for the given binding .
316	Remove the failed JIT bindings for the given injection point .
317	Returns the internal dependencies of a binding .
318	Creates an uninitialized binding .
319	Returns all the parameters in the given context .
320	Binds the injector .
321	Binds the logger to the injector .
322	looks to see if there are any binding annotations in the given member
323	Determine whether a method overrides a method .
324	Initializes the delegate .
325	Returns the type for this provider .
326	Resolve all types in the given array .
327	Canonicalize the given key literal .
328	Prepare built - in converters .
329	Convert a class loader to the system bridge class loader .
330	Returns true if the given class has the same version of cglib . cglib . cglib . cglib . cglib . cglib . cg . cglib . cg . cglib . cglib . cglib . cglib . cglib
331	Determines whether the given member is public or not .
332	Returns a Key object for the given Key .
333	Requests an injection point for the given injection point .
334	Validates all pending injections .
335	Create a new instance of this class .
336	Wrap the servlet request in a servlet request .
337	Creates a new scope using the given scope .
338	Make the given scoping .
339	Normalize a path .
340	Returns the annotation instance for the given annotation type .
341	Checks if retention policy is configured for runtime .
342	Finds scope annotation .
343	Returns the binding key for the given type and annotations .
344	Returns the name of the given key .
345	Initializes the delegate provider .
346	Adds the direct type binding .
347	Retrieve a constructor from the cache .
348	Returns true if the interceptor class has a scope annotation .
349	Creates a real map binder .
350	Returns the key for the binding .
351	Creates a new instance using the given construction context .
352	Replaces the source stream with the message .
353	Create a Module for the given module .
354	Retrieves all assigned methods .
355	Checks whether the configuration object is not fully configured .
356	Returns true if the constructor has the given parameters .
357	Returns the dependencies for the given ctor .
358	Removes all existing dependencies from the given set .
359	This method checks if the injection is valid for the given factory and if so checks if it s not there .
360	Returns a binding for the given injector and args .
361	Invokes the method handle .
362	Answers the missing implementation for the given key .
363	Installs a real multibinder .
364	Returns the key for a new item .
365	Returns the next filter for the given request .
366	Checks if at inject has at inject .
367	Returns the internal constructor .
368	Returns the dependencies for this class .
369	Creates a Module for the given module .
370	Returns an annotation for the given method .
371	Gets the line number of the given member .
372	Initialize this instance .
373	Wraps the callable in a continue request .
374	Transfers a callable into a callable .
375	Validates that the given value is compatible with the given key .
376	get members from cache
377	Creates the injectors for the given type and errors .
378	Returns the injectors for the given injection point .
379	Creates a new key for the given type and annotation strategy .
380	Returns an instance strategy for the given annotation .
381	Returns a strategy for the given annotation type .
382	Removes all stack traces from the given throwable .
383	Returns the binding source .
384	Format the given message with the given messages .
385	Creates a message with the given message format and arguments .
386	Creates a message with the given Throwable and message format .
387	Creates a message from a Throwable and a message format .
388	Convert object to object
389	Checks if the given class should be skipped .
390	Gets the object from a list of modules .
391	Main method .
392	Associates the given dependency with the given source .
393	Sends a push state to the provider .
394	Creates an initializer for the given value .
395	Extracts the object from the given provider and returns it .
396	Process connection event .
397	Adds a connection event processor for the given connection type .
398	Get the result of a FutureRecord .
399	Ensures that a Throwable is unchecked .
400	Register processor for command code .
401	Register the default processor
402	Get processor by command code .
403	Tries to get the given url .
404	Decode protocol code .
405	Gets all connections .
406	Scan the pool .
407	Get and initialize connection pool with given URL .
408	Get a connection pool and handle it if needed .
409	Remove task task from queue .
410	It needs to be called when the connection pool needs to be killed .
411	Creates a connection to the connection pool .
412	Close a connection .
413	Called when the connection is closed .
414	Close the connection .
415	Sets an attribute if it does not already exist .
416	Register a user processor
417	Register processor to rpc server
418	Dispatch an RPC request to the user processor
419	Deserialize rpc request .
420	Pre - process remoting context .
421	Writes a timeout to the logger .
422	Helper for debugging purposes
423	This method is used to execute a process .
424	Invokes the invocation callback .
425	On receive command
426	Convert a bit set to a byte .
427	Convert an integer value to a BitSet
428	Adds a reconnect task .
429	Stop the process .
430	Converts the request to a remoting command .
431	Filters the list of connections
432	Monitor the connection pool .
433	Closes the last select connection if there is one .
434	Retrieve a boolean value from the system property .
435	print info log
436	Is request timeout .
437	Returns user processor by class name .
438	Returns a random connection from the list of connections .
439	Returns the value of the specified key or the default if the key is not found .
440	Get a property by key
441	Resolve response command object .
442	Deserialize response object .
443	Deserialize a throwable to a Throwable .
444	Extracts the error message .
445	Helper method to create RpcServerException object .
446	Print a connection trace log
447	Returns a new event loop group .
448	Parse the remote address of a channel .
449	Parse the local address of a channel .
450	Retrieves the remote IP address of a channel .
451	Return the host name of the remote host
452	Return the local IP address of the given channel .
453	Get the remote port from the channel .
454	Returns the local port of the given channel .
455	Convert a SocketAddress to host IP address .
456	Adds a connection .
457	Remove and close the connection .
458	Retrieve a connection .
459	Register a custom serializer
460	Get custom serializer by class name
461	Register custom serializer for command code .
462	Get custom serializer for command code .
463	start monitoring thread
464	Checks if the remote address is connected .
465	Initialize the write buffer water mark .
466	Builds frame from opcode .
467	Batch write .
468	Sets the code .
469	validate UTF8
470	Update Payload .
471	Helper method that contains the requested protocol .
472	Translate single frame length limit .
473	Helper method to translate a single packet size .
474	Generate the final key .
475	Process continuous frame
476	Process received frames .
477	Log runtime exception .
478	Called when a frame is received .
479	Helper method to process the current frame
480	Check that the previous frame is not finished
481	Called when the frame is closing .
482	Checks the buffer limit .
483	Get payload from buffer list .
484	Returns the total size of the ByteBufferList
485	Helper method to translate the HTTP request .
486	Helper method to translate the HTTP response .
487	Decodes bytes from the socket .
488	Closes the connection due to an error .
489	Closes the connection due to an internal error .
490	Generates a HTTP response for an error .
491	Send text to the web socket .
492	Reset the websocket connection .
493	Start the connection .
494	Returns the port .
495	Sends the handshake .
496	Sets the connection lost timeout .
497	Stop connection lost timer .
498	Start connection lost timer .
499	Restarts the scheduled connection lost timer .
500	Attempt to close a connection lost .
501	Cancels the connection lost timer .
502	A websocket handshake .
503	Sends a ping frame .
504	Stops the connection .
505	Get the current port .
506	this method will block until more read is available
507	Handles the selection .
508	Synchronized .
509	Performs a single write operation
510	Initialize the selector and server thread .
511	Ensure that the thread is started .
512	Do the shutdown .
513	Get Socket from WebSocket
514	Broadcasts data to all clients .
515	Broadcasts the text to all clients .
516	Broadcast the given data to the client
517	Adds the frames to the draft .
518	Copies from source to destination .
519	Start the entity manager .
520	Get an EntityManager by name .
521	Asynchronously executes a transactional block .
522	Convert the given arguments to a Scala buffer .
523	Wrap the given arguments into a list .
524	Gets localized message .
525	Gets localized messages .
526	Checks if the specified key is defined in the language .
527	Returns the preferred messages for the specified languages .
528	Returns the preferred messages for the request .
529	Sets the language of the result .
530	Returns the bindings for the given modules .
531	Add bindings .
532	Add bindings .
533	Returns a copy of this self .
534	Sets the overrides .
535	Sets the overrides .
536	Disable the given modules .
537	Calls the given context and returns the result .
538	Calls the provided CompletionStage on the request .
539	Return existing file .
540	Returns the binding .
541	Creates a tuple
542	Construct a Tuple .
543	Converts the given ExecutionContext to Executor
544	Creates a new JPACon config .
545	Creates a new JPACon config .
546	Creates a new JPACon config from the given map .
547	Creates a string consisting of string values .
548	Creates a flow of JsonNode
549	Add constraint validator .
550	Creates new instance of given class .
551	Get a method matching the given name and parameter types .
552	On client error .
553	On bad request .
554	Onbidden page .
555	On not found response .
556	Handles server error .
557	Logs a meaningful server error .
558	Converts a throwable to a useful exception .
559	Handles a dev error .
560	Handles the error .
561	Creates a build doc handler from a list of files .
562	Create a new documentation handler from the given directory .
563	Construct a build doc handler from a directory and a jar file .
564	Builds a documentation handler from a directory and a jar file .
565	Construct a new BuildDocHandler from a jar file
566	Consumes data from a materializer .
567	Creates a HttpEntity from the given content .
568	Creates an HttpEntity from string .
569	Creates an HttpEntity with the given content type
570	Creates a Status with the given status code and content .
571	Sends a JSON status message .
572	Creates a new result with the given content .
573	Sends a status message to the client with status code .
574	Check status of a file .
575	Find a user by id
576	Selects the preferred language .
577	Returns a unique call for this call
578	Adds a fragment to the url
579	Returns the absolute URL of the given request .
580	Returns the web socket URL
581	Returns an AbstractConnection with a connection function .
582	Returns an AbstractConnection accepting connection function .
583	Returns a server instance for the given router .
584	Convert object to JsonNode .
585	Creates an object from a JsonNode .
586	Parse string .
587	Parse the contents of an input stream into a JsonNode .
588	Relative path from startPath to targetPath .
589	Generates canonical form of the given URL .
590	Returns a list of displayable constraints .
591	Returns the displayable constraint .
592	Timeout the given CompletionStage after the given time .
593	Tells whether the given array is assignable to the given object array .
594	Parse cron expression
595	Get next cron interval .
596	Creates a client with the given configuration .
597	Returns a builder with the given application context .
598	Creates a Status object with the request .
599	Sets a session value .
600	Adds a value to flash .
601	Qualifies the binding key .
602	Returns the binding key .
603	Convert this binding to java binding
604	Convert this binding to java binding
605	Converts the binding into a Java Binding
606	Converts this binding into a Java binding .
607	Convert the underlying provider into a Java Binding
608	Returns a list of available languages .
609	Returns the preferred language for the given application .
610	Creates a new map of evolutions .
611	Returns a reader for the default evolutions
612	Cleans all evictions in the database .
613	Executes the configuration with the given load loader .
614	With Guice application loader
615	Load Guice application from given modules .
616	Adds the given modules to the Guice application .
617	Load a set of modules .
618	Load bindings from the provided bindings .
619	Returns a new GuiceApplicationBuilder .
620	Encodes the given cookie .
621	Returns the EntityManager associated with this thread .
622	Get the emitter stack .
623	Pushes the EntityManager to the stack .
624	 bypassing the flow .
625	Pass a flow into a single flow .
626	Creates a flow that flows through the actors .
627	Converts the given arguments to the list of arguments .
628	Creates a new form with the specified value .
629	Gets the global errors .
630	Returns the error messages as JSON .
631	Returns the value for the given key .
632	Fill the dynamic form with the specified values .
633	Parses the given text and converts it to the given class .
634	Parses the given text and converts it to the given type .
635	Print a value
636	Print a field .
637	Print a type .
638	Register conversion converters .
639	Register a Formatter
640	Registers an annotation formatter for the given type .
641	Encodes the given cookie .
642	Retrieve nodes from the specified path .
643	Convert a List to a Java Seq
644	Creates a sequence from the given array .
645	Creates a sequence from an array .
646	Creates a MappedWebSocketAcceptor that accepts JSON messages .
647	Creates a WebSocket accepting or flow .
648	Checks if the given object is accessible .
649	Computes the promotion costs for a primitive class .
650	Computes the total transformation cost for the given arguments .
651	Computes and returns the cost of the conversion between an object and another class .
652	Look up a message by language .
653	Look up a list of messages .
654	Creates a new database from the given parameters .
655	Creates a new parallel sort .
656	perform a quick sort
657	Merge sort .
658	Invokes the method .
659	Cast a number to a type .
660	load an argument from the local location
661	Emit a field instruction .
662	Pushes a zero - or null value to the stack .
663	unbox or zero .
664	Process an array .
665	Compare two nulls
666	Resolves all bridge methods in the class loader .
667	Recursively get methods from superclass and interfaces
668	Filters the constructors from a given class .
669	Sets super class .
670	Generate field access .
671	Adds the given method to this context .
672	Returns the cardinality of this value
673	Sets the naming policy
674	Searches for methods with the given names and descriptors .
675	Resolve a child path .
676	Read string .
677	Sets the host of the request .
678	Create a new HttpRequest with the given method and destination .
679	Create a new connection to the given destination
680	Start building a GET request .
681	Create a POST request to the given destination
682	Create a PUT request .
683	Create a PATCH request .
684	Create a DELETE request .
685	Start HEAD request .
686	Add a TRACE request to the given destination .
687	Create HTTP OPTIONS request
688	Sets the path for this request .
689	Set the cookies header .
690	Add one or more query parameters to the request .
691	Add a query map
692	Sets the query string .
693	Return a query string
694	Returns the host URL .
695	Sets the basic authentication header .
696	Sets the host header .
697	Returns the request buffer .
698	Send and receive response .
699	Returns the first handler that matches the given range .
700	Get the length of the exception table .
701	Collect all action interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collect all action untyped actions .
705	Set simple property .
706	Returns the index of the specified property .
707	Extract the reference string from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Get object reference by name .
711	Lookup an object reference .
712	Returns the table descriptor for the given table reference .
713	Find table descriptors by column ref
714	Returns the table alias for the given table reference .
715	Register a table reference .
716	Look up a table reference .
717	Register a hint .
718	Serializes the given value to the given JSON context .
719	Inject attributes into the servlet request .
720	Inject parameters in the servlet request .
721	Inject uploaded files into the servlet request .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Converts a column name to a column name
725	Stores value in prepared statement .
726	Pre - prepare value .
727	Returns a set of wrappers .
728	Resolve the specified wrapper class .
729	Creates a new wrapper object
730	Converts a path to system s system separators .
731	Helper method to get the path from a filename .
732	Split a filename .
733	Return relative path from basePath
734	Register a madvoc component .
735	Add action config to the web app .
736	Start the madvoc web app .
737	Registers the default values .
738	Register badvoc components .
739	Exclude jars from the classpath .
740	Includes the given jars .
741	Includes the given entries .
742	Exclude the given entries .
743	Scans a jar file .
744	Recursively scan class files for given root directory .
745	Returns the bytecode signature of a type .
746	Adds classes to the class scanner .
747	Scans the JAR files .
748	Create a new transaction .
749	Returns the default scope for the given scope class .
750	Returns or creates a new scope with the specified type .
751	Creates a new madvoc scope for the specified type .
752	Decode a char array
753	Create a CSRF token .
754	Ensures that the tokenSet has expired .
755	Checks if a CSRF token is expired .
756	Creates a copy of the given object .
757	Creates a copy of this bean .
758	Visit property .
759	Initialize the entity reference .
760	Resolve a scope .
761	Register a Bean definition .
762	Register a bean definition
763	Remove bean by type
764	Resolve bean names for the given type .
765	Register a new injection point for the given bean name .
766	Register a property injection point for the given bean name .
767	Register a set injection point .
768	Register a new method injection point for the given bean name .
769	Registers new init methods for the given bean name .
770	Register destroy methods for the given bean name .
771	Register a provider .
772	Register a provider .
773	Applies the given bean name to each bean of the given type .
774	Defines a set of parameters .
775	Intercept an action .
776	Resolves java version .
777	Push an integer onto the stack .
778	Check that the argument index is valid .
779	Returns the field name for the advice field .
780	Create advice method name .
781	Load all the values of a special method .
782	Load method arguments from the given method .
783	Load the virtual method arguments from the given method .
784	Loads a method argument at the given index .
785	Store an argument at the given index in the stack .
786	prepare return value
787	Creates a key for a method signature .
788	Create a new array array .
789	Store an array into an array
790	Extract encoding from content type .
791	Returns true if the given flags are empty or not .
792	Extracts the OAuth bearer token from the given request .
793	Require authentication .
794	Prepares the file to be download .
795	Set the response content .
796	Returns all cookies with the given name .
797	Read the request body from the request .
798	Read the request body from the stream .
799	Stores the context path variable .
800	Stores the context path in the ServletContext .
801	Returns whether or not the given name is a query parameter .
802	Pre - prepare the parameters for the given array .
803	copied from ServletRequest
804	Invokes the supplied body .
805	Render body .
806	Render body to string .
807	Invoke init methods on the bean definition .
808	Call destroy methods on the bean definition .
809	returns new instance of bean
810	Inject parameters .
811	Rewrite action path .
812	Add a header .
813	Put a value into the map .
814	Adds a base property .
815	Put profile property .
816	Get profile property .
817	Resolves the given string with the given profiles .
818	Extract the target map from the target map .
819	Reads a 32 - bit word from a byte array
820	Hashes a password using the given salt .
821	Compare the given plaintext with the given plaintext .
822	Copies all bytes from the stream into the given output stream .
823	Copies bytes from the stream to the output stream .
824	Parse action runtime .
825	Resolve action config .
826	Detect alias .
827	Reads the action interceptors from the given annotation .
828	Reads the filtered actions for the specified action .
829	Read package action path .
830	Read method action action path .
831	Parses the annotation alias .
832	Create an action runtime .
833	Updates the last modified status .
834	Apply advice to target class .
835	Injects the target object into the proxy object .
836	Visits an annotation .
837	Resolves the real name for the given json name .
838	Resolves the real name for the real name .
839	Look up the type data for the given type .
840	Lookup type data for given type .
841	Looks up the type data for the given type .
842	Resolve Js name for a type .
843	Resolves the real name of the type .
844	Get the file content
845	Copy bootstrap methods
846	Sets the major version and class name .
847	Puts the constant pool into the given byte vector .
848	Puts the bootstrap methods .
849	Add a constant field reference .
850	Add a constant method reference .
851	Adds a constant reference to the constant pool .
852	Adds a constant reference to the constant pool .
853	Adds a constant or float value to the constant pool .
854	Adds a constant or float to the constant table .
855	Adds a constant or double to the constant pool .
856	Adds a constant or double to the table .
857	Adds a constant name and descriptor to the constant pool .
858	Adds a constant name and type descriptor .
859	Adds a string to the constant pool .
860	Adds a string to the constant table .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a constant .
864	Add a constant to the bootstrap method .
865	Adds a constant to the constant pool .
866	Adds an entry to the constant pool .
867	Adds a constant to the constant pool .
868	Adds a UTF8 reference to the constant pool .
869	Add a bootstrap method .
870	Adds a new type to the union .
871	Hash a name .
872	Clear the head of the map .
873	Returns all values for the given name .
874	Returns an iterator over the elements in this map .
875	Returns a list of all entries in the map .
876	Increases the capacity by the minimum capacity .
877	Appends a character sequence to the buffer .
878	Visits an annotation .
879	Create the first proxy .
880	Creates the first chain delegation of the chain .
881	Generate the first chain to call the first chain method on the chain .
882	Parse a string into a Path .
883	Push a field to the path .
884	Configure the servlet context .
885	Execute the target method
886	Returns all the field descriptors .
887	Override this to customize the proxied bean definition .
888	Convert JTA transaction mode to DbTransactionMode
889	Read property .
890	Puts all of the mappings in the given Map .
891	Appends a buffer to the end of the list .
892	Write the list to a writer
893	Writes the list to the output stream .
894	Writes the list to the output stream .
895	Returns the string value for the given key .
896	Get an Integer by key
897	Get a long value .
898	Get a double .
899	Get a float .
900	Get a value from the map
901	Put a string value .
902	Sets the folder to use .
903	Receive messages from folder .
904	Updates the flags from the received email .
905	Close folder if opened
906	Look up a named parameter with the given name .
907	Create an alias for a string .
908	Perform validation action .
909	Adds a new violation .
910	Sets the mime type .
911	Sets the raw data to download .
912	Sets the target input stream .
913	Sets the target class name .
914	Sets the target class .
915	Creates proxied proxy data .
916	Creates the proxy .
917	Defines the proxied proxy .
918	Creates a new instance of this class .
919	Writes the given byte array to the debug folder .
920	Add a new email address to the specified person .
921	Set the to recipient address .
922	Add to an email address .
923	Sets the reply to reply to .
924	Set Email address .
925	Sets a text message .
926	Sets an HTML message .
927	Adds a header to the request .
928	Returns the value of the system property
929	Returns the boolean value of the given name .
930	Returns the integer value for the given name .
931	Returns the long value for the given name .
932	Returns the resolved parameters of the method .
933	Serialize a key value .
934	Look up a path alias by alias .
935	Resolve an alias .
936	Resolve the result path in the given value .
937	Resolve a result path string .
938	Returns the last index of the last slash in the given string .
939	Returns the index of the last dot after a slash .
940	Returns the index of the first dot after a slash .
941	Strips the last camel word from the name
942	Resolve schema name .
943	Resolve column descriptors for given property .
944	Initializes this sketch with the specified key and tweak size .
945	Add a row .
946	Modify a value by j .
947	Calculate the key schedule for the given key .
948	Initializes the key message with the given key message .
949	Encrypts a block of data
950	Converts a byte array to a long array .
951	Removes any portion of the string .
952	Returns the path to the target method .
953	zips a file
954	Gzip file .
955	Ungzip a file .
956	List the contents of a zip file .
957	Unzip a zip file .
958	Adds a file to the ZIP output stream .
959	Adds the content to the ZIP output stream .
960	Returns the field descriptor for the given name or null if not found .
961	Returns the property descriptor for the given name or null if not found .
962	Sets the bundle name in the request .
963	Sets the locale of the session .
964	Returns the locale of the session .
965	Filters the parameters for a bean name .
966	Add profiles .
967	Reads a little endian long from the buffer at the given offset .
968	Reads data from an input stream and closes it .
969	Read the label for the given bytecode offset .
970	Returns the bytecode offset of a type annotation .
971	Read array values .
972	Read verification type info .
973	Read the attributes of the bootstrap method .
974	Return the CtorDescriptors of the class .
975	Gets ctor descriptor .
976	Returns the request data from the servlet request .
977	Creates a map from the attributes of the servlet request .
978	Convert array to long array .
979	Initialize decora manager .
980	Add a consumer to the file consumer .
981	Add a File to search path .
982	Add a File to the search path .
983	Includes the given patterns .
984	Exclude the given patterns .
985	Adds a path to the list .
986	Find all files .
987	Initialize the rules .
988	Returns an iterator over the files in this list .
989	Resolves the wiring mode for the given type .
990	Resolve bean name .
991	Get the output writer .
992	Gets the output stream .
993	Returns a string representation of the type .
994	Gets a description of a constructor .
995	Returns a string descriptor for the return type .
996	Construct a string descriptor for a method .
997	Append descriptor .
998	Gets the size of this object .
999	Compute the size of the arguments of a method .
1000	set rollback only to rollback only
1001	Commit or rollback .
1002	Rollback all resources .
1003	Request resource .
1004	Pop a name from the stack .
1005	Writes a string to the output stream .
1006	Writes a character .
1007	Writes char sequence .
1008	Sets the log level name .
1009	Start a region .
1010	Returns true if the value contains the specified include string .
1011	Register a pseudo function .
1012	Lookup the pseudo function with the given name .
1013	Write proxy information to destination .
1014	Visit an annotation .
1015	Create the static initial initialization block .
1016	Create the proxy constructor .
1017	Processes super methods .
1018	Find the last index in the range
1019	Encode a string .
1020	Replace ASM instructions .
1021	Gets the attribute prototypes .
1022	Register the default SQL types .
1023	Register the given SqlType class .
1024	Look up SqlType for given class .
1025	Lookup SqlType for given Sql type .
1026	Creates a proxy info object with the given proxy address and user name .
1027	Creates a new proxy info object .
1028	Creates a new HTTP proxy .
1029	Returns the total number of threads in the current thread stack .
1030	Count total number of threads with a given status
1031	Associates a transaction with another transaction .
1032	Merges the given transaction with the source transaction .
1033	Lookup the resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append the path .
1036	Returns the left and pad the given text .
1037	Serialize an object into a pretty string .
1038	Convert string to camel case .
1039	Formats a string .
1040	Convert tabs to spaces .
1041	Converts a string to a Java string .
1042	Unescapes a Java string .
1043	Resolves a bean by its name .
1044	Get bean by name .
1045	Initialize bean definition .
1046	Invoke provider .
1047	Registers a bean .
1048	Set bean property .
1049	Get bean property .
1050	Shutdown all scopes .
1051	Resolve parameters from a method or constructor .
1052	Puts the body into the form .
1053	Gets the value .
1054	Terminates the tree .
1055	Creates a new element node .
1056	Adds a tag to the parent node .
1057	Removes the last child node from the parent node if it is empty .
1058	Returns the query string .
1059	Returns the class name for the given action .
1060	Calculates the to to to the given size .
1061	Iterate collection .
1062	Iterate over an array .
1063	Replaces the substring with the given string with the given string .
1064	Replaces a substring of a string with a given character .
1065	Replaces all substring characters in string with the given string .
1066	Replaces the first substring of the string with the given string .
1067	Replaces the first substring with the given char .
1068	Replaces the last occurence of s .
1069	Replaces the last substring of a string with a given character .
1070	Remove a string from a string .
1071	Removes the given character from the string .
1072	Returns true if all of the given strings are empty .
1073	Checks if all strings in the given strings are blank .
1074	Converts value to string array .
1075	Changes the first character of the string .
1076	Convert a string to title
1077	Replace the given chars with the given character .
1078	Checks if a string starts with a given substring starting at the given index .
1079	Returns true if string ends with char .
1080	Count the number of substring in source string ignoring case .
1081	Compares an array of strings ignoring case .
1082	Returns the index within the specified string .
1083	Strips the leading character from the string .
1084	Removes the trailing char from the string .
1085	Removes the given character from the string .
1086	Strips the given character from the string .
1087	Strips the given character from the string .
1088	Crops each string in the array of strings .
1089	Remove all whitespace from left .
1090	Remove all whitespace from string .
1091	Returns the index of the first substring within a string
1092	Joins a collection into a string .
1093	Joins the given array using the given separator .
1094	Convert charset name to charset name .
1095	Compares the specified character at the specified index to the specified string .
1096	Surround a string .
1097	Returns prefix if not already present .
1098	Adds a suffix to a string .
1099	Cut the string to the first occurrence of the specified string .
1100	Cut from string .
1101	Removes the prefix from a string .
1102	Removes the suffix from the string .
1103	Cuts a string with the given prefix removing the suffix if present .
1104	Inserts a string into a string .
1105	Creates a string consisting of the given number of times .
1106	Reverses a string .
1107	Returns the maximum common prefix of two strings .
1108	Finds the common prefix of two strings .
1109	Shorten a string .
1110	Converts string to upper case .
1111	Removes quotes from the string .
1112	Converts a byte array to a hex string .
1113	Convert string to byte array .
1114	Detect quote character from string
1115	Visit a field .
1116	Visit an enum value .
1117	Visits an annotation .
1118	Register a new type .
1119	Register an entity .
1120	Remove an entity from the map .
1121	Creates entity instance .
1122	Sets the target interface .
1123	Insert target into wrapped wrapper .
1124	Look up annotated properties for a given type .
1125	Detect database and configure database .
1126	Closes the output stream .
1127	Writes a byte to the output stream .
1128	Remove the session id from the request .
1129	Gets the name .
1130	Serializes this buffer to a byte array .
1131	Write the message to a file .
1132	Write message to output stream .
1133	Appends the argument string to the specified type .
1134	Prepend the argument with the specified type .
1135	Changes return type .
1136	Flattens the text .
1137	Register a type converter for the given type .
1138	Lookup a type converter for a given type .
1139	Execute a query
1140	Processes collection of CSS selectors .
1141	Processes the selected selectors .
1142	Selects first nodes that match the query .
1143	Walk through the nodes recursively .
1144	Recursively walk the root node .
1145	Selects and adds a node to the result .
1146	Filter the given node .
1147	Unpack a string into a char array
1148	Refill the zz value .
1149	Returns a page data .
1150	Remove select .
1151	Remove from from .
1152	Remove last order by .
1153	Decode HTML .
1154	Detects the next name from the input string .
1155	Add ORDER BY clause to the SQL statement .
1156	Builds a pagination SQL string .
1157	Resolve column mappings for given type .
1158	Find by column name .
1159	Find by property name .
1160	Returns the property name for the given column .
1161	Returns the column name for the given property .
1162	Returns the id value of the specified object .
1163	Sets the id property on the given object .
1164	Returns the key value for the object .
1165	Appends a string to the array .
1166	Sets the index .
1167	Expands the array to contain the given capacity .
1168	Calculates the length of the array
1169	Creates the message for mixing the given bean definition .
1170	Creates a scoped proxy bean .
1171	Invoke the loop body .
1172	Recursive method to initialize the cache .
1173	Checks whether the given file should be accepted .
1174	Sets the watch file to use .
1175	Start polling .
1176	Handles a change event .
1177	Adds an enumeration to the list .
1178	Returns the size of the field table .
1179	Puts the field information into the given byte vector .
1180	Creates a target .
1181	Writes the property value to the injection point .
1182	Adds decora content to a writer .
1183	Parses the content of a page .
1184	Writes decorated page content
1185	Writes the given region to the given writer .
1186	Start the server .
1187	Runs a process .
1188	Create an instance of IMAP store .
1189	Creates the output stream .
1190	Initializes the template with the given template data .
1191	Appends the alias .
1192	Append column name .
1193	Adds a rule to the list .
1194	Applies the given value to the given value .
1195	Processes the inclusion of the given value .
1196	Processes the value of the exclude list .
1197	Returns the pseudo class name .
1198	Adds all elements from the specified collection to this collection .
1199	Finds the insertion point for the given element .
1200	Bind an annotation .
1201	Register a new action configuration .
1202	Lookup action configuration for given action type or annotation type .
1203	Registers action config for given action type .
1204	Setup system property .
1205	Validates the given value within the given context .
1206	Find the last table .
1207	Iterates through the children of the viewer and moves them to the given table .
1208	Register session beans .
1209	Returns the session data map .
1210	Initializes the proxy .
1211	Add advice init method .
1212	Ends the bundle .
1213	Adds information to the context .
1214	Extract the profiles and add them to the key list .
1215	Add key to hash map .
1216	Convert a typedesc description to a class name .
1217	Convert type ref to name .
1218	Convert a typed description to a string .
1219	Convert a type to a typeref
1220	Adds a list of consumers to the consumer .
1221	Creates a collection .
1222	Converts the given object to a single element collection .
1223	Converts a value to a collection .
1224	Converts a collection to a collection .
1225	Converts primitive array to collection .
1226	Add a line number .
1227	Makes the given visitor visit this line number .
1228	Puts a forward reference onto the source code .
1229	Adds the forward references to the source instruction .
1230	Resolves an ASM for the given instruction .
1231	Marks the given basic block as belonging to this basic block .
1232	Add the return values of the given subroutine to the list of blocks .
1233	Compares two digit numbers .
1234	Fixes the accent .
1235	Puts a byte into the buffer .
1236	Puts two byte values into the buffer .
1237	Put short value .
1238	Puts two byte values into the buffer .
1239	Puts two bytes into the byte vector .
1240	Puts an int into the buffer .
1241	Puts 2 bits into the byte vector .
1242	Put long .
1243	Puts the given byte array into the buffer .
1244	Enlarges the data to the specified size .
1245	Authenticate user via http session .
1246	Authenticates user via action .
1247	Authenticates user via basic auth .
1248	Returns the default message for the given locale and locale .
1249	Retrieves the bundle with the given name and resource bundle .
1250	Gets a value from the array at the specified index .
1251	Sets the entity id .
1252	Saves an entity .
1253	Update an entity
1254	Update property in the database .
1255	Update property of specified entity
1256	Find entity by id .
1257	Find one entity by its name .
1258	Finds an entity matching the criteria .
1259	Delete an entity from the database .
1260	Delete an entity .
1261	Counts the number of entities of the given type .
1262	Increases the specified property by its name .
1263	Decreases the property by its name .
1264	Finds related objects .
1265	List all entities in the specified target class .
1266	Removes all attributes from the map .
1267	Returns a set of entries .
1268	Stores an existing entry in the map .
1269	Removes an attribute from the map .
1270	Returns the current stack trace .
1271	Converts a Throwable to a StackTraceElement
1272	Returns the stack trace of the given exception .
1273	Gets the exception chain from the given throwable .
1274	Converts an exception stack trace to a string .
1275	Convert an exception chain to string .
1276	Builds a log message .
1277	Unwraps a Throwable .
1278	Registers this class in the given class scanner .
1279	Registers a component class .
1280	Returns the system class loader
1281	Get a resource as stream .
1282	Get a resource as stream .
1283	Gets the resource as stream .
1284	Gets the class as stream .
1285	Add a new value to the route .
1286	Find or create a child with the given value .
1287	Parse the request .
1288	Convert value to collection .
1289	Invokes the setter method .
1290	For internal use only .
1291	Creates a new bean property .
1292	Extract the type from the getter .
1293	Stops the session .
1294	Start the authentication token .
1295	Returns a date from the given local date .
1296	Converts a LocalDateTime into a Calendar .
1297	Define a proxy .
1298	Add a check .
1299	Resolve validation context for target class .
1300	Adds all checks for a given target class .
1301	Collects annotation checks for given property .
1302	Collect validation checks .
1303	Copy default check properties from annotation
1304	Encodes the given URI using the given encoding .
1305	Encodes the given string with the given encoding .
1306	Encodes the given URI scheme with the given encoding .
1307	Encodes the given URI host with the given encoding .
1308	Encodes the given URI port with the given encoding .
1309	Encodes a path with the given encoding .
1310	Encodes a query with the given encoding .
1311	Encodes the given query parameter with the given encoding .
1312	Encodes the given URI fragment with the given encoding .
1313	Recursively inspect all the properties of the class .
1314	Get all PropertyDescriptors .
1315	Returns the set - cookie header .
1316	Unzips the response .
1317	Closes the http connection .
1318	Accepts a reference scope .
1319	Prints out all Routes
1320	Encrypt the given content .
1321	Decrypts encrypted content .
1322	Convert a JSON map to an object .
1323	Convert a list to a value .
1324	Set the value of a property .
1325	Generate a map .
1326	Compares the specified object to the specified object .
1327	Sets the default header .
1328	Sends a request .
1329	Sends a request .
1330	Adds the default headers to the HttpRequest .
1331	Read cookies from the response .
1332	Add cookies to the HttpRequest
1333	Send an email .
1334	Sets the subject s subject .
1335	Sets the sent date .
1336	Sets headers in mime message .
1337	Sets the person information from an email .
1338	Sets the recipients addresses .
1339	Adds message body data to a mime message .
1340	Sets the content of an email message .
1341	Creates a MimeBodyPart from an email attachment .
1342	Extracts content type from data header .
1343	Save result set .
1344	Close all ResultSets
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size for this statement .
1348	Sets the maximum number of rows for this query .
1349	Executes the update .
1350	Execute count query .
1351	Return the generated columns .
1352	Get query string .
1353	Creates a proxy of the given target object .
1354	Returns a collection of the given iterator .
1355	Returns stream of the given iterator .
1356	Compares two objects using the specified comparators .
1357	Sets the default wiring mode .
1358	Prints a message to the console .
1359	Returns the caller class name .
1360	Shorten a class name .
1361	Exclude the given types .
1362	Serializes an object to an Appendable .
1363	Serialize object to string .
1364	Clone object via serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serializes an object to a byte array .
1368	Convert a byte array to an object .
1369	Recursive method to create table names .
1370	Creates the names table names for the given types .
1371	Reads a column from the result set .
1372	Cache the result set .
1373	Resolve provider definitions for given class .
1374	Applies the given table name to the given table name .
1375	Validate connection .
1376	Renders the view to the specified target .
1377	Locates the target for the specified action .
1378	Get writer .
1379	Get output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Writes a string to the output stream .
1383	Perform login .
1384	Gets the token as JSON .
1385	Login using basic authentication .
1386	Logout user .
1387	Convert a url to a container file .
1388	Creates a directory if it does not exist .
1389	Creates a new directory if it does not exist .
1390	Copies a file to a destination file
1391	Copy files from src to dest .
1392	Moves a file to a directory .
1393	Copies a directory to a file .
1394	Deletes the contents of a directory .
1395	Read UTF - 8 characters from a file .
1396	Read chars from a file .
1397	Writes a char array to the given file .
1398	Write string .
1399	Append a string to a file .
1400	Read bytes from a file .
1401	Writes len bytes to a file .
1402	Append bytes to a file .
1403	Copies a file or directory to a destination file .
1404	Delete a file or directory .
1405	Creates a temporary directory .
1406	Checks if the file is binary .
1407	Checks whether src and destination files are copied .
1408	Checks that the src and dest file exists .
1409	Prints usage information for a command .
1410	Resolve action method .
1411	Register an action .
1412	Register a path alias
1413	Moves to the next iteration .
1414	Creates a char array sequence from a char array .
1415	Executes the target method on the target object .
1416	Match uppercase target .
1417	Creates a char sequence .
1418	Returns an array of URLs for the specified class .
1419	Add bccs .
1420	Register a new type with the given class .
1421	Look up the serializer for the given type .
1422	Parse the input stream .
1423	Returns the value of the specified parameter .
1424	Returns the values of a parameter .
1425	Returns the file upload value .
1426	Gets the uploaded files with the specified parameter name .
1427	Initializes the filter .
1428	Parse template .
1429	Find the index of the macro .
1430	Count the number of escapes in the given template .
1431	Build the query string from the given query map .
1432	Parse the query string into a HttpMultiMap .
1433	Prepare header parameter name .
1434	Extracts the media type from the given content type .
1435	Render the given node to the appendable .
1436	Returns the inner HTML string of the given node .
1437	Configures this servlet with the specified parameters .
1438	Resets the fields .
1439	Sets lazy loading .
1440	Replaces the target class with a mapped type .
1441	Parses the given string as a list of objects .
1442	Parse the string as map .
1443	Resolve the value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a Unicode character from the input .
1448	Parse an unquoted string content .
1449	Parses a number from the input .
1450	Parse an array content .
1451	Creates a constructor that will be used to create an empty constructor .
1452	Create a simple wrapper for the given method signature .
1453	Resolve the raw type name .
1454	Resolve reference from property name .
1455	Resolve references to a method or constructor .
1456	Read all references from a method or constructor .
1457	Builds the default references for the given method or parameter types .
1458	Builds the default reference for a property .
1459	Remove duplicate names from the array .
1460	Convert references to BeanReferences .
1461	Converts an ann value to an array of BeansReferences .
1462	Runs Joy Messenger .
1463	Searches for a method in a class .
1464	Finds a constructor that matches the given parameter types .
1465	Resolve all interfaces of a type .
1466	Compare two parameters
1467	Force access .
1468	Creates a new instance of the given parameters .
1469	Get all superclasses of given type
1470	Returns the child class of the given instance .
1471	Returns the jar file of the given class .
1472	Sleeps for the specified number of milliseconds .
1473	Sleeps for the current thread .
1474	Wait for the specified object .
1475	Creates a thread factory .
1476	Gets the value .
1477	Visit a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits a dynamic instruction .
1484	Visit a jump instruction .
1485	Visits a multi -AN array instruction .
1486	Visits a try catch block .
1487	Visit a local variable annotation .
1488	Convert properties to a writer .
1489	Processes the input stream .
1490	Move to next element .
1491	Moves to the next row .
1492	Joins the given arrays into a single array .
1493	Joins arrays of arrays .
1494	Resizes the given buffer to the given new size .
1495	Add a new element to the buffer .
1496	Removes the specified array of the specified type from the buffer .
1497	Returns the index of the first occurrence of the specified char in the array .
1498	Returns the index of the first occurrence of the specified value in the array .
1499	Returns the index of the first occurrence of the specified substring in the array .
1500	Enables XHTML mode .
1501	Parses the content of the feed .
1502	Process the given lagarto parser .
1503	Compute the maximum stack trace for the exception handler chain .
1504	Ends the current basic block and resets the current basic block .
1505	Collect attribute prototypes .
1506	Inject target object .
1507	Register a pseudo class .
1508	Look up a pseudo class by name .
1509	Invokes the given action request .
1510	Returns the name of all the bean property of the given type .
1511	Visits all property values .
1512	Tells whether or not the given property name matches this rule .
1513	Resolve method injection points for given type .
1514	Read configuration values from the target object .
1515	Write bundle file .
1516	Looks up the bundle file for the given bundle ID .
1517	Looks up the gzip bundle file .
1518	Register a bundle id
1519	Creates the digest value for the given source .
1520	Creates the bundle
1521	Clears the bundle files .
1522	Fixes CSS URLs .
1523	Update column by reference
1524	Creates the table ref name .
1525	Gets a transaction manager .
1526	Converts an object to a single element array .
1527	Parses a signature string into a map of generics .
1528	Resolve the set of injection points .
1529	returns true if the property type should be excluded
1530	Opens a connection for the query .
1531	Open a transaction
1532	Close the transaction
1533	Commits a transaction .
1534	Rolls back a transaction .
1535	Creates a new Properties object from the given file .
1536	Creates a new Properties object from a string .
1537	Load properties from string .
1538	Returns a copy of this Properties with the specified prefix removed .
1539	Creates a Properties object from the specified root template .
1540	Returns the value of a property .
1541	Resolve all variables .
1542	Resolve a property .
1543	Resolve scope .
1544	Read transaction mode .
1545	Register annotations .
1546	Read transaction annotation values .
1547	Applies the selector to the selector .
1548	Checks if this element matches the given node .
1549	Accepts the select .
1550	Unescapes a string .
1551	Builds the packages for the given Java version number .
1552	Clone a node .
1553	Detach this node from its parent node .
1554	Adds multiple child nodes to this node .
1555	Inserts a child node at the given index .
1556	Inserts a child before another child .
1557	Inserts a child node before another child .
1558	Inserts a child after the given refChild .
1559	Inserts a child node after the given refChild .
1560	Removes all childs from this node .
1561	Find the child node with the given name .
1562	Returns an array of all child nodes that match the given predicate .
1563	Checks that the node is correct .
1564	Initializes the child element nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Changes the owner document of the given node .
1568	Returns the previous sibling name .
1569	Returns the text content of this node .
1570	Gets the HTML fragment .
1571	Returns the inner HTML of the inner HTML fragment .
1572	Visit the children .
1573	Gets the css path .
1574	On decora tag .
1575	On id attribute .
1576	Defines a decora tag .
1577	Add a proxied aspect
1578	Adds a root package to the list
1579	Adds root package .
1580	Find the root package for a given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Add the name of the properties file to be started
1584	For each target .
1585	Iterate over targets for each target in the given scope .
1586	Iterate over targets for each target in the given scope .
1587	Returns the values of the parameters
1588	Creates target targets for given action and method parameters .
1589	Create a new action argument .
1590	Notify listeners that a new session was created .
1591	Notify listeners that the session was destroyed .
1592	Adds the specified value to the array .
1593	Appends the given JsonArray to the end of the list .
1594	Removes a position from the list .
1595	Resolve target .
1596	Sends a response to the target .
1597	Convert value object to string .
1598	Filter the given action filter .
1599	Returns the pseudo function name .
1600	Resolve injection point for given type .
1601	Creates SOCK4 proxy socket .
1602	Returns the number of attributes .
1603	Returns a set of action results .
1604	Returns true if the given character equals the given character .
1605	Returns the index of the first character in the source string that is equal to the given index .
1606	Returns the index of the first character in the source array or - 1 if not found .
1607	Add command line arguments .
1608	Sets environment variable .
1609	Runs the process .
1610	Call listener .
1611	Copies the input frame .
1612	Returns an abstract type from the given api type .
1613	Get the abstract type from the descriptor .
1614	Sets the input frame from the given API frame .
1615	Returns the local variable at the given index .
1616	Sets a local variable .
1617	Pushes an abstract type onto the output stack .
1618	Pushes an abstract type onto the symbol table .
1619	Pop the given number of elements from the output stack .
1620	Pop the stack from the first argument .
1621	Adds the given abstract type to the initialization table .
1622	Returns the initialized type .
1623	Puts the abstract type into the given byte vector .
1624	Removes entries from the cache .
1625	Schedule prune .
1626	Visit a module .
1627	Visit a nested host .
1628	Visits an outer class .
1629	Visits an annotation .
1630	Visit a nested member .
1631	Visits an inner class .
1632	Visits a field .
1633	Get the thread session .
1634	Closes the current thread session .
1635	Creates the execution array .
1636	Invoke the action method .
1637	Reads the request body from the request .
1638	Calculates the first item index of a page .
1639	Returns the first item index of the page .
1640	Tests if the given value matches the given value .
1641	Convert char array to byte array .
1642	Find the first index of the first character in source .
1643	Resolves the node name .
1644	Resolves an attribute name .
1645	Renders an attribute .
1646	Loads properties from a file .
1647	Load props from file .
1648	Load props from an input stream .
1649	Load props from a map .
1650	Load props from a map .
1651	Load properties from classpath .
1652	Returns the value for the key .
1653	Sets the value for the given key and profile .
1654	Extract props from target map
1655	Extract properties from target map
1656	Extract sub props from target map
1657	Returns an inner map of the profiles .
1658	Add inner map to the map .
1659	Resolve active profiles .
1660	Get all profiles
1661	Get profiles for a given property key
1662	Adds the property injection point .
1663	Add a SetInjectionPoint to the set
1664	Add a method injection point .
1665	Add init method points to init methods .
1666	Add destroy methods to the set of destroy methods .
1667	Resolve proxy class .
1668	Adds the target object into the wrapper .
1669	Gets the target wrapper type .
1670	Locates the field with the specified name .
1671	Returns the type of the field .
1672	Resolves the key type .
1673	Resolves the component type .
1674	Creates a JsonResult from the given object .
1675	Creates a JSON result from an exception .
1676	Resolves the HttpMethod name from a method name .
1677	Perform a match of the given string .
1678	Resolves the loading .
1679	Resolves the loading .
1680	Loads the specified class .
1681	Returns the URL for the specified resource .
1682	Wait for the end .
1683	Detect annotation type .
1684	Builds an InjectionPoint .
1685	Visit the declared property .
1686	Returns an array of URLs from the given ClassLoader .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the property .
1691	Returns the setter for the property .
1692	Connects to the database and configures the connection
1693	Adds an iterator to the list .
1694	Prints the logo
1695	Stop the joyite .
1696	Creates a socket .
1697	Creates an SSLSocket .
1698	Get default SSLSocketFactory
1699	Get socket factory .
1700	Generates a random string with the specified number of characters .
1701	Generates a string with a specified number of characters .
1702	Generates a string with a specified number of characters .
1703	New array instance .
1704	Inject value into object .
1705	Converts the given value to the target type .
1706	Visit a set of providers .
1707	Creates a default type cache .
1708	Put a value into the map .
1709	Get all method descriptors .
1710	Resolve an IP address .
1711	Parse an IP address as an integer .
1712	Verify that the input string is a valid IPv4 address format
1713	Resolves the host name for the given IP address .
1714	Download bytes from URL .
1715	Downloads a string from the given URL .
1716	Download file .
1717	Inject target request .
1718	Performs out inject .
1719	Connect to a hostname and port .
1720	Create socket connection .
1721	Gets the index of the primitive class name .
1722	Loads a class using the given class loader .
1723	Load array class by component type .
1724	Invoke destroy method .
1725	Returns a binary search for the given array .
1726	Returns a binary search for the given element using the given comparator .
1727	Excludes the specified strings .
1728	Include the given strings .
1729	Includes all bean properties from the specified template .
1730	Start tag .
1731	Register a new Component
1732	Resolve column s SQL type .
1733	Preprocess SQL .
1734	Creates a mapper for the given ResultSet .
1735	Find generated key for given type .
1736	Populate generated keys .
1737	Creates a wrapper for the given action type .
1738	Sets the bean .
1739	Sets the map of parameters to the query .
1740	Sets the objects .
1741	Inserts a chunk after this one .
1742	Lookup entity type .
1743	Returns the entity descriptor for the given column reference .
1744	Resolves the table name for the given table .
1745	Resolve the given object .
1746	Appends missing space .
1747	Returns an enumeration of file parameter names .
1748	Includes the given page in the request .
1749	Gets the url from the request .
1750	Returns the request URI from the include request .
1751	Resolve parameter names for given action class method .
1752	Initialize the Petite container .
1753	Stop the Petite container .
1754	Appends the subject to the filter .
1755	Filter by message ID .
1756	Appends from from address .
1757	Applies to to to to recipient address .
1758	Method allow to cc recipient addresses .
1759	Applies bcc address .
1760	Adds a flag to the filter .
1761	Adds a flag to the email filter .
1762	Method to filter received dates by received date .
1763	Method allow to filter sent dates .
1764	Applies a size filter to the email filter .
1765	Method to combine a list of email filters .
1766	Returns a new filter based on the given filters .
1767	Appends the not term to the email filter .
1768	Concatenate a search term with another one .
1769	Encodes the given byte array into a base32 string .
1770	Convert value to byte array .
1771	Returns true if the request parameter is eligible for gzip .
1772	Validates target object .
1773	Makes the given target object for validation .
1774	Sets the profile to use .
1775	Sets enabled profiles .
1776	Determine whether or not the specified check profiles are valid .
1777	Parse request body .
1778	Converts this object to milliseconds in milliseconds .
1779	Add another date to this date .
1780	Subtract a Julian date from this date .
1781	Sets integer .
1782	Initialize parser .
1783	Emit a comment .
1784	Report an error .
1785	Create a PkDF2 hash from the given password .
1786	Generate PBKDF2 key .
1787	Converts a hex string to a byte array .
1788	Resolve provider definitions for given type and name .
1789	Sets the name for the attachment .
1790	Sets the content id from the email .
1791	Resolve mime type .
1792	Parse a type signature .
1793	Compute the size of the attributes .
1794	Puts the attributes of this module into the given byte vector .
1795	Decode the given string with the given encoding .
1796	Decode query string .
1797	Start the database .
1798	Check connection .
1799	Visits a method signature .
1800	Traverses the class and collects all superclasses
1801	Create a new method signature .
1802	Converts the given elements to a CSV string .
1803	Converts a string to a string array .
1804	Resolve CtorInjectionPoint references .
1805	Creates a class reader for advice .
1806	Returns the cached advice class reader .
1807	Encrypt a string .
1808	Decrypt string .
1809	Retrieve a Logger by name .
1810	Sets the cookie name .
1811	Factory method for creating an action request .
1812	Creates a wrapper for the filter .
1813	Destroy bean data .
1814	Invoke destroy method .
1815	Returns an array of received emails from the specified folder .
1816	Starts the ClusteredServiceContainer .
1817	Runs the report .
1818	Prints an error message .
1819	Print rate .
1820	Maps an existing file to a mapped byte buffer .
1821	Closes the archive .
1822	Returns the number of work in the queue .
1823	Returns the position of the log file .
1824	Offer a buffer to the buffer .
1825	Append the given length to the buffer .
1826	Closes this session
1827	Poll for error response
1828	Stops a replay .
1829	Event handler for new image
1830	Event handler for an unavailable image .
1831	Creates status indicator reader .
1832	Read status indicator .
1833	Sets the limit .
1834	Appends the given source buffer to the end of the buffer .
1835	Retrieve the number of commands from the server .
1836	Creates and maps a new report to an aeron directory .
1837	Creates a snapshot of the contents of this stream .
1838	Creates the default header .
1839	Writes the key buffer into the buffer .
1840	Writes the label buffer into the buffer
1841	Connect to Aeron archive .
1842	Tries to connect to the server .
1843	Closes the session .
1844	Starts recording .
1845	Stops recording .
1846	Receives a replay request .
1847	Stop replay .
1848	List recordings .
1849	List recordings for a given request .
1850	List recording .
1851	Extends a recording request .
1852	Gets the recording position .
1853	Gets the stop position .
1854	List subscriber subscriptions .
1855	Checks whether the given udp channel matches the given udp channel .
1856	Returns the destination address for the given channel .
1857	Returns a description of this instance .
1858	Add image connection .
1859	Inserts new packet position into buffer .
1860	Find the current control counter .
1861	Put a parameter into the string .
1862	Returns the tag of the channel .
1863	Returns the entity tag .
1864	Add a session id to a channel
1865	Gets the tag from the param value .
1866	Appends padding to the end of the header .
1867	Update the publisher limit .
1868	Allocate an unsafe buffer position .
1869	Returns the label name for the given type id .
1870	Scans the buffer for available space .
1871	Clears the URI .
1872	Validates that this channel is valid .
1873	Sets the prefix prefix .
1874	Set the media URI .
1875	Set the control mode .
1876	Set the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Opens the datagram channel .
1880	Close the poller
1881	Returns true if the buffer contains a valid frame
1882	Receives data from the receive datagram channel .
1883	Called when a retransmit action is received .
1884	Process timeouts for retransmits .
1885	Formats a status as a string .
1886	Allocate a new AtomicCounter
1887	Resets the vector .
1888	Validates the capacity vector .
1889	Validates the length of all the vectors in the array .
1890	Returns the length of the producer term window length .
1891	Validate socket buffer length .
1892	Validates the page size .
1893	Validates the session id range .
1894	Validates the unblock timeout configuration .
1895	Writes an error code to the buffer .
1896	Resets the state of the leader .
1897	Encodes cluster members into a string .
1898	Add publication status to the given list of members
1899	Close member publications .
1900	Checks if the given members are active .
1901	Returns the new quorum position for the cluster members .
1902	Resets the log position of the given cluster members .
1903	Checks if a vote is reached .
1904	Check if there are any vote on the members of the cluster
1905	Checks whether the cluster member has the given candidate term .
1906	Determine a member .
1907	Validate member endpoints .
1908	Compares two cluster members .
1909	Checks if a cluster member belongs to another cluster .
1910	Determines whether or not a cluster member is valid .
1911	Helper method to check if the endpoints are not duplicated .
1912	Returns the index of the member with the given id .
1913	Remove member from old members .
1914	Get the high member id .
1915	Map an existing CNC file .
1916	Check if the driver is active .
1917	Returns true if the driver is active .
1918	Returns true if CNC file is active .
1919	Requests the CNC file to be terminated by the given directory .
1920	Returns the length of the frame in the buffer at the given offset .
1921	Writes the length of the frame in the buffer to the given buffer .
1922	Writes a short type to the buffer at the given offset .
1923	Writes the flags in the given buffer at the given offset .
1924	Writes the given term offset in the given buffer .
1925	Writes the term id of the given buffer at the given offset in the given buffer .
1926	Finds a counter id by recording id .
1927	Find a session id by its session id .
1928	Returns a recording id .
1929	Checks if the given counter is active .
1930	Writes an ApplicationSpecific Feedback message .
1931	Reload the LRU file
1932	Finds the last term .
1933	Creates a recovery plan .
1934	Create a RecoveryPlan from the given list of snapshots .
1935	Append a new term .
1936	Appends a snapshot .
1937	Commits a log position entry .
1938	Stores a tombstone entry .
1939	Close the connection
1940	Adds the given vector to the journal .
1941	Unblock the log .
1942	Returns the channel as a string .
1943	Writes a channel to the buffer .
1944	Checks the validity of the given term length .
1945	Validates the given page size .
1946	Compares the current active term count with the expected term count .
1947	Computes the position of an active term
1948	Compute log length .
1949	Stores the default frame header in the metadata buffer .
1950	Applies the default header to the metadata buffer .
1951	Rotate log .
1952	Initialise the tail with term id for the given partition .
1953	Compute the offset within the raw tail
1954	Returns the raw tail value stored in the given metadata buffer .
1955	Compares the raw tail value for the given partition .
1956	Writes the token buffer into the buffer .
1957	Allocates a counter .
1958	Returns the counter id of the given counters .
1959	Returns whether or not the specified counter has been refreshed .
1960	Returns the current snapshot recording id .
1961	Converts a flag into a set of characters .
1962	Writes a channel to the buffer .
1963	Offers a buffer to the cluster .
1964	Wrap the given buffer into a buffer .
1965	Commits the buffer to the output .
1966	Aborts the stream length .
1967	Main method .
1968	Close all resources
1969	Compute the current position .
1970	Allocate a counter in the aeron buffer .
1971	Returns the counter id for the given service id .
1972	Creates a snapshot of the tracked counters .
1973	Allocates a new AtomicCounter .
1974	Close the connection .
1975	Dispatch recording descriptor .
1976	Adds a new slab .
1977	set byte at index
1978	Adds a statistics .
1979	Calculates the RowRanges for the given filter .
1980	Convert array type to array type .
1981	Convert a struct type into a group type .
1982	Annotate a message .
1983	Ends the previous bit packed run
1984	Reads one protocol from the stream .
1985	Reads the footer from the given configuration file .
1986	Read a summary file from the given summary file .
1987	Reads the footer from the file .
1988	Reads the next row group from the current row group
1989	Reads the next row group and returns the result .
1990	Reads a dictionary .
1991	Adds a writer to the ParquetManager .
1992	Removes a writer from the list .
1993	Update total allocations for all writers .
1994	Register a scale call back .
1995	Stream start .
1996	Start a new block .
1997	Start writing a column .
1998	Writes a dictionary page to the output stream .
1999	Write a single data page
2000	Write a single column
2001	Ends a block .
2002	Copies data from the given range to the given position .
2003	Finishes writing the data .
2004	Merges the specified set of Parquet metadata files into a single ParquetMetadata object .
2005	Merges the specified set of files into the specified output path .
2006	Writes the metadata file to the given configuration file .
2007	Merges the file meta data into one .
2008	Reads the value .
2009	Checks if the given schema is valid .
2010	Joins the given objects .
2011	Create a value from the given schema .
2012	Parses the thrift meta data from the extra meta data .
2013	Create ThriftMetaData instance from thrift class
2014	Returns the extra meta data for this instance .
2015	Writes null values .
2016	Writes a new empty page
2017	Initialization deserialization .
2018	Allocate values buffer .
2019	Check an enum value .
2020	Calculate bit widths for a mini block buffer
2021	Throws an exception if the given exception is not an exception .
2022	Get statistics based on the type .
2023	Get a builder for the given primitive type .
2024	Merges statistics with the same type .
2025	Returns the non - null schema .
2026	Creates a new instance of TaskAttemptContext .
2027	Invokes the given method with the given arguments .
2028	Write the members to a StringBuffer .
2029	Merge the given fields with the given group .
2030	Init counter from Reporter
2031	Returns a filter instance based on the given configuration .
2032	Retrieves all the footers from the Parquet file .
2033	Generates a list of ParquetInputSplit
2034	Writes a message to the output stream .
2035	Validates that the parquet schema has the requested parquet index .
2036	Serialize a message descriptor .
2037	Creates a new DirectCodecFactory that can be used to create a new DirectCodecFactory .
2038	Modify all required fields to contain missing required fields .
2039	Checks a set field definition .
2040	Read file meta data from an input stream .
2041	Closes the record writer .
2042	Sets the schema for the group .
2043	Adds the parquet type to the parquet type .
2044	Asserts that the given column is valid .
2045	Check if value is a int .
2046	Creates a schema mapping from ArquetSchema
2047	Creates a SchemaMapping object from parquet schema .
2048	Maps the ArquetSchema to an AvroSchema
2049	Write data page header
2050	Skip to match fields
2051	Writes object to the given conf
2052	Removes the value from the cache .
2053	Put a new value into the cache .
2054	Removes the current value from the cache .
2055	Writes a value to the Avro schema .
2056	write value without conversion
2057	Set the glob .
2058	Output string to console
2059	Opens a file for reading .
2060	Returns a unbound record filter that matches the given column predicate .
2061	Convert a struct type into a MessageType
2062	Helper method to create a new group type wrapper .
2063	Creates a group type from a list .
2064	Returns the merged key - value metadata .
2065	Create a new ParquetSplit
2066	Gets fields by name .
2067	Resolve the schema for the requested schema .
2068	Returns the list of input files .
2069	Check parquet files to see if there are any parquet files .
2070	Gets the input files from a partition directory .
2071	Returns a new unbound record filter that logs records from a specified start position .
2072	Returns a List consumer that delegates to a given consumer .
2073	Initialize the plan .
2074	Merge the contents of the given tuples
2075	Calculates the sum up of the given tuple summaries
2076	Reads a struct
2077	Reads a map entry .
2078	Write an integer into the buffer .
2079	Read a little endian int from the given position in the given buffer .
2080	Set the schema for the given job .
2081	Creates stream if not already exists
2082	Create a new PipelineStageBean from the given stage library
2083	Creates a StageBean instance .
2084	Create interceptors .
2085	Creates an interceptor
2086	Parses the given schema string into Avro schema .
2087	Convert a number of milliseconds to a number of days .
2088	Extract Avro schema from a record header .
2089	Upgrade the given configs
2090	Returns the length of the message .
2091	Copies blobstore resources to the staging directory .
2092	Resets the table .
2093	Report the health report for the specified thread .
2094	Register a thread health gauge
2095	Stores the configuration information from the runtime .
2096	Performs the actual authentication .
2097	Tries to upgrade the given pipeline configuration .
2098	Upgrade the library if needed .
2099	Upgrade the stage definition if needed .
2100	Upgrade services if needed
2101	Upgrade stage definition if needed
2102	Returns the fields to null if they are not null
2103	Checks if the given name is a system class .
2104	Appends the specified element at the end of the list .
2105	Add and return the element at the end of the list and return the evicted item .
2106	If the value is not present then the default value is invalidated .
2107	Add the reported errors to the list of stage outputs .
2108	Returns the descriptor for the given proto descriptor file .
2109	Recursively builds all file descriptors from the given DescriptorSet .
2110	Iterate through all the file descriptors and populate the map with the default values .
2111	Returns a descriptor for the given message type
2112	Converts a protobuf message to sdc field mapping
2113	Create a protobuf message .
2114	Compute protobuf field from a protobuf field .
2115	Upgrade a list of configs to a Jersey config bean
2116	Check connection .
2117	Convert kudu type to data type .
2118	Create a field from a row result .
2119	Intercept the records .
2120	Gets the text .
2121	Adds missing configurations from the given stage configuration to the given stage configuration .
2122	Parse the response .
2123	Adds the headers to the record .
2124	Writes the response header to the record .
2125	Write response header to record header .
2126	Saves metadata .
2127	Configure client .
2128	Parses the headers from the request .
2129	Increments the source offset by the given amount .
2130	Parse pagination result .
2131	Adds the headers to the response .
2132	Resolve headers .
2133	Process the response .
2134	Returns true if the given property is defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException
2137	Gets the credentials from the configuration file .
2138	Generate preview for a pipeline
2139	Copies buffer to buffer .
2140	Removes the logical duplicate entries from the given set .
2141	Helper method to clean up the batch .
2142	Returns the next main line that matches the given start index .
2143	Resolves a chunk from a chunk
2144	Closes the connection .
2145	Escape a string for a single string .
2146	Get flow control settings .
2147	Returns default channel provider .
2148	Puts the batch into the data channel .
2149	Compile the given expression and return the result .
2150	Digest the original expression
2151	Adds a dictionary to the given input stream .
2152	Adds dictionary to the given reader .
2153	Stops the aggregator .
2154	Rolls the current data window .
2155	Serialize an object to JSON string .
2156	Deserialize string .
2157	Reads the content of the file and returns the object .
2158	Writes the given record to the given output stream .
2159	Evaluates EL expression
2160	Generate inner field from HiveHashMap
2161	Extracts the table name from the given metadata record .
2162	Extract the database name from the metadata record .
2163	Get the internal field from the metadata record .
2164	Extract location from a metadata record .
2165	Extract the custom location from the metadata record .
2166	Extract the Avro schema from the metadata record
2167	Extracts the data format from the metadata record .
2168	Creates a schema field builder for the Avro schema .
2169	Validate partition information .
2170	Generates a partition path from the given partitions .
2171	Serialize a schema to hdfs
2172	Set the parameters index in the query .
2173	Get configuration
2174	Parses an rfc3 compliant time string .
2175	Format a string with arguments .
2176	Start a batch context .
2177	Checks if the record contains Solr fields .
2178	Filters out a list of field names from a list of field names .
2179	Sends an error exception to the handler .
2180	Parses a jar name from the given source name .
2181	Parse the URL from the given URL .
2182	Returns a new instance of CouchbaseConnector .
2183	Closes the bucket .
2184	Validates the Couchbase configuration .
2185	Converts an operation string into a label .
2186	Verifies that a dependency exists .
2187	Reads a string from the secret .
2188	Gets the write operation type from the record header .
2189	Sends a write operation .
2190	Builds the subdoc mutation .
2191	Returns the SQL string for the alter table .
2192	Configures this SASL authentication context .
2193	Take messages from the producer and return the result .
2194	Commits the given offset to the consumer .
2195	Called when a consumer error occurs .
2196	Injects configuration values from a stage .
2197	Get definitions
2198	Get the publisher definition for the given name .
2199	Format column name .
2200	Format the string value .
2201	Get pipeline information
2202	Create a new pipeline fragment
2203	Returns the list of pipelines for the specified filter
2204	Imports a pipeline fragment
2205	Get the path to a file path .
2206	Get the operation code from the record .
2207	Returns the field path for the given column
2208	Retrieves an enriched event from the queue .
2209	Gets the runner from the queue .
2210	Returns the runner for the specified idle time .
2211	Return a runner to the pipeline
2212	This method is called when the runner is destroyed
2213	Validates that the container is not destroyed .
2214	Checks that the given stream exists .
2215	Returns the last shard id of the stream .
2216	Process a batch of records .
2217	Handles SQL exception .
2218	Returns the column hash code for a record .
2219	Compare two files .
2220	Retrieve the PID value of a given process .
2221	Validate and extract fields from the record .
2222	Propagate the UGI user to a user .
2223	Roll the active stats .
2224	Creates a snapshot of the active stats .
2225	Ensures that the directory exists .
2226	Writes a batch of records to the batch .
2227	This method is used to partition a batch of tables .
2228	Writes the specified records to the database .
2229	Generate no more data event
2230	Detect new partition information
2231	Updates hdfs header based on Avro schema .
2232	Process a single group element .
2233	Returns true if the two stages are the same .
2234	Entry point for testing .
2235	Configures the OAuth client .
2236	Resolve headers .
2237	Evaluates the HttpMethod expression with the given method expression .
2238	Set null values for all null values .
2239	Returns null if field doesn t exist .
2240	Load schema from registry by schemaId and schemaId
2241	Register a schema
2242	Retrieve schema from registry
2243	Get schema id from registry
2244	Loads a schema from the registry by ID .
2245	Writes a schemaId to the output stream .
2246	Detects the schema id of the given data
2247	Get default values from schema .
2248	Parses all the fields of a message into a list of records .
2249	Logs the validation details .
2250	Gets the bad records from the error sink .
2251	Initializes the configuration .
2252	Returns the collection of outgoing edge vertices for the given vertex .
2253	Returns the collection of incoming edge vertices that have been directed to .
2254	Serialize an offset map
2255	Deserialize an offset map .
2256	Enqueue a report .
2257	Get a report with given ID .
2258	Checks if the checkpoint file exists .
2259	Writes offsets to the main offset file .
2260	Deletes the given blob .
2261	Handles an error .
2262	Copy from blobId to destination location
2263	Returns a reader for the current file .
2264	Releases a reader .
2265	Sets the dpm base URL .
2266	Add a default header to the application .
2267	Parse a date .
2268	escape string .
2269	Get the client for the base path .
2270	Init new GPU database connection
2271	get table metadata
2272	Create bulk introser .
2273	Creates a new event builder .
2274	Build Avro schema from fields .
2275	Converts an Oracle operation code to a SQL code .
2276	Add jars to the job configuration .
2277	Adds the given jars to the given configuration .
2278	Checks the field order by name .
2279	Checks the condition expressions for the given field name .
2280	Get the offset of a file from a file offset string
2281	Instrument the premain method .
2282	Get the origin parallelism .
2283	Runs a BigQuery query .
2284	Creates a map of the fields of the BigQuery .
2285	Get description for a table
2286	Validates that the table accepts rows .
2287	Returns the column type for the given field
2288	Checks if the field is nullable .
2289	Get the schema for a table
2290	get column properties
2291	Returns the Java class for the given type name
2292	Initializes the AerospikeClient .
2293	Returns the topic of a record .
2294	Upgrade the given list of configs
2295	Returns an InputStream for reading from the underlying file .
2296	Returns a stream to write to the file .
2297	Returns true if the file exists .
2298	Parses the given permissions string into an FsPermission object .
2299	Validate that all services are available .
2300	Creates a new aggregator instance .
2301	Returns the aggregator unit .
2302	Creates the aggregator data .
2303	Creates a new aggregator .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls the data set up to a new data window .
2307	Acquires a login manager for the specified login type .
2308	Release this LoginManager .
2309	Converts a glob to a regular expression .
2310	Retrieves a list of objects from Amazon S3 .
2311	Stop snapshot .
2312	Generate empty batches for idle runners .
2313	Creates the failure snapshot of the pipeline .
2314	Converts a record to a bound statement
2315	Sets the configuration .
2316	Generate lookup key .
2317	Handles partitioning off .
2318	Reads a line from the reader .
2319	Roll the timer .
2320	Enable DPM with given DPM info .
2321	Disable DPM authentication .
2322	Normalize the dpm base URL .
2323	Retrieve a user token .
2324	Logout the user .
2325	Updates the app auth token file .
2326	Update dpm properties .
2327	Creates a SchemaField for the given field .
2328	Creates the complex schema for a field .
2329	Returns the decimal scale or decimal scale or - 1 if not available .
2330	Returns the default value for the given schema
2331	Initialize metrics if necessary
2332	Compare files by path .
2333	Returns the index of the group with the given index
2334	Get the list of group names
2335	Determines if a string is an escaped character .
2336	Determines whether a character at the given position is escaped .
2337	Searches for a character s inside a string .
2338	Count number of open parens .
2339	Extract group information from named named pattern .
2340	Replaces a string with a replacement character .
2341	performs a get request
2342	refresh the given schema and table
2343	Determines whether or not the transaction entry is expired .
2344	Returns the offset of the current file .
2345	Fast forward .
2346	Create an empty detached stage .
2347	Converts string to number .
2348	Parse the part .
2349	Parse N Values .
2350	Lookup the primary keys for the table .
2351	Creates the custom field mapping .
2352	Return the string representation of a field .
2353	Gets the table name .
2354	Sets the primary keys of a record .
2355	Handle SQL exception .
2356	This method does the actual task execution .
2357	Prepare the batch context for execution .
2358	Calculates the finish of a pipeline context .
2359	Flatten a single field .
2360	Create a detached stage .
2361	Execute on record error .
2362	Gets the columns from the record .
2363	Returns the condition for a partition column
2364	Validates that the stored offset offsets are valid .
2365	Returns the requested definitions
2366	Returns the non - empty arguments
2367	Returns the operation .
2368	Converts bytes to display format .
2369	Scans the live file .
2370	Count pending files
2371	Returns true if the whitelisted whitelisted whitelisted whitelisted dependencies match the given name and dependencies .
2372	Checks if the set of versions matches the expected versions
2373	Main entry point for the BootstrapCluster .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a JdbcRecordWriter .
2377	Creates a new JdbcRecordWriter
2378	Upgrade the configs
2379	Extract named groups from raw data .
2380	Commits a message to the producer .
2381	Creates an embedded SDC .
2382	Sets the fields in the specified record .
2383	Retrieves a list of all remote pipelines with a specific checkpoint .
2384	Creates a new remote data collector result .
2385	Creates a gauge .
2386	Gets the columns from the specified record .
2387	Generate header attributes for a file .
2388	Validate a record .
2389	Deletes old parquet file .
2390	Returns avro input stream .
2391	Get a datum reader for the given input stream
2392	Writes parquet data
2393	check input field for encryption
2394	check the input field for encryption
2395	Checks the input field of a field .
2396	Ensures that the field is encrypted .
2397	Prepare the field to encrypt data .
2398	Sets the new pattern .
2399	Appends a replacement string to the string .
2400	Returns the named group values .
2401	Replace all properties with the given replacement string .
2402	Ensures that the avro schema exists
2403	Retrieves the value of a global variable .
2404	Create the start event record for the pipeline .
2405	Create an event record for a specific stop event .
2406	Fix offset .
2407	Extract value of field .
2408	Execute the add - partition query .
2409	Execute a set of table s properties .
2410	Describe a database .
2411	Executes a query .
2412	Executes a query .
2413	Executes a batch of pipelines .
2414	Execute consumer for each pipeline .
2415	Get offset commit .
2416	Checks to see if this pipeline is on or not .
2417	Accept consumer .
2418	Get the row id for a record .
2419	Gets value from field .
2420	Sets the specified fragment in the record .
2421	Sets the specified document in the record .
2422	Sets the n1QL row in the record .
2423	Handle partial file data format .
2424	Returns true if there are incomplete transactions in the given group
2425	Utility method that uses the thread s context class loader
2426	Sets the name of the stage creator .
2427	Logout from Kerberos .
2428	Load exceptions from configuration .
2429	Replace variables in the path .
2430	Ensure that the classloader access is allowed .
2431	Main entry point for the EMR batch provider .
2432	Resolves the directory path for a given record .
2433	Rename the file system to the final name .
2434	Determines if the record should be rolled back .
2435	Returns true if the given string matches the given pattern .
2436	Returns a map of the offsets stored in this file context .
2437	Returns the remaining wait time
2438	Returns the offsets for the given offset map .
2439	Creates and initializes the stage library .
2440	Creates a new stage library delegate definition .
2441	Creates a new instance of StageLibraryDelegateDelegate .
2442	Get a metric value from metrics registry
2443	Find the end of the header .
2444	Gets the body size .
2445	Saves byte buffer to temp file
2446	Instantiates a SSLSocketFactory based on the key and passphrase .
2447	Returns mime type for given uri .
2448	Handle session .
2449	Stops the server .
2450	Add the routes to the router .
2451	Send response .
2452	Send body .
2453	Create a new response object .
2454	Whether we should use gzip .
2455	Adds a cookie to the request .
2456	Unloads the cookie from the response .
2457	Decode Base64 encoded value .
2458	Encodes the given cookie value .
2459	Sets the table name .
2460	Get the name of the principal .
2461	Register a new session repository filter
2462	Resolve the principal from the session .
2463	Load a session from the hash table .
2464	Returns the JNDI name for the mail session .
2465	Returns canonical names of the given view method .
2466	Register a synchronization object .
2467	Notification that the last syncs are processed .
2468	Get the current transaction
2469	Deploys all the beans in the deployment
2470	This method identifies whether or not the cache region name matches the cache region name .
2471	Read the service config dependencies from the server config .
2472	Decrease the current read lock count
2473	Increment the read lock count
2474	Adds a service to the container .
2475	Called when the next expiration calculation occurs .
2476	Add the necessary dependencies to the module .
2477	Adds the top level bdas to the root of the deployment .
2478	Create the JSE archive meta data .
2479	Sets config name and file .
2480	Parses security metadata
2481	Creates the servlet URL mappings .
2482	Creates the servlet class mappings .
2483	Resolve the binding .
2484	Returns the names of the connections that are available on the server .
2485	Parse core environment element .
2486	Parses the process ID environment element .
2487	Extracts the path address from the operation .
2488	Set the path address .
2489	Returns the attribute value for the given operation .
2490	Returns whether or not the given operation should be included in the given operation .
2491	Creates a composite operation .
2492	Helper method to create an add operation .
2493	Helper method to create an add operation .
2494	Creates a read attribute operation .
2495	Creates a write attribute operation .
2496	Create an undefine attribute operation .
2497	Returns the value of the context .
2498	Adds a URL context factory for the given scheme .
2499	Removes the given URL context factory from the given scheme .
2500	Loads all providers from the class loader .
2501	Modify the given deployment .
2502	Configure endpoint servlets .
2503	Set the context root for the deployment .
2504	Gets the transport class name from the deployment deployment .
2505	Set the run as identity .
2506	Pop the run as identity
2507	Process the management servlets .
2508	Injects the specified property with the specified name and value into the specified object .
2509	Returns true if the property type matches the specified property type .
2510	Finds the method with the given name and property type .
2511	Find field by name and field type
2512	Initializes the command line options .
2513	Derives information from the HttpServletRequest .
2514	Collect Jdr report
2515	Collect a JAR report from the server environment .
2516	Register a resource adapter deployment
2517	Unregisters a resource adapter
2518	Register the transformers .
2519	Write the params to the output stream .
2520	Read an exception from the stream
2521	Returns the lock owner of the transaction .
2522	Release lock .
2523	Add a log to the server
2524	Add the deployment information to the deployment meta data .
2525	Get the component view .
2526	Invokes the given endpoint .
2527	Returns the view method for the given view method .
2528	Checks if view method matches given view method .
2529	Creates resource description resource .
2530	Get EJB security meta data from endpoint .
2531	Returns the domain for the given security domain .
2532	Ensures that the two specified domains are different .
2533	Sets the IDL name .
2534	Get the absolute name of this entry .
2535	Creates a new JndiName from the given string .
2536	Process the deployment .
2537	Invoked when the exchange is complete .
2538	Returns true if the transaction is in the transaction registry .
2539	Returns the TransactionSynchronization registry
2540	Returns the connection factory .
2541	Return the last component of a name .
2542	Returns true if the name is empty .
2543	Gets the NameNotFoundException .
2544	Creates an NamingException with the specified message and cause .
2545	Creates an NamingException with the specified message and optional detail message .
2546	Creates a new exception with no parameters .
2547	Creates a naming enumeration from a collection .
2548	Binding the specified value to the specified value .
2549	Returns the control for an activeMQ component .
2550	Parse connection attributes .
2551	Create a component instance .
2552	Returns the virtual file in the classpath .
2553	Resolve runtime name .
2554	Creates listener builder .
2555	Returns a PrimitiveAnalysis object for the given class .
2556	Shuts down the component .
2557	Gets url patterns .
2558	Returns the servlets metadata .
2559	Returns the servlet mappings metadata .
2560	Get the SecurityConstraints metadata from the JBossWebWebData .
2561	Retrieve the login config metadata from the JBossWebMetaData object .
2562	Returns the context params meta data .
2563	Get the resource collections metadata from the security constraint metadata .
2564	Return the initParams metadata for the servletMetaData .
2565	New security constraint metadata .
2566	New web resource collection meta data .
2567	Creates a new servlet meta data .
2568	Creates a new ServletMappingMetaData object .
2569	Factory method for creating new authConstraintMetaData object .
2570	New UserDataConstraint object .
2571	Create a new param value with the specified key and value .
2572	Creates a new ParamValueMetaData object .
2573	Register interceptors for SFSB component .
2574	Process the injection targets .
2575	Shutdown the container
2576	Resolve JNDI name .
2577	Resolves an attribute definition .
2578	Returns the type of the given URL pattern .
2579	Returns true if the given connection factory supports pooled connection factory .
2580	checks if the given resource adapter is a external pooled connection factory
2581	Get the activeMQ server name from the properties map .
2582	Returns the default persistence unit name .
2583	Start the activity .
2584	Stop the activity .
2585	Suspend the server activity .
2586	Cancels the deployment repository .
2587	Called when the invocation is complete .
2588	Called when a transaction is created .
2589	Starts the controller .
2590	Stops the controller .
2591	Gets a capability name based on the given dynamic parts .
2592	Create the list of resource roots .
2593	Retrieves the class loaders from the deployment unit .
2594	Return true if the persistence unit has class file transformer false otherwise .
2595	determines if two - phase bootstraps are allowed
2596	Returns true if defaultDataSourceUse false otherwise .
2597	Determine whether this entity manager should be skipped in the persistence configuration .
2598	Gets an ORB from the given server and environment variables .
2599	Initializes an ORB .
2600	Initialize method handle methods .
2601	Set the active naming store .
2602	Validate default values .
2603	Check the type of a parameter .
2604	Look up the default value from annotation array .
2605	Validate base type .
2606	Retrieves an array of ExtendedEntityManagers from the store .
2607	Convert transaction status to string
2608	Adds cache dependencies to the given cache type .
2609	Extract database dialects .
2610	Detect database dialect .
2611	Identify dialect .
2612	Check the database .
2613	Parses the given string as a date .
2614	Set node name .
2615	Marks the deployment .
2616	Read parameters from the stream .
2617	Writes the object to the output stream .
2618	Writes an exception to the output stream .
2619	Performs a lookup using the given lookup .
2620	Begins creation of SFSB
2621	Ends the SFSB container creation .
2622	Get the current SFS call stack invocation .
2623	Adds new entity managers to the current session .
2624	Pop the current SFS call on the stack .
2625	Get the current SFS call
2626	Add dependencies to the deployment .
2627	Process managed beans .
2628	Process phase listeners .
2629	Returns the type IDL name of the given RMI
2630	Inserts a primitive value into a Any object
2631	Converts a Java name to an IDL identifier .
2632	Returns true if the given string is a reserved IDL keyword .
2633	get a signature for a class
2634	Returns the method s signature .
2635	Returns the name of a primitive type
2636	Returns the BatchPermission for the given name .
2637	Get or create a transaction scoped entity manager .
2638	Put a value for the given key .
2639	Convert a Camel role definition to a model .
2640	Returns the most recent entity version of the given timer .
2641	Load timers for the given timed object ID .
2642	Gets the directory for the timed object .
2643	Add a listener to the target scope .
2644	Remove a listener for a naming listener .
2645	Fires an event .
2646	Returns a consumer that closes an AutoCloseable .
2647	Adds a private credential to the Subject .
2648	Get an object instance .
2649	Add transaction interceptor for view .
2650	Helper method for substring substring .
2651	Creates the InVM transport configuration .
2652	Adds the name of the app that should be relative to the deployment unit .
2653	Gets the root deployment unit .
2654	Get service name .
2655	Creates a view configuration object .
2656	Creates an injection source for the given service name .
2657	Returns the view interceptors for the given method .
2658	Add an interceptor to the proxy .
2659	Add an interceptor to the view .
2660	Returns the client interceptors for a method .
2661	Adds a client interceptor to this proxy .
2662	Add a client interceptor to the client .
2663	Put private data .
2664	Gets an exception reporting an unexpected XML element .
2665	Retrieve the list of EJbEndpoints from the deployment .
2666	Retrieve the list of POJO endpoint from the deployment .
2667	Extracts the endpoint name from the servletMetaData .
2668	Return the endpoint class name .
2669	Returns the servlet with the given name .
2670	Retrieve the required attachment from the deployment unit .
2671	Retrieve an optional attachment from the deployment unit .
2672	Get the JBossWebMetaData from the deployment unit
2673	Retrieves the port component meta data for the given name .
2674	Returns the EJB endpoint metadata for a given class name .
2675	Determine the context root .
2676	Loads a class by name .
2677	Returns the resource with the given name .
2678	Load resources from the class loader .
2679	Lists all the resources under the specified path .
2680	Closes the current call stack .
2681	Get the EntityManager by pu scopedName .
2682	Register clean up listener for context
2683	Process the deployment .
2684	Update server config .
2685	Returns true if all fields are public .
2686	Creates a new endpoint .
2687	Creates a new WS deployment model .
2688	Determines whether the deployment is a Jaxrs deployment .
2689	Sets the next timeout .
2690	Set the timer state for this thread .
2691	Merges the deployment data with the deployment data .
2692	Add the module to the deployment phase
2693	Adds a dependency to the EJB view description
2694	Returns all the container interceptors .
2695	Checks if the given method is level .
2696	Checks that two elements are required .
2697	Returns the type of the given class .
2698	Returns the type at the given index .
2699	Creates a new keystore resource definition .
2700	Creates a resource definition for the key managers .
2701	Creates a resource definition for the trust managers .
2702	Parses a name into a name .
2703	Converts a string into a Vector of components .
2704	Parse a component component .
2705	Deactivates the IRObject .
2706	Convert an object to a reference .
2707	Authenticate using the given username and password .
2708	Checks if class matches type
2709	Lookup the binding by name .
2710	Unbind the given JNDI name .
2711	instantiate a single bean instance
2712	Configure the bean metadata
2713	Creates a new Joinpoint Joinpoint .
2714	Gets the current context selector .
2715	Convert a bean name to a bean name .
2716	Converts the given class to instances name .
2717	Look up an EEModule class by name .
2718	Process annotations .
2719	Process the persistence units from the persistence units .
2720	Validates the given string .
2721	Create war metadata .
2722	Creates the web application descriptor .
2723	Returns the auth method of the deployment .
2724	Process the deployment xml .
2725	Handles a stateless sessionless session creation .
2726	Creates a stub class .
2727	Gets an anonymous object id .
2728	Returns a copy of the persistence providers
2729	Clear the cache of deployment specific providers
2730	Add a persistence provider to the deployment list
2731	Finds the parent of the given ClassLoader
2732	Add dependencies to the deployment unit .
2733	Add persistence unit metadata .
2734	Sets the annotation indexes for the deployment unit .
2735	Gets the persistence provider adaptor .
2736	Saves the persistence provider adaptor .
2737	Lookup the persistence provider associated with the deployment unit
2738	Returns all annotated classes .
2739	Create the EJB archive meta data .
2740	Builds the enterprise bean meta data .
2741	Add participant to the operation context
2742	Get the analysis object for the given class .
2743	lookup done for given work
2744	Creates the work in progress .
2745	Returns the IDL module name .
2746	Converts an integer to a hex string .
2747	Converts a long to a hex string .
2748	Determine whether the method is an accessor method .
2749	Determine whether the method is a mutator .
2750	returns true if there are any exceptions
2751	Converts an attribute name to an attribute read name .
2752	Return attribute write name .
2753	Updates the IDL name of the operation that is mapped to a method invocation .
2754	method to fix the case names
2755	Escape an IBAN name .
2756	Parse an XML environment element .
2757	Process the default context propagation element .
2758	Process attributes .
2759	Loads a list of PersistenceProvider by module name
2760	Creates an add - step handler that adds a child step to the active transaction .
2761	Adds the deployment unit to the deployment phase
2762	Write an attribute to the writer .
2763	Obtains the MethodInfos associated with the specified interceptor context .
2764	Creates a new session .
2765	Infer the destination name from the given address
2766	Register a set of endpoint handlers for the given endpoint class .
2767	Gets the job names .
2768	Initializes the JobResolver .
2769	Returns the URI of the request .
2770	Creates a new INSERT resolution .
2771	Lookup the object with the given name .
2772	Bind object .
2773	Call unbind .
2774	Returns a list of bindings for the given name .
2775	Call the destroy method .
2776	delete a subcontext
2777	Call a bind context .
2778	Create a subcontext .
2779	Lookup a link .
2780	Add a property to the environment .
2781	Remove a property from the environment .
2782	Adds the transformations required to the resource transformation description .
2783	Parses a Credential object .
2784	Remove a security domain
2785	Lookup JNDI for the given context name .
2786	Creates a modular reference .
2787	Create a new modular reference .
2788	Create a modifiable reference .
2789	Returns a LocalIDLType for the given type code .
2790	Wait for a service .
2791	Compute the masked password .
2792	Initialize the security vault .
2793	Start the vault session .
2794	Display the creation of the specified attribute .
2795	Displays the vault configuration .
2796	Returns the keystore configuration .
2797	Throws an exception if the given value is not null .
2798	Returns the service name for a deployment .
2799	Inserts a string value into a Any object .
2800	Returns whether the given JNDI permission implies this permission .
2801	Returns the string representation of the action .
2802	Gets the name of the log file .
2803	Send a state change notification
2804	Convert an object to a native state .
2805	Gets the value of the given type .
2806	Gets the context service name .
2807	Returns all interceptors .
2808	Adds an interceptor for a method .
2809	Adds a dependency to this component .
2810	Returns a list of interceptors for the given method .
2811	Return the interceptors for a given method .
2812	Add a timeout interceptor to the request .
2813	Adds an interceptor to the list of interceptors for the specified interceptor .
2814	Adds a postConstruct interceptor to the chain .
2815	Adds a preDestroy interceptor to the chain .
2816	Adds a pre - passivate interceptor to the prePassivate chain .
2817	Adds an interceptor to the chain .
2818	Sets the service create service .
2819	Remove JNDI aliases
2820	Adds the EJB transport provider to the builder .
2821	Get the context service name of a component .
2822	Get the context service name for the given module .
2823	Returns the bindInfo for the given environment entry .
2824	Returns the bind info for the given JNDI name .
2825	Get the cache for the domain .
2826	Return an array of ValueMembers
2827	Return an array of ValueMemberDefinitions for the type code .
2828	Creates the subsystem root address .
2829	Parse the configuration element .
2830	Start the service .
2831	Adds a weld integration .
2832	Returns the service name for the job operator .
2833	Adds a component description to the deployment .
2834	Adds a message destination .
2835	Finds all views for the given view type .
2836	Retrieves the components for a given component .
2837	Returns all views with the given view name and view name
2838	Resolve a message destination .
2839	Initialize the transformers
2840	Adds a DEFAULT attribute to the resource transformation description .
2841	Rename an attribute to an alias .
2842	Pop the security context from the remote context .
2843	load the ids for the ids
2844	Checks that the version is missing .
2845	Compute slot .
2846	Get the TypeCode for a constant .
2847	Add TypeCode for given class
2848	Utility method to create a module definition .
2849	Add all the interfaces in the given container .
2850	Adds the abstract valuetype ids to the given container .
2851	Add the given class to the map .
2852	Add an interface definition .
2853	Add a value definition to the map .
2854	Add an exception definition .
2855	Determine the class level injection type .
2856	Checks if JTS is enabled .
2857	Start the service .
2858	Stop the store .
2859	Check if the given method is allowed .
2860	Checks transaction synchronization .
2861	Recursively find all component classes in the deployment unit .
2862	Returns the map of timers for transaction completion .
2863	Gets extra parameters .
2864	Returns the parameters from the configuration .
2865	Convert a type to a Class .
2866	Attempts to convert the given value to an object .
2867	Return the types in the array of values
2868	Checks if the given type names are the same .
2869	Mapping to next binding .
2870	Returns true if there are more bindings .
2871	Map a binding .
2872	Observe a health check .
2873	Close health checks .
2874	Returns a reference to an EJBLB component instance .
2875	Determine the handle for an EJB home .
2876	Returns value as Enum .
2877	Skips the specified amount of bytes from the input stream .
2878	Checks that two elements are not the same .
2879	Adds a component description to the module .
2880	Adds a set of class loaders to the deployment .
2881	Unbind a component .
2882	Lookup the given name .
2883	Lists the given name .
2884	Lists bindings for the given name .
2885	Add a context handle .
2886	Save context handle .
2887	Creates an IO subsystem .
2888	Create the welcome content handler .
2889	Returns an object from the pool or creates a new one if necessary .
2890	Calculate the operation analysis map .
2891	Collect metrics for a resource .
2892	Creates the deployment unit .
2893	Do the actual deployment .
2894	Publish the webapp .
2895	Stops the web application .
2896	Start the wld container .
2897	Register an endpoint configuration .
2898	Retries the timer to retry .
2899	Called after timer processing .
2900	Get all methods in the given class
2901	Get the declared fields
2902	Returns the Constructor
2903	Get method by name and params
2904	Adds an extension to the operation context .
2905	Determines whether a parameter is allowed to be ignored .
2906	Migrate generic transport class for generic transport
2907	Marks the current state as canceled .
2908	Run the thread if not cancelled .
2909	Changes the type of the property .
2910	Returns true if index without index without index without index .
2911	Estimate the number of indexes in the given object .
2912	Recursive method to find all the classes in the given directory .
2913	Returns a list of classes that implement the given interface
2914	Returns the generic type of the given field .
2915	Evaluates the record .
2916	Derives a field type from the record .
2917	Updates record with given record .
2918	Find record by ID .
2919	Returns the minimal set of nodes for sharded query
2920	Moves all equalities from the given WHERE clause into a flattened list .
2921	add orderBy to the orderBy projection
2922	Extract sub - queries for the given query plan .
2923	Returns true if the given ID is from the cluster
2924	Handle class with index .
2925	looks to see if the given class is a diamond hierarchy
2926	Returns the order direction of the query
2927	Checks for multiple index lookup conditions .
2928	Finds the best index for the given set of indexes .
2929	Build index search descriptor for fulltext .
2930	Compute the common factor for the given list of indexes .
2931	Creates a new ODocumentHandlers instance .
2932	Allow the role to be allowed to access a specific resource
2933	Checks if a rule is defined .
2934	Compose server status .
2935	Initialize the system database .
2936	Load local databases .
2937	Remove a member .
2938	Return a new lock manager
2939	Assigns the lock manager to the cluster .
2940	Commits the micro - transaction .
2941	Rolls back the micro - transaction .
2942	Updates the identity record after a change in the transaction .
2943	Updates record cache after rollback .
2944	Prepare file creation if necessary .
2945	Perform atomic move .
2946	Gets disjoint patterns .
2947	This method checks if local node should be executed locally
2948	Adds a character to the builder .
2949	Returns true if the connection is connected .
2950	merge two byte buffers
2951	Split a short into two buffers .
2952	Execute the command .
2953	Put a single value into the index .
2954	Removes all words with the given key from the set .
2955	Executes the OQuery command .
2956	Execute the first query and return the result .
2957	Create and initialize the stream
2958	Check to see if we re accessing the region .
2959	Replace content with new file .
2960	Execute a command .
2961	end request
2962	Add host to localhost
2963	Begin a request for a remote node .
2964	Gets the database .
2965	Get a connection by ID and protocol
2966	Kill the client .
2967	Interrupt the channel .
2968	Disconnect the given channel
2969	Pushes the distributed configuration to the client
2970	Swaps the entry at the specified index with the new value .
2971	Releases all locks .
2972	Synchronize schema .
2973	Update Metric metadata .
2974	Returns the last record in the iterator .
2975	Returns the next character
2976	Execute the query
2977	On asynchronous replication error .
2978	Register a new compression algorithm .
2979	Gets the limit of the number of open files .
2980	Checks if an indexed function is executed on target .
2981	Move the buffer position .
2982	Fills the buffer with the specified value .
2983	Executes the steps until a return value is found .
2984	Execute the steps in the script .
2985	Evaluates the record .
2986	Execute the DROP algorithm .
2987	Loads the configuration from the storage .
2988	Parse the request .
2989	Execute the request .
2990	Updates the schedule starting at the given start node .
2991	Adds a new index definition to the composite .
2992	Split this project into an aggregate .
2993	Convert result to object
2994	Gets the collate .
2995	Gets the string value .
2996	Encodes the probe .
2997	Execute the command
2998	Build ODocument from file path
2999	Checks if the password matches the hash .
3000	Create a hash of the input string .
3001	Returns true if PBKDF2 algorithm is supported by this class .
3002	Creates new index .
3003	Return all vertices in the graph
3004	Iterate over the graph
3005	The partition key is the partition key .
3006	Gets the delay in milliseconds .
3007	Returns the set of features supported by this factory .
3008	Checks if the changes container contains a new page .
3009	Parses the timeout .
3010	Parses a lock .
3011	Creates a cluster in the database .
3012	Frees a cluster
3013	Start the profiling .
3014	Shut down the database .
3015	Returns a singleton result set from the given entity
3016	Grant an operation to a specific resource .
3017	Revoke an operation on a resource
3018	Returns true if the record was deleted false otherwise .
3019	Bind parameters .
3020	reset the hash table
3021	Returns the index of the item in the hash table .
3022	Applies a random number to a random value .
3023	Creates an index .
3024	Drops indexes managed by this instance .
3025	Returns the global index .
3026	Returns linked class .
3027	Converts the document to a stream
3028	Removes a listener from the list .
3029	Register a distributed database .
3030	timeout a request
3031	Creates a copy of this object .
3032	Try to merge the given object with the current value into this object .
3033	Replaces the object with the given pointer with the given object pointer .
3034	Transform result .
3035	Execute the command .
3036	Closes all pooled databases .
3037	On storage unregistered .
3038	Returns a set of names of the types defined in the system .
3039	Get the set of names of all collate types .
3040	Return a set of command names
3041	get field size and type from current position
3042	Write status code .
3043	Writes the headers to the response
3044	Write the records to the response
3045	Write a record to the response
3046	Sends a response .
3047	Send a stream to the client .
3048	Opens database transaction .
3049	Closes this database .
3050	looks for changes in collection
3051	Complete the operation .
3052	Pushes the given counters to the snapshot .
3053	Pushes the WritCacheCountersHolder to the snapshot
3054	Pushes storage counters to the snapshot .
3055	Pushes the WALCountersHolder to the snapshot
3056	Push the counters for the given component .
3057	Stops the write cache timer .
3058	Stops query checkpoint timer .
3059	Stops full checkpoint timer .
3060	Stops commit timer .
3061	Stops the WAL record timer .
3062	Stop flush timer .
3063	Parse a SQL statement
3064	Initialize receive messages .
3065	Initialize the disconnect timer .
3066	Removes the record .
3067	Sets the property of this graph element .
3068	Remove a property .
3069	Check if the given class exists in the schema
3070	Wrap index changes .
3071	Defines a new vertex attribute strategy .
3072	Defines an edge attribute strategy
3073	Filters new records by class name .
3074	Return new records based on cluster IDs .
3075	Add an index entry to the index .
3076	Merge the given set .
3077	Update record .
3078	Returns true if the statement without indexing .
3079	Prepares keys .
3080	Writes a page to the cache .
3081	Reads a page from the disk .
3082	Truncate the given page index .
3083	Opens the file
3084	Check if replication is active .
3085	Gets the new node strategy .
3086	Returns true if the execution mode is in sync mode .
3087	Returns true if the cluster should be read from the cluster .
3088	Returns a map of cluster names to values for the iNode s cluster name
3089	Get all the servers in the iCluster configuration .
3090	Checks if a server contains all cluster names .
3091	Check if a server contains a specific cluster
3092	Returns the list of master servers .
3093	Returns all the configured servers in the cluster .
3094	Get the clusters on a node .
3095	Get the clusters owned by the given node .
3096	Returns the owner of the cluster .
3097	Returns the owner of the cluster that the specified name belongs to .
3098	Get the servers in the cluster .
3099	Returns the set of registered servers .
3100	Returns the set of data centers for this OAuth cluster .
3101	Gets write quorum .
3102	Check if cluster is sharded .
3103	Return servers in distributed database .
3104	Return the data center of a specific server .
3105	Gets the global read quorum .
3106	Gets the write quorum .
3107	Gets the cluster configuration .
3108	Gets the distributed database configuration .
3109	Clear initialization stack .
3110	Retrieves an index by its name .
3111	Drops an index .
3112	Add a vertex to the OrientVertex .
3113	Add an edge to the graph
3114	Returns the vertex with the given id
3115	Get all vertices of the class with the specified class name .
3116	Returns all edges of the specified class .
3117	Returns an edge by id
3118	Reuse the current database .
3119	Shutdown the database
3120	Returns the base type of vertices
3121	Returns an OrientVertexType by name .
3122	Creates a new vertex type .
3123	Drop vertex type .
3124	Returns an edge type by name .
3125	Creates an edge type .
3126	Get an element by id .
3127	Drop an element index .
3128	Creates a key index .
3129	Remove a notification listener
3130	Fire a background data flush event .
3131	Stop monitoring .
3132	Registers the mbean with the given storageId .
3133	Unregister a MBean
3134	fetch the counters from all threads
3135	Fetch system statistics for all threads
3136	fetch components from componentCountersHolder
3137	Compress the given string
3138	Return the value of a property by name .
3139	Detach this object from the persistence model .
3140	Returns the version of the object .
3141	Invoke a command .
3142	Sets the object dirty .
3143	Unset the dirty object .
3144	Gets the index types .
3145	Returns a set of engine names .
3146	Gets the missing nodes .
3147	Returns a list of conflict responses for this response group .
3148	Returns the best response group with max responses .
3149	Compute quorum response .
3150	Gets the received responses from the server .
3151	Returns the plan with the given ID .
3152	Allows the execution of an indexed function on target .
3153	Return the library code for the given database .
3154	Release the database engine for the database .
3155	Returns the next page position from the file
3156	Updates the size of the bag .
3157	Returns the value at the given index .
3158	Checks if an index can be used by an index by an order by an order - by - filter .
3159	Find the index of outside of the text .
3160	Jump to the specified text .
3161	Jump to the current position .
3162	Sets the fetch plan .
3163	Add a repair record to the REPAIR record store .
3164	Cancels a record .
3165	Enqueue a repair cluster .
3166	Returns the dependencies of a given pattern
3167	Create a pojo instance from the class name
3168	Register entity classes
3169	Register an entity class for the given class
3170	Set class handler .
3171	Acquires a database .
3172	Returns the number of connections for the given user name and user name
3173	Acquires a database .
3174	Execute a database .
3175	Lookup an iterator for the given class using the orient class loader .
3176	Check the cache memory configuration .
3177	Creates a vertex from a JSON object .
3178	Creates an edge from a JSON object .
3179	Creates a JSONObject from the given element s properties .
3180	Creates an object node from the given element .
3181	Execute an import .
3182	Returns the status of the job .
3183	Returns the active data center map .
3184	Extracts the first algorithm from a cipherTransform
3185	Creates an object from an OSymmetric key configuration .
3186	Creates a new SSymmetricKey from a file system file .
3187	Creates a new OS symmetric key from an input stream .
3188	Encrypt a string .
3189	Save the key to an output stream .
3190	Save to a keystore .
3191	Set child context .
3192	Adds the given object to the unique result set if it is a unique result
3193	Gets the value as object .
3194	Authenticate database .
3195	Get a map entry from iMap .
3196	Get the record .
3197	Read current record .
3198	Get transaction .
3199	Gets no tx .
3200	Setup database pool .
3201	Get property by name
3202	Commits a transaction .
3203	Parse a statement .
3204	get next token
3205	Returns the token at specified index
3206	Generate ParseException .
3207	Returns all vertices in the graph with requested labels
3208	Removes the vertex .
3209	Adds a new edge to the graph
3210	Add an edge to the graph
3211	Get the connection class name .
3212	Get a connection .
3213	Processes the set of RIDs from the database .
3214	Returns the methods that are declared in the console .
3215	Executes the given task on the local node .
3216	Retrieves the number of nodes with the given statuses .
3217	Perform backup .
3218	Wait for next retry
3219	Returns the value of an argument .
3220	Check if there are any parameters in the request .
3221	Connect to the OConnect server .
3222	List all databases in the database .
3223	Get server information
3224	Check if the remote database exists .
3225	Drop a database .
3226	Free the database .
3227	Releases a database .
3228	Execute the cluster status
3229	Execute an index .
3230	Get the active graph .
3231	Parses the retry .
3232	Save record .
3233	Delete record from cache .
3234	Returns the authentication header for the database .
3235	Authenticates a user by username and password .
3236	Check if the user is authorized to access the given resource
3237	Wait for the server to finish .
3238	This method is used to adjust the start of a line .
3239	Set page pointer .
3240	Get the object pointer at the given offset
3241	End an atomic operation .
3242	Acquires exclusive lock .
3243	Change the maximum amount of memory in the cache .
3244	Starts listening for connections .
3245	Read server parameters .
3246	Shutdown the LogManager .
3247	add item to list
3248	Removes the key from the map .
3249	Acquires an entry from the cache .
3250	Returns the value for the given key .
3251	Clears all data .
3252	Close a key .
3253	Empty read buffers .
3254	Called after a write task completes .
3255	after the write has been completed .
3256	Puts an entry in the read buffer at the given index .
3257	Returns the closest power of two to the given value .
3258	Sends an event to the listeners .
3259	Convert an object to a number .
3260	Convert all the values from the underlying map to this object .
3261	Returns the serializer for the given object type .
3262	Initialize shutdown queue .
3263	Retrieve an engine by its name .
3264	Executes the given database .
3265	Executes the query and returns the result .
3266	Adds a new state to the readers state list .
3267	Parses the OUser and returns the OUser object .
3268	Creates metadata object .
3269	Try to acquire a read lock .
3270	Returns the vertex at the given direction
3271	Returns the id of the element
3272	Sets the property value .
3273	Remove the property from the map
3274	Deletes the contents of the rootTrees .
3275	Deletes the contents of the file .
3276	End the batch importer .
3277	Creates a new vertex .
3278	Parse strategy .
3279	get positions from embedded collection
3280	Execute the given index .
3281	Try to fix a link .
3282	Fill a record with data from the record store .
3283	Sets the version of the record .
3284	Get record type .
3285	Initialize database instance .
3286	Prints the stack trace of an exception .
3287	Execute an index query .
3288	Convert a link to a record .
3289	Register a server command
3290	Create an OServerUserConfiguration object from the given doc document .
3291	Analyze search condition .
3292	Create indexed property .
3293	Attaches the specified object to this object .
3294	Get index class from database .
3295	Sends the next value to the sequence .
3296	Truncate the document .
3297	Add a base class
3298	Add the polymorphic cluster ids to the cluster .
3299	Serialize a link to a string buffer
3300	Releases a pointer to the pool .
3301	Check for unreleased direct memory leaks
3302	Clears all the pointers from the pool .
3303	Create an int from a byte array at a specific offset .
3304	On opening a new database .
3305	Installs the cluster owned by this class
3306	Dump the status of all servers in the cluster .
3307	Returns the index of the specified object in the array .
3308	Returns the index of the specified object in the array .
3309	Gets the clusters .
3310	Handle the search result .
3311	Get the temporary id counter
3312	Report a tip to the profiler .
3313	Parses a fetch plan .
3314	Parse the non - cache keyword .
3315	Optimized sort
3316	Returns the status of the batch .
3317	Executes the command .
3318	Handle a JVM error .
3319	Puts an index value into the store .
3320	Rolls back the given micro - transaction .
3321	Execute the command .
3322	Register a cluster in the database .
3323	Set property .
3324	Execute the database .
3325	Execute DATABASE command .
3326	Delete the record with the specified version
3327	Callback for each hook
3328	Delete the record from the database .
3329	Counts the number of views for the given view name .
3330	Count the number of classes in the database .
3331	Activate this document object on the current thread .
3332	Register encryption algorithm .
3333	Returns the index of the byte at the given position .
3334	Parses the next word .
3335	Parses the next word .
3336	Parses the characters .
3337	Parses the next keyword .
3338	Parses the given character if it is a separator .
3339	Execute a command .
3340	Clears the configuration files .
3341	Returns the offset of this buffer as a byte array .
3342	Extract token string .
3343	Obtains an access token from the resource .
3344	copy the access token from the context
3345	Returns true if there is no more characters .
3346	Reads a line from the byte array .
3347	Read a line from the buffer .
3348	Skip bytes from input stream .
3349	Skip n bytes .
3350	Ensures that the offset is valid .
3351	Auxiliary method that performs a merge sort .
3352	Utility method for swap .
3353	Helper method for parallelism
3354	Utility for MurmurHash3Hash33333 .
3355	Constant - time MurmurHash3Hash3 a long .
3356	Writes a byte buffer to the file .
3357	Truncate the file to the given size .
3358	Changes the position of the file .
3359	Perform consumer refresh metrics reporting .
3360	Waits for all tasks to complete .
3361	Find matches .
3362	Returns a set of types that need to be processed .
3363	Cleans up snapshots .
3364	Returns the hash code for a field .
3365	Returns true if two fields are equal
3366	Traverses references to references outside of the given closure .
3367	Called when an announcement is received .
3368	Called when the read state is complete .
3369	Read header tags .
3370	Extracts the primary key from the object .
3371	Clears all the segments .
3372	Reads an ordinal from the stream
3373	Returns the size of the bit set .
3374	Returns a string representation of a field .
3375	Copies the contents of the given byte array into this buffer .
3376	Copies data from source to dest .
3377	Returns true if the specified byte array is equal to the specified range .
3378	Copies contents from src to dest .
3379	Copies data from source to dest .
3380	Reads from an input stream .
3381	Writes len bytes to output stream
3382	Ensures that the segment at the given index is not null .
3383	Returns the position of the given field .
3384	Calculate the select bucket size and total number of bucket sizes
3385	Returns true if the given dataset has collections in the given dataset .
3386	Generate the files in the given directory .
3387	Generate the files in the given directory .
3388	Returns true if the key matches the specified ordinal .
3389	Returns the record key for the specified ordinal position .
3390	Creates a FieldPath for the given primary key and path .
3391	Creates a field path for the hash table .
3392	Creates a FieldPath for a given prefix
3393	Put an object into the cache .
3394	Recursive method to initialize the array size .
3395	Returns true if the given key is in the set .
3396	Computes the change percent of the given cardinality .
3397	Adds a field to the specified object .
3398	Returns a list of schemas ordered by their name .
3399	Initialize with the default version for the next major major version .
3400	Get the value at the given index
3401	Find records that match the given field name and value .
3402	Returns the matches for the specified field .
3403	Set the element match paths .
3404	Set the element key paths .
3405	Calculates the result of the iteration .
3406	Restore data from state .
3407	Runs the cycle .
3408	Excludes the specified key from the hash table .
3409	Excludes the state engines that are not referenced by this object .
3410	Writes the given blob header to the data output stream .
3411	Calculate type metrics .
3412	Write the field data to the given buffer
3413	Writes a fixed - length integer in the buffer .
3414	Writes a fixed - length long to the buffer
3415	Return the specified ordinal to the pool .
3416	Sorts the free orders .
3417	Hashes a key - value pair into a hash table .
3418	Hashes a key .
3419	Resize storage .
3420	Find a free ordinal for the given ordinal .
3421	prepare for write
3422	Compares the given key with the given key .
3423	Increases the size of the key array .
3424	Rehashes an item with the given key .
3425	Return an empty key array with the given size
3426	Compares the fields of the match .
3427	Finds a matching match for the given key .
3428	Creates a new read state
3429	Calculates the size of the hash table .
3430	Runs the compaction cycle .
3431	Writes a snapshot to the given output stream .
3432	Writes delta .
3433	Adds the schema to the set if not already present .
3434	Normalize field path to param .
3435	Reindex hash index .
3436	Finds matches in the given query .
3437	Triggers an asynchronous refresh with a random delay .
3438	Triggers an async refresh .
3439	Adds a type diff to the tree .
3440	Calculates the difference between type diffs .
3441	Writes a v - long to the output stream .
3442	Writes a VInt to the output stream .
3443	Write a VInt to the byte array at the given position .
3444	Reads a v int from the stream .
3445	Reads a long from the stream .
3446	Adds the view to the layout .
3447	Refresh loading views size .
3448	Update the UI for the mode .
3449	Pull the pull event .
3450	Overrides the hover with a given amount .
3451	Adds a new rule .
3452	Adds a given name to the rule .
3453	Creates a new rule builder
3454	Creates a new rule builder .
3455	Returns a builder with the given fact type .
3456	Returns a builder with the given result type .
3457	Start building a predicate .
3458	Create a new delegate rule .
3459	Adds an action to the predicate .
3460	Create an instance of the given rule .
3461	Returns the first annotated field of the given class .
3462	Returns the first annotated method of the given annotation .
3463	Returns the annotation of the given class .
3464	Register a new audit rule .
3465	Updates the status of a rule .
3466	Returns a map of the status of audit records .
3467	Creates a new RuleBook with the given result type .
3468	Adds an action to the rule .
3469	Adds an action to the rule .
3470	Resets the value to the default value .
3471	Returns a new rule with the specified type .
3472	Gets the POJO rules .
3473	Reads a line from the table content
3474	Convert a list of services to an array of Service objects .
3475	Gets the ports from an image configuration .
3476	Extract ports from configuration .
3477	Parse port mapping .
3478	Add port if not null .
3479	Get the next service port from the list .
3480	Adds missing parts to the service .
3481	Append an image stream to a target file .
3482	Determines whether the given servicePort matches the given port number .
3483	Converts a service name to an environment variable .
3484	Gets the host and port .
3485	Puts a string value into the given map if it does not already exist .
3486	Merges the given map with the given map .
3487	Merge two maps .
3488	Put all values in the given map if not null .
3489	Wait until a pod is ready
3490	Validate the KubernetesId
3491	To item list .
3492	Gets the resource version .
3493	Determines whether the pod is ready .
3494	Returns the current context .
3495	Helper method to check if a route has the given name .
3496	Checks if a resource exists in the given project .
3497	Reads and parses the given file .
3498	Converts a map of environment variables to a list of EnvVars .
3499	Merge one resource .
3500	Merges the maps with empty strings
3501	Check if podSpec is local
3502	Reads the configuration from the file .
3503	Adds port number if valid .
3504	Returns the JSON string for the specified server .
3505	Returns the configuration of a plugin .
3506	Returns the secret configuration for the given id .
3507	Downloads a file .
3508	Compare two versions
3509	Given a profile configuration extract the processor configuration and return the merged processor config .
3510	Lookup a profile by name .
3511	Reads all profiles from classpath .
3512	Load profiles from classpath .
3513	Finds the profile yaml file in the given directory .
3514	Returns the list of profiles .
3515	Creates a list of profiles from a YAML file .
3516	Returns the image pull policy .
3517	Determines if this platform is OpenShift mode
3518	Get replica count from xml configuration .
3519	Returns the first child element with the given name .
3520	Installs a template
3521	Remove tag by name .
3522	Apply a namespace to the entity .
3523	Apply a project to a project .
3524	Apply a project request to a project
3525	Returns the namespace for the given entity
3526	On apply error .
3527	Create the Kubernetes list .
3528	Removes the namespace from the configuration .
3529	Returns environment variables .
3530	Convert duration to seconds .
3531	Parses a duration string from a duration string .
3532	Scans the files matching the given patterns .
3533	Sets the OpenShift features for OpenShift features .
3534	Helper method to check if the service has an ingress rule .
3535	Parses the given mapping from the given input stream .
3536	Returns a generator context .
3537	Returns the generator config .
3538	Returns an Enricher context .
3539	Extract enricher configuration from enricher
3540	Returns the default icon .
3541	Copies the app config files to the given directory .
3542	Loads properties from a URL .
3543	Returns the spring boot version of the Maven project .
3544	Create a list of service objects .
3545	Enqueue enricher .
3546	Gets the raw config map .
3547	Flattens the given map .
3548	Extracts the watcher config .
3549	Extracts a single template from the resources list .
3550	Returns the build date .
3551	Returns the value of the configuration property .
3552	Returns the specified configuration map as an unmodifiable map .
3553	Prepares named list of named processors .
3554	Adds the from builder to the build .
3555	Returns the default from the given runtime mode
3556	Returns the name of the image .
3557	Gets the registry .
3558	Returns whether or not the configuration should be online .
3559	Gets the external service URL .
3560	Returns the value of the given property as a Boolean .
3561	Creates a new client .
3562	Creates an internal ES node .
3563	Scans through all plugins .
3564	Creates a new AmericanExpressionsBalance from a JSON string .
3565	Retrieves the rewards balance .
3566	Creates a new PayPal payment resource from a JSON string .
3567	Issues HTTP GET request .
3568	Sends an HTTP POST to the client .
3569	Creates a new VenmoConfiguration object from the given JSON object .
3570	Collect data about device data .
3571	Gets data about device data .
3572	Collect data for PayPal device data .
3573	Returns the PaymentMetadataId for the PayPal client
3574	Checks if a signature is valid .
3575	Returns a string property as a string or fallback .
3576	Parses a list of PaymentMethodNotces from the JSON .
3577	Gets the browser checkout recipe .
3578	Gets the browser billing agreement .
3579	Perform an HTTP GET request .
3580	Asynchronously sends data to the client .
3581	Perform a POST request .
3582	Starts a new local payment .
3583	Applies a local payment to the browser .
3584	Add listener .
3585	Removes listener
3586	Requests the billing agreement .
3587	Sends an activity result .
3588	Parses the response and returns the PaymentAccountBuilder
3589	Convert a list of words to a dictionary .
3590	Remove the given words from the KoreanPos object
3591	Convert a sequence of Korean tokens to a list of strings .
3592	Extract phrases from a sequence of Korean phrases .
3593	Detokenize a list of tokens .
3594	Fetches data from channel .
3595	Joins a list of LocalUnits into a byte buffer .
3596	Joins a list of NAL units into a byte buffer .
3597	Returns the profile at the specified index
3598	Normalizes the number of taps to fixed precision .
3599	Reads the next marker from the stream .
3600	Reads the next marker from the stream .
3601	Find the max available frame .
3602	Performs the modification of the specified file .
3603	Copies data from the source file to the destination file .
3604	Returns the duration of the edits in the specified track .
3605	Converts a frame number to a time value .
3606	Converts a time value into a frame
3607	Converts media time to edited by time
3608	Converts the edited time to movie time using the given time range .
3609	Convert a media frame number to a qt frame number
3610	Converts the video frame to a time .
3611	Convert a timecode value to a timecode frame
3612	Converts a timecode track into a formatted string
3613	Compute a 7 - bit integer .
3614	set a value to a list
3615	Returns true if this ColorSpace matches the given color
3616	Returns the size of the specified size
3617	Create a raw MP4J uploader from the given input channel .
3618	Read byte from buffer .
3619	Create a WAV header
3620	Creates a WAV header from a list of headers
3621	Parses the specified AAC4Decoder config from the byte array .
3622	Encode a symbol
3623	Reads decoded data from the buffer .
3624	Split a track into edit events .
3625	Decodes a frame .
3626	Sets whether data is big endian
3627	decompute the bits of a B
3628	Encodes native video frame .
3629	Encodes the given long value into an array of bytes .
3630	Calculate the length of the given long
3631	Adds a packet .
3632	Reads data from the file .
3633	Decode a bin
3634	Decodes a binary pass .
3635	Moves to the next marker in the buffer .
3636	Returns the sample frequency for an integer .
3637	Pushes a plane to the plane .
3638	Stores a value in a block .
3639	Compute the coefficients for a given level at a given level
3640	Converts a block into a block .
3641	Concatenates bits from the input sequence into this one .
3642	Rewind a value in reverse order
3643	Rewind in reverse order
3644	Seek to a specific frame
3645	Returns the picture buffer for the first video frame
3646	Get the gain ID of a change point
3647	Converts a byte array into an int array
3648	Converts an int array into a byte array
3649	Converts the given AudioFormat into a float buffer .
3650	Deserialize float buffer .
3651	Interleave the contents of the audio buffer and write them to the output buffer .
3652	Converts from inb to output buffer .
3653	Gets the encoded size of the video .
3654	Builds the box out - out map map .
3655	Helper function to build the map with the specified size
3656	Read a batch of ULBS
3657	Reads a 32 - bit int from the given byte buffer .
3658	Calculates the MVP statistic
3659	Encode a single frame
3660	Encodes an IDR frame .
3661	Encodes a single picture frame .
3662	Returns a collection of supported codec IDs .
3663	Returns a collection of supported codec IDs .
3664	Adds a reference to the slot .
3665	Deletes all references from the queue .
3666	Flushes all the references to disk .
3667	Load a library
3668	Attempt to unpack a library on the classpath .
3669	Delete temporary files .
3670	Returns the default layout for the audio channel .
3671	Get the audio channel from a layout .
3672	Make a media packet .
3673	Get version information .
3674	Returns the default time base .
3675	Make a new Demuxer object .
3676	Play a video stream .
3677	Display the video frame at the given time .
3678	Make a codec descriptor .
3679	Prints the given option to the given PrintStream .
3680	Register a URL factory for the given protocol prefix .
3681	Generates a unique name .
3682	Make a new media audio resampler .
3683	Returns a collection of supported video frame rates .
3684	Returns a collection of supported video format formats .
3685	Returns the supported audio sample rates .
3686	Returns a collection of supported AudioFormats .
3687	Returns the list of supported AudioChannel layouts .
3688	Set a flag on the Coder .
3689	Set a flag on the Coder .
3690	Get a decoder .
3691	Get the remuxer
3692	Returns a collection of MuxerFormat objects .
3693	Make a new FilterGraph instance .
3694	Returns the type of bit stream
3695	Returns a ByteBuffer starting at the given offset
3696	Make a new audio frame .
3697	Resample picture .
3698	Validates the given image .
3699	Validates the given media picture .
3700	Returns the current filter graph .
3701	Get the meta data for this video .
3702	Returns the CPU architecture
3703	Returns the CPU architecture for the given GnuString
3704	Returns the OS family for the given OS name .
3705	Returns the OS family for the given gnuString
3706	Play the specified audio file .
3707	Loads a library with the specified name and version .
3708	Sets the loaded library with the specified name and version .
3709	Attempts to load a library .
3710	Initialize search paths .
3711	Returns true if the specified library is already loaded .
3712	Records a screenshot of the screen .
3713	Deletes the object from the pool .
3714	Get a stream at the current position
3715	Get the muxer
3716	Make a set script transaction .
3717	Decodes a base58 string into a byte array .
3718	Generate seed string .
3719	Get information about a transaction .
3720	Returns a list of address transactions for the given address
3721	Retrieves the list of addresses for an address .
3722	Retrieves information about a block header .
3723	Get block by signature .
3724	Send request .
3725	Builds a script with the specified fee .
3726	Compiles the given script .
3727	Write primitive array
3728	Flush buffer .
3729	Writes an object to the output .
3730	Reads the next direct class .
3731	Writes an object to the output stream using avaiableSize .
3732	Set up the mmF data
3733	Returns the specificity of the given class .
3734	Resizes the backing store to requested size .
3735	Removes a value from the index .
3736	Writes an Ascii String into the output stream .
3737	set output stream
3738	Utility method to create a JSTConfiguration object based on the given flag and sharing information .
3739	Creates a new configuration object .
3740	Calculates the size of an object in bytes of the object .
3741	Clears cached objects .
3742	Get an object input from an input stream .
3743	Get object input from array
3744	get an object input from a byte array
3745	Get an object output from a stream .
3746	Register cross - platform class mapping .
3747	Returns the CPName for a class
3748	Write int .
3749	Write an integer to the output stream .
3750	Write int .
3751	Write primitive array .
3752	Write raw bytes into buffer .
3753	Get cached field info .
3754	Called when an object has been written .
3755	Called when an object has been written to the stream .
3756	return FSTFieldInfo for given class
3757	Write array .
3758	Set the string to this buffer .
3759	Writes an array of primitives .
3760	Cleans up tracking for changes .
3761	shot snapshot of changes
3762	Register an object for write .
3763	Writes an object to the output stream .
3764	Converts a byte array into an object .
3765	Read a byte array from the buffer
3766	Reads an int from the buffer
3767	Back the poll .
3768	Sets whether thread pool enabled .
3769	Starts the embedded Cassandra .
3770	Clean data embedded in Cassandra .
3771	Copies the given resource to the given directory .
3772	Print all active threads
3773	Tests if a remote port is currently taken .
3774	Returns an empty subscriber state .
3775	Read onnx operations from the classpath .
3776	Calculate the output shape
3777	a complex ndarray or a condition
3778	AND ndarray
3779	1 - D INDArray
3780	OR condition
3781	apply where condition
3782	Return first index of given condition
3783	Serialize this array into a FlatProperties object
3784	Creates a FunctionProperties object from FlatProperties object
3785	Convert a collection of properties into a FlatNode .
3786	Set exception .
3787	Set the cause of the first exception
3788	Merges two coordinates .
3789	Partitions the data set by chunk
3790	Convert an onnx type to an nd4j type
3791	Do the shutdown .
3792	Get the architecture of the current device
3793	Convert a column vector
3794	Pooling 2D
3795	Creates a CompressionDescriptor from the given byte buffer .
3796	Split the list into batches .
3797	Validate that the arrays are concatenated
3798	Sets the op type
3799	Returns nins in a linear space
3800	Flattens the given collection of matrices
3801	Computes the bilinear products of the input tensor
3802	Creates a complex ndarray from a double array .
3803	Creates complex values of a complex number
3804	Creates complex values of a complex array
3805	Returns true if the sync was successful .
3806	Subtracts the sub - components of the complex number .
3807	Atomically validating the complex number
3808	 ceiling .
3809	Negate the given number
3810	Absolute the absolute value of the complex number
3811	Calculate the power of a complex number .
3812	Get context for aeron connection .
3813	Binary binarization function .
3814	Sample a dataset
3815	Get memory footprint
3816	Converts an exception into a string .
3817	Convert a full hostname into a simple hostname .
3818	Convert an array of Strings to a string .
3819	Converts a byte array into a hex string .
3820	Extract string from string
3821	Splits the given string using the given escape character .
3822	Splits the given string using the given separator .
3823	Find the next separator in the given string
3824	Converts a string to an HTML string .
3825	Joins the given strings with the given separator .
3826	Convert a string to camel case .
3827	Replace all the tokens in the given template with the given map of tokens .
3828	Gets stack trace .
3829	Invert an ndarray
3830	Access a big integer .
3831	Is actual on host side
3832	Check if the device is actual on the device side
3833	Create shape information
3834	Create shape information
3835	Check if shape is vector
3836	Get the order of the array
3837	Get the offset for the given array
3838	Convert an array of int indices to an INDArrayIndex
3839	Gets a short .
3840	Allocates data buffer .
3841	Copies data from a buffer to a buffer
3842	Returns a constant buffer for a float array
3843	Returns the kafka URI .
3844	Element - wise power function .
3845	log of ndarray
3846	Maximum function with a scalar
3847	Max function .
3848	Minimum function with a scalar
3849	Minimum function .
3850	Stabilize kdarray
3851	Expmm1 function
3852	log1p
3853	Prepare the bounds
3854	Approximate the h algorithm given a H step
3855	Returns next dataset .
3856	Computes the S - A - QR decomposition
3857	Build allocation shape from data buffer
3858	Returns true if the given name exists in the path .
3859	Custom deserialization
3860	sweepatches to all commands
3861	Create an ndarray from a pointer
3862	Create an ndarray from a file
3863	Allocates a dummy workspace .
3864	Attaches an object to the lock .
3865	Indicates whether the master is started .
3866	Execute the given op
3867	Flush the queue
3868	Returns an InputStream for the resource .
3869	assign deviceId for thread
3870	Attaches a thread to the device
3871	Get next device .
3872	Returns the name of the operating system .
3873	Calculates the ARCH type .
3874	publish ndarray
3875	Start the server .
3876	Create data buffer .
3877	Intercept an int data op
3878	Add this complex number to another .
3879	Process payload .
3880	Avg pooling 3d operation
3881	Wrap a convolution
3882	reset all fields
3883	Return the string representation of the given op
3884	Allocate a new array and allocate it .
3885	Returns the shape of this variable
3886	Evaluate the output
3887	This method compresses a double array
3888	Flatten the vector into an expi array
3889	Center the given array
3890	Truncate the ndarray to the specified dimension
3891	Pads the specified ndarray with the specified shape to the target shape .
3892	Finds the index of the elements in a vector .
3893	copy array to device
3894	Sends the row aggregation .
3895	Returns the gamma value .
3896	Compute the square root of a number .
3897	Cbrt .
3898	Compute root of a number .
3899	Computes the exponential value of a number .
3900	Internal method to calculate an exponential number .
3901	Raises x to y .
3902	Rounds a number to n .
3903	Sine s sin .
3904	Tangent function .
3905	Compute the cosh .
3906	Searches for sinh .
3907	Applies tanh .
3908	Calculate the integral of an x value .
3909	Compute the acosh of a number .
3910	Calculates the Gamma value of x .
3911	Performs a broadch reduction on the magnitude of the results .
3912	Scales a BigDecimal by a double .
3913	Scale x and precision .
3914	convert an error to precondition
3915	Put function for id
3916	Returns inputs for the given function instance
3917	Update an array for given variable name
3918	Put the shape for the given variable name
3919	Associate an array with the specified SDVariable
3920	Get the property for the given function instance
3921	Add a property for the given INDArray
3922	Add an outgoing function to the output
3923	Add a function to the invocation list
3924	Check if the given function has arguments .
3925	Evaluate the input variables .
3926	Create a new variable with the specified shape
3927	Apply one SDVariable to SDVariable
3928	Apply zeros to a SDVariable
3929	Remove an argument from a function .
3930	Set the gradient for a SDVariable
3931	Avg pooling over 3d
3932	Output a gru cell
3933	Execute all differential functions
3934	Create a while statement
3935	Execute the specified function .
3936	Execute the given function with the given name and cache the result
3937	Execute backwards and end result
3938	Add a variable as place holder .
3939	Allocates a device memory from the device
3940	Returns the length for the given opType
3941	Returns the name of the double allocation for the given allocation mode .
3942	Get the data buffer .
3943	Get the operation number by name
3944	Destroy all workspaces
3945	Print allocation stats for current thread
3946	Performs a linear transformation
3947	documentation interface
3948	Apply the accumulation
3949	This method is used to decode an encoded INDArray
3950	Returns the node name from the input name
3951	Do the actual work
3952	Assert that no workspaces are open
3953	Calculates the negative log likelihood of the given labels
3954	Requests to be sent to the client .
3955	Tries to request to TOE
3956	Releases the object to the toe state
3957	returns the current state
3958	Builds an environment .
3959	Sends the message to the clipboard .
3960	Initialize the curr from a list of examples
3961	Init garbage collector threads
3962	Get device pointer .
3963	For internal use only .
3964	Applies an updater to the history
3965	Wait for a point to be processed .
3966	Create an INDArrayIndex from the given index
3967	Returns the properties for this function .
3968	Checks if the variables have place holder inputs .
3969	Perform a diff operation
3970	Format an ndarray
3971	Imports a graph from the given TFGraph .
3972	convert to a blob
3973	Load a complex number from a blob
3974	Saves the array to the database .
3975	Copies the real array to the given vector
3976	Copy the Imag to a real array
3977	Computes the difference between two numbers
3978	Assigns another complex array to another array .
3979	Creates a row from the matrix
3980	Overrides the superclass method .
3981	Creates a vector from the given column
3982	Subroutine of subdarray
3983	Add to another array
3984	Subroutine of submatrix
3985	Add this vector to another
3986	Assign a scalar value to a complex number
3987	Create a complex vector
3988	Compute eigenvalues of a matrix
3989	Computes generalized eigenvalues of A and B
3990	Returns the index of the maximum of the specified array .
3991	Copies the contents of another array to another .
3992	Apply a scalar vector .
3993	This method generates a SkipGramRequest message
3994	Returns the non - zero count for the given weights
3995	Performs a reduction
3996	Returns the no - arg constructor for the given class .
3997	Returns a MethodHandle for a constructor .
3998	Invoke the given method handle with the given arguments .
3999	Retrieves the annotation from the given annotations .
4000	Retrieves the annotation of the given class from the given class .
4001	Returns true if the specified annotation is present on the class .
4002	Creates a proxy .
4003	Load the entity .
4004	Saves the full entity .
4005	Create a proxy for the given MemcacheService
4006	Returns the metadata of the given kind .
4007	Runs a query on the keys - only query .
4008	Executes a hybridized key query .
4009	Performs a normal query .
4010	Executes a projection query
4011	Run a query on a key query .
4012	Partitions the input iterator by chunkSize .
4013	Loads the values from the cache .
4014	Format the given path and message .
4015	Returns key of pojo .
4016	Compare to object with identity hash code .
4017	Constructs a key from a raw key .
4018	Returns the key for the given typed key .
4019	Returns the kind of the given class .
4020	Returns true if the type is missing .
4021	Determine whether the super type is the super type of another type .
4022	Get the exact direct super types of the given type .
4023	Captures the given type .
4024	Get translator for given type key and path .
4025	Returns the populator for the given class and path .
4026	Gets the index instruction annotation .
4027	Checks if the method is of interest .
4028	returns a list of all the declared properties of the given class
4029	Gets key metadata .
4030	Returns the value for the given key .
4031	Execute the next round .
4032	Fetches pending entities .
4033	Adds the indexed discriminators to the class .
4034	Register a subclass of this class .
4035	Returns the type of a collection component .
4036	Returns the type of map key .
4037	Create a forward path from a path
4038	Returns the final path .
4039	Returns the path string represented by this node .
4040	Returns the depth of this path .
4041	Put all of the given updates into the cache .
4042	Empty the cache .
4043	Cache the given buckets in cache .
4044	Fetch all values from the cache .
4045	Returns the keys of the specified buckets .
4046	Finds all key fields in the class hierarchy .
4047	Sets the key in the given container .
4048	Sets the id of a pojo .
4049	Returns the raw value for the parent meta data .
4050	Register a subclass of the given superclass .
4051	Determines whether two types are common .
4052	Transforms the owner of the given type .
4053	Look up annotation on type .
4054	Adds all values from another session to this session .
4055	Load a result from the round robin transaction .
4056	must be synchronized .
4057	Translates the result into a Result .
4058	Fetches a set of keys from the Cloud Datastore .
4059	Loads the specified entity from the Cloud Datastore .
4060	Create a new Key from the given parent and type
4061	Returns the raw key .
4062	Retrieves the id value from the given IncompleteKey .
4063	Parses an url - safe key from a string .
4064	Transactionless transactional methods
4065	Transaction transactional .
4066	Perform transactional operations .
4067	Returns true if the value matches the given condition
4068	Returns an ObjectifyService for the current transaction .
4069	Get asynchronous datastore .
4070	Get the metadata for the given entity .
4071	Allocate a key range .
4072	Opens a new objectify .
4073	Closes the objectify context .
4074	Performs homogenize on the list .
4075	Creates a new reference with the specified value .
4076	Retrieves the object from the cache .
4077	Add a value to the list
4078	Returns true if this task is done .
4079	Generates an array of IF conditions for the given field .
4080	Execute the runnable
4081	Returns the container matching the specified type and path .
4082	Returns a stat for the given kind .
4083	Unwraps a Throwable and throws UndeclaredThrowableException
4084	Returns a translator for the given type key and path .
4085	Gets root .
4086	Creates a translator for the given type key and path .
4087	Loads the value from the container .
4088	Get the value of a property from container .
4089	Sets the value of the property .
4090	Save property value .
4091	Get the value of a property .
4092	Writes extensions to the message .
4093	Write the content category .
4094	Write a list of categories .
4095	Process the given snippet .
4096	Returns an iterable of bids from the response .
4097	Get bid by id
4098	Updates all bids in the response .
4099	Removes bid bids from the response .
4100	Returns an iterable of imps that match the given filter .
4101	Read extensions .
4102	Returns true if the next token is null .
4103	Register an OpenRt s parser .
4104	Register a new OpenRtwtExtender with the given class .
4105	This method is used to process a Snippet
4106	Returns the fields of the Snippet
4107	Applies update .
4108	Filters the list of objects based on the given predicate .
4109	Returns the current name .
4110	Starts an object start .
4111	Reads an array .
4112	Returns the next token from the parser .
4113	Writes an integer field to the JSONGenerator .
4114	Writes a list of strings to the writer .
4115	Writes a list of ints to the writer .
4116	Writes a list of longs to the stream .
4117	Write the given list of enums to the stream .
4118	Resolve a target URL .
4119	Fixes the URL that starts with the given target URL .
4120	Extract host segments from URL .
4121	Gets host .
4122	Gets the url from the given URL .
4123	Load list from storm configuration .
4124	Extract the configuration element from the given configuration map .
4125	Returns the protocol for the given URL .
4126	Generates a WAR CRI information from the given fields .
4127	Extract refresh URL .
4128	returns metadata for outlink
4129	Filters the metadata from the metadata .
4130	Add a URL to the scheduler .
4131	Clean the field name
4132	Get charset name from BOM .
4133	Detect charset from text .
4134	get charset from buffer
4135	Checks if the given content is within the given byte array .
4136	Sets the value for the given key .
4137	Returns the first value found in the metadata .
4138	Extract cookies from string array
4139	Checks whether the domain domain matches the given cookie domain
4140	Returns the cache key for the URL .
4141	Returns the robot rules for the given URL .
4142	Recursively extract meta tags from the document
4143	Writes a tuple to the cache .
4144	Filters a URL based on the metadata .
4145	Filters the rules from the source URL .
4146	Reads the rules from the specified rules file .
4147	Converts the given URL to a query string .
4148	Load the navigation filters from storm configuration .
4149	Add a record format
4150	Determines the amount of time needed to perform a throttling
4151	Indicates that the maximum number of queries should be triggered .
4152	Loads the parses from storm configuration .
4153	Append a new node to the document .
4154	Ignorable whitespace characters .
4155	Add processing instruction .
4156	Adds a comment to the document .
4157	Called when a character occurs .
4158	Generate start DTD event .
4159	Filter start prefix mapping .
4160	Returns the canonical URL for the given tuple
4161	Trims the text .
4162	Checks the custom intervals .
4163	Load URL filters from storm configuration .
4164	Sets the number of items in the wheel
4165	Resolve size and state to given size .
4166	Sets the drawable for the empty item .
4167	Set the angle of the wheel .
4168	Updates the selected position .
4169	Invalidates the drawer item with the given position .
4170	Converts a position to a fixed position .
4171	Update the angle by adding a change to the angle .
4172	Get color color from map entry
4173	Clamp the value to the specified value if it is within the specified limit .
4174	Writes the coverage data .
4175	Returns the data as a byte buffer .
4176	Sets a string to a char array
4177	Make a single string array
4178	Make an ArrayChar from a string .
4179	Construct an ArrayChar from a String object .
4180	Creates a char array from a string array
4181	Returns the offset of the forecast interval
4182	Show this window .
4183	show the window if not already set
4184	Calculates the size of the given grid .
4185	Read Grib1 record .
4186	Creates a new unit name with the given name and plural .
4187	Creates a new unit name .
4188	Make plural .
4189	Returns true if the given date is included .
4190	Returns the intersection of this range with the specified date range .
4191	Append the given range to this date range .
4192	Extend the start and end date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculate duration .
4197	Add a map bean to the map .
4198	Prints yyer error .
4199	Gets the name of the NCD component .
4200	Returns a string representation of the parameters .
4201	Opens the DSP file .
4202	Compute the bounds for a LatLonRect .
4203	Synchronize the values of the slider .
4204	Compute the chunking for the given dimensions
4205	Register watcher .
4206	Process all events from the watcher .
4207	Sets the reference date .
4208	Opens a dataset
4209	Wrap a particular feature type
4210	Checks if the given feature type is ok with the given criteria .
4211	Searches for the CDF file that contains the CDF data .
4212	Write the catalog to the output stream .
4213	Render the catalog to HTML .
4214	Gets the CSS .
4215	get user header string
4216	Creates a dynamic catalog from the given path .
4217	Adds global services to the catalog
4218	Sets the global Credentials provider
4219	get the content of the given URL
4220	Sends a string to the URL and returns the status code
4221	Gets the front page .
4222	Creates a catalog from the given match path .
4223	Extracts the geospatial coordinate from a GdsCollection .
4224	Get single dataset or by type name .
4225	Returns true if the two vertices are deeply equal .
4226	Returns a new unit ID .
4227	Parses an attribute definition .
4228	Reads the top REX data from the UICRAD file .
4229	Convert shorts to int
4230	Convert a byte array to an int .
4231	Creates a date from the given julian days and msecs .
4232	Make sure that the given name is a valid NetcdfdfObject name .
4233	Returns true if the given name is a valid Netcdf3 object name .
4234	Opens the file for writing .
4235	Reads record data from a Section .
4236	Reads the data set from the given section .
4237	Fill variables in the ncfile .
4238	Returns a time struct with the specified time index .
4239	Creates a time struct from a calendar object .
4240	Checks if a given string has a time template .
4241	Adds a server side function .
4242	Get the BoolFunction by name
4243	Get Btunction by name
4244	Load a new server side function .
4245	Returns the level name for the given grid record .
4246	Returns the description of the level .
4247	Returns the level unit for the given level .
4248	Determine the projection type to use .
4249	Is the specified grid coordinate?
4250	Checks to see if a grid is a layer .
4251	Create a coordinate transform .
4252	Create a dummy transform variable for a given coordinate transformation .
4253	Create a projection .
4254	Entry point to the TredD dataset .
4255	Saves the data table to the preferences .
4256	Returns a copy of this Chronology with the specified time zone .
4257	Write count .
4258	Write an atomic array of values to the byte array .
4259	Writes bytes to the output stream .
4260	Writes a number of bytes to the output stream .
4261	Finish initialization of the UI .
4262	Create a CalendarDateRange from a DateRange .
4263	Creates a new Grib2G from the specified data .
4264	Parses the given text and returns the number of rows in the dds .
4265	parse text into DASparse using DASparse
4266	Swaps the grid header
4267	Reads the data in a grid .
4268	Main method to read the grids .
4269	Writes an ACK constraint .
4270	Writes the XFS headers and s attributes to the output .
4271	Write operations
4272	Retrieves all files from the given directory using the given closure .
4273	Scans the log file using the given closure .
4274	Returns the grid packing type
4275	Find a grid record .
4276	Read DMK format
4277	Unpack data .
4278	Perform a QR decomposition .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Print all grid grids .
4282	Get the next byte
4283	Create a CalendarDate from the given Calendar object .
4284	Create a CalendarDate from the given date .
4285	Creates a CalendarDate from the given number of milliseconds .
4286	Creates a CalendarDate with the specified amount of msecs .
4287	Parse Udunits into a Calendar date .
4288	Gets the difference between two CalendarDate fields .
4289	Create a CDMArrayAtomic atom .
4290	Setup the request .
4291	Escape a string .
4292	Creates a list of slices from a list of ranges .
4293	Unwraps a file .
4294	Returns true if the dimension set contains variable length .
4295	Compute the effective shape .
4296	Add a date to this date
4297	Returns the result of this unit by the given unit .
4298	Returns the result of this unit divided by the given scale .
4299	Divide this unit by another unit .
4300	Override this to throw exceptions .
4301	Converts this unit to a derived unit .
4302	Convert this object to a derived unit .
4303	Convert this unit to another unit .
4304	Returns the canonical string representation of this unit .
4305	Reads the data from the given array .
4306	Reads data from two sets in the second partition .
4307	Flattens a list of station series to a list of stations .
4308	Find the service with the given name
4309	Get the size of the datatype
4310	Get the start of the first index of the converter .
4311	Gets the total number of rows .
4312	Write the given NetcDF dataset to an output stream .
4313	Computes and returns the preferred size for the specified target container .
4314	Verify that the given Crawlable dataset is descendant of a collection .
4315	Generate a proxy datasource
4316	Returns a CalendarDateUnit with the given name and locale .
4317	Create a new CalendarDateUnit with the given UdUnit string .
4318	Creates a CalendarDateUnit using the specified CalendarPeriod and baseDateField .
4319	Make a offset from a calendar date .
4320	Make a calendar date .
4321	Get the quantity dimension .
4322	Test to see if the given UCarbonFile is valid
4323	Reads the set of stations names from the UCARata file .
4324	Reads data for a single section .
4325	Read an array of int data
4326	Reads the contents of a variable into a channel .
4327	Returns the elevation for a given angle .
4328	Calculates a step given range_first and range_last .
4329	Calculates the angle in degrees of the radians in degrees .
4330	Calculates the data for the specified data .
4331	Calculates the nyquist value
4332	Builds a vertical transformation for this dataset .
4333	Sets debug flags .
4334	Set extended index mode .
4335	Reads data from the input stream .
4336	Determine if this variable is missing or not .
4337	Get the LatLon bounding box
4338	creates the sequence data
4339	Appends tabs to StringBuffer .
4340	Pad a string with a given width .
4341	Returns the integer value padded to the specified width .
4342	Returns a string padded to the specified long .
4343	Format the given size in bytes .
4344	Print the given value
4345	Display 2 digits .
4346	Returns the shape string representation of the shape
4347	Finish the iteration .
4348	Convert this constraint to a string representation .
4349	Compose two slices
4350	Maps a slice to a value
4351	Utility method to dump a byte buffer into a byte buffer
4352	Utility method to dump a byte buffer into a byte buffer
4353	Gets the type of the given name .
4354	Returns the ellipso id for the given epsgId .
4355	Decode vlen data .
4356	Decodes vlen arrays .
4357	Extract the list from the URL .
4358	Get the text content from the URL .
4359	Utility method to filter out tags .
4360	Reads data from variable .
4361	Add attributes to the model .
4362	Removes the specified attribute .
4363	Remove the attribute with the given name ignoring case .
4364	Gets the time units in milliseconds .
4365	Add an ActionSourceListener to this ActionCoordinator .
4366	getStandardDate
4367	get standard Date from text
4368	Get the date origin of this date .
4369	Returns the current date as a Date .
4370	Converts a double value to a date .
4371	Returns the value of the given date .
4372	Converts a double value into a standard date string .
4373	Gets the grid spacing in meters .
4374	Add the required dimensions to the NetcdfFile .
4375	Add a coordinate axis to the network .
4376	Compute the projection
4377	Adds all the gds parameters to the given Variable .
4378	Add a coordinate system variable .
4379	Create a projection .
4380	Internal method to set the scale factor .
4381	Construct a Mercator for the projection .
4382	Creates and sets the sub - geometries for the missing data .
4383	Calculate the x y - coordinate from the start and endy coordinates .
4384	Read a dataset .
4385	Read a dataset scan .
4386	Read metadata from a URL .
4387	Returns level type 1 .
4388	Check to see if the file is a valid magic file
4389	Write len bytes .
4390	Set the clearName for this field .
4391	Returns the coordinate name of a coordinate .
4392	Returns the coordinate name of a coordinate
4393	Builds the error response .
4394	Build DapException object from XML exception object .
4395	Lookup levels for a given level .
4396	Creates a Z coordinate for the given values .
4397	Creates new variables for a given variable .
4398	Makes a time coordinate axis and converts it to a coordinate axis .
4399	Removes a bit from a float mask .
4400	Main entry point for the Grib file .
4401	Enhances the given ncdfFile using the given mode .
4402	Opens a dataset .
4403	Clear coordinate systems .
4404	Finds a coordinate axis by its type .
4405	Find a coordinate axis by full name
4406	Returns the coordinate system with the given name .
4407	Returns the coordinate transform with the given name .
4408	Returns true if we need to enhance the enhance mode
4409	Sets values for a variable
4410	Sets the values of a variable
4411	Create an array from a list of strings .
4412	Returns the index of this vector .
4413	check if an existing file is an existing MFileOS7
4414	Get features from the specified bounding box
4415	Discretize a vector .
4416	Add metadata to the table
4417	Adds the documentation for the specified type .
4418	Removes all inv documentation by type .
4419	Returns the number of bytes required to write the segment .
4420	Checks to see if the given NetcdfFile is valid .
4421	Tries to eliminate the latest version of the dataset
4422	returns a list of name convention names
4423	Given a set of converters build a comma separated list of attributes .
4424	Builds a list of coordinate systems from a NetcDF dataset .
4425	Recursively find the coordinate axes .
4426	Recursively find the coordinate systems referenced by the NetcDF dataset .
4427	Make the coordinate system for each coordinate system .
4428	Make sure all coordinate systems need to be optimized
4429	Helper method to determine if a coordinate axis is for a particular variable .
4430	Add a coordinate variable for the given dimension .
4431	Sets the data from the specified dataset .
4432	Load a dataset
4433	recursively marks a dataset
4434	recursively deletes all records
4435	Initialize the TDS Context
4436	Count by name
4437	Convenience method to add a new name and a symbol .
4438	Compares two TableRow s values
4439	Compares two boolean values .
4440	Returns the group scope .
4441	Pass all reserved attributes to the DAP server .
4442	Helper method to check validity of date range .
4443	Returns true if there are more elements in the slice .
4444	Registers the named DSP .
4445	Registers a DSP .
4446	Check if a dsp is registered in the registry .
4447	Unregister a dsp .
4448	Creates a new Trib2Tables factory .
4449	Get the number of time interval in hours
4450	Returns the offset of the forecast interval
4451	Gets the Vert . x coordinate .
4452	Cleans up the DAP nodes .
4453	Sorts this DapNode in ascending order .
4454	Returns the data for the given partition .
4455	Recursive method to find a variable with the given attribute name .
4456	Recursive method to find a variable in the dataset .
4457	Returns the name of the variable with the given attribute value .
4458	Find a variable with the given attribute name and attribute value .
4459	Returns the nested structure of a given structure
4460	Determines whether the dataset has a record structure
4461	Returns the literal value of the given key
4462	Gets the feature type from the Dataset
4463	Gets the variable name .
4464	Returns the value of a coordinate .
4465	Calculates the long value for a value .
4466	Return a copy of the coordinates of the axis .
4467	Specify a section of a coordinate axis .
4468	Finds the index that is closest to target
4469	Get the short name
4470	Add an action to the menu .
4471	Return a match for a given path .
4472	Main entry point for the Projection .
4473	Returns the index of the first occurrence of the specified byte array
4474	Adds a picture to the cache .
4475	Reports the cache contents .
4476	Stop loading .
4477	Call this method to stop background loading
4478	Create a GET method
4479	Make an HTTP method .
4480	Generates a random float .
4481	generate next count
4482	Reads the data for the given section .
4483	Get a provider for a given URI .
4484	Read the stations table .
4485	Returns the integer value for the given grpc .
4486	Removes the data variable with the given name .
4487	Converts the hgt2 height into a string .
4488	This method reads all data from the given section .
4489	Sets the number of colors to use .
4490	Calculate transform for screen coordinates
4491	Create an auth scope from a URI .
4492	Update the end of the grid
4493	Returns whether this factor is the reciprocal of another .
4494	Returns the catalog for the given directory that matches the given filter pattern
4495	Find the index of the needle in the input array
4496	Reads the metadata content from the specified dataset .
4497	Read metadata content .
4498	Adds the metadata content to the mdom element .
4499	Validate the catalog config
4500	Reads the CatalogConfig element for the given CatalogConfig element .
4501	Read a DatasetSource element .
4502	Reads a DatasetNamer element .
4503	Reads a DatasetFilter element .
4504	Read result service element .
4505	Creates the element of the CatalogGenConfig element .
4506	Create a DatasetSource element .
4507	Create a dataset namenode element .
4508	Create a dataset filter element .
4509	Creates an element that represents the result service .
4510	return true if the flag is set
4511	Constructs a menu from a top menu
4512	Add to menu items .
4513	Adds the contents of the specified string to the index .
4514	Creates a parameter from the given words .
4515	get a parameter by name
4516	Reads the contents of the stream .
4517	Reads bytes from stream .
4518	Replace the file template with the given ID .
4519	Set the stn id variable for this node .
4520	Accepts the input and updates the store value .
4521	Show the format information about the field .
4522	Get the bitmap from the given file
4523	Set the netcdf file
4524	Sets debug flags .
4525	Parses a name .
4526	Checks if the dstruct is a group
4527	Get the length of a variable
4528	Add a dimension to a group
4529	Constructs a list of dimensions for the specified group .
4530	Checks if is unsigned .
4531	read data from server
4532	get an icon from the classpath
4533	Tries to load an image .
4534	Create a custom cursor with the given name .
4535	Read data fill with specified fillValue
4536	Read data from a layout .
4537	Read data from the specified layout .
4538	Creates an array of primitives .
4539	Convert a byte array to a char array .
4540	Convert char array to byte array .
4541	Convert a byte array to a char array
4542	Reads a section from a SectionSpec object .
4543	Creates an ArrayStructure from a SectionSpec
4544	Access a scalar value .
4545	Retrieve a structured field from a member .
4546	Retrieve an Array .
4547	Recompute the structure members of a DAP variable .
4548	Add dimensions to the network .
4549	Creates a new CrawlableDataset .
4550	Normalizes a path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan
4553	Finish processing the dataset .
4554	Create the datasets .
4555	Retrieves the typical dataset
4556	Build a Dataset
4557	Put the resource control for this dataset
4558	Add a point
4559	Gets the bb upper bounds .
4560	Gets bb lower lower bits .
4561	Validates this DatasetFilter .
4562	Checks if this dataset matches a given dataset .
4563	Adds all points from the file to the system .
4564	Parses a constraint .
4565	Evaluate the given clause
4566	Prints the constraint .
4567	Fixes the protobuf object from an OOS file .
4568	Sets the number of dimensions to the same number of dimensions
4569	Checks if there are enough dimensions to match the requested dimensions
4570	Searches for a group with the given name
4571	Reads the content of the Xlink .
4572	Returns the standard URI for the dataset .
4573	Sets the projection .
4574	Add a layout component
4575	Invalidates the layout of the specified container .
4576	Removes a layout component from the layout map .
4577	Calculate minimum layout size .
4578	Layout the given container
4579	Returns true if the coordinate system is a radii coordinate system .
4580	Get the maximum angle .
4581	Opens a connection
4582	Convert geographic coordinates to cartesian coordinates .
4583	Convert a point from x and y to earth coordinates .
4584	Convert ago_go_go to a point .
4585	Convert scan geometry to sweep angle .
4586	Convert sweep angle to scan coordinates .
4587	Set the runtime coordinates .
4588	Writes PointObset to file format
4589	Rewrite all points in a file
4590	return ArraySequence
4591	Returns the full name of the parent .
4592	Returns the unique ID of the object
4593	Returns the access of the specified service type .
4594	Find a dataset by name .
4595	Returns the parent catalog .
4596	Get the metadata of this catalog
4597	Searches for the service with the given name .
4598	Returns the variables for the given vocab .
4599	Find all catalog refs in the given list of datasets .
4600	Escapes a string for use in a URL .
4601	extracts the rest of the array from the specified dimension
4602	extract data from an array
4603	Compute the Rho of a point .
4604	Gets detail info .
4605	Creates a structure from the specified parameters .
4606	Create a missing variable .
4607	Create a float variable .
4608	Add all global attributes to the NGF file .
4609	Returns the size of stnVar or - 1 if not found .
4610	Creates an Array
4611	Gets the current state of yy .
4612	Retrieves a simple syntax error for the given token .
4613	Reduces the output of a YYULE .
4614	Read the DMR data from the input stream .
4615	Reads an error message .
4616	Read len bytes from the input stream .
4617	Reads the header from the input stream .
4618	Converts an ISO8601 string to a Date object .
4619	Reads a table from a URL string .
4620	Transfers a group from one group to another .
4621	Returns the stn file of the given location .
4622	Tries to open the station .
4623	Returns the beginning of the given index .
4624	Returns the end of the given index .
4625	Creates an unmodifiable collection of files with a single runtime .
4626	set the edit value
4627	Returns the data type for the specified format .
4628	Convert a x - F - F - F - F - F coordinate to a L - A - F - F - A - F - G .
4629	Clean unit string .
4630	Clean the name of the name .
4631	Checks if unit is unitless .
4632	Factory method for creating notes .
4633	Returns the var id of the given VarNotes .
4634	Parses the DAS file .
4635	Find a DodsV for a given name
4636	Recursively find the dataV for the given DRSV .
4637	Find by index .
4638	Returns the parent group for this node .
4639	Returns the dimension of the specified dimension .
4640	Returns the index of the dimension with the given name
4641	Gets the units string .
4642	Returns the shape as a section .
4643	Create a new slice of this variable
4644	Sets the enum typed definition .
4645	Reads a set of ranges from the input stream .
4646	Read string .
4647	returns a copy of the Array
4648	Returns the contents of the given section in the given section
4649	Writes a CDL definition as a String .
4650	Returns a string representation of this variable .
4651	Sets the data type for this variable .
4652	Sets the dimensions for this shape .
4653	Reset the shape
4654	Set the dimensions of this variable .
4655	Resets the dimensions of this variable .
4656	Sets the dimension of the specified dimension .
4657	Sets the cached data .
4658	Get all dimensions
4659	Sets up bounding box for all coordinate systems
4660	Finalize the grid .
4661	Returns all datasets in this dataset .
4662	Returns true if the dsp match the given path
4663	Opens the CDM Document using the provided NetworkDataset .
4664	Build the DMR dataset .
4665	Recursively build the seqtypes for the given CDM data structure
4666	Recursively build the dimension definitions for the requested cdm .
4667	Finds a matching enum for the given varen .
4668	Returns the core dimension
4669	Scans a file and prints the number of messages .
4670	Process buf message .
4671	Handles a post request .
4672	Get the transform from the current coordinates
4673	Returns true if the map area needs to rotate .
4674	Get the map area covered by this area .
4675	Transform a point in world space into screen coordinates .
4676	Pan to the map .
4677	Zoom to the specified location
4678	Recalculate the orientation from the bounding box
4679	Add Listener
4680	Remove a Listener
4681	Sends an event to all listeners .
4682	send event to all listeners
4683	print a command to the output stream
4684	Prints a command to a writer .
4685	Prints the data of a variable
4686	Prints the data contained in a variable .
4687	Prints a structure data structure .
4688	Writes an Array to a PrintWriter .
4689	Prints the given array to the given print writer .
4690	Writes the ncML file to the given writer .
4691	Read attribute .
4692	Add a parameter to the coordinate transformation .
4693	Prints the log .
4694	This method is used to read an item from the datastore .
4695	Returns true if the given level is positive .
4696	Compares this unit to another .
4697	Creates a label from the given quantity ID .
4698	Set bit offset .
4699	Read bits from the input stream .
4700	1 - b - bit
4701	Opens a new connection
4702	Get DAS command
4703	Gets the DDS .
4704	Returns the complete CE .
4705	Convert the projection to a LatLon coordinate .
4706	Get the variables catalog from the XML file
4707	Convert a DateRange to a DateRange
4708	This method is used to read data from UCarbonFile .
4709	Populate the attributes of the mission information .
4710	Read sensor information .
4711	Read root element .
4712	Clean character data from a string
4713	Convert a string to a string .
4714	Escapes a string so that it can be used in an URLQuery
4715	Unescapes a URL query string .
4716	Decode backslash characters .
4717	Encode a string .
4718	Add global attributes to NetworkFile .
4719	Swap two shorts at the given offset
4720	Swap four four bytes at the given position
4721	Swap a double at a given offset
4722	Swap two float values
4723	Swap a double with a long
4724	Convert a short to a byte array .
4725	Convert an int to a byte array .
4726	Convert a long to a byte array .
4727	Returns a subset of this transformation with the specified range .
4728	Writes the last modified date to the output .
4729	Constructs a vector from an array .
4730	Start XML stream .
4731	Writes features to the output file .
4732	Add levels to the list of levels
4733	Add dimensions to the network .
4734	Add the level variables to the network .
4735	Add a coordinate transformation to the coordinate system .
4736	Returns the index of the given record .
4737	Exit timer .
4738	Returns the file object for the given location
4739	Checks whether or not the given file location is already in cache .
4740	Show cache files .
4741	recursively deletes all files in the directory
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Computes the bearing between two points .
4745	Searches for a point in the given earth .
4746	Returns a LatLonPoint which is closest to point in the given latitude and azkon .
4747	Returns a LatLonPoint with distance from the given latitude and distance .
4748	Start load picture in thread pool
4749	Loads picture from URL .
4750	Loads the source picture
4751	stop loading
4752	stop loading of the picture
4753	Gets the size of the image
4754	Set source image
4755	Returns the standard URI for the dataset .
4756	Make association data descriptor .
4757	transfers info from list to list
4758	Count the number of bits in the subkeys .
4759	Compares two DataDescriptors
4760	load the header from the file
4761	load the data from the stream
4762	Returns the DbaseData for the given name .
4763	Gets a double by its name .
4764	Get the string by name .
4765	Access a boolean field .
4766	Returns the name of a field
4767	Returns a string representation of the field names .
4768	Dump information about the Dbase file .
4769	Returns the attributes map .
4770	Set the DAPAttribute for the given attribute .
4771	Removes an attribute from the DAP server .
4772	Get the DapGroup .
4773	Returns the parent container .
4774	Get the escaped name .
4775	Returns the path of the current container .
4776	Get the group path .
4777	Compute the FQN name of the DQN .
4778	Returns true if parent is top - level
4779	Build the DMR data processor
4780	Put a BeanCollection for the given key
4781	Convenience method to get a list .
4782	Returns the value for the given key .
4783	Read data from a file .
4784	Prints the data in the DMR .
4785	Print a compound instance .
4786	Writes the given element to the string .
4787	Write the element to the specified file .
4788	Write the element to the output stream .
4789	Writes the given XML element to the given writer .
4790	Creates an element that represents a single dimension .
4791	Create a projection matrix for this AttributeContainer .
4792	Get an integer array from the AttributeContainer .
4793	Create a base unit .
4794	Creates a unit .
4795	Base unit tests .
4796	The unit tests .
4797	Get the singleton instance .
4798	Finds a coordinate element in the target array .
4799	Returns index of target coordinate
4800	Subtracts the values from the coverage axis
4801	Open a Dataset
4802	Opens a dataset
4803	Takes a Netcdf dataset and adds it to a Netcdf dataset .
4804	Read data from a file .
4805	Assemble the given parts into a string .
4806	Convert a string to a canonical form .
4807	Normalize units .
4808	Compiles the DAP dataset .
4809	Close the catalog
4810	Returns the object with the specified key .
4811	Inserts a value into the map .
4812	Get the date
4813	Prints the attributes of a CPE node .
4814	Print an XML - attribute .
4815	Determines whether the attribute is special .
4816	print all dimensions of a given variable
4817	method to check if a file is valid
4818	Sets the area directory attributes .
4819	Add the nav block attributes to the given variable .
4820	Convenience method for gettingCalendar name .
4821	Sets the attributes of the Calibrator variable .
4822	Searches for coordinates in the TableConfig .
4823	Returns the coordinate name of a coordinate .
4824	Recursively finds a coordinate by its type .
4825	Finds a coordinate by its type in the dataset .
4826	Returns the dimension of the specified axis .
4827	Finds the best coordinate system .
4828	Helper method to find the coverage coordinate of the axis .
4829	Get a variable by name
4830	Old version of deserialize .
4831	Reads a marker from the stream .
4832	Writes a marker
4833	Emit a fatal error .
4834	Creates a new dataset .
4835	Example of testing
4836	Extract a string from a member .
4837	Returns a copy of the array of parameters .
4838	Set the list of stations .
4839	Sets the currently selected station .
4840	Redraw the panel
4841	Custom deserialization of object .
4842	Serializes this object to the specified stream .
4843	Merge the given unit .
4844	Add a unit
4845	Adds a symbol to the unit .
4846	Look up a unit by id .
4847	Creates a new unit by name .
4848	Convenience method to add a unit to a symbol table .
4849	Helper method to add unique unit to map .
4850	Add the given menu to the menu .
4851	Searches for a record with the given drs position .
4852	Reads a scalar from the given dataset .
4853	serialize the given dataset
4854	Returns the values of the parameter .
4855	Creates a copy of this view .
4856	Opens a feature dataset
4857	Opens a feature dataset
4858	Opens a dataset
4859	Adds attributes to the Netcdf dataset .
4860	Removes duplicates from the list .
4861	Adds a partition to the group .
4862	Make a mutable collection .
4863	Returns an instance of RegExpandEnhancer with the given substitution pattern .
4864	Returns an instance of RegExpandEnhancer for the given match pattern .
4865	Writes the query capability to the file .
4866	Reads the structure data from the given Section .
4867	Loads a picture from the specified URL .
4868	Sets the source image to be displayed .
4869	Zoom to the specified size
4870	Paints the component .
4871	Decode and return the TTF data .
4872	Decode the date and time series of dates
4873	Converts an array of int ids to a string representation .
4874	Get the number of days for the given month
4875	Return the coordinate of a vertical coordinate .
4876	Rewrite an integer array to a number of values
4877	Get the grid packing type
4878	Returns the data type for the given type
4879	Reads data from the input stream
4880	Externalize the output stream
4881	Get tag enum .
4882	Get the next image
4883	Size of Dap type .
4884	Sum all values in an array .
4885	Sets the grid s grid .
4886	Sets the overlap value
4887	Clears the grid .
4888	return true if the rect is cleared
4889	Finds the intersection with the specified rectangle .
4890	Finds the intersection with the specified point .
4891	Finds the closest point in the grid .
4892	Calculates the squared Euclidean distance from a point to the specified point .
4893	Retrieves or creates a base unit .
4894	Search for the given fragment .
4895	Returns the ServiceType for the given url
4896	Decode the path extension
4897	Checks whether the given location is a DRS or not .
4898	Checks if the provided location is DAP4 .
4899	send data to output stream
4900	Returns the suffix of the given fqn .
4901	Return the prefix of the given fqn .
4902	Locates a file in the given absolute path .
4903	Locates a file in the given absolute path and returns the full path .
4904	Extract bytes from buffer .
4905	Gets the structure path .
4906	Returns null if the path is null .
4907	Joins a string array using the specified separator .
4908	Checks if a path contains a drive letter
4909	Extracts the list of protocols from a given URL .
4910	Convert a template index to a list of slices
4911	Converts a template to a list of slices of the specified template .
4912	Check if the list of slices is contiguous
4913	Checks if a list of slices is single point .
4914	Converts a list of slices to an index .
4915	Reads data from an input stream .
4916	Sets the information about this station .
4917	Sets the short names of the coordinates .
4918	Read the feature collection from the catalog .
4919	Adds a declaration to the DAP group .
4920	Update the groups in the list .
4921	Returns the variable with the given name .
4922	Gets the axis type .
4923	Returns the type of the given time range indicator .
4924	Subtracts and returns the coverage coordinates
4925	Returns a list of RangeIterator objects
4926	Sets the properties .
4927	Returns the current session ID
4928	Sets the maximum number of redirects .
4929	Enable session use .
4930	Closes all methods .
4931	Sets the authentication and proxy settings .
4932	Track a session .
4933	Set the global credentials provider
4934	Validate the catalog
4935	Creates a new index based on the shape
4936	Compute stride .
4937	Create a new index from a list of ranges .
4938	Reduce this index
4939	Returns a new index with the specified rank
4940	Transpose a sub - index to a new index .
4941	Returns a new index with the specified dimensions .
4942	get index iterator
4943	Get current element
4944	Sets this index to the specified array .
4945	Sets the specified dimension
4946	Sets the vector values .
4947	Returns the name of the time interval
4948	Create a calendar date range .
4949	Returns a list of date strings
4950	create a list of parameters from the DMPP parameter table
4951	returns a list of station s stations
4952	Creates a station object from the header data .
4953	Get the names of all station keys in the system .
4954	Returns a list of dates .
4955	Returns the index of the station with the given ID .
4956	Returns the file type .
4957	Add an indentation level to the stack .
4958	Sets the indent level .
4959	Read or create an index from a single file
4960	Add a directory scan
4961	Returns true if there is a scan needed .
4962	Scans through the collection and checks if there is a new one and if so returns false otherwise .
4963	Sets debug flags
4964	Adds a new variable .
4965	Create a new VcdfFile
4966	Validate an XML document
4967	Returns a string representation of this slice .
4968	Sets the original variable .
4969	This method is used to read the data from the store .
4970	This method is used to read the contents of a section
4971	returns true if the structure has been converted
4972	Converts an Array to an ArrayStructure .
4973	Converts the members of a structure to a member info object
4974	Find a variable from the org name .
4975	looks to see if a variable has data .
4976	Enhanced variant .
4977	Check if resource control is allowed
4978	Create an empty sequence .
4979	Create an array sequence from the given parameters .
4980	Creates a sequence from the specified parameters .
4981	Add a vertical coordinate attribute
4982	Asynchronously reads the catalog from the URL .
4983	Parses an InvCatalog object from the catalog
4984	Reads and parses the inv catalog
4985	Writes the catalog to the output stream .
4986	Get metadata converter by given key
4987	Returns the id of the unitless ID .
4988	Calculate the multiplicative by the given unit .
4989	Computes the division by the given unit .
4990	Converts the input array into a derived unit .
4991	Compares this unit to another .
4992	Write a point
4993	Writes a point to XML .
4994	Writes a line to a string
4995	Write a Polygon
4996	Return the value of the named attribute from the supplied node .
4997	Get the subnodes of the given parent node .
4998	Parse a response node .
4999	Helper method to pass attributes to the DAP server .
5000	Get a subset of the given variable range .
5001	Converts a StructureStructure to an ArrayStructure .
5002	Sets an array of members of a member .
5003	Creates and returns the structures from the given structure .
5004	Returns the type of the geometry .
5005	Make a station in the system .
5006	Compile an AST .
5007	Compile a filter .
5008	Redefine a dimension definition .
5009	Creates an ArrayObject for the given index .
5010	Determines whether this rectangle contains the specified LatLonRect .
5011	Extend a LatLonPoint with the specified LatLonPoint .
5012	Extend the specified LatLonRect with the specified LatLonRect .
5013	Intersects the specified LatLonRect and returns the result .
5014	Adds elements from array to array .
5015	Returns true if the arrays must be concatenated .
5016	return true if the shapeA is identical
5017	Convert an Array to an Array .
5018	Copies the elements of an array to the specified array .
5019	Copies all boolean values from array to result .
5020	Copies objects from array to result .
5021	Get min max .
5022	Set double value .
5023	Make a catalog builder from the current dataset .
5024	Creates a new projection implementation .
5025	Unescapes an identifier .
5026	URL - decode a string .
5027	Unescapes a URL .
5028	Escape a string .
5029	Unescape a string .
5030	Tokenize an escaped name .
5031	Returns the index of the first occurrence of the specified character in the escaped name .
5032	Converts backslash characters to a hexadecimal string .
5033	Read an atomic scalar value .
5034	Get the path to a sequence
5035	Returns the UIDefaults of the specified property
5036	Returns the JComponent of the given component .
5037	Compile the data from the DSP .
5038	Compile a DAP structure .
5039	Compile DAP structure .
5040	Returns a DAP - Array representation of the given DapVariable
5041	Compile a DAP sequence .
5042	Read an 8 - byte long from the stream .
5043	Returns the field with the specified name .
5044	Returns the value of the field with the given name .
5045	Sets the value of the field with the given name .
5046	Add a field to the cursor .
5047	Add a CheckBox field .
5048	Add a date field .
5049	Add a double field .
5050	Add an int field .
5051	Add a password field .
5052	Add a TextField .
5053	Add a TextComboField .
5054	Add a TextArea field to a TextArea .
5055	Adds a heading to the layout .
5056	Add a component to the layout
5057	Adds an empty row to the layout component .
5058	Finds the active frame .
5059	Returns the cell spacing that will be used to calculate the cell spacing .
5060	Gets factors .
5061	Multiply two factors .
5062	Returns an array of factors with the given power .
5063	Returns true if this dimension is a reciprocal of another .
5064	Returns true if all factors have dimensionless dimensionless .
5065	Create a lookup table for the given parameters and lookup tables .
5066	Create a new param table .
5067	Adds the given lookup table to the lookup table .
5068	Load a parameter table .
5069	If this unit is a higher level throw an exception .
5070	Convert the input vector into a derived unit .
5071	Initialize the unit table .
5072	Creates a vertical variable .
5073	Reads the name from the file .
5074	Reads a short from the byte array .
5075	Reads an int from the byte array .
5076	Reads a float from the byte array .
5077	Read a double from the byte array .
5078	Helper method for creating a AAA
5079	Add a symbol to the unit .
5080	Creates a converter for the given units .
5081	Set the structure data .
5082	Set point feature data .
5083	Draws the shapes in the specified graphics transform .
5084	get all the shapes in the map
5085	Read data from the stream .
5086	Read buffer from input stream
5087	Returns more bytes from the input stream
5088	Reads a number of bytes from the stream into the specified byte array starting at the specified offset .
5089	Skip n bytes .
5090	Adds the vertices to the network .
5091	Returns the index of the coordinate value in the record .
5092	Check if a file is a valid file .
5093	Reads the header from the rcar file .
5094	Reads the data from the given variable .
5095	Read one row data
5096	Creates a new NetcDF dataset from a NetcdfDataset .
5097	Creates a type for a variable .
5098	Fire a map area event
5099	Set the map area .
5100	Sets the map area to navigate to .
5101	Set the map area of a lat lon .
5102	Sets the projection .
5103	Add all the actions to the given JMenu
5104	Redraw the redraw timer .
5105	Changes the size of the screen according to the given rectangle .
5106	Sets the selected variable .
5107	Retrieves a double value at a given offset .
5108	Access the double value at the given index .
5109	Access an object at the given index .
5110	Returns the letter identifier for the given ent_id .
5111	Reads a scaled int .
5112	Find parameter by name ignoring case .
5113	Checks if there is an odometer in the current object .
5114	Swap the byte order .
5115	Gets the number of time steps for a file .
5116	Returns the path to the file name
5117	Returns a list of file names .
5118	Returns the path to the ddf file .
5119	Returns the full path for the given file .
5120	Add a ChSubSubs to the ChSubs list .
5121	Convert a CalendarDate to a TimeCoordVint
5122	Reads NEX data from the stream
5123	Returns the uncompressed data
5124	Creates a symbol in the CNC12 format .
5125	Creates a circle structure .
5126	Read the NEXRAD product header from the file .
5127	Parses a CLL file .
5128	Add a codepoint to the text file .
5129	code for unlinked vectors
5130	Converts the specified number of levels into an array of levels .
5131	Returns the dualpol levels
5132	Add a variable to the network .
5133	Add a parameter to the network .
5134	Uncompress the given buffer
5135	Converts a byte array into an unsigned integer
5136	Converts a byte array into an integer .
5137	Converts a byte array into an object .
5138	Process the DMR request .
5139	Returns the DapRequest object for the request .
5140	Sends error response .
5141	Set anchor point .
5142	Stretch the current rectangle .
5143	Gets the bounds of this span .
5144	Return the bounds of the last anchor .
5145	Format a date only .
5146	replace the data variables in the structure
5147	Ensure the array size is correct .
5148	Reads an integer from a file .
5149	Reads an unsigned integer from the file .
5150	Reads three - dimensional int values from a file .
5151	Reads a 32 - bit integer from a file .
5152	Reads a 32 - bit integer from the given file .
5153	Reads a float from a file .
5154	Convert a 16 - bit integer to a 32 - bit float .
5155	Reads a 32 - bit integer from the file .
5156	Count the number of bits in the given bitmap .
5157	Creates a copy of this projection .
5158	Returns a string representation of this proposition .
5159	Escapes characters in a string .
5160	Unescape backslash .
5161	Split a string backslash .
5162	Build the FMR invocations for each file
5163	get service special from path
5164	Number of projected components .
5165	Gets the calendar date .
5166	Factory method for creating array structure .
5167	Runs the index .
5168	Reads a record from a Grib1 record .
5169	Determines whether the given NetcFile contains all the relevant attributes .
5170	Construct a UTM projection transform from the given dataset .
5171	Acquire area reader .
5172	Returns true if the specified date is before the specified date .
5173	Returns true if the specified date is before the specified date .
5174	Returns true if the date is after the specified date .
5175	Set the value at index
5176	Add a CoordinateSystem to this variable
5177	Set the unit string representation .
5178	Returns the string representation of the units .
5179	Initializes the reader
5180	Read a catalog from the catalog .
5181	Iterates over a set of datasets and collects the ids in the catalog .
5182	Recursive method to read catalogs from the given directory .
5183	Determines whether the specified lon is between the specified long range .
5184	Convert lat to string representation
5185	Convert a long to a string representation .
5186	Compares this quantity to another .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Returns the tree path for the given node .
5190	Opens all the catalog trees .
5191	Sets the catalog location .
5192	Sets the catalog .
5193	Find the unique alias for a variable
5194	Write v int .
5195	Writes a string to the output .
5196	Reads characters into the specified buffer .
5197	Set debug flags
5198	Adds a member to this group .
5199	Hide the given member
5200	Returns a list of member names
5201	Returns the member with the given name .
5202	Read Grib1 bitmap from file .
5203	restore the state of the table
5204	Get the selected rows from the table .
5205	Returns the model index of the model
5206	Gets the array data .
5207	Returns the scalar value of a member .
5208	Retrieve a double array .
5209	Returns the scalar value of a member .
5210	Returns the value of a member .
5211	Get scalar byte .
5212	Returns the byte array representation of the given member .
5213	Get a scalar value .
5214	Retrieve an array .
5215	Access a scalar value .
5216	Retrieve an array from a member .
5217	Returns the scalar value of a member .
5218	Returns the value of a member .
5219	Get scalar character .
5220	Retrieve a char from a member .
5221	get one dataset
5222	Check if a dataset is usable
5223	Creates a copy of this dataset .
5224	Transfers metadata from a Dataset to another Dataset
5225	Gets the immutable metadata .
5226	Adds a record to the list .
5227	show missing values
5228	Show missing values .
5229	Find a record in the system .
5230	Dump the contents of the grid .
5231	Generates a long name for the first record .
5232	Subscribes the coverage coordinates by intervals .
5233	equals between two byte arrays
5234	Parses the DMR XML into a DMR dataset .
5235	Extract attributes from the DAP dataset .
5236	Adds a list of coords to this partition .
5237	Sets the gaussian coordinates .
5238	Parse a variable selector
5239	Returns a string representation of a section specification .
5240	Determine if a box contains a point in the rectangle
5241	Close the connection .
5242	Execute the HTTP method .
5243	Identifies an encoding station for the given information .
5244	Helper method to match axis type and dimension
5245	Set a stream to read data from an input stream .
5246	Reads the next character from the stream .
5247	Start the task .
5248	Converts a string to a URI .
5249	Exclude the given URIPart
5250	Nullify string .
5251	Joins the given prefix and suffix into canonical form .
5252	Accepts the given CrawlableDatableDataset
5253	Sets the info of this collection to the given values .
5254	Get the list of file names
5255	Sets the index file location .
5256	Gets the index file in cache .
5257	Closes the index .
5258	Returns the number of non - null counters .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Deletes a global attribute .
5262	Renames a global attribute .
5263	Adds a variable attribute .
5264	Add a variable attribute .
5265	Deletes a variable .
5266	Renames a variable attribute .
5267	Determines the subtype of the file .
5268	Writes the headers to the WFS
5269	Write members .
5270	Writes the station obs data as XML
5271	Returns the XML representation of the station collection .
5272	Writes a DN .
5273	Sends DRS data to the output .
5274	write error response
5275	Closes the output stream .
5276	Send DMR data to the output stream .
5277	Creates a copy of this project .
5278	Returns true if there is at least one element
5279	get element at index
5280	Shifts the range with the specified origin .
5281	Read data .
5282	Read data from the layout .
5283	Return a subset of this BooleanVector with the specified stride and stride
5284	Returns the list of catalog extensions
5285	Cleans up the tracker after the given tracker number .
5286	Set the values .
5287	returns a DataChunkIterator without the order
5288	Make double array .
5289	Gets the dataset boundaries .
5290	Check the requested variables in the requested dataset .
5291	Get DatasetSource structure by name .
5292	Gets the resource path from the given location .
5293	Adds all vertices to the network .
5294	Reads the data from the input file .
5295	Cleans up the iterator .
5296	helper method to transfer all public metadata
5297	copies the metadata from one dataset to another
5298	helper method to transfer inherited metadata from the target
5299	Sets the contributors .
5300	add a dataset
5301	Removes a dataset from the catalog .
5302	method to replace a dataset
5303	Add a service
5304	Removes a service .
5305	Sets the services local .
5306	Remove the local metadata from the dataset .
5307	Get user property .
5308	Validates this Dataset .
5309	Returns a list of descriptors .
5310	Construct server path from HFS request .
5311	Get the capabilities .
5312	Get the feature with the given name
5313	Checks the parameters for error .
5314	Handle request parameters .
5315	Get the capabilities for a given URL .
5316	Returns the size of the object in S3 .
5317	Returns the last modified date of the snapshot
5318	Read the data from the DAP dataset .
5319	Returns a file view .
5320	Utility method to send string
5321	Set the content length of the response .
5322	Returns the URI of the given request .
5323	Get the request path from the servlet request .
5324	Returns the request base URI .
5325	Returns the value of the specified parameter ignoring case .
5326	Saves the preferences .
5327	Write a directory .
5328	Set bit offset .
5329	Create a bit counter for a given sub key
5330	Count the number of bits starting at the specified start bit .
5331	Appends a line to the buffer .
5332	Creates a Document that represents a list of stations .
5333	Get the capabilities document
5334	Get the record at the specified location .
5335	Get the coordinate at a specific index .
5336	Adds the specified item to the list .
5337	Handle exception .
5338	Returns the slice at the specified index .
5339	Iterates over the specified indices .
5340	Returns the map of NCEP generation code for the generated NCBI .
5341	Returns the CdmF server type
5342	Sets the value type .
5343	Factory method to create a Grib1 GDS .
5344	Copies data from the input stream to the output stream .
5345	Reads the contents of the stream into a String .
5346	Reads the contents of the stream into a byte array .
5347	Writes the contents of the given String to the given OutputStream .
5348	Copy a file into output stream
5349	Copies buffer to output stream
5350	Copies all files from one directory to another .
5351	Reads the contents of a file into a byte array .
5352	Reads a file into a String .
5353	Writes the contents of the given string to the given file .
5354	Write string to file .
5355	Write the contents of an InputStream to a file .
5356	Sends an exception handler to the client .
5357	Handle a DAP2Exception
5358	Sends bad URL pages to the client .
5359	get the catalog
5360	Print the catalog to the output stream .
5361	Print the status in the console
5362	Prints the error page .
5363	Gets the calendar date .
5364	Read vlen data .
5365	Parses a NcML string
5366	Opens the ncdfCollectionReader
5367	allowed characters in string
5368	Removes UTF8 chars from the byte array .
5369	Removes all letters from the string
5370	Filter 7 bits .
5371	Converts a name to a valid CdmObject name
5372	Compares two strings with the same character
5373	Pads the given string to the end of the string .
5374	Pads the given string to the end of the string .
5375	Removes a string from a string .
5376	Removes the given character from s string .
5377	Removes the given character from the end of the string .
5378	Collapses all whitespace characters in a string .
5379	replace a string with a character
5380	Replaces all occurrences of a string with a replacement character
5381	Replaces all occurrences of the given pattern with the given value .
5382	Substitute a string with a string .
5383	Substitute the strings in a string .
5384	Utility method to remove a character from a StringBuilder
5385	Replaces the given character in the string with the given character .
5386	Replaces all occurrences of the given string with the given string .
5387	Replaces the substring of the given string with the given substring .
5388	Removes bad characters from string
5389	Process a collection update event .
5390	Check state .
5391	Updates the collection .
5392	Show the unique templates .
5393	Gets the datasets .
5394	Release resources .
5395	Creates a deep copy of the structure data .
5396	copy to array
5397	copy to array
5398	Creates a copy of the given StructureData object .
5399	Copy to array structure
5400	getForecastTimeInterval in hours
5401	Create a coordinate axis with the specified range .
5402	Factory method to create a TableAnalyzer .
5403	Gets the first feature type .
5404	Analyze the table configuration and add all tables to the table
5405	Sync the grid reader
5406	Generates a list of average latitudes for a given type
5407	Swap long at offset
5408	Swap a float at a given offset
5409	Swap a char at a given offset
5410	Override this to customize the coordinate axes .
5411	Add a parameter to the coordinate transformation .
5412	Returns the common parent of another group
5413	Test if this group is the parent group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Add a dimension to this group if not already present .
5417	Adds a group to this group .
5418	Adds an enum type to this group .
5419	Adds a variable to this group .
5420	Removes the specified dimension from this group .
5421	Make a group relative to the given path .
5422	Convert a DDS alias to a DBSAliasField
5423	Print DAS object to the specified writer .
5424	Returns the variable with the given name .
5425	Writes a grid
5426	Replace the missing values in the grid .
5427	Replace missing values .
5428	Calculate the xstart of a longitude
5429	Writes the coverage data to the specified array
5430	Writes the exception
5431	Returns the lib ids .
5432	Create the top index file from config .
5433	Returns the type of the collection
5434	update the grib collection
5435	update the leaf collection
5436	Tries to open a GRI collection .
5437	Opens a GribCollection from the given data file .
5438	Opens a new GribCollection from the data file .
5439	Checks if the given URL matches the pattern .
5440	Adds a triple to the URL .
5441	Look up a key in the dictionary .
5442	Sets up any resources that are not null .
5443	Loads the CDM file
5444	Inserts a triple into trie
5445	Returns the list of datasets for this project .
5446	Find a dataset by name .
5447	Sets the projection .
5448	Determine the set of features to be drawn on the screen .
5449	Creates an array of shapes for each feature .
5450	Compares the string with the specified ID .
5451	Start the progress monitor task
5452	Determines if the collection index file has been deleted .
5453	Normalizes the difference between two geometries .
5454	Set the object at the given index .
5455	Returns the structure data at the specified index .
5456	Copy the data from an array to the result .
5457	Get a scalar object .
5458	Convert a scalar value to a double .
5459	Convert a scalar value to a scalar
5460	Extract a float from a member .
5461	Get the first byte of a scalar value .
5462	Extract a short from the struct .
5463	Extract a character from a scalar .
5464	Access a scalar string value .
5465	Create an ArrayStructure from the sequence data .
5466	Retrieve an ArraySequence
5467	Get an ArrayObject from a SequenceObject
5468	Calculates the minimum value between the two values .
5469	Evaluate a DAP variable .
5470	Returns a string representation of this constraint .
5471	Returns true if the specified DAP node references to the specified DAP node .
5472	Evaluates a value against a DAP Query .
5473	Returns the number of variables in the given structure .
5474	Compute the set of enums .
5475	Compute groups .
5476	Compile a constraint .
5477	checks if a file is a valid file
5478	Sets the actions system .
5479	Gets byte order .
5480	Set byte order .
5481	Find a key by name
5482	Return the file header with the specified name .
5483	Returns the header of the specified file .
5484	Print the parts to stdout .
5485	gets the data pointer at a specific location
5486	Read the DMF format from a given word
5487	Reads a string from the input stream .
5488	Extract data from DMP part .
5489	Convert bits to string representation
5490	Writes the network to a WritableByteChannel
5491	Parse a base element .
5492	Parse a DGrid element .
5493	Parses the aliases element
5494	Decode KeyDescriptor
5495	replicate keys .
5496	Returns the filename of the dataset .
5497	Gets the CFFeeType
5498	Returns true if the two float values are within the maximum difference
5499	Returns true if the given node is references false otherwise .
5500	Parses the given string .
5501	Utility method to print out an object .
5502	Determines whether the given variable is ailed variable .
5503	Make a best guess from the coordinate system .
5504	Convert a LatLonRect to a projection
5505	Show time series
5506	Returns a map of attributes .
5507	Gets the values .
5508	Returns the numeric value at the given index .
5509	Write a CDL definition .
5510	Sets the attribute value .
5511	Sets the values of the attribute .
5512	Sets the values from an array
5513	Performs the actual scan .
5514	Gets the proxy datasources catalog .
5515	Schedules write .
5516	Opens the target datatype
5517	Open a datatype
5518	show a datatype
5519	set up the dataset
5520	Prepare the UI .
5521	Creates a JFrame that will be displayed in the UI window .
5522	Computes the full name of a list of coordinates
5523	returns lesser of a coordinate
5524	Finds a coordinate with the given type .
5525	Get the projection for this coordinate system .
5526	Returns true if the projection is not null .
5527	Check if the coordinate axis is regular .
5528	Determines if the subset is contained in the specified collection .
5529	Contains the list of Axes .
5530	Contains the given axis name .
5531	Returns true if the list contains the given domain
5532	Contains the list of Axis types .
5533	Contains the given axis type .
5534	Clones this DAG .
5535	Returns the currently selected bean .
5536	Get the selected beans .
5537	Get the selected cells
5538	Sets the selected bean to be selected .
5539	Restore column state .
5540	Create an unknown unit with the given name .
5541	Close the stream .
5542	Determines whether a variable is an extra variable .
5543	Returns true if the given variable is a coordinate .
5544	Searches for a coordinate axis with the given coordinate
5545	Add data variables from a Table
5546	Add join join .
5547	Create a station feature from the given structure data .
5548	Creates a NodeMap for the Datamap .
5549	Create a SimpleUnit .
5550	Factory method to create a SimpleUnit with the given name
5551	Creates a unit from the given name .
5552	Check if the given string is compatible with the given exceptions
5553	Returns true if the given DateReferenceUnit is compatible with DateReferenceUnit .
5554	Returns true if the given unit string represents a time unit .
5555	Calculates the conversion factor for the input unit string .
5556	Convert the given value to the given unit
5557	returns true if this unit is an unknown unit
5558	Gets the value of this scale .
5559	Create a new RelOpClause .
5560	Create a new BoolFunctionClause
5561	Create a sub - clause .
5562	Takes an Array
5563	Crawl the catalog .
5564	Crawl a dataset .
5565	Crawl datasets .
5566	Returns the file or cache from the disk .
5567	Checks if the given file location is already in the disk cache .
5568	Set debug warnings .
5569	Get a list of all files in the system .
5570	Close the file .
5571	Seek to the given position .
5572	Flush buffer to file
5573	Reads a byte from the buffer .
5574	Reads a short from the input stream .
5575	Reads an int from the stream starting at the given position .
5576	Read n bits from the input stream .
5577	Read n long .
5578	Read n float .
5579	Read n doubles from the input stream .
5580	Read a string from the stream .
5581	Read a string from the stream .
5582	Write array of boolean values
5583	Write short array .
5584	Writes a character array to the output stream .
5585	Writes an array of int .
5586	Write n long array .
5587	Write float array .
5588	Write array .
5589	Writes a string to the output .
5590	Writes len bytes to the output stream .
5591	Search forward .
5592	Appends query from the template .
5593	Create a collection based on the configuration .
5594	Finds the index .
5595	Checks if the partition is a leaf or not
5596	Constructs a list of children from the index .
5597	Scans all children of the given directory .
5598	Read MFiles from index reader .
5599	Gets the grids .
5600	Acquires file cache .
5601	Remove the cache file
5602	Removes the file from cache .
5603	Releases an item from the cache .
5604	Converts a 4 - byte integer to a 4 - byte integer .
5605	returns the element in the cache
5606	Clears the cache .
5607	Determines the vertical transformation .
5608	Returns true if this is a global lon .
5609	Returns true if vertices are positive .
5610	Returns the coordinate of the x - axis coordinate of the x - axis coordinate .
5611	Reconstructs the x - index of the x - axis coordinate .
5612	Extracts the XY index of a lat lon .
5613	Returns the x - index of the x - coordinate of a lat lon .
5614	calculate the position of the item
5615	gets the item for a pixel
5616	Iterate over all the files in the collection .
5617	Get the remote logs
5618	Returns the name of the subCenter
5619	Returns a CalendarPeriod object representing a calendar unit .
5620	Returns an instance of CalendarPeriod with the specified field value .
5621	Create a CalendarPeriod from a string representation .
5622	Subtract the difference between two dates
5623	Convert from CalendarPeriod to CalendarDate
5624	Returns the value of this period s millisecond value .
5625	Gets the offset between two dates .
5626	Synchronizes the file to disk .
5627	Init tables .
5628	Add the given data root to the tree .
5629	Finds the longest path matching the reqPath .
5630	Finds a data root from the map .
5631	Converts the data root to a DataRoot object
5632	Returns a CalendarDateRange for the given Calendar .
5633	Reindex a list of coords .
5634	Creates a new NetcDF file writer .
5635	Add a group to the named group .
5636	Add an enum type to the extended model .
5637	Remove an attribute from the group .
5638	Renames a group attribute .
5639	Add a record structure
5640	Abort the application .
5641	Writes the Bean s properties to the specified PrintWriter .
5642	Extract data from a Dataset
5643	Divide this unit by another unit .
5644	Converts this unit into a derived unit .
5645	Converts this unit into another unit .
5646	Convert a nested variable into an array
5647	Convert a top - level variable into an array .
5648	Convert DBSV to Array
5649	Closes all open databases and environments .
5650	Opens database .
5651	Converts an int value to a period .
5652	Ensures that the string array has at least the given capacity .
5653	Returns the value at the specified index .
5654	Creates an catalog for the given directory .
5655	Create a proxy catalog from the given path .
5656	Gets the coordinate type .
5657	Create a new instance of Pds .
5658	Calculates the time in a Calendar date
5659	Applies scale factor to given value .
5660	Parses a local concept from the given file .
5661	Adds the given concept to the data store .
5662	Clean the line string
5663	stores a key - value pair
5664	Writes the grib1 tables to the output file .
5665	Writes the lookup tables .
5666	Show local concepts .
5667	Auxiliary method to write Grib1 tables .
5668	Get DatasetSourceType by name .
5669	Recursively expand the catalog .
5670	Performs full expansion of this dataset .
5671	Name all datasets in the given dataset container
5672	Creates a named dataset list .
5673	Name a dataset tree .
5674	Loads the source picture from the given URL .
5675	Stop loading of this picture
5676	documentation inherited from SourcePicture
5677	Calls the source load progress notification
5678	Creates and starts a scaled picture in the thread pool .
5679	Gets scaled size .
5680	Get the scaled size of a scaled picture .
5681	Convenience method to get the merged parts
5682	Create the header header
5683	Searches for the CK .
5684	Check for a valid group
5685	Set the root directory .
5686	Make the root directory .
5687	Gets the cache file .
5688	Cleans up cache files
5689	Cleans up the disk cache .
5690	Checks to see if the input short is a table
5691	Creates a new CoordinateAxis from a NetcDF dataset .
5692	Creates a copy of this coordinate axis with no cache .
5693	Checks if is numeric .
5694	Format the axis .
5695	Gets the calendar from the CFG data .
5696	Sets the list .
5697	Get the currently selected row .
5698	Increment the currently selected row .
5699	Get the model index
5700	Set the selected index of the slider .
5701	Sort a portion of an array .
5702	Swaps the specified string
5703	Check if an existing file is already existing
5704	Rotate a longitude .
5705	Create an XMLStore from the given file name and preferences .
5706	Creates a new XMLStore from input streams .
5707	Create an XMLStore from a resource
5708	Creates a standard filename for the given app name .
5709	Saves the preferences .
5710	Saves the preferences to the output stream .
5711	Writes an atomic variable .
5712	Writes the data in a DAP structure .
5713	Writes a structure
5714	Writes a sequence .
5715	Writes a DAP record to the given destination .
5716	Checks to see if a valid file is valid
5717	get wmo id
5718	Read row n .
5719	gets the data at the i th index
5720	Get data from the grid .
5721	Gets data from the grid .
5722	Reads the data from the template .
5723	Create a file with the given grid list .
5724	Computes the size of a grid file .
5725	Create a file from a given location .
5726	Sets the stations .
5727	Sets the currently selected station .
5728	Selects a station from the world model
5729	Pick the closest station in the world model
5730	Returns the currently selected station .
5731	Returns the name of the given type
5732	Convenience method to get the list of stations from the client .
5733	Returns a station by name .
5734	Gets a DataIterator for a station .
5735	Returns a DataIterator for a station .
5736	Reads the data for a gate .
5737	Calculates the dot product of this vector .
5738	Returns the norm of this vector .
5739	Normalize this vector .
5740	Set the services in the given iterable .
5741	Returns the parameter with the given id .
5742	Returns the parameter with the given id .
5743	Add a prefix to the name set .
5744	Add a symbol to the symbolSet .
5745	Returns the prefix of the given string .
5746	return true if email is OK
5747	Get a parameter by name .
5748	Calculates the CRC of the raw data .
5749	Determine if the buffer is a thin byte .
5750	Returns the index of the field .
5751	Returns the name of the time type
5752	Gets the current time coordinates .
5753	Set the next polygon
5754	Set the previous polygon
5755	Find property by name .
5756	Sets the current projection .
5757	Extracts the offsets from the specified time range .
5758	Register the IOProvider with the given class name
5759	Register a Iospi provider
5760	De - registers the Iospi provider with the specified target class .
5761	Returns true if IospiceProvider registered with the given class is registered .
5762	Return true if IospiceProvider is registered .
5763	Check if a file can be opened
5764	Opens a new NetcdfFile with the given data .
5765	Creates an IncDF file with the given byte array .
5766	Opens a file in memory .
5767	Open the contents of the given URI .
5768	Returns the global attribute with the given name ignoring case .
5769	Writes the network to a NDCML file .
5770	Writes the CDL object to the given stream .
5771	Write the CDL object to a PrintWriter .
5772	write CDL
5773	Add an attribute to a group .
5774	Adds an attribute to the specified group .
5775	Adds a group to the specified parent group .
5776	Adds a dimension to the specified group .
5777	Remove the specified dimension from the group .
5778	Add a variable to the group .
5779	Adds a variable to this group .
5780	Adds a string variable to this group .
5781	Remove a variable from the group .
5782	Sends a Iospike message .
5783	Make record structure .
5784	Terminates the group .
5785	Reads a variable section .
5786	Copy a variable to a byte channel .
5787	Read array of variables .
5788	Read variable section .
5789	Returns the full name of a CDM node .
5790	Creates a full name with the string representation of the group .
5791	Checks if the given MFile matches the filters
5792	Check if the MFile should be excluded
5793	Returns true if and only if the mFile matches the filters .
5794	Appends a string value to this vector .
5795	Dispatches an attribute value .
5796	Force conversion of string value .
5797	Check string value .
5798	Checks whether a string is a short .
5799	Check an int value .
5800	Check an unsigned integer .
5801	Check a float value .
5802	check a double value
5803	Returns the data type for the attribute .
5804	Check if dataset is viewable
5805	Checks if the given string is a valid boolean string .
5806	Checks if the given string is a valid alphanumeric string
5807	Checks if the given alphabetic string is valid .
5808	return true if there are any files in the given path
5809	Converts a unicode code point into a percentage string .
5810	Get the value of a parameter
5811	Compares two local GridDef
5812	Process bytes from the input stream .
5813	Process a BUFR message
5814	Removes quotes from string .
5815	Makes the stack of variables in the stack .
5816	Writes the ncML file to the ncML file .
5817	Get the value from the tredds config .
5818	Writes a CDL formatted string .
5819	Creates and registers a station helper object .
5820	Validates this ResultService .
5821	Returns the azimuth value .
5822	Returns the elevation of the elevation .
5823	Returns a list of the latitude values in the system .
5824	Returns an array of longitudes
5825	Returns an array of the specified altitudes .
5826	Get the azimuth s azimuths .
5827	Returns the elevation values .
5828	Returns a copy of this structure with the specified names .
5829	Selects a structure with the given variable name .
5830	Adds a member variable to this member .
5831	Sets the list of variables to use .
5832	Sets the parent group .
5833	Calculate the total size of this variable
5834	Reads the structure at the given index
5835	Read a vector structure starting at the specified start position
5836	Get the structure data iterator .
5837	Returns the value of a specific category
5838	Gets the class name .
5839	Add a parameter .
5840	Get the header string
5841	Convert a LatLonLong to a projection
5842	Returns the version number for the given name .
5843	Returns the positive value of the z axis .
5844	Delete the next file
5845	Sets the color scale parameters .
5846	Renders the plan view .
5847	Return true if this group is a child of another group
5848	Get type by name
5849	Installs the given cells in the given table using the given alignment .
5850	Sets the API key and secret key to be used in the Bitcoin Wallet .
5851	Creates a label with the given string value .
5852	Creates a label with the given strings .
5853	Creates a label with the given text .
5854	Connect to the Cloud SQL server .
5855	Parses the cloud sql types .
5856	Connect to the database .
5857	Removes a logger .
5858	Compiles all source code files .
5859	Compiles source code .
5860	Add source code
5861	Read graphic control data .
5862	Get the next frame
5863	Gets the selectable person property .
5864	Initialize list change events .
5865	Gets the person with the specified id .
5866	Adds the given message to the validator .
5867	Sets the person id .
5868	Tries to create and inject a ViewModel .
5869	Creates a view model instance .
5870	Loads the list of countries .
5871	Loads the list of subdivisions .
5872	Adds a string property field to the property list .
5873	Adds an immutable string field to this bean .
5874	Returns a new view step for the view .
5875	Start a FxmlView step for FxmlView .
5876	Clears the map from the given map .
5877	Creates the index events .
5878	Accessor method .
5879	Load a Fxml tuple for the given view .
5880	Create fxml path .
5881	Query for a style row
5882	Reads a pixel value from the image data .
5883	Get pixel values from image bytes
5884	Validate the coverage data
5885	Creates a new image with the tile width and height
5886	Set the tile data
5887	Runs a raw query on the database .
5888	Returns a CursorResult wrapping the query .
5889	Perform a query and return the result .
5890	Query a user query
5891	Converts cursor query into TResult
5892	Get the feature row for the given index
5893	Register a new table cursor
5894	Retrieves the tile row for the given x and zoom level
5895	Get Gridded Coverage data
5896	Get the coverage data for the tile DAO
5897	Get the coverage data for the tile DAO
5898	Get the coverage data tile results
5899	Get the coverage data zoom
5900	Get the coverage data tile results
5901	Get the coverage data tile results
5902	Get the tile matrix for the coverage data request
5903	Get the value of a tile at a specific location
5904	Sets the icon for the geometry type
5905	Get the icon for the given geometry type
5906	Returns the bindings database .
5907	Creates a bitmap from a byte array .
5908	Compress the bitmap to a byte array
5909	Insert the table metadata
5910	Delete the Geometries metadata for a GeoPackage
5911	Get the table metadata
5912	Get the id of a GeoPackage
5913	Creates Table metadata from cursor .
5914	Creates and returns the extension .
5915	Get the RTreeIndex for the RTreeIndexTable
5916	Runs a raw query on the database .
5917	Query by bounding box
5918	Query for rows within the envelope
5919	Count the number of envelopes in the envelope .
5920	Query for rows .
5921	Builds a where clause
5922	Query for features within the bounding box
5923	Number of features in the bounding box
5924	Query for features within the envelope
5925	Query for features within the specified range .
5926	Counts the number of rows within the specified bounds
5927	Set the bitmap data
5928	Set bitmap data
5929	Set the bitmap compression configuration
5930	Get the tile count
5931	Adjust the bounding box by the zoom level and zoom level
5932	Adjust the Google Maps for the Google Maps API .
5933	Adjust the bounding box for the GeoPackage WGS84
5934	Adjust the bounding box for the GeoPackage
5935	Get the bounding box for the tile at the zoom level
5936	Get the tile grid for the given zoom level
5937	Query for a tile row
5938	Query for by zoom level
5939	Get the zoom level closest to the specified length
5940	Get the approximate zoom level for the tile .
5941	Query for tile grid by zoom level
5942	Delete the tile at the specified zoom level
5943	Count the number of tiles by the zoom level
5944	Check if the tile matrix contains Google tiles .
5945	Get the pixel value from the image bytes
5946	Get the pixel values from the image bytes
5947	Validate the coverage data
5948	Create a coverage data image .
5949	Set the pixel value in the coverage data
5950	Get or create a GeoPackage
5951	Returns the current row
5952	Move the cursor to the next invalid location
5953	Query by base feature id
5954	Delete by base id
5955	Get the rectangle from the width and height in the bounding box section
5956	Get a rounded rectangle from the width and height in the bounding box section
5957	Delete missing databases
5958	Create and close the GeoPackage
5959	Check if database is valid
5960	validate database and close on error
5961	Validate database .
5962	Validates database .
5963	Validate the database header
5964	Check if the database header is valid
5965	Add internal databases
5966	Add external databases
5967	Imports a GeoPackage from a GeoPackage file
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata
5970	Create new data from geometry metadata .
5971	Populate geometry metadata .
5972	Delete the GeoPackage
5973	Create or update the geometry metadata .
5974	Update the geometry metadata
5975	Count the number of rows in the table
5976	Creates a geometry metadata object from the cursor .
5977	Update the rows matching the where clause
5978	Draw the specified tile .
5979	Gets the simple attributes .
5980	Checks the integrity check .
5981	Get the user mapping DAO
5982	Get the SimpleAttributes DAO
5983	Returns the mappings for a base id
5984	Returns the mappings for the related id
5985	Check if the base id has the given base id and related id
5986	Read the number of rows from the cursor .
5987	Register custom cursor wrapper
5988	Create a user custom DAO
5989	Get the tile from the request projection
5990	Draws a tile from the tile results
5991	Reproject a tile
5992	Get the tile results from the tile grid
5993	Calculate the overlap of the feature table and size
5994	Set density .
5995	Sets the line Paint .
5996	Set the polygon Paint object
5997	Draw the tile at x y and zoom level
5998	Draws a tile at the x y and zoom level
5999	Draw the tile index from the x y and zoom level
6000	Query the number of geometries in the index
6001	Query for features in the bounding box
6002	Query for features in the map by zoom level
6003	Query for features within the bounding box
6004	Draw all features from the x and zoom level
6005	Subroutine to simplify the points
6006	Returns the paint for the specified feature style .
6007	Returns the paint for the specified feature style .
6008	Determine the paint for the feature style
6009	Determine the paint for the feature style
6010	Determine the paint for the feature style
6011	Get the style paint for the style
6012	Get the paint for a style row .
6013	Returns the paint for the specified style id .
6014	Put a bitmap into the icon row .
6015	Creates an icon image for the icon and density ratio .
6016	Wrap a ContentValues
6017	Creates a bitmap from the layers .
6018	Recycle the bitmap
6019	Get the bitmap for a specific layer .
6020	Get the canvas for the specified layer .
6021	Creates and canvas bitmap for the specified layer .
6022	Get the mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature styles for the feature table
6026	Get the styles for the feature table
6027	Get the style for the feature table
6028	Returns the icons for the feature table
6029	Get the icon for the feature table
6030	Get the feature styles for a feature row
6031	Get the feature styles for the feature table
6032	Get the styles for a feature row
6033	Returns the icons for a feature row
6034	Get the styles for the feature id
6035	Returns icons for the feature id
6036	Sets the feature table style for the feature table
6037	Set the style for the feature table
6038	Sets the icons for the feature table
6039	Sets the feature styles for a feature row .
6040	Update the feature styles for the feature table
6041	Sets the styles for a feature row .
6042	Update the styles for the feature table
6043	Set the style of a feature row
6044	Sets the style for the feature row
6045	Set a style for the feature table
6046	Sets the icons on a feature row .
6047	Sets the icons for the feature table
6048	Sets the icon for the feature row .
6049	Sets the icon for the feature row
6050	Set the default icon for the feature table
6051	Gets or inserts a style .
6052	Gets or inserts an icon .
6053	Insert a style mapping
6054	Delete a table style mapping
6055	Delete the table icon for the feature table
6056	Delete the table mapping
6057	Delete the table mapping
6058	Delete the mapping
6059	Get all style ids
6060	Get all icon ids for the feature table
6061	Get all style ids for the feature table
6062	Returns all icon ids for the feature table
6063	Get image bytes .
6064	Flush the stream to the output stream .
6065	Get the pixel at the x position
6066	Reads the pixels from the image .
6067	Draw the feature
6068	Draw a line path
6069	Draw a polygon path
6070	Add a line string to the path .
6071	Add the polygon
6072	Get the cache for the given table name
6073	Remove a feature from the table
6074	Clear all cache entries in the cache
6075	Returns the styles for this table .
6076	Returns the Icons icons for this table style .
6077	Get a RTree Index TableDao
6078	Set the width of the column
6079	Set the height
6080	Gets the derived dimensions .
6081	Calculate the density of a tile in pixels
6082	Read blob value .
6083	Read the custom table
6084	Returns the color or the default color if none .
6085	Validate the color
6086	Creates a color from hexadecimal
6087	Get the GeoPackage Manager
6088	Set the progress in the feature table index
6089	Returns the index of the specified type in the list of features .
6090	Index the given feature row
6091	Delete the feature index .
6092	Delete the index from the given row .
6093	Delete the feature index .
6094	Delete the feature index for the feature table
6095	Returns true if this feature location is indexed
6096	Gets the indexed features .
6097	Query for feature index results
6098	Count the feature index
6099	Get the bounding box for the feature table index
6100	Query for feature index results in the bounding box
6101	Returns the index type for the index location query .
6102	Gets the internal file .
6103	Gets the absolute file path .
6104	Returns the geometry type .
6105	Set the geometry type
6106	Check if the URL has a bounding box
6107	Replace x y coordinates in the URL .
6108	Check if the URL has XYZ
6109	Replace the bounding box in the URL
6110	Replace the bounding box in the URL
6111	Get the geometry data
6112	Index the feature row
6113	Update the last indexed time of the table
6114	Delete index .
6115	Delete the feature index
6116	Check if the feature is indexed
6117	Query for the table
6118	Query for the bounding box
6119	Count the number of rows within the bounding box
6120	Query for geometry envelope
6121	Count the number of edges in the geometry envelope
6122	Query for features within the bounding box
6123	Number of features in the bounding box
6124	Transform the feature bounding box in the feature projection
6125	Get the Geometry metadata for the given cursor
6126	Get the feature row for the cursor
6127	Get the feature row for the given geometry metadata .
6128	Get the TileDao for the feature table
6129	Get the FeatureDao for the feature table
6130	Get the bounding box
6131	Query by base id and related id
6132	Query for unique base IDs
6133	Query for unique IDs
6134	Delete users by base id
6135	Delete by related id
6136	Delete by base id and related id
6137	Builds a where clause based on baseIds and relatedIds
6138	Insert the metadata
6139	Delete the metadata
6140	Renames the metadata
6141	Rename the name
6142	Get all the GeoPackage metadata
6143	Get the GeoPackage metadata
6144	Get the metadata by ID
6145	Get the metadata of a GeoPackage
6146	Check if the database is external
6147	Get the metadata at a path
6148	Get metadata where name is like .
6149	Get metadata where not found .
6150	Get metadata by name
6151	Create the GeoPackage metadata
6152	Called when view is created .
6153	Recursively adds parallax views to the ParallaxView .
6154	This method is called when the LayoutInflater needs to be created .
6155	Creates a custom view .
6156	Appends an event to the log .
6157	Attempts to load the config file from system properties .
6158	Get the URL for the resource
6159	Automatically auto config
6160	A status on a resource search .
6161	Converts a socket address to a string .
6162	Create new thread pool executor service .
6163	Iterates over the specified converters starting with the specified converters starting from the specified head .
6164	Immediately rollover .
6165	Adds a substitution property .
6166	Returns the value for the given key .
6167	Compiles the given top - level converter .
6168	Get Eopt node .
6169	returns null if not found
6170	This method is used to escape the string .
6171	Convert a date to regular expression .
6172	Begin processing the evaluator .
6173	End evaluator .
6174	Initialize this Logger
6175	Creates a context selector .
6176	Set the properties from the logger context
6177	Gets the external storage directory path .
6178	Returns the path to the database directory .
6179	Returns the path to an absolute file path .
6180	Returns true if logging is higher than error level .
6181	Returns the originating value for the specified event .
6182	Updates mask if necessary .
6183	Returns the chain of filters for the given event .
6184	region KeyManagerFactory
6185	Creates trust managers .
6186	Creates a KeyStoreFactory from system properties
6187	Returns the location of a system property .
6188	Returns the URL for the given location .
6189	Returns true if a Throwable has a Throwable that handles throwables .
6190	Stops the Logback .
6191	Prints the given context to the console .
6192	Prints the status of a context .
6193	Print a status message to the console .
6194	Handle the first line of a throwable .
6195	Look for an entry in the current map .
6196	Signals that the given key is ended .
6197	Creates a FormatInfo object from the given string .
6198	Rename a file .
6199	Returns true if srcFile is on the target file store false otherwise .
6200	Gets an environment variable .
6201	Returns the value of an Android system property .
6202	Sets the MDCPropertyMap for this event .
6203	Outputs all key - value pairs of key - value pairs
6204	Extract the stack trace of the specified class from the framework name .
6205	Checks if the current class is in the framework space
6206	Adds a status to the list .
6207	Adds a status listener .
6208	Look up the implicit actions for the given element .
6209	Get the applicable actions for the given element path .
6210	Set the class loader .
6211	Returns the value for the given key
6212	Returns the boolean value for the given key
6213	Decompitalize a name .
6214	Returns an array of MethodDescriptors of the given class .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Initialize the appender .
6217	Helper method to add onConsoleStatusListener instance
6218	Takes an object and puts it to the stack .
6219	Return the value of the specified LoggingEvent
6220	Checks if logging is disabled .
6221	Defines the shutdown hook .
6222	Called by the JVM to register the shutdown hook .
6223	Returns the set of enabled protocols .
6224	Returns an array of the enabled cipher suites based on the configuration set .
6225	Returns the included strings .
6226	Convert string to scope object .
6227	Sets the properties of the interpreter .
6228	Add an appender to the list of appenders
6229	Remove appender from appender .
6230	Remove appender by name .
6231	Called when the parent of this logger is not null .
6232	Calls appenders on all appenders .
6233	Detaches an appender from the appender .
6234	Create a child log logger .
6235	Calls the given marker for the given marker .
6236	This method is for log4j
6237	Creates and returns a socket .
6238	Creates the missing parent directories of the given file .
6239	Converts this log level to integer .
6240	Convert an integer to a level .
6241	Count the number of URLs in the given resource .
6242	Returns the URL of the given resource
6243	Returns the ClassLoader for the specified object .
6244	Get the ClassLoader of a given class
6245	Returns the class loader of the given class
6246	Start the tag encoder .
6247	Returns the tag for logging .
6248	Begin processing instructions .
6249	Gets the index of the first separator within the given string
6250	Evaluates whether or not the given event exists in the LoggingEvent list .
6251	Returns the thread name for the client .
6252	Checks if two files are on the same file store .
6253	Start the session .
6254	Appends an event to the receiver .
6255	Sends a message to the client .
6256	Adds a MDC value to the list of MDCValuesPair .
6257	Creates a converter for the given type .
6258	Create a composite converter for the given composite node .
6259	Determines the compression mode .
6260	Configures the given URL .
6261	Configures the configuration from the given file .
6262	Configures the given InputStream with the given InputStream .
6263	Builds the interpreter .
6264	configured configuration
6265	Called by the interpreter .
6266	Returns the property value .
6267	Sets the name of this context .
6268	Returns true if the context has status listener
6269	Get timestamp of last reset
6270	Start parsing .
6271	Returns the effective mapping for the converter .
6272	Returns the file header .
6273	Gets the file footer .
6274	Begin the appender .
6275	Called when the object is ended .
6276	Creates a copy of clients
6277	Adds a client to the list of clients .
6278	Remove client from list of clients
6279	Returns a copy of the current thread s context map
6280	Returns value of type parameter .
6281	Calls the filter chain and returns the result .
6282	Checks if the current OS is operating system .
6283	Initializes the default logger context .
6284	Returns an array of files that match the given stem regex .
6285	Horrible print for all status messages .
6286	Returns the integer number of syslog facility s corresponding to the given string .
6287	Gets the database file .
6288	Clears expired logs .
6289	Check if the last cleanup time is expired .
6290	Internal method to insert logging event .
6291	Submits the given event to the given event .
6292	Binding event .
6293	Returns string truncated to 255 .
6294	Computes the mask for a logging event .
6295	Merges the properties of an event into a map .
6296	Insert exception .
6297	Returns the length of the given element in the given path .
6298	Returns the effective level of the status .
6299	Sets the specified property to the specified value .
6300	Indicates whether the given class is instantiable .
6301	Create a HashMap from the parent Map .
6302	Parses an include .
6303	Open the given URL .
6304	Trim off the head and tail .
6305	Creates and starts the server .
6306	Returns true if the error is transient .
6307	Sets the default hosts .
6308	Get the local index .
6309	Sync the data selection
6310	Sync sync .
6311	Wait a task to finish
6312	Lists all the indexes in the data directory synchronously .
6313	Read string from stream
6314	Reads the contents of the stream into a byte array
6315	Consumes the data from the connection .
6316	Returns a list of hosts that are currently up .
6317	Sets the type of the Places .
6318	Starts the index .
6319	Put a value into the LRU cache .
6320	Retrieves a value from the cache .
6321	Blocks until all threads are complete .
6322	Compare two version strings
6323	Reports an exception to the agent .
6324	Copies all files from one directory to another .
6325	Initializes the simulation properties from the given file .
6326	Returns the value of a static field .
6327	Gets the method by name .
6328	Formats a percentage value as a percentage .
6329	Format double .
6330	Format long .
6331	Reads a JSON syntax character from the input .
6332	Convert a hex value to a byte .
6333	Writes a JSON string
6334	Writes a number
6335	Write a double .
6336	Reads a JSON string .
6337	Reads a JSON numeric char .
6338	Reads a JSON integer .
6339	Reads a double .
6340	Read JSON string .
6341	Execute a method call .
6342	Invokes a method call .
6343	Enqueue a method call to the service .
6344	Get the file object for the given location .
6345	Updates the decoration .
6346	Refresh repository view .
6347	Returns the resource history view
6348	Opens an editor with the given name and text .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Creates the default page
6352	Start the server view
6353	Set the keepalive flag .
6354	Sets whether to omit the target node .
6355	Set owner .
6356	Adds a condition factor to the WebDA .
6357	Create a condition term from the given stream tokenizer .
6358	Returns true if this condition matches the given condition .
6359	Returns the DDL content for a DDL file .
6360	Loads the DDL configuration from the specified file .
6361	Parses the configuration file .
6362	Get the menu for this control .
6363	Adds a response element .
6364	Adds an encoded href .
6365	Inserts a new href before the given href .
6366	Remove a href from the element .
6367	Add a prop to the tree .
6368	Gets the href of the element .
6369	Returns the status element of the element .
6370	return the current stack frame
6371	Returns true if the given class is a subtype of the given class .
6372	Returns true if the given collection contains the given proposal .
6373	Creates a copy of the given node .
6374	Reset the stream .
6375	Create actions for the contentAssistion .
6376	Adds a connection to this connection .
6377	Returns the value of a property .
6378	Removes a connection from this connection .
6379	Sets the location of the property .
6380	Sets the location of the specified property .
6381	Sets the size of the dialog .
6382	Dumps the given constraints into a string .
6383	Creates a lock entry .
6384	Adds a child vertex to this vertex .
6385	Removes a child vertex from this vertex .
6386	start the bundle
6387	Cleanup resources .
6388	Returns the string value for the given key .
6389	Returns the resource bundle
6390	Get the formatterFormColors
6391	Set the date - time from the given date string .
6392	Sets the date .
6393	Create a status with an error .
6394	Logs an error .
6395	Adds the given field editor to the list of fields .
6396	Adjust grid layout .
6397	Apply the specified font
6398	Calculate the number of columns .
6399	Initialize the fields .
6400	Fire a property change event to all registered listeners .
6401	Set the active editor
6402	Adds to the tool bar .
6403	Determines the dialect to use .
6404	Creates a new context using the supplied locator and locator .
6405	Performs the actual save .
6406	Create the table listeners
6407	Creates the table .
6408	Writes the specified value to the specified URL .
6409	Puts an entry into the table .
6410	Adds a new node to the tree .
6411	Add a child to this node
6412	Sets the offset and length .
6413	Adds a condition to the Precondition .
6414	Adds a state token to the state machine .
6415	Returns true if the condition matches the given condition .
6416	Gets the prop .
6417	Returns the status of the element .
6418	Sets the property .
6419	Returns the last line of the back text
6420	Returns the last non - dash line from the backText
6421	Convert an id to a string .
6422	Concatenates two strings
6423	Returns the message with the given id and bindings .
6424	Creates the process .
6425	Creates the sample JUnit .
6426	Returns the value of runtimeId .
6427	Visit a Rete .
6428	Visits a node .
6429	Returns the dot id of the given object .
6430	Adds a remove property .
6431	Adds a set property .
6432	Create a new locator for the given resource URL and label .
6433	Get a presentation recurrence .
6434	Returns whether the object is the same as the given status
6435	Returns true if this condition contains the given term .
6436	Parses the token stream .
6437	Adds the pages to the rule editor .
6438	Sends a DELETE request .
6439	Perform a POST request .
6440	Gets the status of a job .
6441	Execute the pull operation .
6442	Handles pull results .
6443	Replaces the value at the given index with the given value .
6444	Add an active lock element .
6445	Removes proposals that start with the given prefix
6446	Read backwards from the given offset .
6447	Calculates the row list .
6448	Draws the border .
6449	Get the EditPart for the model element
6450	Returns an image descriptor for the given path .
6451	Declares a registry image .
6452	Adds a new base vertex at the specified depth .
6453	Returns the row index for the given vertex .
6454	Gets the width of all rows in the grid .
6455	Dumps the rows .
6456	Optimizes the current row
6457	Load the RETE model from the given contents .
6458	Initialize the graphical view
6459	Draws a new graph .
6460	Returns the breakpoint for the given source .
6461	Set the href for this node .
6462	Returns whether the device can be talk to .
6463	Performs a copy of the specified destination .
6464	Examine the response .
6465	Extract properties from a multi status table .
6466	Returns the content of the dav .
6467	Returns the list of active locks .
6468	Look up a property by its name .
6469	Perform a head request .
6470	Sends a lock request .
6471	Move to destination .
6472	Performs checks in the specified locator .
6473	Refresh lock lock .
6474	Remove the specified properties .
6475	Remove a property .
6476	Set the content of an input stream .
6477	Sets the specified properties .
6478	Set the property value .
6479	Unlock the lock .
6480	Update the document version .
6481	Control the version control .
6482	Deletes the dav .
6483	Examine the status code .
6484	Determines whether the specified property has the specified child .
6485	Write the request body to the output stream .
6486	Convert a byte array to a hex string .
6487	Convert an array of ints to a hexadecimal
6488	Sets whether allprop nodes are all propos or not .
6489	Sets whether the node is a propname .
6490	Sets the property .
6491	Strips the last word from a string .
6492	Update the tree .
6493	Writes the content to the output stream .
6494	step over the current thread
6495	marks parser errors
6496	Skip whitespace .
6497	Add a file to the WebDv server .
6498	Commit changes from a file on the web .
6499	Returns the age of the entry .
6500	Returns the content length .
6501	Gets the maximum forward direction .
6502	Determines whether the overwrite flag should be overwritten .
6503	Determine whether the chainsthrough is enabled .
6504	Retrieves the value of the timeout property .
6505	Put a value for the given key .
6506	Sets the value of the timeout period .
6507	Open DDL file
6508	Parse a file .
6509	Gets object metadata .
6510	Strip object metadata .
6511	Adds tokens to the node .
6512	Returns the children of the given text .
6513	Get the children nodes that match the given object .
6514	Add child node to list
6515	Prints the tree to stdout .
6516	Recursively print a node .
6517	Prints the specified number of tabs .
6518	Creates a JsonValue from the given text .
6519	Get an image descriptor from the registry .
6520	Performs the actual invocation .
6521	Sets the specified field on the request .
6522	Create the project sample .
6523	Create the rule file .
6524	Create the project flow file .
6525	Create the Java code flow launcher .
6526	Get all IU units i . e . IUS
6527	Writes an image to the output stream .
6528	Returns the field name .
6529	Returns the evaluator for this node .
6530	Returns the field value
6531	Adds the properties from the given resource to the given properties file .
6532	Control the baseline control .
6533	Binds the given member to the given source .
6534	Return the locator at the given locator .
6535	Optimize the vertices .
6536	Initialize the controls associated with the original file .
6537	Validate the page .
6538	Generates an entity tag .
6539	Returns the opposite of the given vertex .
6540	validates otp authentication
6541	Check if the user is right user
6542	get username for publicId
6543	Addyy key to user file .
6544	verify OATHO
6545	Clears the password .
6546	Returns the public ID of the given OTP key .
6547	Check if the given string is valid otp format
6548	Creates a new evaluation instance .
6549	Creates a new Evaluation instance .
6550	Clears the cache .
6551	Returns whether or not the Jdk 15 . 1 . 5 .
6552	Returns the package name of the specified object .
6553	Returns the package name of a class
6554	Returns a string representation of the given object .
6555	returns the type of the argument
6556	Returns true if two classes are more specific than one of them .
6557	Finds the best method for the given source object .
6558	Returns the value of the specified property .
6559	Returns a map of property descriptors for the specified target class .
6560	returns the PropertyDescriptor from the target class
6561	Returns the read method of the target class
6562	Reads a character from the input stream .
6563	start a projection
6564	This is the full select .
6565	Converts value to long .
6566	Returns the value of the given object as a double .
6567	Converts an object to a BigInteger .
6568	Converts value to BigDecimal
6569	Converts a value to a string
6570	get numeric type from value
6571	Convert value to given type
6572	Converts value to integer .
6573	Returns the numeric type of the given type .
6574	Returns the numeric type of two numeric types
6575	Creates a new Integer from the given value .
6576	Removes the current evaluation from the context .
6577	Generates the body of an OGNL getter method .
6578	Returns the value setter method .
6579	Flattens the tree .
6580	Initializes this result .
6581	Returns the next octal character .
6582	Sets root context
6583	Evaluates the expression .
6584	Sets the value of the given object .
6585	Set the value of an OGNL tree .
6586	Tests if the expression is a constant .
6587	Returns the default watch service id .
6588	Waits for the server to start .
6589	Reads the file as String .
6590	Reloads the class loader .
6591	Get a specific archiver by name .
6592	Check the resources for a given archiver .
6593	Reads the contents of a file into a String .
6594	Creates the project .
6595	Add a system property to the environment variable .
6596	Add a system property to the environment variable .
6597	Open a new folder dialog .
6598	Changes the contents of a folder .
6599	Refresh the button state .
6600	Creates a file observer for the given path .
6601	Returns the selected folder as result .
6602	Create a new folder
6603	Checks whether the given file can be read - only .
6604	Start a background job .
6605	Start a new list .
6606	Ends the end of the list .
6607	Handles motion moving .
6608	Get crop rectangle .
6609	Compute the rectangle .
6610	Register a listener to receive the video
6611	Adds a span to the text .
6612	Gets the view for the specified view .
6613	Gets the item at the specified position .
6614	Convert a SpannedText object into a RTHtml .
6615	Finds the spans within the specified span .
6616	Create a unique file in the target folder
6617	Determines the original file from the given URI .
6618	Generates the namespace for the given name .
6619	Returns the local name of the given name
6620	Set the value of an attribute .
6621	Sets an attribute of the type .
6622	Read the name of the font from the file path .
6623	Returns the name of the font for the given asset .
6624	Adds a new buffer to the buffer .
6625	Writes a byte array to the buffer .
6626	Writes a byte to the buffer .
6627	Writes the data from the given InputStream to the currentBuffer .
6628	Writes the data to the output stream .
6629	Converts the buffer to a byte array .
6630	Sets the selected font size .
6631	Converts a path to a Unix separators .
6632	Recompute focus .
6633	Ensure that the view is visible .
6634	Center the view based on the highlight view .
6635	Resets the iterator to the document locator .
6636	Validate the value .
6637	Adds an element type .
6638	Set an attribute on a particular element .
6639	Set the parent of a child element .
6640	Get the element type by name
6641	Returns the integer value for the given entity name .
6642	Cleans all Paragraphs in the given editor and removes them from the edit text .
6643	Applies the given value to the selection .
6644	Checks if the given domain is a valid domain .
6645	Called when an operation is executed
6646	Redo a transaction
6647	Replaces all occurrences of a string with a given replace string .
6648	Returns the thread status for the specified thread .
6649	Sets the bitmap options .
6650	Returns true if the thread can be decoded .
6651	Decodes a file descriptor .
6652	Returns a list of all the fonts from the font
6653	Gets the map of asset fonts indexed by name .
6654	Get system font names
6655	Initialize the setup
6656	Get reader from source .
6657	Gets an InputStream for the given publicid and systemid .
6658	This method is used to set the value of the attribute .
6659	Expand entities from a string .
6660	Look up an entity .
6661	Restart an element .
6662	Pop the stack .
6663	Restart the popped element .
6664	Returns the prefix of the given name
6665	Determines whether the given prefix is foreign .
6666	trim quotes from string
6667	Split a string into an array of strings .
6668	Rectify an element .
6669	Creates a name from the buffer .
6670	On save instance state .
6671	Called when the view is destroyed .
6672	Event handler for the event
6673	Called when an event occurs .
6674	Compute the base matrix for the bitmap
6675	Returns the maximum width of the bitmap .
6676	Returns true if there are spans in the given selection
6677	Helper method to find spans
6678	Encodes the given URL .
6679	Decode query string .
6680	Picks the start of the directory with the specified path .
6681	Rotate image .
6682	Sets the output .
6683	Writes a character to the output stream .
6684	Writes a string to the output .
6685	Returns true if the given name and value is in boolean form .
6686	Writes a string to the output .
6687	Write namespace declarations .
6688	Write prefix .
6689	Creates a stream if not already exists .
6690	Wait for the stream activation .
6691	Complete the store snapshot with missing snapshot snapshots .
6692	Wait for the next provisioning request to finish .
6693	Helper method to get records .
6694	Helper method to perform an action on AWS and retry .
6695	Tries to create an action using the given supplier .
6696	Checks if the given bucket is accessible .
6697	Recovers the store from the snapshot store .
6698	Triggers a wildcard expansion handler .
6699	Replaces a string in a string with a new pattern .
6700	Delete any characters from the string .
6701	Adds a new resource lint report .
6702	Updates properties with the specified key from the configuration file .
6703	Returns the ConfigProperties object
6704	Creates an input stream to the wro file .
6705	Creates a map of resource post processors .
6706	Compiles the given content to a JavaScript script .
6707	Reloads the cache with a new value .
6708	Reloads model with new value
6709	Returns a ServletRequest that wraps the given location in the given WroServletRequest .
6710	Creates a transformer that transforms a string into a base name .
6711	On error .
6712	Sends redirect to specified location .
6713	Recursively processes a resource .
6714	Creates the expandander handler for the given group .
6715	Locate the given URI and return the input stream .
6716	Creates the WroConfiguration for the filter .
6717	Register the change listeners .
6718	Process the request .
6719	Set the WroConfiguration
6720	Identify duplicate group names .
6721	Merge the given WroModel into this one .
6722	Locates the specified URI in the decorated object .
6723	Apply post processors to the content .
6724	Decorate a resource post processor
6725	Performs the actual processing .
6726	Split options into an array of strings .
6727	Loads properties from an input stream .
6728	Read properties from a string .
6729	Creates custom manager factory .
6730	Persists the resource fingerprints .
6731	Returns true if the given group is a target group .
6732	Extend the classpath .
6733	Gets the model resource as stream .
6734	Initialize the WroManagerFactory
6735	Set model transformers
6736	Compiles the template content .
6737	Processes the list of resources and merges them into a string .
6738	process and merge resources
6739	Run the pre processing of the resources
6740	Apply the pre - processors to a resource .
6741	Decorates the resource pre - processing processor .
6742	Persists the fallback .
6743	Recursively collects all fields of the given object .
6744	Rewrite css .
6745	Compute a new image location
6746	Add a transformer to the model .
6747	Handle a processed bundle .
6748	Initializes the aggregated folder path .
6749	Extract variables from variables body .
6750	Parse the CSS content into a map of variables .
6751	Helper method to replace all variables in css .
6752	Returns a resource post processor
6753	Check if the given resource type is eligible for the search .
6754	Applies gzip to the response .
6755	Include a path pattern processor
6756	Create a PathPatternProcessor that will exclude given patterns
6757	Creates a resource change handler .
6758	Records the given resource .
6759	Processes CSS import - import .
6760	Filter collection .
6761	Returns whether the request should be minimized or not .
6762	Find the resources for the css content .
6763	Compute the absolute URL for a resource .
6764	Converts a list of items into a string .
6765	Extract alias list from alias string .
6766	Creates the context .
6767	Evaluates the given Reader and returns the result .
6768	Evaluates a script .
6769	Process the resource bundles .
6770	Checks if the request is a handler request .
6771	Creates the handler request path .
6772	Rename a group .
6773	Compute the destination folder .
6774	Process a group .
6775	Check if change is required for a group
6776	Locates a resource in the context folder .
6777	Creates a new object pool .
6778	Locates an InputStream from a jar file .
6779	Open the JAR file .
6780	Extract path from URI .
6781	Check if the request is minimized .
6782	Add a set of locators to the factory .
6783	Returns a new WroModelFactory which decorates the WroModelFactory with the given list of model transforms .
6784	Adds a require .
6785	Process the given string .
6786	Log the summary of all lint resources .
6787	On processing a resource .
6788	Gets the lock for the given key creating it if necessary .
6789	Create a process .
6790	Parses a comma separated list of properties .
6791	Get task info .
6792	Returns the compilation command .
6793	Parse the header .
6794	Add no caching headers
6795	Gets the path info from a location .
6796	Gets the servlet path from the given location .
6797	Checks if the given path matches the path .
6798	Load the regexp with the specified key .
6799	Copies the contents of a reader into a writer .
6800	Creates a temporary file with the given extension .
6801	Clean the image url .
6802	Sets attribute on object .
6803	Generates a data URI from an input stream .
6804	Generates the data URI .
6805	Sets the context .
6806	Unset correlation id .
6807	checks if the cache is changed
6808	Called when an exception occurs .
6809	Checks whether a resource has changed .
6810	Update the hash value of a group .
6811	Checks if there are resources of the given type .
6812	Creates a process from sourceFile and destination .
6813	Encodes an object to a string .
6814	Process group elements .
6815	Parses a group element .
6816	Create a group from the element .
6817	Parses a resource element .
6818	Get resources for a group .
6819	Log the values in the specified Logger
6820	Stop a named timer .
6821	Get a named timer .
6822	Returns a timer with the given name or null if no such timer exists .
6823	Prints saturation statistics .
6824	wake up workers
6825	called by workers
6826	Updates the count of finished jobs .
6827	Updates counter if value is smaller than value .
6828	Default visit for the given premise .
6829	Instantiates the equivalent content of the given property .
6830	Ensures that the axiom loading has completed .
6831	Restore saturation state .
6832	Returns true if the consistency check is consistent .
6833	Restores the taxonomy state of this class .
6834	Restore instance taxonomy .
6835	Returns evidence for the given conclusion .
6836	Pre - process initialization .
6837	Invalidates this reasoner s reason .
6838	Gets the list of individual to add to .
6839	Gets the list of removed individuals from the taxonomy .
6840	Creates an UnsupportedOperationException for the given Owl API method .
6841	Removes the element at the specified position in the array .
6842	Removes entries from the specified array at the specified position .
6843	Returns the position of the last element in the array that was removed .
6844	checks if the object contains the specified object .
6845	Inserts the specified element at the specified position in the darray .
6846	Checks the occurrences of this index .
6847	Adds a timer to this class .
6848	Add time application timer
6849	Puts a key value into the values array .
6850	Removes the entry from the list and returns the value .
6851	Increases the size of the map .
6852	shrink the keys
6853	Saves the given configuration to the given file on disk .
6854	Writes the declarations of the specified class to the writer .
6855	Retrieves all the instance nodes from a given node .
6856	Removes all elements from the array .
6857	Combine multiple hash values into a single integer .
6858	Combines multiple lists into a single integer .
6859	Copies the data from the input stream to the output stream .
6860	Returns the InCompletenessMonitor that will be processed by the InCompletable .
6861	Processes the specified taxonomy .
6862	Submit an input to the buffer .
6863	Append the elk object to the appendable .
6864	Marks the query as not computed .
6865	Adds a new direct type node .
6866	Checks that the given start position matches the given start position .
6867	Filters the given set using the given condition .
6868	Returns a map of the given functor
6869	Adds the specified element at the specified position .
6870	Removes an object from the data set .
6871	Adds the given counter to this counter .
6872	Log the memory usage .
6873	Sets the configuration options .
6874	Shuts down the reasoner .
6875	Print header .
6876	Print values to the logger .
6877	Creates a string consisting of the specified char
6878	Adds the given counter to the counter .
6879	Writes a resource
6880	Look up an action input parameter by name .
6881	Retrieves the property descriptor for the given property path .
6882	Returns the required parameters for the request .
6883	Checks if is single value .
6884	Adds a relation .
6885	Sets the type of the link .
6886	Add hrelang .
6887	Adds a revision to the link .
6888	Adds a link parameter to the link .
6889	Expand an Affordance
6890	Gets the rels list .
6891	Gets the list of revisions .
6892	Returns true if all required variables have satisfied .
6893	Get the value .
6894	Returns true if the parameter is hidden .
6895	Returns true if the property contains the given property .
6896	Determines whether or not the input annotation has explicit property value .
6897	Returns true if the request is required .
6898	Returns the default value .
6899	Returns parameter name from method parameter
6900	Get the exposed property or the name of the Expose parameter .
6901	Determine the vocab for the given mixin source .
6902	Returns the query string .
6903	Append the form for the action .
6904	Write an input button .
6905	Appends an input or select .
6906	Adds the given affordance builder to this builder .
6907	Returns the partial URI template components .
6908	Returns a copy of the template component with optional parameters .
6909	Returns the first node with the given name .
6910	return first matching node with given rel
6911	Returns an iterator over the data in this node .
6912	Creates a new PersistentHashMap from an Equator .
6913	Creates a PersistentTreeMap from the given iterable
6914	Returns an empty tree map .
6915	Returns a copy of this TreeSet
6916	Return the last key in the map
6917	Constructs an Xform from an iterable .
6918	Perform a fold operation
6919	Drops elements from the current sequence until the predicate evaluates to true .
6920	Performs a single fold operation using a reducer .
6921	Construct a Tuple2 from a Map .
6922	Perform a match .
6923	Registers a set of classes .
6924	Returns the node at the given index .
6925	Appends an element to the tail .
6926	Concatenates the items in the list into a PersistentVector .
6927	Returns a MutableSet that contains the given items .
6928	Create a MutableList with the given items
6929	Creates a view of the given items .
6930	Creates an immutable view of the given items .
6931	Create an Unmodifiable representation of the given array .
6932	Create a string builder for indentation .
6933	Convert an array of items to string representation
6934	Creates a lazy LazyRef instance .
6935	Applies the work to the producer .
6936	Inserts an item at the specified position in the specified array .
6937	Creates an array of the given items up to the specified length .
6938	Suspend the current thread if the current thread is associated with another thread
6939	Before executing the async operation .
6940	builds components from the specified service descriptor file
6941	Validates a directory .
6942	Create inheritance link .
6943	Copies all methods from one class to another .
6944	Copy methods from the given methods array to the destination class .
6945	Creates a log tree item .
6946	remove sb entity with current class loader
6947	Returns true if notification parameter is enabled
6948	Returns the set of resource links that are referenced by the service .
6949	Installs the service .
6950	Uninstalls the given service .
6951	Returns whether or not the given resource link name is referenced by this component .
6952	Returns the usage parameters for the given SbbId
6953	reset all usage parameters
6954	returns a collection of profiles from the profile table
6955	Returns the profile table activity
6956	get a profile by index
6957	Displays the result .
6958	Convert an array to string
6959	Fire event .
6960	Binds a name to a node .
6961	Unbind a name .
6962	Look up a child node by name .
6963	Returns the name bindings for the node .
6964	the next event
6965	Returns true if this level is higher than the given level .
6966	Extracts jar contents to destination directory .
6967	Copies data from input stream to output stream .
6968	Put an object into the map .
6969	Attach a new SbbEntity to this node .
6970	Detaches the given SBBEntityId from this node .
6971	Returns true if the SB entities are not attached .
6972	Get the list of SbEntityIDs that are attached to this node .
6973	Attaches a timer to this node .
6974	Detach a timer from the set of timers .
6975	Returns true if there are no timers attached .
6976	Return set of attached timers .
6977	Add a namespace .
6978	Remove the name bound .
6979	Returns true if there are no names bound .
6980	Get all names bound to this namespace .
6981	Sets the cmp attribute .
6982	Get a CMP attribute .
6983	Returns a copy of the attributes contained in this node .
6984	Initialize notification info .
6985	Sends a usage notification to the listeners .
6986	Method to download the UUID from the deployment folder .
6987	Update the deployed components
6988	Installs a deployment unit
6989	Uninstalling a deployment unit
6990	Processes the deployment and updates the uninstalled components .
6991	Returns a String representation of the currently deployed components .
6992	Check if LogRecord is logable
6993	Returns the logger for the specified record .
6994	Returns the set of components that refer to the specified Slee component .
6995	Get the set of SbbEntities from the node .
6996	Returns the permissions for the current policy .
6997	Returns the source code sources
6998	Determines if a profile with the given name exists in the table .
6999	remove the profile table
7000	Update configuration properties
7001	Activates and sets the resource adaptor context .
7002	Called when the RA is stopping
7003	Activate the entity adaptor
7004	Deactivates the entity
7005	Schedules end of all activities .
7006	remove this entity
7007	Returns the resource adaptor interface
7008	Called when a service is active
7009	Refer to an ActivityHandle .
7010	Called when an activity is ended .
7011	Update the RCConfiguration with the specified properties .
7012	merge configuration properties with new properties
7013	Notification that the object is stopping .
7014	Clears the resource adaptor object .
7015	Unconfigured resource .
7016	Sets the resource adaptor context .
7017	Declarative Services method for unsetting the faulttor context
7018	Builds the profile attribute map .
7019	Resume the event context .
7020	Gets the activity context handles .
7021	Removes this MBean
7022	Returns the usage MBean for the given parameter set name .
7023	Decorates the abstract class and returns true if the abstract class is not present .
7024	Fires an event on all registered listeners .
7025	Fire event .
7026	Invokes the getCMP method on the SbbEntity
7027	Gets the service usage parameter set .
7028	Get abstract methods from a class .
7029	Returns all abstract methods from an interface .
7030	Creates the object pool for the specified profile table .
7031	Remove the object pool from the table
7032	Returns true if the given notification source is the owner of the given notification source .
7033	Calls alarm .
7034	Returns the usage parameter set .
7035	Gets the specs descriptor .
7036	Determine whether the deployment should accept the given deployment
7037	Initialize the deployment
7038	Start a new deployment
7039	Stop the deployment
7040	Show the status of this deployment
7041	Executes after commit actions .
7042	Executes after commit priority actions .
7043	Call after rollback actions .
7044	Execute before commit actions .
7045	Execute before commit priority actions .
7046	Returns all defined tracer names .
7047	Creates a Tracer with the given name if it does not already exist .
7048	Remove replicated data .
7049	Register editors .
7050	Process the given SleeComponent with the usage parameter set .
7051	Returns the object pool for the given service ID .
7052	Create the object pool for the given service ID .
7053	Executes the given activity .
7054	start an activity
7055	End the activity
7056	Checks the validity of the fire event .
7057	Fire an event .
7058	Generates the concrete class for the SbbLocalObject interface .
7059	Make the getter method .
7060	Convert a string to a value
7061	Sets the profile ID .
7062	Extracts the message from the result .
7063	Check if the given object contains the given object .
7064	Returns true if the collection contains all of the given collection .
7065	Removes all elements from this collection
7066	Returns true if this level is higher than the given level .
7067	Resolve the internal state .
7068	Remove classes from the class pool .
7069	Add a call object to the profile object .
7070	Return a profile object from the transaction table
7071	Helper method to pass a profile object to the transaction manager .
7072	Sets the component ID value .
7073	Generate the concrete class for the activity context .
7074	Generate concrete method body .
7075	Set the value of a cmp attribute .
7076	Add a name binding to the cache .
7077	remove naming bindings
7078	Remove a name binding .
7079	Attach timer to cache
7080	Removes all timers from the cache .
7081	Attach the given SbbEntityID to the activity cache .
7082	Detach s sb entity from cache .
7083	Gets a sorted set of SbbAttachmentIDs for the given set of attachments .
7084	Called when an activity is ended .
7085	Adds a component to the deployment .
7086	Returns a collection of all external dependencies contained in this UUID .
7087	Check if all the dependencies have been satisfied .
7088	Returns true if the unit has already been deployed false otherwise .
7089	Gets the management actions .
7090	Gets the management actions .
7091	Checks to see if there is a referringDUuid .
7092	Close the specified profile
7093	Create the object name for the profile table
7094	Change the state of the profile .
7095	Before setField is called before profile is reset .
7096	Invoked after the setCmpField has been set .
7097	Before getCmpField is called before the profile is set .
7098	Invoked after a field has been set .
7099	Binding before the management method is invoked .
7100	Invoked after management method invocation .
7101	Recursively deletes a directory .
7102	Create a default Constructor
7103	Create the default usage parameter setter .
7104	Create the SbbEntity and setter method .
7105	Create the fire event methods .
7106	Creates the get method to get the service context .
7107	Adds the given query expression to the list of expressions .
7108	Associates the specified target object with the specified key .
7109	Binding the specified name to the target object .
7110	Registers an abstract Sbb class .
7111	Invoke a method on the given proxy .
7112	Returns the real field name for the given field name .
7113	Sets the value of the specified field .
7114	Returns the value of the specified field .
7115	Sets the profile context .
7116	Initialize the profile object .
7117	Unset the profile context
7118	Returns profile local object
7119	Fires the added or updated event if necessary
7120	Returns the profileCmpSleeWrapper for the profileClee10 .
7121	Creates a new class with the specified name and interfaces .
7122	Create inheritance link .
7123	Adds an annotation .
7124	Adds the values of the member values to the annotation .
7125	Returns the ActivityContextInterface for the given activity .
7126	get the class pool
7127	Sets the deployment unit .
7128	Clears the class loader .
7129	Executes the SARL activity .
7130	Checks if a class or interface with a specific interface is found .
7131	returns all abstract methods of an interface
7132	Resolve entity by public id .
7133	Checks if the tracer name is valid for the given TracerName
7134	Finds all profiles matching the query name and arguments
7135	Checks the dependencies of a SleeComponent .
7136	This method will create the temporary directory for the deployment
7137	Returns EntityManager
7138	Returns a new state change .
7139	Switch a ClassLoader to a ClassLoader
7140	Make a proxy call .
7141	Checks the transaction .
7142	Convert last access time to TTL string .
7143	Is the profile class visible?
7144	Get profile object from current transaction
7145	Returns the list of logger names that match the given regular expression .
7146	Reset the logger level
7147	Clear the loggers for the specified name .
7148	Add a Logger .
7149	Add socket handler .
7150	Remove a handler .
7151	Convert tracer name to log4j logger name
7152	Sets the level of the log4j level to the specified log4j level .
7153	Assigns to the log4j level .
7154	Reset cache flags .
7155	Send a trace notification for a trace level .
7156	Checks if the tracer name is valid .
7157	Writes a vendor data to the output stream .
7158	Reads an object from the stream .
7159	Adds a direct dependency to the URLClassLoaderImpl object
7160	returns a list of all the URLClassLoaderDomainImpl
7161	Finds a class by name .
7162	Look for a resource in the URL .
7163	Look for resources in the named resources .
7164	Creates and registers the MBean for the profileTable
7165	Resume a transaction .
7166	Builds a set of SbbIDs from the ComponentRepository .
7167	Gets all the resource adaptor entity links .
7168	initialize the slee
7169	Shutdown the Slee .
7170	validate state transition .
7171	Generate named usage parameter setter .
7172	Update the field with the given value .
7173	Creates a new PolyJDBC instance .
7174	Add value to the insert query .
7175	Runs the given transaction .
7176	Creates a new RegionRequest object from its string representation .
7177	Get the region that this box is relative to .
7178	Resolve image dimensions .
7179	Determine the type of the annotation .
7180	Sets the viewing hints for this resource .
7181	Adds views to the resource .
7182	Sets the renderings
7183	Adds the rendering to the resource .
7184	Merge an image api profile into a single profile .
7185	Merges the specified ImageApiProfile into this one .
7186	Creates an instance of RotationRequest from a string representation .
7187	Creates a size request from a string .
7188	Initializes the AndroidDebugBridge instance .
7189	Pull the dump from the disk
7190	Method to push PopBox
7191	push a new handle to the device
7192	Cleans up temp file .
7193	Pull out the dump file from the device
7194	Retrieves the crash log .
7195	Remove tabs from text editor .
7196	Prints the specified number of spaces .
7197	Tokenize HTML tokens .
7198	Generates the Markdown text from the given text .
7199	Escape special chars inside a tag .
7200	Adds an exception to the database .
7201	Close all statements .
7202	Find the fully qualified class name of a type .
7203	write to file
7204	Writes a bit vector to the output stream
7205	Appends a bit string to a bit vector .
7206	Custom deserialization method .
7207	Gets the json object .
7208	Gets a list using the given key and the expected class
7209	sets kov report object
7210	Add screen capture from image path .
7211	Set system info .
7212	Selects a property .
7213	Selector that selects a property by name
7214	Extract validation annotations .
7215	Returns an array of AnnotationAnnotations for the given property on the given class .
7216	Recursively find the annotations on the given property on the given object .
7217	Recursive method to get the property descriptor .
7218	Look up an object expression in a JSON string .
7219	Creates an object from a map .
7220	Creates an object from a map of properties
7221	Creates an object from a value map .
7222	Converts an object into a map
7223	Convert an object to a map
7224	Returns the values of the annotation .
7225	Creates a new composite validator .
7226	Lookup the list of validators from the validation meta data .
7227	Look up a Validator in the registry .
7228	Apply meta data properties to a validator meta data .
7229	If the property is null remove it from the properties map
7230	Sets the time in milliseconds .
7231	Returns the number of entries in the cache .
7232	Calculate a hash of the given object .
7233	Creates default options .
7234	Opens the database .
7235	Writes all of the given values to the database .
7236	Removes all keys from the database .
7237	Returns a key - value iterable over the specified key .
7238	Load all DBI databases .
7239	Closes the database .
7240	Performs reduce by object .
7241	Performs reduce by long .
7242	Computes the variance of an array of doubles .
7243	Returns the mean of the values in the array .
7244	Invoke a method from a object argument .
7245	Reduces the values by a given reduceBy .
7246	Returns the Gregorian UTC date string
7247	Return true if the object matches the criteria
7248	Creates a criterion that is not in the given list of values .
7249	Creates a criteria from a List
7250	Creates a new criteria object from a JSON string .
7251	Adds an integer array to the end of the list .
7252	Returns the maximum value of the given array .
7253	Returns the first of the list of elements in the specified list
7254	Returns the last element of a list
7255	Returns the last of the list after the given sort
7256	Returns the least of the given list
7257	Returns the minimum element of a list
7258	Returns the minimum element of an array
7259	Process array of maps .
7260	Handles collection of maps .
7261	Creates an object from a map .
7262	Returns the value for the given key .
7263	Creates a toolTip with the given name and field name .
7264	Generates the label value .
7265	Adds a hex encoded string to the buffer .
7266	Process read queue .
7267	Process write operations from the output queue .
7268	Start the data store .
7269	Replies the character at the specified index .
7270	Split a string at a given index
7271	Returns true if the specified string is in the specified chars .
7272	Add a character to the string
7273	Add objects to string .
7274	Compacts a string .
7275	Split a string into an array of strings .
7276	Split a string by space .
7277	Split string by pipe .
7278	Convert char array to string array
7279	Convert string to camel case
7280	Returns true if the specified string is inside the specified string
7281	Parses the under bar case .
7282	Converts a number into a string .
7283	Returns the main sort for the given sorts .
7284	Sort the list by fields
7285	Return the comparator for this field .
7286	Creates a list of comparators for the given fields .
7287	Determines whether the specified value is in the specified map .
7288	Compare two int values
7289	Compare two int values
7290	Returns the sum of the values in the specified range
7291	Rounds the given number up to the nearest power of 2 .
7292	Sort the list by field
7293	Sort the given list using the specified sort string .
7294	Sets the field value from a map .
7295	To list .
7296	Creates the SQL for loading all versions of the table .
7297	Returns a deep copy of the given list .
7298	Returns true if object has a field with the specified name .
7299	Checks if class has a field with given name .
7300	Checks if class has field with given name .
7301	Gets the first primitive or primitive .
7302	Returns the sortable field name based on the value .
7303	Compares this cache entry to another .
7304	Compares the time stamp with the given time stamp .
7305	Sort the list according to the specified sorts .
7306	Sorts the given list using the given sortBy .
7307	Sort the entries in the specified map .
7308	Sort the values of a map .
7309	Sort keys by component .
7310	Sorts the given array using the given sortBy method .
7311	Returns a comparator for the given field access .
7312	Returns a comparator that returns a comparator that uses nulls .
7313	Returns the cached value for the given key .
7314	Returns the value for the given key in the cache .
7315	Increment order .
7316	Evict the list if necessary .
7317	Initialize the value if necessary .
7318	Allocate a buffer with the given size .
7319	Determines if the processing loop should exit .
7320	Tries to consume the input channel from the input channel .
7321	Checks if there is a flush to disk
7322	Start the monitor .
7323	Start the monitor .
7324	Returns the object with the given key .
7325	Creates a SQL query plan .
7326	Handles the grouping .
7327	Update file time .
7328	Sync the output stream to disk
7329	Closes the output stream .
7330	Writes to the output stream .
7331	Writes the given buffer to the disk .
7332	Initialize the output stream
7333	Puts all the given values into the given map .
7334	Converts key to byte array .
7335	Reads the validation meta data for the specified property .
7336	Extract validator meta data from string .
7337	Reads the validator meta data for the specified class and property name .
7338	Extracts the validator meta data .
7339	Extract validator meta data from annotations
7340	Convert annotation data to validator meta data .
7341	Split the string with the specified limit .
7342	Split a string by whitespace .
7343	Split string by delimiters .
7344	Removes characters from string .
7345	Split a string into an array of strings ignoring the separators .
7346	Parse a double from a string .
7347	Parse an int from a string .
7348	Parse a long from a string .
7349	Search prop by path .
7350	Gets fields from an object .
7351	Returns the type of the property for the given object .
7352	Inject a property value into the specified object .
7353	sets an idx value of a property
7354	Gets the value of a collection property .
7355	Returns the property value of the specified object .
7356	Gets integer .
7357	Initialize this message .
7358	Creates a message for the specified key and arguments .
7359	Create message .
7360	Converts a list of keys to an array of values .
7361	Returns the subject of the validation context .
7362	Parses the given text into an object .
7363	Send a request to the HttpClient .
7364	Deletes a database .
7365	Creates a new database .
7366	Returns the number of UUIDs .
7367	Lists resources in the classpath .
7368	Triggers a replication .
7369	Queries a single value .
7370	Sets the view to descending .
7371	Synchronize all design documents with the database .
7372	Gets a design document from the database .
7373	Retrieves all design documents from the desk .
7374	Gets a design document from its id .
7375	Saves replicator .
7376	Find replicator document .
7377	Find all replicator documents .
7378	Remove replicator .
7379	Find an object by id .
7380	Finds documents for a given type .
7381	Check if the document contains the given id .
7382	Bulk insert .
7383	Sends a PUT request to the given URI .
7384	Performs a PUT request .
7385	Perform post .
7386	Execute a DELETE request .
7387	Validates the given HTTP response .
7388	Sets the string to the http request
7389	Adds an attachment .
7390	Returns all changes from the feed .
7391	Reads next row
7392	Convert a double to the format
7393	Shuts down the lock executor .
7394	Writes the contents of the given byte array to the given output stream .
7395	Adds tags to the specified metric .
7396	Verify the current table and create temporary tables .
7397	Returns the identifier of the given namespace .
7398	Checks if the request is a query
7399	Sends authentication request .
7400	Returns the verb for the given exchange method .
7401	Generate subject access check .
7402	Called when the exchange is allowed .
7403	Handles a request failure .
7404	Initialize the system config .
7405	Find all scheduled jobs
7406	Returns a list of bucket points from the given buckets .
7407	End the exchange .
7408	Find all data from the bucket that matches the given timestamp .
7409	Returns a new buckets based on the given step range .
7410	send msg to producer
7411	send one - way message to producer
7412	send message to producer
7413	Perform the actual scan .
7414	Set the value for a property .
7415	Adds a file to the zip archive .
7416	Replaces the text with the given text .
7417	Builds the zip file .
7418	Generate metrics for a specific component
7419	Fetches content from cache .
7420	Fetches content of order item .
7421	Uploads the export transformation to the given ZIP file .
7422	Generates the files from the given iterator .
7423	Creates a new File in the given parent directory .
7424	End the object .
7425	Register a adaptor for a group .
7426	Register a renderer for a group .
7427	Prepare the template for the given domain object .
7428	Add a domain object to the pipeline
7429	Sets a property .
7430	Adds a child object to the collection .
7431	Creates a supplier that reads a file from a directory .
7432	Copies the input stream to the output stream using the given hashAssembler .
7433	Parses the given file .
7434	Parses the given reader into a DOM tree .
7435	Returns all nodes within the given parent element .
7436	Returns stream of child nodes from parent element .
7437	Returns the first child element in the given parent element .
7438	Return stream of named elements in the given parent element .
7439	Validate XML .
7440	Entry point for the build .
7441	Builds builder from input stream
7442	Load builder from resource .
7443	Process the entry and process the entry .
7444	URL - encode the specified string .
7445	Set request signature .
7446	Removes all whitespace from the input string .
7447	Sign the request .
7448	Sets the data for the specified object key .
7449	Completes the multipart upload .
7450	Invoked when the target notification is updated .
7451	Add the given entry to the notification state .
7452	Checks if the cache has expired .
7453	Get notification by id .
7454	Returns all addressees for a notification
7455	Returns addressee DTO .
7456	Gets events by notification id .
7457	Returns the event with the given id .
7458	Returns the URL for a single notification .
7459	Returns the JpaEntry with the given entryId .
7460	Gets an SSP token .
7461	Returns the number of entries in the notification categories .
7462	Adds new categories to the list of notifications .
7463	Returns the notification page for the SSP .
7464	Creates a notification response object .
7465	map to notification response
7466	Map a NotificationEntry to a NotificationEntry
7467	Attaches the list of actions to a notification .
7468	Normalizes the given link .
7469	Creates a notification category .
7470	Returns the notification source for the notification .
7471	Handles read notifications .
7472	Read the notification response from the file .
7473	Returns the task id from the request .
7474	Extract a single user ID from the response .
7475	Hide the notification .
7476	Get attributes map .
7477	Normalizes the coordinates of the point .
7478	Returns true if box A is contained inside the box B
7479	Finds the closest point in the P
7480	Calculate the sign of two points .
7481	Set the values from a Se3 image .
7482	Sets the euler s euler rotation
7483	Converts a polygon into the output rectangle .
7484	Converts a 4 - bit polygon into four points
7485	Calculate the bounding rectangle of a quadrilateral
7486	Assigns the specified polygon to the specified rectangle .
7487	Get the center of the center of the quadrilateral
7488	Computes the average vertexes for a polygon
7489	Computes the convex hull for a list of points .
7490	Removes almost parallel polygons from the polygon
7491	Calculates the average distance of each point in the polygon
7492	Computes the area between two polygons
7493	Returns true if the quadrilateral contains a point .
7494	Returns true if the point contains a triangle .
7495	Calculate the intersection of two line parameters
7496	Calculate the intersection of two lines .
7497	Calculate the intersection of two lines
7498	Calculate the intersection of two line segments .
7499	Calculate the intersection of two polygons .
7500	Returns true if the given ellipse contains the given ellipse .
7501	Calculates the intersection of two rectangles .
7502	Returns the value of the matrix at the given index .
7503	Convert a matrix to a quaternion .
7504	Creates and rotates a rotation matrix .
7505	Sets the rotation vector for the rotation matrix .
7506	Computes the rotation of a matrix .
7507	Calculates the rotation matrix for a matrix .
7508	Sets the rotation of the radians .
7509	Convert an Euler to a matrix .
7510	Convert an axis into a rotation matrix .
7511	Set the angle in degrees .
7512	Performs a rotation
7513	Sets the transform s transformations .
7514	Performs the translation .
7515	Solve a point in the output center
7516	Solve a point on a plane .
7517	Returns the length of the side in the line .
7518	Returns true if this polygon is inside the specified point .
7519	Converts a ConicGeneral image into the input image .
7520	Converts the input into a Conicatrix .
7521	Converts a ConcolaGeneralGeneralGeneralFeature to a ConcimalFeature .
7522	Convert a ConicGeneralGeneralFeature to another .
7523	Divide the points in a pixel by v
7524	Convert a GeoTuple into a matrix .
7525	Convert from a GeoTupleMatrix to a GeoTuple3D
7526	Set the vector rotation .
7527	Returns distance between two angles
7528	Returns true if the line intersects the line .
7529	Returns true if the plane contains a plane
7530	Calculate the intersection of a line .
7531	Performs interpolation between two vectors .
7532	Extracts the quaternion from the quaternion
7533	Computes the hull of a polygon
7534	Sets to no motion
7535	Converts a Segment into a homogeneous matrix .
7536	Creates a homogeneous matrix from the given Segment .
7537	Converts an axis s axis into a rotation matrix .
7538	Checks to see if two Se3s are identical
7539	Convert a latitude and longitude to a unit vector .
7540	Returns true if circle touches a line .
7541	Calculates the squared radius of a line
7542	Calculates the closest point to the line which is closer to the given line .
7543	Returns the closest point in a line .
7544	Returns the closest point origin from the plane .
7545	Returns the closest point in a line .
7546	Finds the closest point in the vertexB and returns the closest pointB .
7547	Computes the transformation from the origin and result .
7548	Transform points in a sequence of points .
7549	Returns true if this Quadrilateral is equal to the given tolerance .
7550	Computes the acute angle between two lines .
7551	Convert a line parameter to a line parameter .
7552	Convert a line product into a line .
7553	Convert a line segment to the image .
7554	Convert a line general import into a format .
7555	Convert a line and b .
7556	Convert a line parameter from two points .
7557	Convert a linestring into a line .
7558	Convert a line general import into an image .
7559	Convert a line parameter to a line parameter .
7560	Converts a PlaneGeneralOperation into a PlaneGeneral .
7561	Converts the plane normal to the plane normal .
7562	Converts a plane normal to a plane normal .
7563	Convert a point in origin to a 3D coordinate
7564	Converts a plane into a 2D plane .
7565	Returns true if the given T is identical to the given tolerance .
7566	Creates a copy of this matrix .
7567	Returns the squared norm of the vector .
7568	Computes the t - value for a line .
7569	Returns true if there are any uncountable elements .
7570	Returns true if the parabola is equivalent to the given parabola .
7571	Calculates the center of a point
7572	Calculates the acute angle between two lines .
7573	Returns true if p is infinity .
7574	Generate random n points with respect to the specified center .
7575	Converts a H2 point into an epsilon point .
7576	Subtracts two points
7577	Returns true if xa is identical to x .
7578	Sets the width and height of this rectangle .
7579	Converts an ellipse .
7580	Computes the location of a point in the ellipse
7581	Computes the angle of a point in ellipse
7582	Computes the tangent for the specified ellipse .
7583	Computes the tangent between two lines
7584	Returns the corner at the specified index .
7585	Computes the distance between two line parameters
7586	Calculates the Euclidean distance between a line and p .
7587	Calculates the distance between two line segments .
7588	Computes the distance between a point and a plane .
7589	Calculates the distance between a line and a point .
7590	Computes the Euclidean distance between two lines .
7591	Computes the squared Euclidean distance between two lines
7592	Computes the Euclidean distance between the quadrilateral and p .
7593	Calculates the squared Euclidean distance between a line segment and a quad segment .
7594	Returns the Euclidean distance between the polygon and p .
7595	Computes the Euclidean distance between a polygon and a point .
7596	Calculates the distance from line to origin .
7597	Computes the Euclidean distance between the ellipse and p .
7598	Calculates the distance from a point to the ellipse
7599	Adds a new node to the path .
7600	Searches for a point in the line .
7601	Returns the closest point in the ellipse
7602	Computes the polynomial coefficients .
7603	Creates a vector with random values
7604	Convert a vector to a vector of vectors .
7605	Checks to see if two vectors are identical within tolerance .
7606	Normalizes the vector .
7607	Converts a matrix to a matrix .
7608	Convert a matrix to a 3D vector .
7609	Calculates the Euclidean distance between the specified point and y coordinates .
7610	Set the ellipse
7611	Normalizes the rotation .
7612	Calculates the triangle between two points .
7613	Returns the quadrilateral of the quadrilateral
7614	Calculates the square of a polygon
7615	Computes the mean of a point in a list of points
7616	Calculates the order of points in a list of points .
7617	Computes the normal for a set of points
7618	Checks if polygon is convex .
7619	Multiply a scalar value .
7620	Returns the maximum value in radians .
7621	Computes the distance between two points .
7622	Returns the Euclidean distance between two points .
7623	Randomly selects a point from a plane .
7624	Randomly selects points from the mean and z values .
7625	Generates a list of points with the specified mean and standard deviation
7626	Computes the mean of points in a list of points .
7627	Returns the mean of points in a list of points .
7628	Invalidates all credentials from the cache .
7629	Discards any cached cache .
7630	Combine collection of collections to a set of strings .
7631	Retrieves the server - specific features from the server . xml file .
7632	Utility method to get the configids from the serverDirectory
7633	Gets the server - specific features from the parsed XML file .
7634	Parse the include node from the server file .
7635	Parse the feature manager nodes .
7636	Downloads and returns the Json files
7637	Returns a set of Liberty features from the given set of files .
7638	Utility method to check if all the features in the list are open
7639	Returns true if the given collection contains only the target string .
7640	Returns the next product version .
7641	Extracts the symbolic name from the given jar file .
7642	Recursively find the installation jar based on the installation map .
7643	Returns true if the file1 is a replacement jar file .
7644	Extracts the version from the file name .
7645	Compare two version strings
7646	Returns the product info .
7647	Determine whether the given artifact is a Spring boot - boot - boot - upgrade jar .
7648	Gets the property for the given key .
7649	Check if the file is working in the current environment
7650	Move the back to the center .
7651	Checks if two objects are equal .
7652	Load string value from string .
7653	Helper method to throw exceptions .
7654	Verify the TURT
7655	Swaps a new puzzle with a given target
7656	Get the distance to the target cells
7657	Printf formatted string .
7658	Printf formatted string .
7659	Hook to show a fancy decision
7660	Write a variable .
7661	Returns a new integer with the specified value
7662	Multiply two values
7663	Calculates the number of poisson parameters for a given value
7664	Computes the number of discrete values in the given array .
7665	This is the main method for testing .
7666	Capitalizes the first character of a word .
7667	UCapitalize the first character of a word .
7668	Fix path .
7669	Convert a CriteriaJoin to a String
7670	Gets the token string .
7671	Handle authout .
7672	Extracts the auth token from cookieList
7673	Registers all Guice bindings in the given injector to the environment .
7674	Gets all role permissions for a given parent .
7675	Adds a projection
7676	Convert a JobInfo object to a JobDetail
7677	Convert a trigger to a trigger .
7678	Sets the repeat interval values .
7679	Sets start end time .
7680	Send an item to the queue .
7681	Writes the buffer to the output stream .
7682	Initialize Stduler
7683	Returns a collection of all the fields of the given class .
7684	Gets the field map .
7685	Create a response for the given exception
7686	Configures the encryptor with the given configuration .
7687	Generates the attributes hash from the request .
7688	Generate a new token string .
7689	Sends a message .
7690	Generate strong password .
7691	Changes the password of a user .
7692	Returns user by name .
7693	Hashes a password .
7694	Verify that the given account name is valid .
7695	Validates a password .
7696	Provide a search model .
7697	Attempts to commit the transaction .
7698	Error the transaction .
7699	Start transaction .
7700	Configure field by name .
7701	Determines whether the service is authorized to the given list of templates .
7702	Parses the given field as a Date object
7703	Returns the response object .
7704	Creates a equals expression
7705	Creates a Restriction expression
7706	Creates a less than expression
7707	Creates a less than or equal to the given value
7708	Creates a Restriction expression
7709	Creates a Restriction expression
7710	Creates an ILike restriction .
7711	Creates a IN expression
7712	Creates a new namespace .
7713	Returns a new resource representation with the given content .
7714	Adds a new resource representation .
7715	Returns a new resource representation with the given value .
7716	Returns a new resource representation with the given namespace and href .
7717	Determines if a byte array can be decoded .
7718	Encodes a string .
7719	Returns true if the two specified readers are equal .
7720	Move src file to dst .
7721	Utility method to create new files .
7722	Return the base name of a file .
7723	Adds the padding to the buffer .
7724	Gets the short name of a class .
7725	Gets all super types of a class .
7726	Verifies a password .
7727	Reads a String from System . in
7728	Appends a byte to the buffer .
7729	Appends a portion of a byte array to this buffer .
7730	Creates a copy of the given array .
7731	Returns a new fraction plus the given fraction .
7732	Subtract a fraction from this fraction .
7733	Returns a new fraction multiplied by this fraction .
7734	Returns a new fraction divided by this fraction .
7735	Returns the maximum of the specified values .
7736	Find the minimum value in a long array
7737	Throws IllegalArgumentException if the condition is true .
7738	Fetches metadata information from a given location and altitude .
7739	Fetches metadata from the given latitude and longitude values .
7740	Fetches metadata from a given latitude and longitude values .
7741	Retrieves a list of hourly data forecast for a given hours .
7742	Finds the nearest forecast for the given date .
7743	Fetches the content of a forecast query .
7744	Creates a simple long term forecast
7745	Creates a long term forecast .
7746	Parses a string into a Location object .
7747	Fetches metadata content from Meteo .
7748	Create the wind symbol name for a point .
7749	Find the Beaufort level .
7750	Creates a URI from a string .
7751	Checks if current date is sun .
7752	Returns the point forecast for a given date time .
7753	Returns the best fit forecast for the specified date range .
7754	Fetches the content of a text location .
7755	Fetches the content of a given latitude and language .
7756	Updates the database .
7757	Invoke a string method .
7758	Acquires object from data source .
7759	Gets the referenced object .
7760	Gets wrapped object .
7761	Get configuration object from service path .
7762	Returns whether the Substitutor is enabled or not .
7763	Creates an iterator that iterates over the classes in the specified service .
7764	Returns the decoder to use for the given bootstrap configuration .
7765	Loads the services for the given interface .
7766	Returns the module object that implements the given interface .
7767	Acquires an InputStream from the given DataSource .
7768	Returns the size of this data source .
7769	Gets wrapped data .
7770	Returns the component at the given index .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute the hsre regex pattern .
7774	Calls loop until we find a loop .
7775	Subtract subset of the given subexpression
7776	Recursive decomposition .
7777	dissect the given subexpression
7778	Clones the outs from a state to a new state
7779	Recursive recursive traversal .
7780	Marks the subtree of a subre .
7781	Call ffa from refa .
7782	Parses a subre .
7783	Perform a deltraverse traversal .
7784	Called when a non - word is found
7785	Clone word out .
7786	Scans up to a literal number .
7787	Parse a bracket .
7788	scan plain text
7789	Add a new lacon into the array .
7790	Process one character .
7791	Perform the actual translation .
7792	Gets the color for a given codepoint .
7793	Get a pseudo color descriptor .
7794	Process a range of colors .
7795	Updates the color chain with the given color chains .
7796	Set a color chain for a given arc .
7797	Uncompute the colorchain of an arcchain
7798	Dump color information .
7799	Marks the start of the lexer .
7800	apply prefixes
7801	Called when a new token is encountered .
7802	Gets color for given codepoint .
7803	Initialize state set .
7804	Gets the last cold state set .
7805	Returns the set of Unicode characters for the given character
7806	Returns the UnicodeSet for the given character name .
7807	Sorts two arcs based on first and last indices
7808	Debugging method for debugging .
7809	Add a new state
7810	Copies out outs from old state to new state
7811	Copies the ins from old to new state .
7812	Copies ins from old state to new state
7813	Copies out outs from old state to new state
7814	drop a state from a state
7815	Releases a state .
7816	Copies a new arc to another .
7817	Duplicate a state .
7818	set special colors
7819	Dumps the contents of the stream to disk .
7820	Dumps the state of a state .
7821	Dumps the arcs of a state .
7822	Dumps an arc to a string buffer .
7823	Dumps an arc to a string buffer .
7824	Perform the optimization .
7825	Returns the flags for all the arcs in the input .
7826	Combine the arc with a new arc .
7827	Cleans up all unreachable states .
7828	Marks a state reachable as unreachable .
7829	Checks to see if an instruction can reach a given state .
7830	Iterate through all the states and eliminate empty states .
7831	Removes from an arc to unempty state
7832	Returns the rule parameters .
7833	Gets the ruleInterpreter plugins .
7834	Returns a map of report plugins .
7835	Returns the selection for the given rule set .
7836	Runs the command line .
7837	Gets the error message .
7838	Generate standard options .
7839	Gathers task options from the task factory .
7840	Gather the task names from the given factory .
7841	Interprets a command line .
7842	Gets the command line .
7843	Execute a task .
7844	Read properties .
7845	Prints usage information to the console .
7846	Gets the home directory .
7847	Creates a class loader .
7848	Return set of ids that contain the ids of each cell .
7849	Get all ids that intersect the given range .
7850	Returns the uri for the given target method and parameters .
7851	Add a path pattern to the routing table
7852	Returns the number of routes .
7853	Add route at first .
7854	Add route to target
7855	Add route to route
7856	Returns true if any of the specified request path tokens matches the first request path .
7857	returns a Criterion that is equal to the given property value
7858	Returns the name of the file that should be written to .
7859	Compare two folders .
7860	Compares two entries .
7861	Compares two Bookmarks
7862	Set the servlet class last modified time .
7863	Returns the dependencies for this JSP source .
7864	Finds a class by name .
7865	Parse the Authorization header .
7866	Get a ProtectedFunctionMapper .
7867	Map a function name to a function mapping
7868	Get a map from a function name and arguments .
7869	Resolve a function .
7870	Set the values .
7871	Resolve a variable .
7872	Parses the given file into nodes .
7873	Parses the given JAR file into nodes .
7874	Parse the contents of a tag file .
7875	Do the actual parsing .
7876	Create a Compiler
7877	Get resource as stream .
7878	Calculates the last modification time of the channel .
7879	Recursive findClass loaders .
7880	Checks if the given classloader is the parent of this class loader .
7881	Start loading of classes
7882	Read stream header .
7883	Creates a page with the specified start page size and page size .
7884	Creates a MetaKey object from a string .
7885	Fills the requirements .
7886	Get a tag file by short name .
7887	Parses the implicit tLD .
7888	Returns the checksum for the specified file name .
7889	Returns the size of the given file .
7890	Validates the channel name .
7891	Seek to the given block .
7892	Locates the block at the given position .
7893	Retrieves the Maven artifacts from the given channel supplier .
7894	Updates the state of the opts .
7895	Calculates the 1 - byte price for 1 byte .
7896	Calculates the available long representations for a list of long rates .
7897	Calculates the optimal match price for a match .
7898	Throw an expected byte .
7899	Throws an invalid byte .
7900	Scan all the TLDs in the system .
7901	Scans the TLD file for the specified resource path descriptor .
7902	Add a JSP ServletWrapper .
7903	Returns the parent class loader .
7904	Set a new bytecode .
7905	Returns the bytecode birth time for the named bytecode .
7906	Save the bytecode to a file .
7907	Check that the file has been compiled .
7908	Initializes the classpath .
7909	Starts a new thread .
7910	Stops the thread .
7911	Runs the compiler .
7912	Find channel instance by name .
7913	Find channel instance .
7914	Update the map of deploy keys for the channel service .
7915	Retrieve the list of Deploy groups for a given channel .
7916	Copy bytes from the input stream to the output stream .
7917	Parses the given JSP reader into nodes .
7918	Parses attributes from the reader .
7919	Parse quoted string
7920	Processes the include directives .
7921	Parse a JSP attribute and its body .
7922	Add an attribute .
7923	Add a child node to the list
7924	Find attributes .
7925	Returns an iterator over the children of this node .
7926	Find all children with the given name .
7927	Converts this object to base coordinates .
7928	Returns the alias for a given variable name
7929	Set the thread to use .
7930	Unset the thread s data .
7931	Resolves the wrapped stream .
7932	Writes an optional string to the writer .
7933	Writes the given field to the string writer .
7934	Adds an element to the parent element .
7935	Inserts the first element with the specified name in the parent element .
7936	Writes the text content to the specified Writer .
7937	Sets the writer .
7938	Allocates the buffer s length .
7939	Map the expressions in the page to a JavaScript function .
7940	Gets the same parent .
7941	Register a model provider .
7942	Stream stream to consumer .
7943	Monitor the status of a job .
7944	Checks if the channel is authenticated .
7945	Finish the stream .
7946	Make a new Gson representation .
7947	Encodes the LZMA2 encoding .
7948	Merge the provided meta data with the provided metadata .
7949	Returns the throwable attribute of the ServletRequest .
7950	Check if the coordinates is a checkum .
7951	Finishes writing to the output stream .
7952	If this request is an exception wrap it in a JspException .
7953	Evaluates an expression .
7954	Creates a prefix from OSGi configuration properties .
7955	Check if the path is XML .
7956	Parses the attributes of a tag file .
7957	Load the specified tag file into the cache .
7958	Remove protobuf type files from temp vector .
7959	Main method for testing .
7960	Set the uri root .
7961	Scans all files in the given base directory .
7962	Locates and locates the URI root .
7963	Initializes the system class loader
7964	Moves to the next position in the chain .
7965	Returns true if the string matches the given string .
7966	Return true if the specified string matches the specified string .
7967	Skips characters until the specified limit is reached .
7968	Skips until the next escape character is found .
7969	Skips until the end of the tag is found .
7970	Parse a token .
7971	Pop a new file from the current state .
7972	Returns a copy of this coordinates .
7973	Filters the given list of featInformations based on the given predicate .
7974	Returns the missing IDs for all the required attributes .
7975	Sets the schema resource prefix .
7976	Set DTD resource prefix .
7977	Encode prefix .
7978	Converts this node to a tree node .
7979	Merge errors from binding result .
7980	Initializes the binder .
7981	Scans the aspect information of the channel .
7982	Unqualify path .
7983	Invokes a tag plugin .
7984	Gets a byte array from the given size .
7985	Gets an array of ints from the given array of ints .
7986	Convert artifact results to AetherResult
7987	Gets the resource as stream .
7988	Validates the given PageData
7989	Pushes a stream to the include stack .
7990	Get encoding from jar file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Returns the real path of a file .
7994	Gets the URL for a resource .
7995	Returns the resource as stream .
7996	Returns the paths for the given path
7997	Log a message and exception
7998	Add a filter
7999	calculate buffer size
8000	Calculate the memory usage for a dictSize
8001	Sets the preset dictionary .
8002	Moves the window to the next record .
8003	Fills the dictionary with data from the input buffer .
8004	Process pending bytes .
8005	Returns the number of matches in the buffer .
8006	Return the number of matches in the buffer .
8007	Verify matches of matches
8008	Moves the current position to the next flush position .
8009	Recycle the stream .
8010	Flushes the buffer .
8011	Clears the output buffer .
8012	Flush the output stream .
8013	Closes the output stream .
8014	Writes a string to the output stream .
8015	Allocate char buffer .
8016	Throw a javac error .
8017	Returns a list of keys from the given meta data .
8018	Generate java classes .
8019	Compile the java files .
8020	Removes generated files .
8021	Initialize the java compiler for jsrK .
8022	Determines whether the system jar is in the system .
8023	Quote a character .
8024	Processes the template directives .
8025	Helper method to compile the tag handler pool .
8026	Generates an XML log .
8027	Generate the postamble .
8028	Method to generate postamble .
8029	Generate the compiler page handler .
8030	Generate the attributes of the tag handler .
8031	Reads properties from an input stream and stores them in a hash map .
8032	Exports a channel to an output stream .
8033	Validate the given PageData
8034	Returns a tag handler for the current thread .
8035	Parses a string into an NodesNode .
8036	Given two property groups return the next one .
8037	Determines whether the specified URI is a JSP page .
8038	Print a comment
8039	Prints a string .
8040	Prints a string .
8041	Print a string
8042	Gets the expression in XML .
8043	Checks the scope .
8044	Converts a string to an XML string .
8045	validate expression
8046	Returns the class name of the tag handler .
8047	Creates a Java package name from a path .
8048	Splits a string into an array of strings .
8049	Make a valid Java identifier .
8050	Convert a char to a string
8051	Test whether the given key is a Java key .
8052	Adds the given property to the given map .
8053	Convert a modifier to a string .
8054	Returns a sorted set of metadata .
8055	Executes the user write model .
8056	Extract basename from given name .
8057	Put value in cache .
8058	Loads the value from the database and returns the result .
8059	Build metrics collection .
8060	Resolve a number .
8061	Write object to output stream without tag .
8062	Returns the TTL for the given rollup type .
8063	Creates the prepared statements .
8064	Tracks delayed metrics .
8065	Tracks delayed metrics for the given tenant .
8066	getUnversionedDouble or long
8067	Put an unversioned double or long .
8068	Returns an unmodifiable map of properties
8069	Create a new container
8070	Schedules slots eligible for rolling - up .
8071	Clears the state for a given slot .
8072	Register a listener for events .
8073	Register a listener for events .
8074	Remove the given event .
8075	Emit a string event with parameters .
8076	Returns list of listeners for the given event .
8077	Gets the remote name .
8078	Appends the rollup event to the output stream .
8079	Extract timestamp from file name .
8080	Starts the server .
8081	Computes the rollup type for the given granularity type .
8082	Creates an IOContainer from the configuration .
8083	Puts the TTL for the given granularity configuration .
8084	Compute the maximum lengths of the output .
8085	Formats the headers .
8086	Formats output using given outputs .
8087	Register metrics .
8088	Sets the thread pool name .
8089	Add a metric to the index .
8090	Get the complete metric names from metric index
8091	Returns token list .
8092	Asynchronously executes a batch of statements
8093	Calculates a granularity from a list of intervals .
8094	Computes the granularity based on the requested duration .
8095	Set server time .
8096	Returns the set of unique hosts
8097	Get max connection per host .
8098	Get an Iterable for the metric column families .
8099	Insert metrics in the system .
8100	Insert metrics .
8101	returns a set of locator locators
8102	Fetches the list of metric names from the ES server .
8103	Returns the regex to match the given query string
8104	Start the storage manager .
8105	Stop the uploader .
8106	Check if locator is currently in batch layer .
8107	Returns true if locator is currently in discovery layer .
8108	Check if locator is currently in token discovery layer .
8109	Checks to see if the given locator is for a delayed locator for a given slot .
8110	Set the location for a delayed locator for a given slot .
8111	Map the specified range to the specified range .
8112	Returns an iterator that iterates over the specified granularity range .
8113	Inserts the given collection of metrics into the batch .
8114	Insert metrics .
8115	Check if the metric is delayed .
8116	If the given metric is delayed then return the bound statement otherwise return null .
8117	Returns the metadata values for the given locator .
8118	Get a serializer for the given type
8119	Check if the content - type is valid
8120	Returns true if the accept is valid .
8121	Perform a batch ingest .
8122	Verifies that all the aggregated metrics are present .
8123	Performs the actual processing of the download directory .
8124	Returns a new instance of Extractor
8125	Determines whether the OS name matches the operating system name .
8126	Starts the download process .
8127	Stops the RabbitMQ process .
8128	Creates a default instance of PnSignalingParameters .
8129	Adds a list of ICE servers to the peer .
8130	Adds ICE servers .
8131	Transmits a message to a user
8132	Transmits a message to all peers .
8133	Gets the value of the IitereeAd .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefine property .
8136	Sets the value of the apiSupplier property .
8137	Gets the value of the multimediaAnch property .
8138	Gets the status property .
8139	Gets the status of the JAXB .
8140	Gets the status of the JAXB .
8141	Gets the ImportModus property .
8142	Gets the value of the adressdicker property .
8143	Gets the value of the waehrung .
8144	Gets the bodenabel property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the description .
8149	Sets the value of the renting collection period property .
8150	Sets the value of the FurnishedAd .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contact name property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the EPart property .
8160	Sets the value of the javgar .
8161	Sets the GebaeudeRestart attribute .
8162	Sets the unit property .
8163	Check if a string is numeric
8164	Sets the value of the Gebiete property .
8165	Sets the gruppe .
8166	Sets the agent property .
8167	Gets the value of the property property .
8168	Sets the stand value .
8169	Gets the value of the userDefine property .
8170	Sets the zeiteinininheit value .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haaus property .
8173	Gets the value of the bueroParcen property .
8174	Gets the value of the forecasterBE property .
8175	Gets the value of the LandUndonent property .
8176	Gets the value of the sonstige property .
8177	Gets the value of the zinshaus .
8178	Gets the value of the terrainType property .
8179	Sets the uefang value .
8180	Sets the value of the whn setting .
8181	Returns the country name of a given country
8182	Returns the country 2 - 3 country code for the given iso3 code .
8183	Returns the country 3 - 3 country code of a given country .
8184	Returns the country 3 - 2 country code of the given iso2 string .
8185	Returns the country name for a given country
8186	Translates a country name .
8187	Gets the value of the Anbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the PDF property .
8190	Sets the value of the Akerion .
8191	Sets the realestate items .
8192	Sets the pacht .
8193	Downgrades the document to the previous version .
8194	Upgrade document to new document version
8195	Gets the value of the content property .
8196	Gets the field names .
8197	Sets the value of the Ausick property .
8198	Sets the pausmnte .
8199	Sets the monatsmiete value .
8200	Gets the value of the parkplacement property .
8201	Sets the value of the lastenauf entry .
8202	Sets the ZustandArt property .
8203	Gets the value of the feldings property .
8204	Handle validation event .
8205	Dumps the contents of this record to a writer .
8206	Returns the value at the given position .
8207	Prints the contents of this record .
8208	Set the value at the given position .
8209	Sets the ctype property .
8210	Sets the hatyp value .
8211	Gets the value of the breakerpass property .
8212	Sets the value of the keller property .
8213	Sets the value of the GrundType property .
8214	Sets the value of the GeschL attribute .
8215	Sets the value of the Hall .
8216	Gets the value of the wiedholerschedule property .
8217	Gets the value of the teilings property .
8218	Upgrade the document version
8219	Gets the value of the bevorzt .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the modus value .
8223	Gets the value of the emailSonst property .
8224	Gets the value of the telster property .
8225	Sets the value of the handel typed property .
8226	Downgrades document version to previous version .
8227	Sets the value of the api property .
8228	Sets the value of the api property .
8229	Sets the value of the apiFund3 property .
8230	Gets the value of the row property .
8231	Sets the DbanZ code .
8232	Gets the value of theAN property .
8233	Gets the object property .
8234	Gets the value of the objectekt .
8235	Gets the value of the haaus entry .
8236	Gets the Ausstattings property .
8237	Gets the value of the vermarktings property .
8238	Gets the value of the interessent property .
8239	Sets the wert .
8240	Sets the value of theckerland property .
8241	Sets the value of the bauerwart .
8242	Sets the value of the bootstaende .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the doppelhaus attribute .
8246	Sets the einfamilhaus attribute .
8247	Sets the einzel handle property .
8248	Sets the einzelel property .
8249	Sets the value of the garagen property .
8250	Sets the value of the geward property .
8251	Sets the value of the JAXB property .
8252	Sets the value of the gewerBE property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of the keineBiguation attribute .
8256	Sets the value of the kleingewer .
8257	Sets the value of the lager property .
8258	Sets the value of the MehrFamily property .
8259	Sets the value of the Obstflflater property .
8260	Sets the parkhaus property .
8261	Sets the value of the producible producible .
8262	Sets the reihen value .
8263	Sets the stllpla property .
8264	Sets the value of the vote property .
8265	Sets the value of theWald property .
8266	Sets the animer .
8267	Gets the value of the wohnings property .
8268	Gets the value of the grundstueck property .
8269	Gets the value of the einzel handel property .
8270	Gets the value of the HallLager property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitimmits property .
8273	Gets the value of the objektert .
8274	Gets the value of the stellattattart property .
8275	Sets the maximum Dauer value .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmer type .
8278	Upgrade the document version .
8279	Sets the value of the keineAngle attribute .
8280	Sets the value of the erawer property .
8281	Sets the value of the solarheiz expression .
8282	Sets the value of the pellestab .
8283	Sets the value of the gas property .
8284	Sets the oel property .
8285	Sets the value of the fernyme property .
8286	Sets the strom value .
8287	Sets the value of the kohle property .
8288	Returns a random string of the given length .
8289	Returns a random string of the given length
8290	Generates a random string of the given length .
8291	Gets the wennunging category .
8292	Sets the value of the BENUTzer .
8293	Sets the value of the object property .
8294	Gets the value of the feed property .
8295	Sets the mob value .
8296	Gets the value of the serviceleist list property .
8297	Sets the value of the sub - administrative area .
8298	Sets the value of the city property .
8299	Sets the locality property .
8300	Downgrade document to previous version
8301	Upgrade the document version .
8302	Sets the value of the LandTyp property .
8303	Gets the value of the field property .
8304	Upgrade the document version .
8305	Gets the value of the adType property .
8306	Sets the value of the gastgewTyp property .
8307	Sets the platart attribute .
8308	Gets the value of the datenVender .
8309	Gets the klimbage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energy rating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the property status .
8318	Sets the value of the pictures property .
8319	Sets the value of the Beaubar attribute .
8320	Upgrade the document version .
8321	Sets the parken typed property .
8322	Sets the alter attribute .
8323	Sets the FreizeitType property .
8324	Sets the telefonart attribute .
8325	Sets the emailart attribute .
8326	Sets the value of the OverseasSalesSalesSales .
8327	Sets the value of the shippingRentalRental property .
8328	Create a user defined simple field .
8329	Gets the value of the Fehler property .
8330	Sets the Erbptception value .
8331	Gets the value of the stp property .
8332	Gets the value of the valuelist property .
8333	Sets the minimumDauer value .
8334	Sets the zinsType value .
8335	Gets the value of the photo property .
8336	Sets the metadata for the feed .
8337	Sets the value of the projects property .
8338	Sets the properties for the feed .
8339	Downgrades to the previous version .
8340	Upgrade version from previous version .
8341	Gets the value of the immilie property .
8342	Gets the value of the object property .
8343	Gets the value of the FehlerList property .
8344	Gets the value of the status property .
8345	Sets the value of the Sonstige typed property .
8346	Sets the DistanzZ value .
8347	Gets the value of the danzen property .
8348	Gets the value of the DistanzenOpenCapture property .
8349	Check whether the given exception is compatible with the thrown exceptions .
8350	Set bindings .
8351	Bind a prefix to a namespace URI .
8352	Removes a binding .
8353	Returns true if the given content contains an opening tag
8354	Consumes a comment token .
8355	Consumes a line .
8356	Finds the index of a token .
8357	Initialize logging .
8358	Initializes the namespace mapping .
8359	Adds an iterator to the composite .
8360	Add an option
8361	Add string option .
8362	Add an integer option .
8363	Add a long - short option .
8364	Add double option .
8365	Add boolean option .
8366	Parse the arguments .
8367	Creates a new instance of the given class .
8368	Invoked after an access limit .
8369	Sets the target object .
8370	Prepare the target object .
8371	Finds the method that matches the target method .
8372	Convert an integer to an unsigned string .
8373	Serializes an object to a byte array .
8374	Deserializes an object from a byte array .
8375	Return the child element by tag name .
8376	Return the text value of the child element with the given tag name .
8377	Gets child elements .
8378	Returns true if the node name matches the desired name .
8379	Returns true if the node name matches the desired name
8380	Sets the size of a string .
8381	Monitor the given handle with the given handle .
8382	Add entry to tracked weak reference .
8383	Helper method to keep the monitoring thread alive .
8384	Calculates the phone number from the mobile phone number .
8385	Start a prefix mapping .
8386	This method is called when an end prefix is encountered .
8387	Adds a callback .
8388	Parses the jar .
8389	get text color of item
8390	Sets the values of the gauge
8391	helper method to calculate the color of the item
8392	Set text size .
8393	helper method to get the x value x value x
8394	Retrieves the intro from the remote library .
8395	Returns the names of all keyword names found in the test library
8396	get the command arguments for the given keyword
8397	Return the documentation for the given keyword
8398	Start the remote server .
8399	Stop remote server
8400	Starts the remote server .
8401	Convert properties file to JSON string .
8402	Convert properties file to JSON string .
8403	Converts the input stream to JSON string .
8404	Converts properties to JSON string .
8405	Converts the given properties to a JSON string .
8406	Convert values from values to JSON object .
8407	Converts a map of properties to a JSON object .
8408	Converts properties to JSON string .
8409	Determines the radius of a shadow based on a circle .
8410	Creates a new OCSPF request .
8411	Find the immediate intermediate certificate .
8412	Parses the MarkdownDetermines and executes the specified MarkdownDirection .
8413	Pre - processes the input directory .
8414	Substitute variables in a template string .
8415	Gets the title header from the list .
8416	Adds the title to the HTML file .
8417	Substitute the variables in the given string .
8418	Updates the relative paths in the HTML .
8419	Copies files from a directory to another .
8420	Check the path portion of the host .
8421	Wrap a child view
8422	Start animating view with given duration
8423	Fade the view down .
8424	Calculates the percentage of the view to crossfaded .
8425	updates the view with the specified width
8426	Creates an intent to launch a new Intent
8427	Launch an activity .
8428	Get TODos list
8429	Get Fact sheets list .
8430	Download file from response .
8431	Build HTTP client .
8432	Create an AccessControlEntityResponse
8433	Update data model
8434	Create a full export request
8435	Get export records
8436	Sets the token provider host .
8437	Sets the client credentials .
8438	Process a GraphQL multipart request
8439	Get bookmark list
8440	Adds the given permissions to the graph .
8441	Writes the given graph permissions to the node .
8442	Sets the rulesets .
8443	Close the connection
8444	Execute a SELECT SELECT statement
8445	Creates a DatasetGraph .
8446	Limit the number of threads to process .
8447	Resize the geometry .
8448	Rotate the job with the specified degrees .
8449	Apply gravity value .
8450	Strips profiles from the job .
8451	Draw the text with the given color and color .
8452	Add image to given file
8453	Add a file to the job .
8454	Parse the command line arguments .
8455	Prints usage information about a target object
8456	Extracts the time unit from the string .
8457	Parses the target object .
8458	Executes the given URL .
8459	Execute a slide .
8460	Reads actions from a PPTX file .
8461	Sort a list of Rectangles by size
8462	Render the given text .
8463	Retrieves the XML file for a slide .
8464	Check if the mouse event is in the screen .
8465	Finds and intersects the specified slide with the specified element .
8466	Execute a message on SQS .
8467	Executes an outbound operation on the Kafka topic
8468	Require a file .
8469	Retrieves or creates a temporary directory
8470	Create a new log value map .
8471	Log a message at trace level .
8472	Log a message at TRACE level .
8473	Log a message at debug level .
8474	Logs a message at debug level .
8475	Log a message at the INFO level .
8476	Logs a specific event at the INFO level .
8477	Sends information about a specific event .
8478	Log a message at the WARN level .
8479	Log a warning at the WARN level .
8480	Logs an error .
8481	Logs an error .
8482	Add the source line and method to the context .
8483	Starts steno wrapper .
8484	Writes a list of key - value pairs to the JSONGenerator .
8485	Serialize a throwable .
8486	Returns a log value .
8487	Extract the caller data from the logging event .
8488	Encodes the given value using the given encoder .
8489	Creates a new database .
8490	Check mappings for a given position
8491	Parses the save attributes of the cell .
8492	Save data to object in the context .
8493	refresh sheet row from context
8494	Parse save attribute string .
8495	get save attr list from row
8496	get save attr from cell index
8497	Sets the saveObject in the hidden column .
8498	Sets the save attributes for the given sheet .
8499	Sets save attributes for a row .
8500	Prepare data context and save data context .
8501	Format number .
8502	Put shift attributes .
8503	Set the XSSF workbook
8504	Get the wrapper for this XSSF document .
8505	Get the formula evaluator .
8506	Recalculate the maximum number of columns .
8507	Load a WebSheet from an input stream
8508	Load a web sheet
8509	Load a sheet by tab name .
8510	Do export .
8511	Performs the save .
8512	do submit .
8513	Populate the component .
8514	Returns the current sheet configuration .
8515	Custom readObject method .
8516	Returns the locale for the given component .
8517	Returns the picture from the browser .
8518	Gets the CellHelper .
8519	Get picture helper .
8520	Gets the validation handler .
8521	Returns the chart helper .
8522	Convert a set of shift formulas to a list of formulas .
8523	try to convert a Ptg to a change list
8524	Convert a PtgList to a PtgList
8525	Helper method for creating a new Ptg .
8526	Returns the rows list for the given row mapping
8527	Helper method to assemble the rows from the row mapping
8528	Fixup reference row relative to row relative row .
8529	Helper method to build the dynamic row for refs .
8530	Helper method to build the dynamic row for a given area ptg .
8531	Determine the bg color for a given theme
8532	Get the x color from the spx color table .
8533	Determine the automatic fill color fill color based on the theme .
8534	get X color from scheme color
8535	Creates XColor from hex color
8536	Get the XColor with autoFill .
8537	Convert an XSSF color to a Clrome object .
8538	Convert XSSF color to short array .
8539	get bg color from cell style
8540	Finds the component name from the given component .
8541	Populate the input attributes from the given component .
8542	return attributes of object
8543	Sets a property on an object .
8544	Returns the value of the specified property .
8545	Setup control attributes
8546	Find validate attributes .
8547	Sets up the picture charts .
8548	Set the chart style information
8549	Set picture style .
8550	Initialize the charts map
8551	Gets the title of the chart .
8552	Sets the style of a series .
8553	Creates a chart with the specified chart data .
8554	Setup the default bar style .
8555	Initialize the charts map .
8556	Gets the id of the chart .
8557	Initialize the charts map
8558	Generates a single XSSF chart
8559	Transform to collection object .
8560	Gets full name from row .
8561	Rebuild the upper level formula .
8562	Sets up the upper level formula .
8563	Build cell formula for shifted rows .
8564	Gather rows mapping by full name
8565	Change index number in the change map in the change map .
8566	Changes the full length of an upper name .
8567	Change index number in hidden column .
8568	Sets the full name in the row .
8569	Gets the original row number from the row .
8570	Sets the original row number in the hidden column .
8571	find Rows mapping from shift map
8572	find child Rows mapping from full name
8573	Finds an item in a collection
8574	Builds the current configuration .
8575	Checks if the given row is static .
8576	Checks if a row is static .
8577	replace expression with cell value
8578	Returns the merged region index .
8579	Returns the list of skipped cells in the specified region .
8580	Adds the skip cell to the list of cells in the region .
8581	Builds the comment from a sheet
8582	Builds a cell comment from the given cell aliases .
8583	Builds the sheet configuration .
8584	Gets the sheet configuration .
8585	Build the form command from the sheet configuration .
8586	Checks if the last cell found in the row .
8587	Builds the sheet configuration .
8588	Removes the last row from the configuration .
8589	Builds a list of commands from a sheet .
8590	Sets the parent for a child command .
8591	Checks if the command list has at least one command in the list .
8592	Match command to sheet config .
8593	Copy template for tie operations
8594	Builds the list of commands from the cell .
8595	Process a method line line .
8596	Processes a command line and builds a config command .
8597	Move comment to map .
8598	Creates a config command command .
8599	Build the attribute map from the command line .
8600	Get the sheet configuration from configuration
8601	Sets the footer of the sheet .
8602	Sets the body of a sheet .
8603	Sets the header of the sheet .
8604	Delete row .
8605	Remove the full name list from the map .
8606	Returns list full name list .
8607	Extract each command from the multi - command index .
8608	Insert an empty object in the data context
8609	Deletes the object in the context
8610	Prepare collection data in context .
8611	Index the given config range in the given map .
8612	Returns true if the row should be added to the row .
8613	Inserts each template at the given index
8614	Evaluates a normal cell .
8615	Evaluates the formula value .
8616	Checks if the string is a user formula
8617	Create a comment on a cell
8618	Evaluates a script expression
8619	Removes all rows in the specified sheet .
8620	Removes a single row in the sheet .
8621	Removes the cached cell for the given row .
8622	Remove all rows in the body .
8623	Loads the picture from the current page .
8624	Load the chart data from the current page
8625	Assembles a new value .
8626	Returns the value of the cell with the given format .
8627	Returns the cell value without the format
8628	get cell string value
8629	Gets cell string value .
8630	Set a cell value
8631	Sets the string value of a cell .
8632	Sets the cell value .
8633	Sets the value of the given cell to the given value .
8634	Sets the cell value to the given cell value .
8635	Copies all rows from source sheet to dest sheet .
8636	Copies a single row from source sheet to destination sheet .
8637	Copies a cell from sourceSheet to destCell
8638	Copies the value of the source cell to the new cell .
8639	Copies the source cell style to the destination sheet .
8640	Clones the comment box to a new cell .
8641	Creates a client anchor for a comment .
8642	Creates a comment from a cell .
8643	Match vml drawing settings
8644	Get VMLDrawing from cell .
8645	Get CT shape from source cell .
8646	Gets the style from source cell style .
8647	Converts a POI cell to a cell .
8648	Gets the row column index from the component attributes .
8649	Gets the init rows from the configuration .
8650	Get a FacesRow from a body row
8651	Get a faces cell from the body row and column
8652	Returns the POI cell from the sheet
8653	Gets s s key from poi cell .
8654	Get or add a tie cell in the map .
8655	Returns the current data context name .
8656	Evaluates the expression
8657	Evaluates the expression with the given context
8658	Custom serialization .
8659	Remove a row from the map .
8660	Merge the given Rows into this one .
8661	Recovers all serial rows from the given Sheet .
8662	Returns the chart type of a CT chart .
8663	Converts a string to a BasicStyles
8664	Initialize chart data from XSSF chart
8665	Set up the chart data
8666	Initialize the XSSF document map .
8667	Initialize the AnchorsMap for a sheet
8668	Helper method to retrieve the chart id of the chart
8669	Gets the chart id from child node attributes .
8670	Iterate over all objects in the collection
8671	Save data in context .
8672	Re - eval the formula .
8673	Get POI cell from table row index .
8674	Gets the faces cell with the specified row index .
8675	Restore data context .
8676	get last collection object from full name
8677	Returns true if the full name contains a restore request .
8678	Start restore data context .
8679	Shift row reference .
8680	Set the first row reference .
8681	Sets the last row plus address .
8682	Build cells for given row .
8683	Build a single cell .
8684	Custom deserialization .
8685	Builds the categories list from the cell data .
8686	Builds the series list from the list of templates
8687	Builds a chart series from a theme
8688	Get the list of colors from a list of dpts
8689	Get dpt from list with index
8690	Sets the command index map .
8691	Get picture map from a workbook .
8692	Index picture into map .
8693	Index photo in map .
8694	Generate a picture style for a cell .
8695	Generate chart style string .
8696	Get anchor size .
8697	Returns the pattern .
8698	Returns the chart view
8699	Recover the cell .
8700	Get row style .
8701	Retrieves the cell style for a given cell .
8702	Get cell color .
8703	Get the decoration for a cell .
8704	Gets the style of a cell .
8705	Gets the style for a cell .
8706	Get the alignment string from a cell style
8707	Get vertical alignment from cell style
8708	Calculates the total height of the first sheet
8709	Sets the cell style .
8710	Gets the input type from cell .
8711	Returns the paths of the specified resource .
8712	Gets the resource as stream .
8713	Removes the prefix from the resource string .
8714	Evaluates the input type .
8715	Finds a bean by name
8716	Join an array of short arrays using the provided separator .
8717	Rounds a value to a given number of places .
8718	Returns tab type
8719	Returns tab style
8720	Returns the default date pattern .
8721	Returns the decimal separator for the given default locale .
8722	Returns the number separator for the given default locale .
8723	Sets the tie command alias list .
8724	Builds the list of variables that are needed to change the formulas .
8725	Build watcher list for given cell .
8726	Adds the given row to the watch list .
8727	Check if string is a valid command string
8728	Parse comment attributes from cell attributes
8729	Get attribute key in map by cell .
8730	Parses validation attributes from cell .
8731	Returns the position of the first bracket within the specified start position .
8732	Parses the given string and returns a map of attributes .
8733	parse input attributes .
8734	Parses validation attributes .
8735	Splits the attribute value .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Returns the select item attributes for the given key .
8739	Gathers special attributes .
8740	Parses a comment to map .
8741	Find the first non - cell name position in the input string
8742	Removes chars from string .
8743	Returns the Excel column name for the given number .
8744	Converts a column name to integer .
8745	Gets the cell by cell reference .
8746	Convert height units to pixels
8747	Checks if string is a valid date
8748	Parses a date string .
8749	Check if string is numeric .
8750	Determines whether the given character is continue to continue .
8751	Sets property on object .
8752	Compare two cell index
8753	Returns true if child is inside the given configuration range .
8754	Clears the hidden columns .
8755	Deletes hidden columns in a row .
8756	Deletes a cell from the row .
8757	Process event .
8758	Refresh the after status change .
8759	Validate this cell with the specified row and column .
8760	Validate the value of the poiWebSheet
8761	Check error message from context .
8762	Validate all rules for a single cell .
8763	Perform validation .
8764	Validate the target cell .
8765	Validate the current page .
8766	Validate row in current tab .
8767	Validate a row at a specific index .
8768	Refreshes the cached cells in the current page .
8769	refreshes the cached cells in the row
8770	set submitMode in viewMap
8771	Perform validation .
8772	Clear the contents of this object .
8773	Load the header rows .
8774	Load the header row without the configuration tab .
8775	Fill the header cells with the maximum number of columns .
8776	Gets the header column style .
8777	Gets the width style .
8778	Loads the header row with the given configuration tab .
8779	Get the style for a column
8780	clear parent workbook
8781	Initializes the tabs .
8782	Load data .
8783	Refresh the data for this sheet .
8784	Refresh the data for the given row .
8785	Refresh data for a cell .
8786	Returns the index of the tab with the given tabname .
8787	Load a work sheet .
8788	Prepare work sheet .
8789	Sets the first page of the data table .
8790	Save the object map in the current view map
8791	Setup the row info .
8792	Load body row .
8793	Assemble the body row .
8794	Refresh cell .
8795	Process a refresh cell .
8796	Create the dynamic columns for the specified tab .
8797	Add a repeat row .
8798	refresh body rows in body .
8799	set unsaved state
8800	Returns true if the state of the view is unsaved .
8801	Finds the common constructor for the given type .
8802	Writes an input stream to the output stream .
8803	Writes a long to the writer .
8804	Writes a line to the writer .
8805	Sets the traffic stats tag .
8806	Adds a bitmap to the result .
8807	Adds a file descriptor to the asset .
8808	Remove the parameter with the given name .
8809	Add a header to the request .
8810	Clear the result .
8811	Calls the currently active playback .
8812	Call the stop method .
8813	Bind to the service .
8814	Unbind the radio .
8815	Drops listener .
8816	Store the image to disk .
8817	Converts stream to string .
8818	Converts stream to string .
8819	Sends data to the output stream .
8820	Returns number of bytes available .
8821	Closes the input stream .
8822	Reads from the stream .
8823	Reset the reader .
8824	Send start .
8825	Sends the disposition header to the given output stream .
8826	Sends the content type header .
8827	Writes the transfer encoding header .
8828	Helper method to send the end of a header .
8829	Send end .
8830	Sends the given parts to the given output stream .
8831	Calculate the length of the parts in the given array of parts
8832	Returns whether the URL is a redirect path .
8833	Sends not Modified response .
8834	Sets the date header .
8835	Set date and cache headers
8836	Sets the content type header .
8837	Closes the channel .
8838	Sends the disposition header to the output stream .
8839	Sends data to the output stream .
8840	Installs the cache .
8841	Retrieves the working directory .
8842	Gets the cache response .
8843	Returns an input stream for the body of the snapshot .
8844	Reset bitmap .
8845	Creates a new SSL context for the given keystore .
8846	Validate keystore .
8847	Replace the specified scale type .
8848	Stop listening for location changes .
8849	Get PendingIntent .
8850	Disconnect from URLConnection
8851	Bind the service to the service .
8852	Unbind the service object .
8853	Notify listeners about view changes .
8854	Connect to the client .
8855	On accept data .
8856	Called when the server is reset .
8857	wait for loader
8858	Helper method to set text or hide the view
8859	Hides soft input from textView .
8860	Shows soft input .
8861	Toggle soft input from text view .
8862	Calculate pixels width .
8863	Called when an exception is caught .
8864	Clears cache cache .
8865	Populates an image from the given view .
8866	Cancels image loading .
8867	Create image consumer .
8868	helper method to set image result
8869	Sets the loading image
8870	Start an image loader .
8871	Adds an image to the cache .
8872	Releases a buffer to the pool .
8873	On the URL connection .
8874	Add a parameter to the request .
8875	Obtain connection with exception
8876	Returns the MD5 hash of the given text .
8877	Returns the String identifying the given CUblas
8878	Returns the String identifying the given CUblas stat
8879	If the given result is not null throw a CudaException with CudaException .
8880	If CUBLAS is enabled throws CudaException .
8881	Add a lexemeId to the lexemeId
8882	Add an ending item to the end of the sequence
8883	Returns the estimated estimate for the ending id .
8884	Print description .
8885	Verify and set kamols attribute value .
8886	casts attributes to KAML format
8887	check and set attribute value
8888	Removes all KAML symbols from the given tag .
8889	Returns the metrics of the app .
8890	Gets the query string .
8891	Process a list of metric data .
8892	Parses a json string .
8893	Gets the connection config .
8894	Performs the operations .
8895	Create a reader for GC4 code list .
8896	Create a reader for GC4 code list .
8897	Create a reader for GC04 column set documents .
8898	Create a reader for GC10 code list .
8899	Create a reader for GC10 code list .
8900	Create a reader for GC10 column set document .
8901	Get the id of the passed column .
8902	Get the row value of the passed row ID
8903	Get the column with the specified ID
8904	Get all key IDs from the passed column set .
8905	Get the key of the passed column set .
8906	Check if the passed column ID is part of the passed column set .
8907	Create a column .
8908	Create a key .
8909	Sets the number of lines to skip .
8910	Add a column at the index
8911	Create a new GC4 code writer
8912	Create a GC4 code writer .
8913	Create a GC4 column set writer .
8914	Create a new GC10 code writer
8915	Create a GC10 code writer .
8916	Create a new GC10 column set
8917	Factory method for GC4 code list .
8918	Factory method for GC4 code list .
8919	Create a new GC4 column set .
8920	Factory method for GC10 code list .
8921	Returns a validator for GC10 code list .
8922	Create a validator for GC10 column set .
8923	Sends the logs back to server
8924	Sets the context .
8925	Get the log level .
8926	Get capture .
8927	Set the max log store size
8928	Prepend metadata to a message
8929	Add the stack metadata to the given JSON object .
8930	Helper method to create a JSONObject with the given information
8931	Log location information
8932	Sets user identity .
8933	Gets a byte array from the given file .
8934	Starts the location updates .
8935	Size the given region .
8936	Size of a partitioned region .
8937	Dumps the number of entries in a region .
8938	Reads a snapshot record .
8939	Writes the given number of times to the given stream .
8940	Gets the time stamps from the specified index .
8941	Convert a file into a chart
8942	return pool for given server
8943	Get a pool for locators .
8944	returns true if there is a region on the server
8945	Get a member by its name
8946	List host names
8947	Looks up a network host name .
8948	Check if data is an exception and send an exception .
8949	Calls the given function and returns the result .
8950	Flatten the collection into a collection
8951	Execute the query and return the result .
8952	for cache entry
8953	Creates a cache listener for the entry after deletion .
8954	Handle exception .
8955	Gets the onregionFilterKeyFacts object .
8956	Main entry point for export .
8957	List host names
8958	Execute the function on a region .
8959	Gets the app name from the resources .
8960	Constructs security properties from the properties file
8961	Get a region by name .
8962	Get region by name .
8963	Constructs a comparison between source maps and target map
8964	Returns true if the value is at the given index .
8965	Close the stream .
8966	To csv files .
8967	Dump stats files .
8968	Reconnect to JMX
8969	Stops members on a given host
8970	Shutdown a member
8971	Shutdown JMX server .
8972	Shuts down the redundancy zone .
8973	store the pagination map in the pageKeys region
8974	Reads the results of the specified page and region .
8975	Imports a region .
8976	check the remote locators and locators
8977	Builds the check sum map from the given region name .
8978	Builds the checkSumMap for the given region .
8979	Return value of given column
8980	Tells whether or not the given TypeMirror is typeOf .
8981	Serializes an object to a byte array .
8982	Deserialize a byte array .
8983	Creates an instance of the given class .
8984	Check for a table id attribute .
8985	Check for a column
8986	Check for a super type .
8987	Returns the schema of the table .
8988	Generate java .
8989	Emit getId method .
8990	Converts the query into an Observable
8991	Checks if the given column name is equal to the given column name .
8992	Returns the string value or the default if the string is null .
8993	Returns the first character of the given string .
8994	Tests whether the given TypeMirror is of type .
8995	Get a descending query
8996	Read the temperature value from the device .
8997	Returns the name of the given type .
8998	Sends a message to the log .
8999	Sends an error message .
9000	Returns the list of supported icon fonts .
9001	Get the icons .
9002	Creates the SLD editor layout .
9003	Gets the background decoration .
9004	Raises x .
9005	Set this row vector .
9006	Compute an integer power of a value x .
9007	Compute the root root root for a given index .
9008	Applies x and y to the denominator .
9009	Compute ln - ln distance from a decimal point .
9010	Internal method to calculate a new number using Newton - Newton .
9011	Compares two BigDecimal with a given scale .
9012	Performs an ARCTath conversion between x and scale .
9013	Compute the square of the given double value using the given scale .
9014	Print pi .
9015	Calculate a timestamp string .
9016	Set limits .
9017	Add a value to the histogram .
9018	Prints the longest bar .
9019	Adds the given complex to this complex .
9020	Subtract the complex value from this complex .
9021	Multiply the complex value of this complex .
9022	Divide a complex number .
9023	Set the values from a matrix .
9024	Returns a row vector from this matrix .
9025	Get a column from this matrix .
9026	Sets this matrix to the specified values .
9027	Returns the transpose of this matrix .
9028	Add another matrix to this matrix .
9029	Subtracts this matrix from another matrix .
9030	Multiply a matrix by a k .
9031	Multiply this matrix by another matrix .
9032	Print the matrix to the specified output stream .
9033	Sets the image resource .
9034	Validate the coefficients
9035	Compute the next position .
9036	Clears the state of this object .
9037	Parse the sld information from the sld descriptor .
9038	Create a sldI from the given sld descriptor .
9039	Validate sld .
9040	Validate sld .
9041	Calculate area of a region .
9042	Sets this matrix from the given matrix .
9043	Replace the array with the specified values .
9044	Compute the inverse matrix .
9045	Returns the determinant .
9046	Returns the norm of this matrix .
9047	Solve Ax = b
9048	Print the matrix representation of this matrix .
9049	Do forward elimination .
9050	Performs a forward substitution
9051	Performs a back substitution on the matrix .
9052	Recompute x for x
9053	Converts a square matrix into a square matrix .
9054	Generates a random value .
9055	Perform a single iteration procedure
9056	Compute the next position .
9057	Check that the position of the root element is changed .
9058	Compute the next position .
9059	Check that the interval is valid .
9060	Compute the given addend value .
9061	Multiply a value by p and m
9062	Raises the given exponent to the given power .
9063	Do one iteration
9064	Get sldManager .
9065	Converts a long value into a char array .
9066	Decompose the non - zero form of the bits .
9067	Print this value to the specified PrintStream .
9068	Validates that the biased exponent value is valid .
9069	Validates an unbiased exponent value .
9070	Validates that the positive exponent value is valid .
9071	Validates an unbiased exponent value .
9072	Creates and returns a SldGwt service .
9073	Compute the next random value from the generator .
9074	Get the next random value .
9075	Generate next random number .
9076	Returns a copy of sieve with the specified number of elements .
9077	Returns an array of prime factors for the given pn .
9078	Iterates over the nodes and stores them in the iteration .
9079	Compute the next position .
9080	Checks that the position of this node has changed .
9081	Set the JavaFX Application
9082	Sets the configuration from the given file
9083	Sets the default configuration .
9084	Initialize FXML loader .
9085	Set latl location .
9086	Extract host port pair from service instance .
9087	Returns the AttributeDefinition for the given attribute UUID .
9088	Evaluates whether an attribute definition matches the given filter .
9089	Sanitize a string .
9090	Sets the address of the Geocode .
9091	Sets the Geoocode Components .
9092	Query the names of the services .
9093	Query the service instances by name .
9094	This method is used to get all collaborations from the user by the authenticated user
9095	Gets the meta data string .
9096	Change password for a logged in user .
9097	Get all users .
9098	Get the gravatar for a given email address and size
9099	Get the gravatar for a specific user
9100	Populate from ElasticSearch JSON .
9101	Returns the ElasticSearch field type .
9102	Create a flow step .
9103	Update flow step .
9104	Get a flow step by id .
9105	Get a flow step by step .
9106	Get all steps by flow .
9107	Delete a flow step .
9108	force delete flow step
9109	Populate the list of TableFields from the form fields .
9110	Close the connection .
9111	Handle a message .
9112	Sets the connection close .
9113	Look for ECHO messages
9114	Returns a list of all personal inventory items .
9115	Create a table record .
9116	Delete form container
9117	Get form flow history
9118	Gets the form and field values for the given form param
9119	Gets most recent data for the given form param
9120	Locks the form container .
9121	Unlock the form container
9122	Unlock a form container
9123	Map the form container to the form container .
9124	Convert the String list of roles to objects .
9125	Create a form definition
9126	Update form definition
9127	Get a form definition by id
9128	Get form definition by name
9129	Returns a list of all valid Forms for the specified user .
9130	Delete form definition
9131	Get the storage key from the form definition .
9132	Initialize XMemcachedClient
9133	Shutdown the pool
9134	Converts to a long .
9135	Converts a document to a PDF file .
9136	Get the field values for a form id
9137	Create a flow step step rule .
9138	Create a flow step exit rule .
9139	Create a flow step step rule .
9140	Update flow step rule entry .
9141	Update flow step exit rule .
9142	Update flow step rule .
9143	Moves the flow step entry to the specified flow step rule .
9144	Moves the flow step entry to the specified flow step rule .
9145	Delete a flow step rule .
9146	Delete a flow step exit rule .
9147	Delete flow step rule .
9148	Initializes the encryption data from the auth response parameter .
9149	Get all user queries .
9150	Get all the roles in the service .
9151	Get service ticket as hexadecimal string .
9152	Create a field text masking
9153	Create a text barcode field .
9154	Create a decimal spinner field .
9155	Create a decimal slider slider
9156	Create a field table .
9157	Update a field in a form field with specified text value
9158	Updates a text barcode type .
9159	Update decimal spinner s value .
9160	Update the decimal slider value
9161	Updates a field in a form field .
9162	Get a Field by name
9163	Gets fields by form name and log .
9164	Gets fields by form type id and logged in .
9165	Deletes a field from this service request .
9166	Force a field to delete .
9167	Gets the meta data for a table field .
9168	Update the value of a field value .
9169	Gets an index .
9170	Create a flow .
9171	Update flow information
9172	Get a flow by ID
9173	Get a flow by name
9174	Delete a flow
9175	force delete flow
9176	Updates a global field value .
9177	Returns all the global field values
9178	Returns a map of the form definition ids and title ids for the form definition .
9179	Decrypt initialization packet .
9180	Close and close the connection .
9181	Initializes new request handler instance with new message handler .
9182	Gets the exception message verbose .
9183	Create admin user .
9184	Gets an access token .
9185	Get user profile info .
9186	Executes the given base domain and returns the JSON object .
9187	Execute a form field and return the body .
9188	Returns a JSON response handler for the given endpoint .
9189	Returns true if connection is valid .
9190	Get the closeable http client .
9191	returns the path to the fiducial trust store
9192	Closes the connection .
9193	Returns a list of FluoItems for the given job view .
9194	Send a form item to a flow .
9195	On close .
9196	On message handler .
9197	Sends a message to the Flase client .
9198	Sends a message .
9199	Closes the session .
9200	Execute native SQL query .
9201	Sends a license request to the service .
9202	Apply license to this license
9203	Create a field text plain text field .
9204	Create a field paragraph text plain text .
9205	Create a Paragraph Text .
9206	Select multiple choice values .
9207	Create a DateTime Field
9208	Update field text plain text field .
9209	Update Paragraph Text .
9210	Update field date time and time zone .
9211	Update field decimal .
9212	Update the field value .
9213	Create a field value .
9214	Get configuration by key
9215	Get all configurations
9216	Create an attachment
9217	Get an Attachment by id
9218	Delete an attachment
9219	Force an attachment to be deleted
9220	Parse a jar file .
9221	Sets the class loader using the given jar path .
9222	Throw an exception if the element is not a valid element .
9223	Throws an exception if the element is not null .
9224	Validates that the element has at least one element .
9225	Get schema node from filePath .
9226	Validates that the element has at least one element .
9227	Throw an exception if the element is not present .
9228	Converts the value object to the target type .
9229	Creates a new CLI instance .
9230	Create a new instance using the given options .
9231	Parses the given arguments .
9232	Parses the given arguments using the given string .
9233	Creates a builder for the given path .
9234	Remove a footer view .
9235	Returns the value of a given projection
9236	Generates a 3D gradient for a coordinate vector .
9237	1 - D int - value noise
9238	Calculate 3 - D value for a 3D value
9239	Calculate the cubic interpolation between two points
9240	Calculate s curve
9241	Sets the bounds .
9242	Process the event for the specified event .
9243	Process the event .
9244	Retrieves account id from a CloudTrailEvent .
9245	Checks the violation entity against the violation entity .
9246	Get event serializer
9247	Creates a file in the root folder .
9248	Creates a new directory .
9249	Restores the original properties .
9250	Creates new Map implementation
9251	Adds the given object to the collection .
9252	Set a string property .
9253	Returns an array of String values for the given base property .
9254	Returns the next state for the given action name .
9255	Remove garbage collected soft references from GC queue
9256	Gets the object for the given type .
9257	Gets the parameterized type .
9258	Gets the type variable corresponding to the given type variable .
9259	Print the stack trace to the given stream .
9260	Print the stack trace to the given writer .
9261	Utility method to replace the object .
9262	Run the task
9263	Sets the current task .
9264	Called when a task is accepted .
9265	Called when a task is rejected .
9266	Called when the task is started .
9267	Called when a task completes .
9268	Stop the task .
9269	Get the next job from the queue .
9270	Put a job in the queue
9271	Converts a name to blocking mode .
9272	Resolve the object type .
9273	Configures the readers to read from the XML resolver .
9274	Adds a reader for a given mime type .
9275	Copy the readers to the catalog
9276	Creates a new Catalog .
9277	Load the catalogs from the system .
9278	Parses a URL from a URL .
9279	Parses all the catalog files into the queue .
9280	Parse the catalog file .
9281	Handle an unknown entry .
9282	Parse all the subordinate catalogs from the catalog .
9283	Resolve the given entity name and system id .
9284	Resolves a document .
9285	Resolve a system identifier .
9286	Resolve a URI .
9287	Resolve the catalogs
9288	Converts the given URI into an absolute URL .
9289	Normalize URI .
9290	Encodes the given byte as a hex string .
9291	Adds a partial entry to the vector .
9292	Create a soft value ref .
9293	Fires an event on all registered listeners .
9294	Adds a throwable to the stack .
9295	Creates the delegate list .
9296	Compares this task to another .
9297	Returns the value as an object .
9298	Returns the object at the given index .
9299	Set object at given index
9300	Try to consume SoftObject from memory .
9301	Adds an entry type .
9302	Returns the integer type of the entry with the specified name .
9303	Returns the number of arguments for the specified entry type .
9304	Returns the entry argument of the entry
9305	Set the context class loader
9306	Swaps the elements of a queue
9307	Remove a node from the tree
9308	Clean up timeout object
9309	Loads the class with the given name .
9310	Preload the protocol .
9311	Creates a URL stream handler .
9312	Update the handler packages .
9313	Returns the current value .
9314	Creates new Set implementation
9315	Makes a synchronized counter .
9316	Make a long counter .
9317	Determines whether an extension is in the namespace stack .
9318	Check notification .
9319	Binding a name to the target object .
9320	Get the object instance from a Reference object
9321	Helper method to substring a string from a string buffer .
9322	Splits a string using the specified delimiter .
9323	Joins a byte array into a string .
9324	Default implementation of defaultToString
9325	get the value
9326	Creates the entry map .
9327	Returns the value for the given key .
9328	Returns the value associated with the specified key .
9329	Removes a key from the map .
9330	Flushes the cache .
9331	Return a list of the keys from the entry map .
9332	Sets the resolution .
9333	Returns the entry with the given key if it exists .
9334	Return an iterator over the elements that match the given tag name .
9335	returns a unique child that matches the given tag name
9336	Get optional child element by tag name .
9337	Retrieves the content of an element .
9338	Returns the unique child content of the given element .
9339	Get the content of an optional child element .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Set the blocking mode
9343	Executes the given task .
9344	Resolve a system URI .
9345	Resolve the catalog name and system ids from the catalog .
9346	Resolve an external system identifier .
9347	Resolves an external public id .
9348	Utility method to get the catalog resolver
9349	Append vector .
9350	Resolves a system URI by its ID .
9351	Resolve a system URI
9352	Resolves all resolutions for a given system ID .
9353	Resolves all local system entries by systemId
9354	Resolve all sub - catalogs for the given catalog .
9355	Reads the catalog from the URL .
9356	Reads a catalog from the input stream .
9357	Connect to the file .
9358	Returns an OutputStream for writing to the file .
9359	compare next node
9360	Deletes a node from another node .
9361	Returns the value if this is a valid header .
9362	Creates a snapshot entry .
9363	compare right .
9364	Creates a log logger .
9365	Prints a list of objects
9366	Gets the short name of the class .
9367	Returns the string representation of this object .
9368	Returns an iterator of the system properties .
9369	Returns the property group for the specified basename .
9370	Returns a Constructor that matches the specified argument type .
9371	Creates a copy of the object .
9372	Deref the object .
9373	Initialize the Context .
9374	Update jndi cache .
9375	Returns the set of keys that should be included in the header .
9376	Returns a set of the entries in this set .
9377	Removes a bound property listener .
9378	Fire property added to list .
9379	Fire property removal event
9380	Fire property changed event
9381	Fire a property change event to all registered listeners .
9382	Creates a property name with the given prefix .
9383	Loads the properties from the specified property reader .
9384	Loads the properties from the specified class name .
9385	Returns the property group for the given basename and index
9386	Returns whether the entity is resolved .
9387	Resolve the given system ID .
9388	Resolve a system ID as a URL
9389	Resolves the classpath name for the given systemId .
9390	Set the value as XML .
9391	Normalize the public id .
9392	Encodes the given public ids into an identifier .
9393	Decodes the given UUID into an identifier .
9394	replace a string with a newStr
9395	Start the timer .
9396	Stop the elapsed time .
9397	Makes a synchronized StopWatch .
9398	Compares this object to another object .
9399	Generates a hashcode for a byte array .
9400	Returns the hashcode of the given array .
9401	Creates the storage .
9402	Sets the value of the field .
9403	Returns the next token from the input stream .
9404	Initialize the system property editor .
9405	Adds a vertex to the graph .
9406	Set the root vertex .
9407	Removes a given vertex from the graph .
9408	Performs a depth first search on a vertex .
9409	Walk through all edges in the given vertex .
9410	Finds a vertex with the given data
9411	Finds cycles .
9412	Normalizes the given string .
9413	Parses the given XML string and returns the root Element .
9414	Parses the given XML stream and returns the root element .
9415	Parses the given input source into a DOM tree .
9416	Creates an Element by name .
9417	Resolve qualified name .
9418	Copies attributes from source element to destination element .
9419	Returns true if the node has any child elements
9420	Get all child elements of a node .
9421	Returns the text content of a node .
9422	Retrieves the child elements from the given node with the given name .
9423	Returns the parent element of the given node .
9424	Adds a resource to the waiting list .
9425	Reads the catalog from an input stream .
9426	Reads the catalog from the URL .
9427	Returns the IP address of the local host
9428	Resolves the given entity and system id
9429	Sets the value of a system property .
9430	Display codebase information for a given class
9431	Describe a string representation of a class .
9432	Strips the package name from the given class name .
9433	Get the package name from a class name
9434	Try to load the given class .
9435	Returns the primitive wrapper class for the given primitive type .
9436	Searches for all interfaces of a class and adds them to the list of interfaces .
9437	Get all the unique interfaces of a class
9438	Returns true if the given type is a primitive wrapper .
9439	Instantiates a new instance of the specified property .
9440	Returns the getter method .
9441	Returns an attribute setter .
9442	Convert a name to a Java class .
9443	Get a property by name
9444	Returns an array of filenames for the specified property name .
9445	Attempt to maintain the weak references .
9446	Returns an iterator over the set .
9447	Creates a URLister instance .
9448	Returns an immutable set that contains the specified basename .
9449	Adds a bound property listener .
9450	Removes a bound property listener .
9451	Determines whether the string is null or not .
9452	Returns the PropertyEditor for the given type name .
9453	Register an editor for the given type name .
9454	Converts the text value of the specified type to the specified type .
9455	Get the context class loader
9456	If the Throwable is an ApplicationDeadlockException return null .
9457	Schedules execution of a timeout .
9458	This method is responsible for filling the time out of the queue .
9459	Creates a new context under the specified name .
9460	Lookup an object .
9461	Checks the given object in the context .
9462	Helper method to append information to a StringBuffer
9463	Get a transition by name
9464	Reads the properties from the property file .
9465	Gets the verbosity .
9466	Searches for relative catalogs
9467	Gets the catalog files .
9468	Returns the catalog files .
9469	Returns whether the preference should be prefixed or not .
9470	Determine whether or not the static catalog should be used .
9471	Resolves an entity from the system identifier .
9472	Resolves a source for the given base URL .
9473	Converts a string to an absolute URI .
9474	Resolve a class .
9475	Invokes the setter method .
9476	Gets the local name of an element .
9477	Returns the namespace URI of the given node .
9478	Returns the namespace URI of the given element .
9479	Creates a list from an enumeration .
9480	Returns an InputStream for the given filename .
9481	Loads properties from a file .
9482	Reads properties from a Properties object .
9483	Adds an edge to this graph
9484	Adds an outgoing edge .
9485	Adds an incoming edge to the graph .
9486	Checks whether the edge has the given edge .
9487	Removes an edge from this graph .
9488	Find an edge in the graph
9489	Find the edge in the graph
9490	Returns the cost of this vertex .
9491	Recursively jar files from a file .
9492	Returns true if there are more items in the queue .
9493	Fire an event to the queue .
9494	Install JVM type provider .
9495	Cleans a folder and all its contents recursively .
9496	Dispatch an action to the FX thread .
9497	Gets an event stream of the given type .
9498	Creates the fxml path for the given view type .
9499	Applies one or more records to a stream .
9500	Applies one or more rights to one stream .
9501	Returns a stream consisting of one of the given resources .
9502	Returns a stream consisting of one of the given resources .
9503	returns false if the page is not allowed
9504	Checks the given instruction .
9505	Entry point for the analyzer .
9506	Main method for testing .
9507	Gets the sum of word degree .
9508	Helper method to convert the superclass arguments to a map .
9509	This method is called when the reader is initialized .
9510	Checks that the data source is properly configured .
9511	Creates an iterable of the given type .
9512	Create array of given type .
9513	Create list .
9514	Create a collection of instances of type T .
9515	Create a list of objects of the given type .
9516	Return a left value of the left type
9517	Create an instance of Right
9518	Throw a ValidationException if the given type is not found .
9519	Checks to see if a validation successful .
9520	Creates a Try with success .
9521	Connect a JdbcOnConfigure with the given data source and username and password
9522	Run in the SQL .
9523	Run query in the database
9524	As boolean array .
9525	Generate query by object .
9526	On upgrade .
9527	Backup table .
9528	Restore this table .
9529	Set the empty text view .
9530	Dump table to csv .
9531	Unescapes quoted string .
9532	Returns a list of string values from a CSV row
9533	Convert CSV string to map
9534	Convert map to string
9535	Join list .
9536	Joins a list of strings .
9537	Reads from index .
9538	Writes the data to the output .
9539	Expect the id field in the entity model .
9540	Get base DAO model .
9541	Returns the bind type .
9542	Imports from a CSV file .
9543	Backup tables to csv .
9544	Restore all tables from csv .
9545	Write the index file .
9546	Creates a query from the given entity manager .
9547	Creates a typed query .
9548	Renders the query .
9549	Delete the given id from the table .
9550	Save an object .
9551	Update the specified object in the table
9552	Add a where item to the WHERE clause .
9553	Add a sub - query to the WHERE predicate .
9554	Returns next active stack .
9555	Returns an empty IntentionStack
9556	Adds the given plan to the graph .
9557	Select plans based on policy selection policy
9558	Select the plan at the specified position
9559	Sets the plan variables in the given plan instance .
9560	Gets the belief at the given index .
9561	Gets the parents .
9562	Return the children .
9563	Grows the given byte array by the given increment .
9564	Creates a new Logger
9565	Advances the loop .
9566	Sets the goals .
9567	Pause for user input .
9568	Calculate how many agents are selected
9569	Initialize IntentionSelectors
9570	Starts the intention selection
9571	Shutdown an intention selection
9572	Registers an extension .
9573	Resets the state of the object .
9574	Loads the specified agent from the specified class .
9575	Finds the plan classes for a given goal type and adds them to the catalog .
9576	Creates the number of agents in the given type .
9577	Loads a class from the class name .
9578	Loads an extension from the class name .
9579	Compares two objects for equality .
9580	Returns usage message .
9581	Parse the command line arguments .
9582	Parse an argument with the given string .
9583	Evaluate an agent .
9584	Returns the object at index
9585	Find an AObject by name .
9586	Push an object onto the stack .
9587	Returns the object at the specified index .
9588	Adds an object to the queue .
9589	Remove an object from the queue .
9590	Gets the type of the given object .
9591	Match a given belief
9592	main method for testing
9593	Converts a string to a byte array .
9594	Post a goal to the topology
9595	Send a message to the agent .
9596	Send a goal message to the agent .
9597	Returns an array of goals
9598	Creates a new belief set .
9599	Adds a new belief to the beliefbase .
9600	Evaluate a query .
9601	Suspend the agent
9602	Returns the field with the given name .
9603	Registers the individual Neighbours .
9604	Builds random name .
9605	Runs the program .
9606	Check if the execution stack is valid .
9607	Removes finished agents from the set .
9608	Creates a new goal for a given goal node .
9609	Called when the pool is shut down .
9610	Sets whether or not the given agent is idle .
9611	Moves a pin from the specified pinA
9612	Initializes the agent .
9613	Wait until all the pools are idle .
9614	Terminates all the extensions .
9615	Returns true if all the pools are idle .
9616	Calculate the pool id for an agent .
9617	Returns the currently selected expression .
9618	Sets the expression .
9619	Creates an expression for a join .
9620	Recursively join a join .
9621	Find or create a join for a given property
9622	Returns true if end is reached .
9623	Gets the upload stream .
9624	Override handleRequest method .
9625	Check if parameter with given name exists .
9626	Get parameter value by name .
9627	Parse the parameters .
9628	Configure the transaction manager .
9629	Returns the target file for the given artifact name .
9630	Writes the given artifact to the given file .
9631	Set the instance fields on the managed class .
9632	Find the correct constructor for the given implementation class .
9633	Returns a string representation of the configuration .
9634	Returns the method for the given method .
9635	Returns the type of the given field .
9636	Get a dependency from the container .
9637	Persist the temporary file .
9638	Sets a default link for the given rels
9639	Sets the default link template for the given rel
9640	Handle links .
9641	Adds links to the response .
9642	Adds links to the response .
9643	Parses a link object .
9644	Returns the value of the given key or creates a new empty map if none .
9645	Handles allowed capabilities .
9646	Check if the given method is allowed
9647	Registers the instance processor .
9648	Register an instance factory for the given instance type .
9649	Registers an instance processor .
9650	Register a class processor
9651	Get an instance of the given interface .
9652	Adds an argument to the list .
9653	Creates target files list .
9654	Serialize this object to XML string .
9655	Initialize the template variables .
9656	Returns true if the specified template has a reference to the specified template file .
9657	Creates a template model from a reader .
9658	Creates a template model from the given file .
9659	Sets the request path .
9660	Get an observable starting from the given start index .
9661	Returns an instance scope with the given string value .
9662	Utility method to set a field on an object instance .
9663	Add capture to an appender .
9664	Remove appender from appender .
9665	Clears the logged - in appender .
9666	Reads all the formal parameters from the request .
9667	Parse the EMF model file .
9668	Resolve proxies .
9669	Returns an array of files from the given directory .
9670	Parses the given directory .
9671	Check if the resource is fully resolved .
9672	Returns all EObjects in the given resource set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Advances to the next record .
9677	Set string array .
9678	Set a parameter to a boolean .
9679	Execute a SQL INSERT UPDATE or DELETE statement .
9680	Instantiate an instance of the given string representation .
9681	Merges the template .
9682	Get model directory .
9683	Returns the directory of the template .
9684	Writes the value to the output .
9685	Start the web UI .
9686	Configures the given web window .
9687	Prints the print .
9688	Writes the data from the input stream to the output stream .
9689	Invokes the proxy .
9690	Attaches this HttpServletRequest to the given HttpServletRequest .
9691	Detaches this request .
9692	Returns the cookies associated with this request .
9693	Dumps the http request context information .
9694	Returns the invocation meters .
9695	Populates the given EventStreamConfig from the given config .
9696	Sets the remote host name .
9697	Get parameter value from event stream .
9698	Removes the prefix from a path .
9699	Find the common directory between two directories .
9700	Convert an absolute path to a relative relative path .
9701	Convert relative path to absolute path .
9702	Determines the depth of the given file .
9703	Dumps an error on the request context .
9704	Send JSON object with given status code and status code .
9705	Adds a param template to the list .
9706	Adds a list of template templates .
9707	Initialize the parameters .
9708	Returns a list of references to a template .
9709	Enables or disables the save button .
9710	Show a confirmation dialog
9711	On delete .
9712	Create a new instance of the managed class .
9713	Returns the list of files .
9714	Returns a snapshot of the results
9715	Get summary row .
9716	Get the contents of a sub - directory .
9717	Create a new instance of the managed class .
9718	Returns the setup class .
9719	Returns the list of model directories .
9720	Returns the list of model resources .
9721	Sets the candidate data source .
9722	Loads the configuration from the given input stream using the given loader .
9723	Displays an error notification .
9724	Returns true if the type is object .
9725	Reads all the formal parameters from the incoming request .
9726	Reads an object from the input stream .
9727	Extracts the parameter from the FitCell .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request header .
9730	Checks if the request is an Android request .
9731	Handle refresh .
9732	Returns a list of properties with the specified annotation
9733	Returns an annotation on the given property on the given property .
9734	Logs a message .
9735	Lookup the given domain and return the result .
9736	Checks if the server has been set for the given whois parser .
9737	Gets the managed class .
9738	Gets the managed method .
9739	Add an exception to the cell .
9740	Process not contained text .
9741	ResultSet object as a boolean .
9742	Returns true if the ResultSet object is a wrapper for the specified class .
9743	Serialize the response .
9744	Get cookie value by name
9745	Add cookie with name and value
9746	Remove cookie by name
9747	Returns an iterator over the cookies in this request .
9748	Get the target file list producer .
9749	Adds a field to the constant pool .
9750	Compiles the class .
9751	Returns true if the response file matches the given token .
9752	Returns the name of the file .
9753	Ensures that the given URI has a slash .
9754	login with the given username and password
9755	Returns the http servlet request .
9756	Invokes the managed method with the given arguments .
9757	Execute a managed method .
9758	Execute an immutable transaction .
9759	Returns all files in the directory matching the filter specified .
9760	Return the last file in the directory
9761	Extracts the concrete configuration from the ParserConfig .
9762	Checks if path starts with path component .
9763	Returns a list of factories for the given model type .
9764	Gets the managed session .
9765	Serializes the file to the output stream .
9766	Reads meta data from the file .
9767	Handle request for controller .
9768	Closes the connection .
9769	Close all event streams
9770	Handle allowed methods .
9771	Handles the upload .
9772	Displays the data from the server .
9773	Extract column parameters from a FitRow
9774	Gets the argument names .
9775	Schedule a periodic task .
9776	Schedules a timeout task .
9777	Populates the view manager from the configuration .
9778	Returns the next file
9779	Try to load the application .
9780	Prints the welcome banner
9781	Prints stopped banner .
9782	Create a chameleon .
9783	Register a shutdown hook
9784	Triggers a notification .
9785	Renders the trigger .
9786	Insert and replace the given fit row .
9787	Returns the counts of all files
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triples - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter forIsObjUri - gets
9846	setter forIsObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Find the next clear bit .
9878	set bit at index
9879	Frees the allocated buffer .
9880	Returns a new instance of this cache value with the specified file name and file name .
9881	Rehashes the array with the given size .
9882	method to generate HELM2
9883	Checks if the brackets in the annotation section are open .
9884	Adds details about the Monomer
9885	Converts an annotation to a HELM2 format .
9886	Adds an element to the group .
9887	Runs the HELM program .
9888	Checks if the given String is a valid polymer ID
9889	Checks the validity of a PolymerID connection to a connection section
9890	Validates connection s details .
9891	Validates a group ID
9892	Checks if a string is repeating .
9893	method to check if the polymer is a peptide or rna sequence
9894	to json string
9895	Gets the simple polymer with the given ID
9896	Gets the current grouping .
9897	Returns the HELM2 output as a String
9898	method to generate HELM2 to HELM2
9899	method to convert the connection to HELM2 notation
9900	method to convert the Groups to HELM2
9901	Convert annotation section to HELM2
9902	Returns a list of polymer ids
9903	Get a PolymerNotation object
9904	method to set the polymer elements
9905	Converts the given String to the HELM2 .
9906	Sets an annotation .
9907	Sets the count .
9908	decide monomerNotation
9909	decide if there is a MonomerNotation in the given string
9910	Decide the HELM entity based on the string
9911	Gets the value .
9912	Parses the HELM2 input
9913	Sets the nucleotide containing all contents of the nucleotide
9914	Define the ambiguity for the given string .
9915	Gets statistics about this worker thread .
9916	Creates an ADI graph from a collection of edges .
9917	Creates an ADI graph from a collection of nodes .
9918	Initialize the incoming paths internal structures .
9919	Returns a list of the nodes in the graph .
9920	Subscribe a pattern to a method .
9921	Send a subscribe_count request to the given pattern
9922	Remove a pattern from the call .
9923	Do a return .
9924	Send a return_sync sync to the response .
9925	Wait for a period of time .
9926	Shutdown the system .
9927	If throwable is non - local handling throwable .
9928	Releases a run state
9929	Creates and starts a worker .
9930	Tries to add a worker to the queue .
9931	Register a worker .
9932	Releases a worker from the pool .
9933	Signal a work queue .
9934	Run a work queue .
9935	Await work for work
9936	Returns the number of queued tasks .
9937	Returns the common submitter queue .
9938	Performs a help complete for an external task .
9939	Submits a ForkJoinTask for execution .
9940	Creates a ForkJoinPool .
9941	Wait for this task and return its result .
9942	Build string from statement
9943	Get thread pool statistics
9944	Creates a list with the given elements .
9945	Reverses the contents of the list .
9946	Applies the given predicate to the given collection .
9947	Folds the left value from the given iterable using the given startValue .
9948	Folds a left value from a list using a left value .
9949	Adds a task to the queue .
9950	Converts nullable into an option .
9951	Create new hash map from keys and values .
9952	Returns an empty list map .
9953	Creates an AListMap from an equality iterable .
9954	Create an AListMap from the given keys and values .
9955	Returns an immutable set view of the inner map .
9956	Normalize resource name .
9957	Marshals the bound value .
9958	Creates a char sequence of the specified range .
9959	Returns a BinarySearch for the given List .
9960	Returns a BinarySearch for the given List .
9961	Sends an email .
9962	Sends an email .
9963	Bind the given route .
9964	Bind the given FilterBinding .
9965	Returns true if the subject has at least one role
9966	Returns the integer value of the given Long .
9967	Remove duplicate Strings from an array .
9968	Returns a string that should be placed in the given string .
9969	Runs the task .
9970	Set login member
9971	get login with user
9972	Retrieves the login user from the request .
9973	Returns true if the given password matches the given salt .
9974	Saves the member in the cookie
9975	Generates a key for the login key .
9976	Returns a user object for the given uuid .
9977	Forward to the handler .
9978	Append file separator to path .
9979	Returns the value of a parameter as a long .
9980	Prints a debug message .
9981	Returns the CallInfo for the specified level .
9982	Converts a char array to a byte array
9983	Converts a char sequence to a byte array
9984	Converts a byte array to a simple char array .
9985	Convert char sequence to byte array .
9986	Lookup the locales for the given locale code .
9987	Runs a promise in a future .
9988	Crops the given image to the given file .
9989	Schedules invocation .
9990	Runs the given direct invocation .
9991	Returns the rest operations .
9992	Render the error .
9993	Render the forbidden message .
9994	Process the given view .
9995	Parses the current action path and returns the path .
9996	Render the data tables .
9997	Render empty data tables .
9998	Sets the list of items in the combo box .
9999	Sends to the client .
10000	Returns all the bindings of the given injector
10001	Return the current method name .
10002	Compact memory .
10003	Propagate metrics to the global metrics collection .
10004	Encodes the given string .
10005	get charset .
10006	Copies data from the input stream to the output stream .
10007	Copy bytes from input stream to output stream .
10008	Copies the input stream to the output using the default encoding .
10009	Copies the data from the Reader to the output .
10010	Copy characters from Reader to Writer .
10011	Copies the given reader to the given output stream using default encoding .
10012	Copies the contents of the given reader to the given output stream using the specified encoding .
10013	Compare two input streams
10014	Compares two Reader objects
10015	Applies the given function to the pipeline .
10016	Return the SQL string for a group name .
10017	Unmarshal a string into an object of the given class .
10018	Unzips a zip file into a destination directory .
10019	Construct a PermissionDialogFragment object from the given bean .
10020	Sets the listener to pause when the dialog is pressed .
10021	Registers a core value converter .
10022	Check if a value matches a regular expression
10023	Checks if value is mobile .
10024	Checks if the value is a phone number .
10025	is birth day
10026	Checks if is a URL .
10027	Checks if the value is a date time .
10028	Perform filter processing .
10029	Encodes the given String to base64 .
10030	Decode base64 string .
10031	Decode hex string to byte array .
10032	Read properties from an input stream .
10033	Reads the content of the stream as String .
10034	Reads the content of the file into a String .
10035	Write data to a file
10036	Copy all files from source to target .
10037	Serializes a XML document to a String .
10038	Returns a Document object from the given file .
10039	Returns a Document object from the given xml string .
10040	Get a Document from an input stream .
10041	Validates an XML signature .
10042	Signs a document with a public key .
10043	Returns true if the given class is cache - safe
10044	Determines whether the given class is an array of primitive types .
10045	Returns true if the given class is an array of primitive wrappers .
10046	Resolve the given class if it is a primitive type .
10047	Determine if the left - hand side type is assignable from the right - hand side type .
10048	Determines whether the specified value is assignable to the specified type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces implemented by the given instance .
10051	Writes the configuration to the temp file .
10052	Extract variables from a URI .
10053	Put permission .
10054	Creates a DruidPlugin
10055	Bind the extension point to the specified extension point .
10056	Returns the builtin object for the given type .
10057	Returns the primitive type .
10058	Convert an object to a type .
10059	Converts the given object to a user defined value type .
10060	Returns a query parameter .
10061	Retrieves a cookie parameter .
10062	Creates a session attribute .
10063	Init data source .
10064	Sets the shared variable .
10065	Set the parameter to the given value .
10066	Sets a parameter to the given value
10067	Show the permission dialog .
10068	Checks whether all values are granted .
10069	Determines if any of the specified values are denied .
10070	Find by SQL SELECT
10071	Finds the first record that matches the query
10072	Returns true if the model is new .
10073	Returns whether the given method declares a specific exception type .
10074	Removes garbage collected data from the queue .
10075	Puts a value into the cache .
10076	Matches a string with a given pattern
10077	Read arguments from the command line .
10078	Retrieve protobuf entity .
10079	Returns true if the given class is a protobuf type .
10080	Retrieves all protobuf attributes of a class .
10081	Returns the field getter method for the given field .
10082	Returns the pojo setter name for the field .
10083	Returns the object mapper .
10084	Gets the JsonFactory .
10085	Convert object to json string
10086	Set the borders .
10087	Retrieve a user record from the database .
10088	Copies out all the attributes of the specified object to the target object .
10089	Copies all the attributes from the target object into the target object .
10090	Get a property .
10091	Set a property .
10092	Adds the app to the window .
10093	Saves an access token .
10094	Returns the access token .
10095	Returns the default ClassLoader .
10096	Returns the URL of a resource .
10097	Returns a stream to the given resource using the given class loader .
10098	Gets the resource as stream .
10099	Initialize the parameters from the given uri .
10100	Initialize the scheme from a URI string .
10101	Initialize the path from a string .
10102	Set the scheme of the request .
10103	Sets the userinfo .
10104	Sets the host of the request .
10105	Sets the port .
10106	Append the path .
10107	Sets the query string .
10108	Set the fragment .
10109	Returns the URI part of the request .
10110	Creates a PreparedStatement using the given iterator .
10111	Initialize the object .
10112	Get the muffin from the file
10113	Set the value of a Muffin parameter .
10114	Get the contents of the clipboard
10115	Set the clipboard contents
10116	Open a file stream to a file
10117	Load services by type .
10118	Sets the parameters in the given operation .
10119	Get the service parameters from an operation .
10120	Find parametrized service by id .
10121	Find by service class
10122	Parses the query and returns the result .
10123	Returns an iterator over the elements in this queue .
10124	get encoding from xml string
10125	Return the parent logger .
10126	Creates a new connection instance .
10127	Get authorization code
10128	Visit a PackageDeclaration .
10129	Visit a class declaration .
10130	Visit a ExecutableDeclaration .
10131	Get an option by its key
10132	Returns a filter that matches the given modifiers .
10133	Returns a filter that matches the given declaration .
10134	Returns a combined filter that accepts two DeclarationFilter .
10135	Returns a new DeclarationFilter that accepts the two DeclarationFilter .
10136	Returns the map value .
10137	Marks the given constructor as accessible .
10138	Prepare an object query from an MBean
10139	Replace slashes with a single slash .
10140	Converts a byte array to a hex string .
10141	Returns the index of the named parameter .
10142	Parse a SQL statement .
10143	Convert collection to protobuf .
10144	Set field value .
10145	Sets the field value .
10146	Is this file?
10147	Creates a ResultSet using the given ResultSet .
10148	Returns a map of the expected labels .
10149	Extract the values from the Values map
10150	Returns the generic supertype of the given type .
10151	Poll for messages .
10152	Poll all the polled objects .
10153	Returns the field with the specified name recursively .
10154	Returns the declared methods of the given class .
10155	Retrieves a method from the given class recursively .
10156	Get all declared methods annotated with given annotation .
10157	Returns all constructors that are annotated with the specified annotation .
10158	Dumps a byte to standard output .
10159	Returns the index of the first occurrence of the specified substring within the specified string .
10160	Removes chars from string .
10161	Clean up the state of this object .
10162	Initialize audit class .
10163	Initialize the message queue .
10164	Initializes the password validator instance .
10165	Initialize the password authenticator class .
10166	Resolves a locale code .
10167	Returns the LocaleInfo for the given code .
10168	Converts a Statement into a Proxy
10169	Clear the list .
10170	Adds an element to the list .
10171	Removes the first element from the stack .
10172	Make the input stream .
10173	Parses command - line arguments .
10174	Checks if tokens match the given patterns .
10175	Move the coordinates by xof .
10176	Returns true if this rectangle contains another rectangle .
10177	Check if the given point contains the given x and y
10178	Returns the intersection of this rectangle with the specified rectangle .
10179	Returns the union of this rectangle with the specified rectangle .
10180	Replaces the x components of this rectangle with the x - axis .
10181	Replaces the y - axis with the given rectangle .
10182	Returns the number of rows of a column
10183	Returns the number of rows of a specific row .
10184	Get the bounds of a cell relative to another location .
10185	Calculate the columns .
10186	Calculates the number of rows in the area .
10187	Unwraps a Throwable .
10188	Main entry point .
10189	Called when the code has changed .
10190	Copies the internal code buffer to the byte buffer .
10191	Renders the instructions for each WAM instruction .
10192	Initializes the application context .
10193	Returns a copy of this QueryParameter with only the excluded elements .
10194	Adds a child to the tree .
10195	Clears all children and sets them to null .
10196	Returns the next solution .
10197	Add instructions .
10198	Adds the WAM instructions to the parent of the WAM .
10199	from interface WorkPanel
10200	Register a work panel .
10201	Update the component flags .
10202	Creates a new instance of BigDecimalType .
10203	Evaluates the given term .
10204	Optimize instructions .
10205	Compares two collections .
10206	Service the service .
10207	Renders the start tag .
10208	Renders a button .
10209	Resets the state to train .
10210	Initialize the training data set .
10211	Get a value from the map .
10212	Returns the index of the given key in the map .
10213	Sets the value at the given index .
10214	Remove an object from the map .
10215	Removes the value at the given index .
10216	Returns true if the property exists for the given property .
10217	Sets the property value for the given property on the given callee .
10218	Fetches the value of the specified property from the given callee .
10219	Checks if the given primitive type is assignable from the given primitive type .
10220	Initialize the setters for the given callee .
10221	Returns the decision tree for the given state .
10222	Initializes the matching decision trees for this node .
10223	Unify all free variables in the given query .
10224	Unify two terms .
10225	Unify a variable .
10226	Compile a single query .
10227	Returns the maximum arguments in a given clause .
10228	Allocate local variable registers .
10229	Gather position and occurrence information .
10230	Display the given predicate .
10231	Displays a compiled query .
10232	Puts a 32 - bit integer into the given buffer at the given length .
10233	Returns the specified length as a String .
10234	Returns the string value for this attribute .
10235	Sets the string value of the attribute .
10236	Read term .
10237	Determines whether or not the given class exists .
10238	Determines whether the specified class is a subtype of the specified class .
10239	Determines whether the specified class is a subtype of the specified class .
10240	Returns whether the given class is a sub - type of the given parent class .
10241	Returns the class object for the given name .
10242	Create a new instance of the given class .
10243	Create a new instance of the given constructor using the given arguments .
10244	Calls the given method on the given object with the given parameters on the given object .
10245	Calls the specified method on the object .
10246	Call a static method .
10247	Returns Constructor .
10248	Returns a set of setters for the specified object .
10249	Returns a new Queue
10250	Gets a new Queue using the given Queue and collection
10251	Gets the type from an object .
10252	Reset the iterator .
10253	Search the goal .
10254	Creates an int range type .
10255	Add a supported tz name to the endpoint .
10256	Add a alternate dimension to the table .
10257	Adds a dimension to the table .
10258	Finds free variables in a query .
10259	Finds free variables in a query .
10260	Compares two search nodes .
10261	Writes the given object to the given output file .
10262	Reads the contents of a stream as a String .
10263	Creates a new search node .
10264	Generate the stack indentation of a line .
10265	Allocate argument registers for the functor .
10266	Returns true if the last body in the argument is the last argument .
10267	Computes the most likely classification for a given property .
10268	Checks to see if all the examples in the given list of examples have the same name .
10269	Determines the best property which can be used to decide the best decision .
10270	Creates a functor with the given name and arguments .
10271	Returns a variable with the given name .
10272	Executes the action with an error handling .
10273	Returns the list at the specified index .
10274	Set the texture .
10275	This method is used to paint a double buffered image .
10276	Create a buffered image
10277	Creates a Graphics2D object .
10278	Creates a buffered image for the specified pixel color model
10279	Creates a buffered image .
10280	Sets the queue search algorithm .
10281	Performs a depth - first search .
10282	Performs a starting search .
10283	Main method for testing .
10284	Returns the clause for this term .
10285	Reads a list of terms from the token stream .
10286	Reads a Functor .
10287	Reads a list of functors .
10288	Returns the argument list as an array of arguments
10289	Reads a variable .
10290	Parses an integer literal .
10291	Parses a floating point literal .
10292	Reads a string literal .
10293	Consumes a directive from the source code .
10294	Interns an operator with the specified name and associativity
10295	Initializes the set of supported operators for this prolog .
10296	Consumes the next token .
10297	Tries to consume the next token from the token source .
10298	Bind this session to the current thread .
10299	Rolls back all transactions .
10300	Collect the elements from the iterator into the target collection .
10301	Reserves a call point .
10302	Convert time to milliseconds
10303	Convert ticks to numbers .
10304	Convert ticks to hours
10305	Convert ticks to minutes
10306	Convert ticks to seconds
10307	Converts the specified number of ticks to the specified year
10308	Convert ticks to the start of the specified month
10309	Convert ticks to ticks with specified date
10310	Returns the number of milliseconds from the given year .
10311	Returns the month of the year .
10312	Read bytes from the source .
10313	Applies the given entry to the entry and returns the sequence number .
10314	Returns the entry for the given key .
10315	Inserts an entry into the hash table .
10316	Rehashes the table .
10317	Process the action .
10318	Sets the next available state .
10319	Sets whether this property is prevAvailable or not .
10320	Sets the finished state of this property .
10321	Returns an instance of the WAM resolving library .
10322	Returns an iterator over the set in this sequence .
10323	Calculates the i - th value of the expected value for the given probabilities .
10324	Computes the probability for the given counts .
10325	Sets the ticks .
10326	Performs the actual action forward .
10327	Constructs a URL from a string .
10328	Returns information about the current request .
10329	Retrieves the headers from the current request context .
10330	Retrieves the cookies for this request .
10331	Retrieves the request parameters .
10332	Retrieves the request scope attribute .
10333	Retrieves information about a page scope .
10334	Retrieves the current session scope attribute .
10335	Retrieves the application scope attribute .
10336	Retrieves the user principal .
10337	write the debug table
10338	To HTML table
10339	Performs a search starting from the given start state .
10340	Set the current screen state .
10341	Walk the given term .
10342	Compares two search nodes .
10343	Updates the registered registers .
10344	Notifies all registered listeners of a change .
10345	Leave the given clause .
10346	Determines whether a context is in a top - level fashion .
10347	Copies the specified array into an array .
10348	Sets the arguments for this operator .
10349	Returns the fixity for this configuration .
10350	Returns true if this is infix .
10351	Compares two Op symbols .
10352	Called when a property change occurs .
10353	Register a work flow controller .
10354	Creates an enum factory for the specified class .
10355	Creates a component factory .
10356	Returns the storage cell for the given variable .
10357	Returns true if the variable is bound .
10358	Sets a column attribute .
10359	Sets a row attribute .
10360	Returns the attribute set for the given column
10361	Returns the row attribute at the given row .
10362	Internal insert method .
10363	Creates a new type instance .
10364	Creates a new string type .
10365	Check if the value is an instance of the given value .
10366	Creates the initial context for the given term .
10367	Updates all registered registers .
10368	Returns the name of this expression group
10369	Find the next goal node from the queue .
10370	Joins the current search node with the given forward path and the reverse path .
10371	Cache a block .
10372	Returns a Properties object for the specified resource name
10373	Sets the rate to use for herontime .
10374	Read bytes from the source block .
10375	Skip n bytes .
10376	Gather the disjunctive expressions .
10377	Read an int from the byte array at the given offset .
10378	Writes an int to the given byte array at the given offset .
10379	Write a 24 - bit integer to the byte array at the given offset in the byte array .
10380	Reads a 24 bit integer from the byte array at the given offset .
10381	Parses a short from the given byte array at the given offset .
10382	Write a short to the byte array at the given offset .
10383	Returns a new TreeSearchState instance for the given operator
10384	Returns an iterator over all operators in the tree .
10385	Returns the id of this attribute .
10386	Returns the value of this attribute .
10387	Sets the value of this Id .
10388	Converts a list of strings to an array of strings .
10389	Converts an array of strings to a list of strings .
10390	Convert name to camel case
10391	Convert a string representation of a case .
10392	Return the current configuration
10393	Helper method to list the handlers
10394	Resolves the call point with the given name .
10395	Sets the code point for a code point .
10396	Returns whether this attribute is a sub category of this one .
10397	Returns the id of this attribute .
10398	Returns the value at the specified level .
10399	Get last value .
10400	Serialize an attribute .
10401	Read an object from the input stream .
10402	Compute the heuristic heuristic distance .
10403	Binary modulo .
10404	add error message
10405	Handles exceptions from the given exception .
10406	Writes the given string to the output .
10407	Classify the given state .
10408	Compares two comparable objects
10409	Returns an iterator over the elements in this ArrayList .
10410	Returns the log base 2 of the input value
10411	Binary version of log base64 .
10412	Return the integer log base10 version of the given value
10413	Convert an integer value to an int
10414	Returns integer value of given long value
10415	cast a value to int
10416	Returns the number of characters in the given integer .
10417	Returns the number of characters in the long .
10418	Computes the character count for the given integer value and scale .
10419	Set the head of the fragment .
10420	Emits the code to be emitted by the VM .
10421	Sets the current work flow state .
10422	Evaluates one of the predicates .
10423	Returns the value of the named property .
10424	Returns the property values for the specified key and method name .
10425	Returns an iterator that iterates over the keys in the given base .
10426	Create array properties .
10427	Sets the throttle rate .
10428	Evaluates the first type of the first number .
10429	Load the properties .
10430	Loads the properties from the system property file .
10431	Gets the properties using the classpath .
10432	Gets the properties using the CWD .
10433	leave the functor
10434	Returns the value of this term .
10435	Sets the substitution .
10436	Creates a queue of search nodes .
10437	Clean up the connector .
10438	Appends an event to the socket .
10439	Fire a new connector .
10440	Initialize the printers .
10441	Commits the transaction .
10442	Rolls changes to the transaction .
10443	Request an operation to be applied to the transaction .
10444	Adds a cached write operation to the cache .
10445	Attempts to acquire the global write lock .
10446	Releases the global write lock .
10447	Enlist this resource with the given session .
10448	Enter a rule set into the selector tree .
10449	Inserts the specified element at the tail of this queue waiting if necessary to become available .
10450	Retrieves and removes the element from the queue waiting for the specified timeout if necessary .
10451	Adds the given element to the queue waiting if necessary .
10452	Inserts an element into the buffer .
10453	Returns the next object from the source .
10454	Get the value of the property as a boolean .
10455	Get the property as Integer .
10456	Get the property as long .
10457	Calls a mixin .
10458	Add the addition expression visitor to the rule set .
10459	Backtracking of a node in reverse order .
10460	Retrieve the data for the given WAMCallPoint .
10461	Execute the given query and extract bindings .
10462	Decodes an argument from the heap .
10463	Capture all the fields of the object .
10464	Restore all values from an object .
10465	Returns the cached value for the specified field .
10466	Put an attribute into the cache .
10467	Returns all the field names for a given class .
10468	Execute the test runner .
10469	Offers an element to the queue .
10470	Retrieves and removes data from the queue .
10471	Creates a search node .
10472	Create a queue of search nodes .
10473	Creates a simple walker .
10474	Creates a newWalker for a unary predicate .
10475	Creates a new TermWalker that walks the given visitor .
10476	Creates a new walker for positional parameters .
10477	Creates a termWalker that scans the given position visitor .
10478	Loads properties from an input stream .
10479	Loads properties from a file .
10480	Loads a Properties object from the given URL .
10481	Retrieves a Properties object from the given path .
10482	Compute the size of the grid .
10483	Initialize the font metrics
10484	Add a PropertyChangeListener
10485	Adds a property change listener .
10486	Removes a property change listener .
10487	Fire a PropertyChangeEvent to all listeners .
10488	Creates a new type instance .
10489	Performs a fade on the specified group .
10490	Shows horizontal bar in screen .
10491	Shows left vertical bar .
10492	Shows right vertical bar .
10493	Sanitize radio controls .
10494	Waits for the specified amount of time to become available .
10495	Waits for the given amount of time to become available .
10496	Execute the test runner .
10497	Appends the classpath to the command line .
10498	Creates a new type instance .
10499	Prints the introduction .
10500	Initialize command line reader .
10501	Evaluates the query .
10502	Evaluates the query .
10503	Converts a boolean value to a set of types
10504	Converts a byte value to a MultiTypeData object .
10505	Converts a char to a multi - type data object .
10506	Converts a short string to a multi - type data object .
10507	Converts an int value to a set of types
10508	Converts a long value to a set of types
10509	Converts a float value to a MultiTypeData object .
10510	Converts a double value to a multi - type data object .
10511	Converts a string to a MultiTypeData object .
10512	Converts a String value to a MultiTypeData object
10513	Convert data to requested type
10514	Put an attribute in the page context .
10515	Clears up the map up to the specified key .
10516	Expands the key to a new key .
10517	Internal insert method .
10518	Compares two search nodes .
10519	Parses the given terms .
10520	Returns the operators with the given prefix .
10521	Checks the given candidate and fixesities for the given candidate operation .
10522	Make a new search node .
10523	Returns right - pad string with given size .
10524	Returns the string representation of the parsing errors .
10525	List the options in force .
10526	Returns a string representation of the command line options .
10527	Adds any trailing properties to the given Properties object .
10528	Adds the given options to the given Properties object .
10529	Adds an option to the map .
10530	Takes a list of free arguments and converts them to a Properties object .
10531	Checks that the argument is valid .
10532	Compares the iterator with the given iterator and returns the result .
10533	List options .
10534	Returns the command line options .
10535	Set the stemmer .
10536	Returns the actual stemmer .
10537	Returns the stem of a given word
10538	Main method of the program .
10539	Creates a new float range type .
10540	Resets the internal state of the data area .
10541	Trace environment frame .
10542	Trace the choice frame
10543	Internal function .
10544	Compute the next stack frame
10545	do backtracking
10546	Trail trail .
10547	Uninds a range of points .
10548	Tidy up to the next choice point .
10549	unify two instructions
10550	unify constant .
10551	Prints a single slot .
10552	Generates a new seed state .
10553	Determines whether the current state of the puzzle is solvable .
10554	Gets the child state for the given operator .
10555	Returns an iterator over all the operators in the current direction .
10556	Pretty - print the board
10557	Swaps the specified tile with the specified tile .
10558	Swaps two tiles
10559	Converts a string to a char list .
10560	Creates a new state from the given character list .
10561	Converts a log record into a log message .
10562	Convert a level to a log4j .
10563	Queues a new element to be queued .
10564	Queues up the element to be queued .
10565	Updates the size of the record and count .
10566	Decreases the size of a record .
10567	Called when a new size threshold is crossed .
10568	List all contexts with the given name .
10569	Lists all bindings under the given name .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Run the GC .
10573	major and width
10574	Resolves a mixin into a mixin .
10575	Push a variable reference onto the stack .
10576	Sets the max height for a row .
10577	Update the maximum size of a column
10578	Executes the given action on the page .
10579	Make the heuristic node for the given successor .
10580	Performs the actual action forward .
10581	Substitute the built ins for the given clause .
10582	Initialise the symbol table .
10583	Traverse top level check .
10584	Returns a string representation of the list of arguments
10585	Evaluates if two numbers are equal .
10586	Mark the current state as running .
10587	Signals that the cluster is terminating .
10588	Signal that the cluster is terminated .
10589	Inserts a new data element into the heap .
10590	Rounds a number to the nearest 2 log 2 .
10591	Update the minimum node .
10592	Compares two nodes .
10593	Inserts a new node into the list .
10594	Restarts the cache sweep thread .
10595	Gets all elements from the search method .
10596	Gets all elements from a collection using a method .
10597	Find all solution .
10598	Returns the next element in the sequence .
10599	Restore the values from the object .
10600	Returns the value of the property .
10601	Put a multi typed data .
10602	Stores the value in the specified property .
10603	Capture the memento property .
10604	Removes and returns the head of the queue .
10605	Convert modifiers to string .
10606	Converts a string to an integer .
10607	Parses a string to a date .
10608	Determines whether a string represents a date .
10609	Determines whether a string represents a time .
10610	Determines whether a string represents a date time .
10611	Creates a token source for the given string .
10612	Creates a token source for the given file .
10613	Creates a token source for the given input stream .
10614	Determine whether the given instruction is a constant name .
10615	Returns true if the instruction is a void variable .
10616	Returns true if the given instruction is a non - argument .
10617	Returns the children of this statement .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children .
10620	Returns a string representation of the arguments
10621	Retrieve the summary .
10622	Retrieve records .
10623	Execute a query .
10624	Emits code to the WAM machine .
10625	Sets the basic types for a given class
10626	Caches the rules from the input stream .
10627	Prints a variable binding .
10628	Expand a set of solutions to a map of variables .
10629	Runs the stream .
10630	Reads data from the stream .
10631	Returns the current time .
10632	Returns the current time in nanoseconds
10633	Update the track info .
10634	Updates the status of the player .
10635	Handles the event output .
10636	create start music request
10637	Handles an event request .
10638	Fire start music event .
10639	Initialize the server .
10640	Start the reader thread .
10641	Shutdown the connection .
10642	Reset parser .
10643	Parses packet packets .
10644	Process a packet .
10645	Sets the option .
10646	Create a new chat with the given userJID and listener .
10647	Internal initialize method .
10648	Resets this object to a new state .
10649	Sets the property for the given key .
10650	Adds a filter to the filter list .
10651	Process the request .
10652	Reset the stored properties .
10653	Initialize the writer .
10654	Send a packet to the server .
10655	Gets the next packet from the queue .
10656	Open stream .
10657	Returns a list of all information in the descriptor .
10658	Returns true if the descriptor contains the given descriptor .
10659	Add an event life cycle listener .
10660	Shuts down the executor .
10661	Returns true if the two files are equal .
10662	Removes the direct byte buffer from the byte buffer .
10663	Returns true if entry is valid
10664	Returns null if the key is null .
10665	Returns true if two objects are equal .
10666	Returns the entry for the specified key .
10667	Resizes the table to a new capacity .
10668	Adds all mappings to the given map .
10669	Removes the entry from the cache .
10670	Remove the entry for the given key
10671	Removes a mapping from the map .
10672	Adds an entry to the table .
10673	Create delegating to base map
10674	Encode binary attribute .
10675	Encodes the given byte array into a hex string .
10676	Encodes the given string using ISO - 8859 - 1 .
10677	Encodes a byte array .
10678	Iterate over the collection .
10679	Sets the controller to select the specified controller .
10680	Sets the controller to use for the jump progress .
10681	Set the playback controller to be notified when playback changes .
10682	Set a controller to change volume .
10683	Broadcasts a list of available Spotify Playlists .
10684	Handles command resources .
10685	Handles a volume .
10686	Handles a jump .
10687	Handles a select track .
10688	Get thread cache by name .
10689	Get request cache by name .
10690	Returns the alt field for the given field name and streamId .
10691	Returns a new map based on the include and exclude properties
10692	Returns the shard path for the given id .
10693	Adapts the source object to a Session object .
10694	Invokes a method on a target object .
10695	Deletes the contents of a given path .
10696	Update a Persisted Entity .
10697	Sets the ping interval .
10698	Schedules the ping task .
10699	Add multiple application options
10700	Checks if the given option is in use .
10701	Parse command line arguments .
10702	Prints usage information for the given application .
10703	Parse the command line arguments .
10704	Initialize the XMPP connection .
10705	Start TLS .
10706	Returns the compression handler for the given compression method .
10707	Request stream compression .
10708	Start stream compression .
10709	Notifies all connection listeners that an error occurs .
10710	Notifies all connection listeners about a connection .
10711	Register a SASLMechanism .
10712	Returns the list of supported SASLMechanism
10713	Gets the output plugins .
10714	Logs an info message and exception .
10715	Logs an error with a message and exception .
10716	Logs a message and stack trace .
10717	Create a start event
10718	Create start event
10719	Notify listeners of a string .
10720	Return true if the given resource is providing the given resource ID .
10721	Returns true if the given source ID contains any resources from the source .
10722	Check if there are resources in the given list of resources
10723	Provides resources with the given IDs .
10724	Get the value from cache .
10725	Returns the cache key .
10726	Removes a key from the cache .
10727	Put item in cache .
10728	Returns a map of CF locations to their locations .
10729	Includes the given file .
10730	Includes a jar file .
10731	Adds a SASL mech .
10732	Adds the given SASL mechs to the system .
10733	Creates debug information and writes them to the GUI .
10734	Activate the safe post process .
10735	Register standard events
10736	Registers an event listener with its description .
10737	Register an event ID .
10738	Perform a synchronous write operation
10739	Unregisters an event ID .
10740	Determines whether the event can run on the event .
10741	Creates a new DSE session .
10742	Create a player error for the given source .
10743	Start playing music .
10744	Stop playing music
10745	Send a player command to a player .
10746	Create a playlist .
10747	Create a playlist answer from a provider .
10748	Appends parts to the URL .
10749	Add a query parameter to the URL .
10750	Add a query parameter to the URL .
10751	Adds a query parameter to the URL .
10752	Adds a query parameter to the URL .
10753	Gets a playlist .
10754	Called when the launcher is launched .
10755	Waits for startup .
10756	check if url exists
10757	Called when the browser button is pressed .
10758	Creates an image icon for the given path and description .
10759	Start the application .
10760	Returns a copy of this IntArray with the specified values .
10761	Exports the data .
10762	Gets the value at the given index .
10763	Access the value for a key .
10764	Get an integer value .
10765	Get a double value .
10766	Returns the value as a string .
10767	Create a command resource .
10768	Verifies that the given command is valid .
10769	Verifies that the given command has capabilities .
10770	Verifies a command .
10771	Executes the given batch of statements .
10772	Returns all subclasses of given class
10773	Returns all subclasses of the given class .
10774	Search all classes in the given location .
10775	Searches the given directory for classes in the given directory .
10776	Searches all jar files in the given location .
10777	Returns the resource list as a list
10778	Return the total number of inner maps
10779	Processes a packet .
10780	Gets volume .
10781	Issue an error response
10782	Creates an error response .
10783	Checks if an event is target .
10784	Sets the enabled login interval .
10785	Creates a SynchronizedSet .
10786	Sets the name of this group .
10787	Update state .
10788	Returns a collection of the roster groups that this entry belongs to .
10789	Appends RSM element to the query element .
10790	Parse RSM element .
10791	Filters the RSM response .
10792	Create a leaving event
10793	Reload roster .
10794	Creates a roster entry .
10795	Returns a collection of all entries in the roster .
10796	Gets the presence information for a user .
10797	Sets the unavailable presence packets .
10798	Fire roster changed event .
10799	Set digest .
10800	This method is used to generate a resource .
10801	Creates a player request for a player .
10802	Gets time pass performed by the given event model .
10803	Register a listener for changes .
10804	Initializes the Properties File
10805	Reload properties .
10806	Parse stream error element .
10807	Parse the mechanism list of mechanisms .
10808	Parse the list of compression methods .
10809	Parses a PacketExtension object .
10810	Decodes a string to an object type
10811	Verifies whether the given event can be played or not .
10812	Extracts the playback state from a resource .
10813	Returns the secret key for the specified subdomain .
10814	Returns true if the subdomain is allowed
10815	Puts the specified key into the cache .
10816	Returns the key set .
10817	Returns a collection of values .
10818	Removes the mapping from the map .
10819	Returns the entry for the specified key .
10820	Compute the hashCode for the given key and value pair .
10821	Creates a new reference entry .
10822	Control events .
10823	Sets if present .
10824	Updates the list of people .
10825	Delivers a message to all registered listeners .
10826	Generate a script .
10827	Initializes the output directory .
10828	Load properties from a file .
10829	Writes the stanza to the file .
10830	Gets progress .
10831	Creates a SynchronizedCollection that wraps the supplied Collection .
10832	Creates a collection of service resolvers .
10833	Returns the config .
10834	Gets the thread pool .
10835	Create stop music from source and target
10836	Checks if the event model contains a target player .
10837	Retrieves a cluster from the DSE .
10838	Add a connection listener
10839	Adds a packet listener .
10840	Adds a packet listener to the packet .
10841	Notifies all registered listeners of a packet .
10842	Adds a new packet interceptor to the interceptor .
10843	Fire the interceptors for the packet .
10844	Convert an object to an object .
10845	Handle a connection lost .
10846	Returns the id of the current thread
10847	Returns true if the node is valid
10848	Gets the key associated with the specified value .
10849	Do a get .
10850	Looks up a node in the data and returns it .
10851	Look up a node in the data tree .
10852	Compares two objects according to their status .
10853	Returns the least node at the given index
10854	Returns the node at the given index
10855	Returns the next greater or greater than the given node .
10856	Returns the most valid node for the given node and index .
10857	Returns the least valid node for the given node and index .
10858	Copies a value from one to another .
10859	Determines if the specified index is red .
10860	Determines if the specified index is blacklisted .
10861	Returns the grand parent of the given node .
10862	Returns the node at the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node at the given index .
10865	Rotate a node at a given index
10866	Rotate the right .
10867	Performs a red insert .
10868	Performs a red black - delete operation .
10869	Checks that the object is not null .
10870	Inserts a new value into the map .
10871	Returns whether the specified key is present in the cache .
10872	Checks if the value contains the given value .
10873	Returns the value for the given key .
10874	Removes the given key from the cache .
10875	Removes all nodes from the cache
10876	Returns the set of keys by key .
10877	Returns the collection of values in this map .
10878	returns a filtered set of entries
10879	Copies all entries from the given map to the new map
10880	Removes expired entries from the cache .
10881	Cleans the cache .
10882	Initialize the service .
10883	Gets a player request for a specific playlist .
10884	Initialize the roster store with the given base directory .
10885	Creates a new roster store from the given base directory .
10886	Scans a range of IP addresses for a given address .
10887	Returns an InetAddress for the given subnet
10888	Exports the information to a HashMap
10889	Import information from a hash map .
10890	Adds all application applications in the given set .
10891	execute an application
10892	Prints out the list .
10893	Prints usage .
10894	Main program .
10895	Create MuteEvent
10896	Create a MuteEvent
10897	Lookup a given schema .
10898	Write to a file
10899	Returns true if the application is in the manifest .
10900	Add an application option
10901	Gets the data in the thrift schema .
10902	Return a field by name
10903	Returns the package name of the given entry .
10904	Map content to values .
10905	create an event listener
10906	Set the state of this iterator
10907	Iterate the collection .
10908	Perform an iteration on each object .
10909	Gets the track info from the given event model .
10910	Exports the data .
10911	Imports a resource .
10912	Create a buffered image with text
10913	get image from url
10914	Sends a request to the URL .
10915	Reverses the source map .
10916	Returns the multiplication of this Cartesian product .
10917	Start the daemon thread .
10918	Return object to pool .
10919	Create ended event .
10920	Get the current track information from the queue .
10921	Update an existing track .
10922	Randomly shuffle a queue .
10923	Verify that the given capabilities can be played .
10924	Exports the data .
10925	Escape a string for use in XML .
10926	Send a challenge to the server .
10927	Converts this object to JSON .
10928	Runs all queued events .
10929	Handles event .
10930	Join all queues .
10931	Sets the value of a property .
10932	Remove a property .
10933	Adds a principal .
10934	Removes a principal from the collection .
10935	Called when the root window is closing .
10936	Called when the user has received a response .
10937	Handles presence present event .
10938	Checks if the resource is permanent .
10939	Sets the group name .
10940	Returns true if the map contains the specified key .
10941	Returns true if the specified value contains the specified value .
10942	Put a value into the map .
10943	Clear the contents of this map .
10944	Returns the hash code of the given key .
10945	Returns true if the two keys are equal .
10946	Returns true if the two specified values are equal .
10947	Ensures that the capacity is greater than the specified capacity .
10948	Calculates new capacity .
10949	Creates an iterator over the entries in this map .
10950	Loads the object from the input stream and writes it to the output stream .
10951	Registers the modules in the module .
10952	Initialize the AddOn
10953	Notifies all connection listeners that the connection failed .
10954	Notifies all connection listeners that the connection has been retried .
